
MNIST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000131f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0012a01c  080133a0  080133a0  000233a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0813d3bc  0813d3bc  0014d3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0813d3c4  0813d3c4  0014d3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0813d3c8  0813d3c8  0014d3c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000c5c  20000000  0813d3cc  00150000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00150c5c  2**0
                  CONTENTS
  8 .bss          0000930c  20000c60  20000c60  00150c60  2**5
                  ALLOC
  9 ._user_heap_stack 00006004  20009f6c  20009f6c  00150c60  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00150c5c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000332cf  00000000  00000000  00150c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006692  00000000  00000000  00183f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0001b349  00000000  00000000  0018a5ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001858  00000000  00000000  001a5938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002108  00000000  00000000  001a7190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a771  00000000  00000000  001a9298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f984  00000000  00000000  001d3a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f75b0  00000000  00000000  0020338d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  002fa93d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006534  00000000  00000000  002faa0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  00300f40  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0030100c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000c60 	.word	0x20000c60
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013388 	.word	0x08013388

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000c64 	.word	0x20000c64
 80001ec:	08013388 	.word	0x08013388

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9d8 	b.w	8001070 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f870 	bl	8000dac <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_f2lz>:
 8000cd8:	ee07 0a90 	vmov	s15, r0
 8000cdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce4:	d401      	bmi.n	8000cea <__aeabi_f2lz+0x12>
 8000ce6:	f000 b823 	b.w	8000d30 <__aeabi_f2ulz>
 8000cea:	eef1 7a67 	vneg.f32	s15, s15
 8000cee:	b508      	push	{r3, lr}
 8000cf0:	ee17 0a90 	vmov	r0, s15
 8000cf4:	f000 f81c 	bl	8000d30 <__aeabi_f2ulz>
 8000cf8:	4240      	negs	r0, r0
 8000cfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cfe:	bd08      	pop	{r3, pc}

08000d00 <__aeabi_d2lz>:
 8000d00:	b538      	push	{r3, r4, r5, lr}
 8000d02:	2200      	movs	r2, #0
 8000d04:	2300      	movs	r3, #0
 8000d06:	4604      	mov	r4, r0
 8000d08:	460d      	mov	r5, r1
 8000d0a:	f7ff fef7 	bl	8000afc <__aeabi_dcmplt>
 8000d0e:	b928      	cbnz	r0, 8000d1c <__aeabi_d2lz+0x1c>
 8000d10:	4620      	mov	r0, r4
 8000d12:	4629      	mov	r1, r5
 8000d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d18:	f000 b82a 	b.w	8000d70 <__aeabi_d2ulz>
 8000d1c:	4620      	mov	r0, r4
 8000d1e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d22:	f000 f825 	bl	8000d70 <__aeabi_d2ulz>
 8000d26:	4240      	negs	r0, r0
 8000d28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2c:	bd38      	pop	{r3, r4, r5, pc}
 8000d2e:	bf00      	nop

08000d30 <__aeabi_f2ulz>:
 8000d30:	b5d0      	push	{r4, r6, r7, lr}
 8000d32:	f7ff fc19 	bl	8000568 <__aeabi_f2d>
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <__aeabi_f2ulz+0x38>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4606      	mov	r6, r0
 8000d3c:	460f      	mov	r7, r1
 8000d3e:	f7ff fc6b 	bl	8000618 <__aeabi_dmul>
 8000d42:	f7ff ff41 	bl	8000bc8 <__aeabi_d2uiz>
 8000d46:	4604      	mov	r4, r0
 8000d48:	f7ff fbec 	bl	8000524 <__aeabi_ui2d>
 8000d4c:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <__aeabi_f2ulz+0x3c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f7ff fc62 	bl	8000618 <__aeabi_dmul>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4630      	mov	r0, r6
 8000d5a:	4639      	mov	r1, r7
 8000d5c:	f7ff faa4 	bl	80002a8 <__aeabi_dsub>
 8000d60:	f7ff ff32 	bl	8000bc8 <__aeabi_d2uiz>
 8000d64:	4621      	mov	r1, r4
 8000d66:	bdd0      	pop	{r4, r6, r7, pc}
 8000d68:	3df00000 	.word	0x3df00000
 8000d6c:	41f00000 	.word	0x41f00000

08000d70 <__aeabi_d2ulz>:
 8000d70:	b5d0      	push	{r4, r6, r7, lr}
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <__aeabi_d2ulz+0x34>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	4606      	mov	r6, r0
 8000d78:	460f      	mov	r7, r1
 8000d7a:	f7ff fc4d 	bl	8000618 <__aeabi_dmul>
 8000d7e:	f7ff ff23 	bl	8000bc8 <__aeabi_d2uiz>
 8000d82:	4604      	mov	r4, r0
 8000d84:	f7ff fbce 	bl	8000524 <__aeabi_ui2d>
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <__aeabi_d2ulz+0x38>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f7ff fc44 	bl	8000618 <__aeabi_dmul>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4630      	mov	r0, r6
 8000d96:	4639      	mov	r1, r7
 8000d98:	f7ff fa86 	bl	80002a8 <__aeabi_dsub>
 8000d9c:	f7ff ff14 	bl	8000bc8 <__aeabi_d2uiz>
 8000da0:	4621      	mov	r1, r4
 8000da2:	bdd0      	pop	{r4, r6, r7, pc}
 8000da4:	3df00000 	.word	0x3df00000
 8000da8:	41f00000 	.word	0x41f00000

08000dac <__udivmoddi4>:
 8000dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db0:	9d08      	ldr	r5, [sp, #32]
 8000db2:	4604      	mov	r4, r0
 8000db4:	468c      	mov	ip, r1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f040 8083 	bne.w	8000ec2 <__udivmoddi4+0x116>
 8000dbc:	428a      	cmp	r2, r1
 8000dbe:	4617      	mov	r7, r2
 8000dc0:	d947      	bls.n	8000e52 <__udivmoddi4+0xa6>
 8000dc2:	fab2 f282 	clz	r2, r2
 8000dc6:	b142      	cbz	r2, 8000dda <__udivmoddi4+0x2e>
 8000dc8:	f1c2 0020 	rsb	r0, r2, #32
 8000dcc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dd0:	4091      	lsls	r1, r2
 8000dd2:	4097      	lsls	r7, r2
 8000dd4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dd8:	4094      	lsls	r4, r2
 8000dda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dde:	0c23      	lsrs	r3, r4, #16
 8000de0:	fbbc f6f8 	udiv	r6, ip, r8
 8000de4:	fa1f fe87 	uxth.w	lr, r7
 8000de8:	fb08 c116 	mls	r1, r8, r6, ip
 8000dec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df0:	fb06 f10e 	mul.w	r1, r6, lr
 8000df4:	4299      	cmp	r1, r3
 8000df6:	d909      	bls.n	8000e0c <__udivmoddi4+0x60>
 8000df8:	18fb      	adds	r3, r7, r3
 8000dfa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dfe:	f080 8119 	bcs.w	8001034 <__udivmoddi4+0x288>
 8000e02:	4299      	cmp	r1, r3
 8000e04:	f240 8116 	bls.w	8001034 <__udivmoddi4+0x288>
 8000e08:	3e02      	subs	r6, #2
 8000e0a:	443b      	add	r3, r7
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e14:	fb08 3310 	mls	r3, r8, r0, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x8c>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e2a:	f080 8105 	bcs.w	8001038 <__udivmoddi4+0x28c>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8102 	bls.w	8001038 <__udivmoddi4+0x28c>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e3c:	eba4 040e 	sub.w	r4, r4, lr
 8000e40:	2600      	movs	r6, #0
 8000e42:	b11d      	cbz	r5, 8000e4c <__udivmoddi4+0xa0>
 8000e44:	40d4      	lsrs	r4, r2
 8000e46:	2300      	movs	r3, #0
 8000e48:	e9c5 4300 	strd	r4, r3, [r5]
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	b902      	cbnz	r2, 8000e56 <__udivmoddi4+0xaa>
 8000e54:	deff      	udf	#255	; 0xff
 8000e56:	fab2 f282 	clz	r2, r2
 8000e5a:	2a00      	cmp	r2, #0
 8000e5c:	d150      	bne.n	8000f00 <__udivmoddi4+0x154>
 8000e5e:	1bcb      	subs	r3, r1, r7
 8000e60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e64:	fa1f f887 	uxth.w	r8, r7
 8000e68:	2601      	movs	r6, #1
 8000e6a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e6e:	0c21      	lsrs	r1, r4, #16
 8000e70:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb08 f30c 	mul.w	r3, r8, ip
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d907      	bls.n	8000e90 <__udivmoddi4+0xe4>
 8000e80:	1879      	adds	r1, r7, r1
 8000e82:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0xe2>
 8000e88:	428b      	cmp	r3, r1
 8000e8a:	f200 80e9 	bhi.w	8001060 <__udivmoddi4+0x2b4>
 8000e8e:	4684      	mov	ip, r0
 8000e90:	1ac9      	subs	r1, r1, r3
 8000e92:	b2a3      	uxth	r3, r4
 8000e94:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e98:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ea0:	fb08 f800 	mul.w	r8, r8, r0
 8000ea4:	45a0      	cmp	r8, r4
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x10c>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x10a>
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	f200 80d9 	bhi.w	8001068 <__udivmoddi4+0x2bc>
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	eba4 0408 	sub.w	r4, r4, r8
 8000ebc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ec0:	e7bf      	b.n	8000e42 <__udivmoddi4+0x96>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d909      	bls.n	8000eda <__udivmoddi4+0x12e>
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	f000 80b1 	beq.w	800102e <__udivmoddi4+0x282>
 8000ecc:	2600      	movs	r6, #0
 8000ece:	e9c5 0100 	strd	r0, r1, [r5]
 8000ed2:	4630      	mov	r0, r6
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	fab3 f683 	clz	r6, r3
 8000ede:	2e00      	cmp	r6, #0
 8000ee0:	d14a      	bne.n	8000f78 <__udivmoddi4+0x1cc>
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d302      	bcc.n	8000eec <__udivmoddi4+0x140>
 8000ee6:	4282      	cmp	r2, r0
 8000ee8:	f200 80b8 	bhi.w	800105c <__udivmoddi4+0x2b0>
 8000eec:	1a84      	subs	r4, r0, r2
 8000eee:	eb61 0103 	sbc.w	r1, r1, r3
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	468c      	mov	ip, r1
 8000ef6:	2d00      	cmp	r5, #0
 8000ef8:	d0a8      	beq.n	8000e4c <__udivmoddi4+0xa0>
 8000efa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000efe:	e7a5      	b.n	8000e4c <__udivmoddi4+0xa0>
 8000f00:	f1c2 0320 	rsb	r3, r2, #32
 8000f04:	fa20 f603 	lsr.w	r6, r0, r3
 8000f08:	4097      	lsls	r7, r2
 8000f0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000f0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f12:	40d9      	lsrs	r1, r3
 8000f14:	4330      	orrs	r0, r6
 8000f16:	0c03      	lsrs	r3, r0, #16
 8000f18:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f1c:	fa1f f887 	uxth.w	r8, r7
 8000f20:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f28:	fb06 f108 	mul.w	r1, r6, r8
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f32:	d909      	bls.n	8000f48 <__udivmoddi4+0x19c>
 8000f34:	18fb      	adds	r3, r7, r3
 8000f36:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000f3a:	f080 808d 	bcs.w	8001058 <__udivmoddi4+0x2ac>
 8000f3e:	4299      	cmp	r1, r3
 8000f40:	f240 808a 	bls.w	8001058 <__udivmoddi4+0x2ac>
 8000f44:	3e02      	subs	r6, #2
 8000f46:	443b      	add	r3, r7
 8000f48:	1a5b      	subs	r3, r3, r1
 8000f4a:	b281      	uxth	r1, r0
 8000f4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f58:	fb00 f308 	mul.w	r3, r0, r8
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	d907      	bls.n	8000f70 <__udivmoddi4+0x1c4>
 8000f60:	1879      	adds	r1, r7, r1
 8000f62:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f66:	d273      	bcs.n	8001050 <__udivmoddi4+0x2a4>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d971      	bls.n	8001050 <__udivmoddi4+0x2a4>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4439      	add	r1, r7
 8000f70:	1acb      	subs	r3, r1, r3
 8000f72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f76:	e778      	b.n	8000e6a <__udivmoddi4+0xbe>
 8000f78:	f1c6 0c20 	rsb	ip, r6, #32
 8000f7c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f80:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f84:	431c      	orrs	r4, r3
 8000f86:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f92:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f96:	431f      	orrs	r7, r3
 8000f98:	0c3b      	lsrs	r3, r7, #16
 8000f9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9e:	fa1f f884 	uxth.w	r8, r4
 8000fa2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fa6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000faa:	fb09 fa08 	mul.w	sl, r9, r8
 8000fae:	458a      	cmp	sl, r1
 8000fb0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fb4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x220>
 8000fba:	1861      	adds	r1, r4, r1
 8000fbc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000fc0:	d248      	bcs.n	8001054 <__udivmoddi4+0x2a8>
 8000fc2:	458a      	cmp	sl, r1
 8000fc4:	d946      	bls.n	8001054 <__udivmoddi4+0x2a8>
 8000fc6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fca:	4421      	add	r1, r4
 8000fcc:	eba1 010a 	sub.w	r1, r1, sl
 8000fd0:	b2bf      	uxth	r7, r7
 8000fd2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fd6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fde:	fb00 f808 	mul.w	r8, r0, r8
 8000fe2:	45b8      	cmp	r8, r7
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x24a>
 8000fe6:	19e7      	adds	r7, r4, r7
 8000fe8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fec:	d22e      	bcs.n	800104c <__udivmoddi4+0x2a0>
 8000fee:	45b8      	cmp	r8, r7
 8000ff0:	d92c      	bls.n	800104c <__udivmoddi4+0x2a0>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4427      	add	r7, r4
 8000ff6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ffa:	eba7 0708 	sub.w	r7, r7, r8
 8000ffe:	fba0 8902 	umull	r8, r9, r0, r2
 8001002:	454f      	cmp	r7, r9
 8001004:	46c6      	mov	lr, r8
 8001006:	4649      	mov	r1, r9
 8001008:	d31a      	bcc.n	8001040 <__udivmoddi4+0x294>
 800100a:	d017      	beq.n	800103c <__udivmoddi4+0x290>
 800100c:	b15d      	cbz	r5, 8001026 <__udivmoddi4+0x27a>
 800100e:	ebb3 020e 	subs.w	r2, r3, lr
 8001012:	eb67 0701 	sbc.w	r7, r7, r1
 8001016:	fa07 fc0c 	lsl.w	ip, r7, ip
 800101a:	40f2      	lsrs	r2, r6
 800101c:	ea4c 0202 	orr.w	r2, ip, r2
 8001020:	40f7      	lsrs	r7, r6
 8001022:	e9c5 2700 	strd	r2, r7, [r5]
 8001026:	2600      	movs	r6, #0
 8001028:	4631      	mov	r1, r6
 800102a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800102e:	462e      	mov	r6, r5
 8001030:	4628      	mov	r0, r5
 8001032:	e70b      	b.n	8000e4c <__udivmoddi4+0xa0>
 8001034:	4606      	mov	r6, r0
 8001036:	e6e9      	b.n	8000e0c <__udivmoddi4+0x60>
 8001038:	4618      	mov	r0, r3
 800103a:	e6fd      	b.n	8000e38 <__udivmoddi4+0x8c>
 800103c:	4543      	cmp	r3, r8
 800103e:	d2e5      	bcs.n	800100c <__udivmoddi4+0x260>
 8001040:	ebb8 0e02 	subs.w	lr, r8, r2
 8001044:	eb69 0104 	sbc.w	r1, r9, r4
 8001048:	3801      	subs	r0, #1
 800104a:	e7df      	b.n	800100c <__udivmoddi4+0x260>
 800104c:	4608      	mov	r0, r1
 800104e:	e7d2      	b.n	8000ff6 <__udivmoddi4+0x24a>
 8001050:	4660      	mov	r0, ip
 8001052:	e78d      	b.n	8000f70 <__udivmoddi4+0x1c4>
 8001054:	4681      	mov	r9, r0
 8001056:	e7b9      	b.n	8000fcc <__udivmoddi4+0x220>
 8001058:	4666      	mov	r6, ip
 800105a:	e775      	b.n	8000f48 <__udivmoddi4+0x19c>
 800105c:	4630      	mov	r0, r6
 800105e:	e74a      	b.n	8000ef6 <__udivmoddi4+0x14a>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	4439      	add	r1, r7
 8001066:	e713      	b.n	8000e90 <__udivmoddi4+0xe4>
 8001068:	3802      	subs	r0, #2
 800106a:	443c      	add	r4, r7
 800106c:	e724      	b.n	8000eb8 <__udivmoddi4+0x10c>
 800106e:	bf00      	nop

08001070 <__aeabi_idiv0>:
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8001074:	20f0      	movs	r0, #240	; 0xf0
 8001076:	4770      	bx	lr

08001078 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8001078:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800107c:	4770      	bx	lr

0800107e <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 800107e:	2029      	movs	r0, #41	; 0x29
 8001080:	f000 bd88 	b.w	8001b94 <LCD_IO_WriteReg>

08001084 <ili9341_DisplayOff>:
 8001084:	2028      	movs	r0, #40	; 0x28
 8001086:	f000 bd85 	b.w	8001b94 <LCD_IO_WriteReg>

0800108a <ili9341_Init>:
{
 800108a:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800108c:	f000 fd08 	bl	8001aa0 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8001090:	20ca      	movs	r0, #202	; 0xca
 8001092:	f000 fd7f 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001096:	20c3      	movs	r0, #195	; 0xc3
 8001098:	f000 fd60 	bl	8001b5c <LCD_IO_WriteData>
 800109c:	2008      	movs	r0, #8
 800109e:	f000 fd5d 	bl	8001b5c <LCD_IO_WriteData>
 80010a2:	2050      	movs	r0, #80	; 0x50
 80010a4:	f000 fd5a 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80010a8:	20cf      	movs	r0, #207	; 0xcf
 80010aa:	f000 fd73 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 fd54 	bl	8001b5c <LCD_IO_WriteData>
 80010b4:	20c1      	movs	r0, #193	; 0xc1
 80010b6:	f000 fd51 	bl	8001b5c <LCD_IO_WriteData>
 80010ba:	2030      	movs	r0, #48	; 0x30
 80010bc:	f000 fd4e 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80010c0:	20ed      	movs	r0, #237	; 0xed
 80010c2:	f000 fd67 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80010c6:	2064      	movs	r0, #100	; 0x64
 80010c8:	f000 fd48 	bl	8001b5c <LCD_IO_WriteData>
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 fd45 	bl	8001b5c <LCD_IO_WriteData>
 80010d2:	2012      	movs	r0, #18
 80010d4:	f000 fd42 	bl	8001b5c <LCD_IO_WriteData>
 80010d8:	2081      	movs	r0, #129	; 0x81
 80010da:	f000 fd3f 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80010de:	20e8      	movs	r0, #232	; 0xe8
 80010e0:	f000 fd58 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80010e4:	2085      	movs	r0, #133	; 0x85
 80010e6:	f000 fd39 	bl	8001b5c <LCD_IO_WriteData>
 80010ea:	2000      	movs	r0, #0
 80010ec:	f000 fd36 	bl	8001b5c <LCD_IO_WriteData>
 80010f0:	2078      	movs	r0, #120	; 0x78
 80010f2:	f000 fd33 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80010f6:	20cb      	movs	r0, #203	; 0xcb
 80010f8:	f000 fd4c 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80010fc:	2039      	movs	r0, #57	; 0x39
 80010fe:	f000 fd2d 	bl	8001b5c <LCD_IO_WriteData>
 8001102:	202c      	movs	r0, #44	; 0x2c
 8001104:	f000 fd2a 	bl	8001b5c <LCD_IO_WriteData>
 8001108:	2000      	movs	r0, #0
 800110a:	f000 fd27 	bl	8001b5c <LCD_IO_WriteData>
 800110e:	2034      	movs	r0, #52	; 0x34
 8001110:	f000 fd24 	bl	8001b5c <LCD_IO_WriteData>
 8001114:	2002      	movs	r0, #2
 8001116:	f000 fd21 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800111a:	20f7      	movs	r0, #247	; 0xf7
 800111c:	f000 fd3a 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001120:	2020      	movs	r0, #32
 8001122:	f000 fd1b 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001126:	20ea      	movs	r0, #234	; 0xea
 8001128:	f000 fd34 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800112c:	2000      	movs	r0, #0
 800112e:	f000 fd15 	bl	8001b5c <LCD_IO_WriteData>
 8001132:	2000      	movs	r0, #0
 8001134:	f000 fd12 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001138:	20b1      	movs	r0, #177	; 0xb1
 800113a:	f000 fd2b 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 fd0c 	bl	8001b5c <LCD_IO_WriteData>
 8001144:	201b      	movs	r0, #27
 8001146:	f000 fd09 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800114a:	20b6      	movs	r0, #182	; 0xb6
 800114c:	f000 fd22 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001150:	200a      	movs	r0, #10
 8001152:	f000 fd03 	bl	8001b5c <LCD_IO_WriteData>
 8001156:	20a2      	movs	r0, #162	; 0xa2
 8001158:	f000 fd00 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800115c:	20c0      	movs	r0, #192	; 0xc0
 800115e:	f000 fd19 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001162:	2010      	movs	r0, #16
 8001164:	f000 fcfa 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001168:	20c1      	movs	r0, #193	; 0xc1
 800116a:	f000 fd13 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800116e:	2010      	movs	r0, #16
 8001170:	f000 fcf4 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001174:	20c5      	movs	r0, #197	; 0xc5
 8001176:	f000 fd0d 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800117a:	2045      	movs	r0, #69	; 0x45
 800117c:	f000 fcee 	bl	8001b5c <LCD_IO_WriteData>
 8001180:	2015      	movs	r0, #21
 8001182:	f000 fceb 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001186:	20c7      	movs	r0, #199	; 0xc7
 8001188:	f000 fd04 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800118c:	2090      	movs	r0, #144	; 0x90
 800118e:	f000 fce5 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001192:	2036      	movs	r0, #54	; 0x36
 8001194:	f000 fcfe 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001198:	20c8      	movs	r0, #200	; 0xc8
 800119a:	f000 fcdf 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800119e:	20f2      	movs	r0, #242	; 0xf2
 80011a0:	f000 fcf8 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 fcd9 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80011aa:	20b0      	movs	r0, #176	; 0xb0
 80011ac:	f000 fcf2 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80011b0:	20c2      	movs	r0, #194	; 0xc2
 80011b2:	f000 fcd3 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80011b6:	20b6      	movs	r0, #182	; 0xb6
 80011b8:	f000 fcec 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80011bc:	200a      	movs	r0, #10
 80011be:	f000 fccd 	bl	8001b5c <LCD_IO_WriteData>
 80011c2:	20a7      	movs	r0, #167	; 0xa7
 80011c4:	f000 fcca 	bl	8001b5c <LCD_IO_WriteData>
 80011c8:	2027      	movs	r0, #39	; 0x27
 80011ca:	f000 fcc7 	bl	8001b5c <LCD_IO_WriteData>
 80011ce:	2004      	movs	r0, #4
 80011d0:	f000 fcc4 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80011d4:	202a      	movs	r0, #42	; 0x2a
 80011d6:	f000 fcdd 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80011da:	2000      	movs	r0, #0
 80011dc:	f000 fcbe 	bl	8001b5c <LCD_IO_WriteData>
 80011e0:	2000      	movs	r0, #0
 80011e2:	f000 fcbb 	bl	8001b5c <LCD_IO_WriteData>
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 fcb8 	bl	8001b5c <LCD_IO_WriteData>
 80011ec:	20ef      	movs	r0, #239	; 0xef
 80011ee:	f000 fcb5 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80011f2:	202b      	movs	r0, #43	; 0x2b
 80011f4:	f000 fcce 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 fcaf 	bl	8001b5c <LCD_IO_WriteData>
 80011fe:	2000      	movs	r0, #0
 8001200:	f000 fcac 	bl	8001b5c <LCD_IO_WriteData>
 8001204:	2001      	movs	r0, #1
 8001206:	f000 fca9 	bl	8001b5c <LCD_IO_WriteData>
 800120a:	203f      	movs	r0, #63	; 0x3f
 800120c:	f000 fca6 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001210:	20f6      	movs	r0, #246	; 0xf6
 8001212:	f000 fcbf 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001216:	2001      	movs	r0, #1
 8001218:	f000 fca0 	bl	8001b5c <LCD_IO_WriteData>
 800121c:	2000      	movs	r0, #0
 800121e:	f000 fc9d 	bl	8001b5c <LCD_IO_WriteData>
 8001222:	2006      	movs	r0, #6
 8001224:	f000 fc9a 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001228:	202c      	movs	r0, #44	; 0x2c
 800122a:	f000 fcb3 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_Delay(200);
 800122e:	20c8      	movs	r0, #200	; 0xc8
 8001230:	f000 fd02 	bl	8001c38 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8001234:	2026      	movs	r0, #38	; 0x26
 8001236:	f000 fcad 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800123a:	2001      	movs	r0, #1
 800123c:	f000 fc8e 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001240:	20e0      	movs	r0, #224	; 0xe0
 8001242:	f000 fca7 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001246:	200f      	movs	r0, #15
 8001248:	f000 fc88 	bl	8001b5c <LCD_IO_WriteData>
 800124c:	2029      	movs	r0, #41	; 0x29
 800124e:	f000 fc85 	bl	8001b5c <LCD_IO_WriteData>
 8001252:	2024      	movs	r0, #36	; 0x24
 8001254:	f000 fc82 	bl	8001b5c <LCD_IO_WriteData>
 8001258:	200c      	movs	r0, #12
 800125a:	f000 fc7f 	bl	8001b5c <LCD_IO_WriteData>
 800125e:	200e      	movs	r0, #14
 8001260:	f000 fc7c 	bl	8001b5c <LCD_IO_WriteData>
 8001264:	2009      	movs	r0, #9
 8001266:	f000 fc79 	bl	8001b5c <LCD_IO_WriteData>
 800126a:	204e      	movs	r0, #78	; 0x4e
 800126c:	f000 fc76 	bl	8001b5c <LCD_IO_WriteData>
 8001270:	2078      	movs	r0, #120	; 0x78
 8001272:	f000 fc73 	bl	8001b5c <LCD_IO_WriteData>
 8001276:	203c      	movs	r0, #60	; 0x3c
 8001278:	f000 fc70 	bl	8001b5c <LCD_IO_WriteData>
 800127c:	2009      	movs	r0, #9
 800127e:	f000 fc6d 	bl	8001b5c <LCD_IO_WriteData>
 8001282:	2013      	movs	r0, #19
 8001284:	f000 fc6a 	bl	8001b5c <LCD_IO_WriteData>
 8001288:	2005      	movs	r0, #5
 800128a:	f000 fc67 	bl	8001b5c <LCD_IO_WriteData>
 800128e:	2017      	movs	r0, #23
 8001290:	f000 fc64 	bl	8001b5c <LCD_IO_WriteData>
 8001294:	2011      	movs	r0, #17
 8001296:	f000 fc61 	bl	8001b5c <LCD_IO_WriteData>
 800129a:	2000      	movs	r0, #0
 800129c:	f000 fc5e 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80012a0:	20e1      	movs	r0, #225	; 0xe1
 80012a2:	f000 fc77 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f000 fc58 	bl	8001b5c <LCD_IO_WriteData>
 80012ac:	2016      	movs	r0, #22
 80012ae:	f000 fc55 	bl	8001b5c <LCD_IO_WriteData>
 80012b2:	201b      	movs	r0, #27
 80012b4:	f000 fc52 	bl	8001b5c <LCD_IO_WriteData>
 80012b8:	2004      	movs	r0, #4
 80012ba:	f000 fc4f 	bl	8001b5c <LCD_IO_WriteData>
 80012be:	2011      	movs	r0, #17
 80012c0:	f000 fc4c 	bl	8001b5c <LCD_IO_WriteData>
 80012c4:	2007      	movs	r0, #7
 80012c6:	f000 fc49 	bl	8001b5c <LCD_IO_WriteData>
 80012ca:	2031      	movs	r0, #49	; 0x31
 80012cc:	f000 fc46 	bl	8001b5c <LCD_IO_WriteData>
 80012d0:	2033      	movs	r0, #51	; 0x33
 80012d2:	f000 fc43 	bl	8001b5c <LCD_IO_WriteData>
 80012d6:	2042      	movs	r0, #66	; 0x42
 80012d8:	f000 fc40 	bl	8001b5c <LCD_IO_WriteData>
 80012dc:	2005      	movs	r0, #5
 80012de:	f000 fc3d 	bl	8001b5c <LCD_IO_WriteData>
 80012e2:	200c      	movs	r0, #12
 80012e4:	f000 fc3a 	bl	8001b5c <LCD_IO_WriteData>
 80012e8:	200a      	movs	r0, #10
 80012ea:	f000 fc37 	bl	8001b5c <LCD_IO_WriteData>
 80012ee:	2028      	movs	r0, #40	; 0x28
 80012f0:	f000 fc34 	bl	8001b5c <LCD_IO_WriteData>
 80012f4:	202f      	movs	r0, #47	; 0x2f
 80012f6:	f000 fc31 	bl	8001b5c <LCD_IO_WriteData>
 80012fa:	200f      	movs	r0, #15
 80012fc:	f000 fc2e 	bl	8001b5c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001300:	2011      	movs	r0, #17
 8001302:	f000 fc47 	bl	8001b94 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8001306:	20c8      	movs	r0, #200	; 0xc8
 8001308:	f000 fc96 	bl	8001c38 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 800130c:	2029      	movs	r0, #41	; 0x29
 800130e:	f000 fc41 	bl	8001b94 <LCD_IO_WriteReg>
}
 8001312:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8001316:	202c      	movs	r0, #44	; 0x2c
 8001318:	f000 bc3c 	b.w	8001b94 <LCD_IO_WriteReg>

0800131c <ili9341_ReadID>:
{
 800131c:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800131e:	f000 fbbf 	bl	8001aa0 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001322:	2103      	movs	r1, #3
 8001324:	20d3      	movs	r0, #211	; 0xd3
 8001326:	f000 fc51 	bl	8001bcc <LCD_IO_ReadData>
}
 800132a:	b280      	uxth	r0, r0
 800132c:	bd08      	pop	{r3, pc}

0800132e <stmpe811_IO_WritePin>:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @param PinState: The new IO pin state.
  * @retval None
  */
void stmpe811_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 800132e:	4613      	mov	r3, r2
 8001330:	b2c0      	uxtb	r0, r0
 8001332:	b2ca      	uxtb	r2, r1
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8001334:	b113      	cbz	r3, 800133c <stmpe811_IO_WritePin+0xe>
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_SET_PIN, (uint8_t)IO_Pin);
 8001336:	2110      	movs	r1, #16
  }
  else
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_CLR_PIN, (uint8_t)IO_Pin);
 8001338:	f000 bcac 	b.w	8001c94 <IOE_Write>
 800133c:	2111      	movs	r1, #17
 800133e:	e7fb      	b.n	8001338 <stmpe811_IO_WritePin+0xa>

08001340 <stmpe811_Reset>:
{
 8001340:	b510      	push	{r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8001342:	b2c4      	uxtb	r4, r0
 8001344:	2202      	movs	r2, #2
 8001346:	2103      	movs	r1, #3
 8001348:	4620      	mov	r0, r4
 800134a:	f000 fca3 	bl	8001c94 <IOE_Write>
  IOE_Delay(10); 
 800134e:	200a      	movs	r0, #10
 8001350:	f000 fcf0 	bl	8001d34 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8001354:	4620      	mov	r0, r4
 8001356:	2200      	movs	r2, #0
 8001358:	2103      	movs	r1, #3
 800135a:	f000 fc9b 	bl	8001c94 <IOE_Write>
}
 800135e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 8001362:	2002      	movs	r0, #2
 8001364:	f000 bce6 	b.w	8001d34 <IOE_Delay>

08001368 <stmpe811_ReadID>:
{
 8001368:	b538      	push	{r3, r4, r5, lr}
 800136a:	4604      	mov	r4, r0
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800136c:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 800136e:	f000 fc65 	bl	8001c3c <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001372:	2100      	movs	r1, #0
 8001374:	4620      	mov	r0, r4
 8001376:	f000 fca7 	bl	8001cc8 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800137a:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 800137c:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 800137e:	4620      	mov	r0, r4
 8001380:	f000 fca2 	bl	8001cc8 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8001384:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8001388:	b280      	uxth	r0, r0
 800138a:	bd38      	pop	{r3, r4, r5, pc}

0800138c <stmpe811_IO_ReadPin>:
  *        of the following values:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @retval IO pin(s) state.
  */
uint32_t stmpe811_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800138c:	b510      	push	{r4, lr}
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 800138e:	b2c0      	uxtb	r0, r0
{
 8001390:	460c      	mov	r4, r1
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 8001392:	2112      	movs	r1, #18
 8001394:	f000 fc98 	bl	8001cc8 <IOE_Read>
 8001398:	4020      	ands	r0, r4
}
 800139a:	b2c0      	uxtb	r0, r0
 800139c:	bd10      	pop	{r4, pc}

0800139e <stmpe811_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  STMPE811_PIN_x Where x can be from 0 to 7.             
  * @retval Status of the checked IO pin(s).
  */
uint32_t stmpe811_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800139e:	b510      	push	{r4, lr}
  /* Get the Interrupt status */
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 80013a0:	b2c0      	uxtb	r0, r0
{
 80013a2:	460c      	mov	r4, r1
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 80013a4:	210d      	movs	r1, #13
 80013a6:	f000 fc8f 	bl	8001cc8 <IOE_Read>
 80013aa:	4020      	ands	r0, r4
}
 80013ac:	b2c0      	uxtb	r0, r0
 80013ae:	bd10      	pop	{r4, pc}

080013b0 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 80013b0:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 80013b2:	b2c4      	uxtb	r4, r0
 80013b4:	2140      	movs	r1, #64	; 0x40
 80013b6:	4620      	mov	r0, r4
 80013b8:	f000 fc86 	bl	8001cc8 <IOE_Read>
  
  if(state > 0)
 80013bc:	0603      	lsls	r3, r0, #24
 80013be:	d507      	bpl.n	80013d0 <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80013c0:	214c      	movs	r1, #76	; 0x4c
 80013c2:	4620      	mov	r0, r4
 80013c4:	f000 fc80 	bl	8001cc8 <IOE_Read>
    {
      ret = 1;
 80013c8:	3800      	subs	r0, #0
 80013ca:	bf18      	it	ne
 80013cc:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 80013ce:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80013d0:	2201      	movs	r2, #1
 80013d2:	214b      	movs	r1, #75	; 0x4b
 80013d4:	4620      	mov	r0, r4
 80013d6:	f000 fc5d 	bl	8001c94 <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80013da:	4620      	mov	r0, r4
 80013dc:	2200      	movs	r2, #0
 80013de:	214b      	movs	r1, #75	; 0x4b
 80013e0:	f000 fc58 	bl	8001c94 <IOE_Write>
  uint8_t ret = 0;
 80013e4:	2000      	movs	r0, #0
 80013e6:	e7f2      	b.n	80013ce <stmpe811_TS_DetectTouch+0x1e>

080013e8 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80013e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80013ea:	2304      	movs	r3, #4
 80013ec:	b2c4      	uxtb	r4, r0
{
 80013ee:	460e      	mov	r6, r1
 80013f0:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 80013f2:	21d7      	movs	r1, #215	; 0xd7
 80013f4:	eb0d 0203 	add.w	r2, sp, r3
 80013f8:	4620      	mov	r0, r4
 80013fa:	f000 fc83 	bl	8001d04 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 80013fe:	9b01      	ldr	r3, [sp, #4]
 8001400:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001402:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8001404:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8001408:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800140a:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800140c:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800140e:	2201      	movs	r2, #1
 8001410:	214b      	movs	r1, #75	; 0x4b
 8001412:	f000 fc3f 	bl	8001c94 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8001416:	2200      	movs	r2, #0
 8001418:	214b      	movs	r1, #75	; 0x4b
 800141a:	4620      	mov	r0, r4
 800141c:	f000 fc3a 	bl	8001c94 <IOE_Write>
}
 8001420:	b002      	add	sp, #8
 8001422:	bd70      	pop	{r4, r5, r6, pc}

08001424 <stmpe811_Init>:
{
 8001424:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8001426:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <stmpe811_Init+0x2c>)
 8001428:	781a      	ldrb	r2, [r3, #0]
 800142a:	4290      	cmp	r0, r2
{
 800142c:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 800142e:	d00d      	beq.n	800144c <stmpe811_Init+0x28>
 8001430:	7859      	ldrb	r1, [r3, #1]
 8001432:	4288      	cmp	r0, r1
 8001434:	d00a      	beq.n	800144c <stmpe811_Init+0x28>
 8001436:	b10a      	cbz	r2, 800143c <stmpe811_Init+0x18>
 8001438:	b941      	cbnz	r1, 800144c <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 800143a:	2201      	movs	r2, #1
      stmpe811[empty] = DeviceAddr;
 800143c:	549c      	strb	r4, [r3, r2]
      IOE_Init(); 
 800143e:	f000 fbfd 	bl	8001c3c <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 8001442:	4620      	mov	r0, r4
}
 8001444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 8001448:	f7ff bf7a 	b.w	8001340 <stmpe811_Reset>
}
 800144c:	bd10      	pop	{r4, pc}
 800144e:	bf00      	nop
 8001450:	20000c7c 	.word	0x20000c7c

08001454 <stmpe811_EnableGlobalIT>:
{
 8001454:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001456:	b2c4      	uxtb	r4, r0
 8001458:	2109      	movs	r1, #9
 800145a:	4620      	mov	r0, r4
 800145c:	f000 fc34 	bl	8001cc8 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 8001460:	f040 0001 	orr.w	r0, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8001464:	b2c2      	uxtb	r2, r0
 8001466:	2109      	movs	r1, #9
 8001468:	4620      	mov	r0, r4
}
 800146a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 800146e:	f000 bc11 	b.w	8001c94 <IOE_Write>

08001472 <stmpe811_DisableGlobalIT>:
{
 8001472:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001474:	b2c4      	uxtb	r4, r0
 8001476:	2109      	movs	r1, #9
 8001478:	4620      	mov	r0, r4
 800147a:	f000 fc25 	bl	8001cc8 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800147e:	2109      	movs	r1, #9
 8001480:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8001484:	4620      	mov	r0, r4
}
 8001486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800148a:	f000 bc03 	b.w	8001c94 <IOE_Write>

0800148e <stmpe811_EnableITSource>:
{
 800148e:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001490:	b2c4      	uxtb	r4, r0
{
 8001492:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8001494:	4620      	mov	r0, r4
 8001496:	210a      	movs	r1, #10
 8001498:	f000 fc16 	bl	8001cc8 <IOE_Read>
  tmp |= Source; 
 800149c:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	4620      	mov	r0, r4
 80014a4:	210a      	movs	r1, #10
}
 80014a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80014aa:	f000 bbf3 	b.w	8001c94 <IOE_Write>

080014ae <stmpe811_IO_EnableIT>:
{ 
 80014ae:	b507      	push	{r0, r1, r2, lr}
 80014b0:	9001      	str	r0, [sp, #4]
  IOE_ITConfig();
 80014b2:	f000 fbc5 	bl	8001c40 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_GIT_IO);
 80014b6:	9801      	ldr	r0, [sp, #4]
 80014b8:	2180      	movs	r1, #128	; 0x80
 80014ba:	f7ff ffe8 	bl	800148e <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr); 
 80014be:	9801      	ldr	r0, [sp, #4]
}
 80014c0:	b003      	add	sp, #12
 80014c2:	f85d eb04 	ldr.w	lr, [sp], #4
  stmpe811_EnableGlobalIT(DeviceAddr); 
 80014c6:	f7ff bfc5 	b.w	8001454 <stmpe811_EnableGlobalIT>

080014ca <stmpe811_TS_EnableIT>:
{
 80014ca:	b507      	push	{r0, r1, r2, lr}
 80014cc:	9001      	str	r0, [sp, #4]
  IOE_ITConfig();
 80014ce:	f000 fbb7 	bl	8001c40 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 80014d2:	9801      	ldr	r0, [sp, #4]
 80014d4:	211f      	movs	r1, #31
 80014d6:	f7ff ffda 	bl	800148e <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 80014da:	9801      	ldr	r0, [sp, #4]
}
 80014dc:	b003      	add	sp, #12
 80014de:	f85d eb04 	ldr.w	lr, [sp], #4
  stmpe811_EnableGlobalIT(DeviceAddr);
 80014e2:	f7ff bfb7 	b.w	8001454 <stmpe811_EnableGlobalIT>

080014e6 <stmpe811_DisableITSource>:
{
 80014e6:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80014e8:	b2c4      	uxtb	r4, r0
{
 80014ea:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80014ec:	4620      	mov	r0, r4
 80014ee:	210a      	movs	r1, #10
 80014f0:	f000 fbea 	bl	8001cc8 <IOE_Read>
  tmp &= ~Source; 
 80014f4:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	4620      	mov	r0, r4
 80014fc:	210a      	movs	r1, #10
}
 80014fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8001502:	f000 bbc7 	b.w	8001c94 <IOE_Write>

08001506 <stmpe811_IO_DisableIT>:
{
 8001506:	b510      	push	{r4, lr}
 8001508:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 800150a:	f7ff ffb2 	bl	8001472 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 800150e:	4620      	mov	r0, r4
 8001510:	2180      	movs	r1, #128	; 0x80
}
 8001512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 8001516:	f7ff bfe6 	b.w	80014e6 <stmpe811_DisableITSource>

0800151a <stmpe811_TS_DisableIT>:
{
 800151a:	b510      	push	{r4, lr}
 800151c:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 800151e:	f7ff ffa8 	bl	8001472 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8001522:	4620      	mov	r0, r4
 8001524:	211f      	movs	r1, #31
}
 8001526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800152a:	f7ff bfdc 	b.w	80014e6 <stmpe811_DisableITSource>

0800152e <stmpe811_SetITPolarity>:
{
 800152e:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001530:	b2c4      	uxtb	r4, r0
{
 8001532:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001534:	4620      	mov	r0, r4
 8001536:	2109      	movs	r1, #9
 8001538:	f000 fbc6 	bl	8001cc8 <IOE_Read>
  tmp &= ~(uint8_t)0x04;
 800153c:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001540:	ea40 0205 	orr.w	r2, r0, r5
 8001544:	2109      	movs	r1, #9
 8001546:	4620      	mov	r0, r4
}
 8001548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800154c:	f000 bba2 	b.w	8001c94 <IOE_Write>

08001550 <stmpe811_SetITType>:
{
 8001550:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001552:	b2c4      	uxtb	r4, r0
{
 8001554:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 8001556:	4620      	mov	r0, r4
 8001558:	2109      	movs	r1, #9
 800155a:	f000 fbb5 	bl	8001cc8 <IOE_Read>
  tmp &= ~(uint8_t)0x02;
 800155e:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8001562:	ea40 0205 	orr.w	r2, r0, r5
 8001566:	2109      	movs	r1, #9
 8001568:	4620      	mov	r0, r4
}
 800156a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 800156e:	f000 bb91 	b.w	8001c94 <IOE_Write>

08001572 <stmpe811_ReadGITStatus>:
{
 8001572:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001574:	b2c0      	uxtb	r0, r0
{
 8001576:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8001578:	210b      	movs	r1, #11
 800157a:	f000 fba5 	bl	8001cc8 <IOE_Read>
}
 800157e:	4020      	ands	r0, r4
 8001580:	bd10      	pop	{r4, pc}

08001582 <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 8001582:	211f      	movs	r1, #31
 8001584:	f7ff bff5 	b.w	8001572 <stmpe811_ReadGITStatus>

08001588 <stmpe811_ClearGlobalIT>:
{
 8001588:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 800158a:	b2c0      	uxtb	r0, r0
 800158c:	210b      	movs	r1, #11
 800158e:	f000 bb81 	b.w	8001c94 <IOE_Write>

08001592 <stmpe811_IO_ClearIT>:
{
 8001592:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001594:	4604      	mov	r4, r0
 8001596:	460d      	mov	r5, r1
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_GIT_IO);
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	f7ff fff5 	bl	8001588 <stmpe811_ClearGlobalIT>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_STA, (uint8_t)IO_Pin);  
 800159e:	b2e0      	uxtb	r0, r4
 80015a0:	b2ea      	uxtb	r2, r5
 80015a2:	210d      	movs	r1, #13
 80015a4:	9201      	str	r2, [sp, #4]
 80015a6:	9000      	str	r0, [sp, #0]
 80015a8:	f000 fb74 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_ED, (uint8_t)IO_Pin);
 80015ac:	9a01      	ldr	r2, [sp, #4]
 80015ae:	9800      	ldr	r0, [sp, #0]
 80015b0:	2114      	movs	r1, #20
 80015b2:	f000 fb6f 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, (uint8_t)IO_Pin);
 80015b6:	9a01      	ldr	r2, [sp, #4]
 80015b8:	9800      	ldr	r0, [sp, #0]
 80015ba:	2115      	movs	r1, #21
 80015bc:	f000 fb6a 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 80015c0:	9a01      	ldr	r2, [sp, #4]
 80015c2:	9800      	ldr	r0, [sp, #0]
 80015c4:	2116      	movs	r1, #22
}
 80015c6:	b003      	add	sp, #12
 80015c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 80015cc:	f000 bb62 	b.w	8001c94 <IOE_Write>

080015d0 <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80015d0:	211f      	movs	r1, #31
 80015d2:	f7ff bfd9 	b.w	8001588 <stmpe811_ClearGlobalIT>

080015d6 <stmpe811_IO_InitPin>:
{
 80015d6:	b570      	push	{r4, r5, r6, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 80015d8:	b2c4      	uxtb	r4, r0
{
 80015da:	460d      	mov	r5, r1
 80015dc:	4616      	mov	r6, r2
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 80015de:	2113      	movs	r1, #19
 80015e0:	4620      	mov	r0, r4
 80015e2:	f000 fb71 	bl	8001cc8 <IOE_Read>
  if (Direction != STMPE811_DIRECTION_IN)
 80015e6:	b146      	cbz	r6, 80015fa <stmpe811_IO_InitPin+0x24>
    tmp |= (uint8_t)IO_Pin;
 80015e8:	ea40 0105 	orr.w	r1, r0, r5
    tmp &= ~(uint8_t)IO_Pin;
 80015ec:	b2ca      	uxtb	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 80015ee:	4620      	mov	r0, r4
 80015f0:	2113      	movs	r1, #19
}
 80015f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 80015f6:	f000 bb4d 	b.w	8001c94 <IOE_Write>
    tmp &= ~(uint8_t)IO_Pin;
 80015fa:	ea20 0105 	bic.w	r1, r0, r5
 80015fe:	e7f5      	b.n	80015ec <stmpe811_IO_InitPin+0x16>

08001600 <stmpe811_IO_DisableAF>:
{
 8001600:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001602:	b2c4      	uxtb	r4, r0
{
 8001604:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8001606:	4620      	mov	r0, r4
 8001608:	2117      	movs	r1, #23
 800160a:	f000 fb5d 	bl	8001cc8 <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 800160e:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	4620      	mov	r0, r4
 8001616:	2117      	movs	r1, #23
}
 8001618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 800161c:	f000 bb3a 	b.w	8001c94 <IOE_Write>

08001620 <stmpe811_IO_Start>:
{
 8001620:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001622:	b2c6      	uxtb	r6, r0
{
 8001624:	4604      	mov	r4, r0
 8001626:	460d      	mov	r5, r1
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8001628:	4630      	mov	r0, r6
 800162a:	2104      	movs	r1, #4
 800162c:	f000 fb4c 	bl	8001cc8 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001630:	2104      	movs	r1, #4
 8001632:	f000 02fa 	and.w	r2, r0, #250	; 0xfa
 8001636:	4630      	mov	r0, r6
 8001638:	f000 fb2c 	bl	8001c94 <IOE_Write>
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 800163c:	b2e9      	uxtb	r1, r5
 800163e:	4620      	mov	r0, r4
}
 8001640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 8001644:	f7ff bfdc 	b.w	8001600 <stmpe811_IO_DisableAF>

08001648 <stmpe811_IO_EnableAF>:
{
 8001648:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800164a:	b2c4      	uxtb	r4, r0
{
 800164c:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800164e:	4620      	mov	r0, r4
 8001650:	2117      	movs	r1, #23
 8001652:	f000 fb39 	bl	8001cc8 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8001656:	ea20 0205 	bic.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	4620      	mov	r0, r4
 800165e:	2117      	movs	r1, #23
}
 8001660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8001664:	f000 bb16 	b.w	8001c94 <IOE_Write>

08001668 <stmpe811_TS_Start>:
{
 8001668:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800166a:	b2c4      	uxtb	r4, r0
{
 800166c:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800166e:	2104      	movs	r1, #4
 8001670:	4620      	mov	r0, r4
 8001672:	f000 fb29 	bl	8001cc8 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8001676:	2104      	movs	r1, #4
 8001678:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800167c:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800167e:	4620      	mov	r0, r4
 8001680:	f000 fb08 	bl	8001c94 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8001684:	4630      	mov	r0, r6
 8001686:	21f0      	movs	r1, #240	; 0xf0
 8001688:	f7ff ffde 	bl	8001648 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 800168c:	f005 02f8 	and.w	r2, r5, #248	; 0xf8
 8001690:	4620      	mov	r0, r4
 8001692:	2104      	movs	r1, #4
 8001694:	f000 fafe 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8001698:	2249      	movs	r2, #73	; 0x49
 800169a:	2120      	movs	r1, #32
 800169c:	4620      	mov	r0, r4
 800169e:	f000 faf9 	bl	8001c94 <IOE_Write>
  IOE_Delay(2); 
 80016a2:	2002      	movs	r0, #2
 80016a4:	f000 fb46 	bl	8001d34 <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80016a8:	4620      	mov	r0, r4
 80016aa:	2201      	movs	r2, #1
 80016ac:	2121      	movs	r1, #33	; 0x21
 80016ae:	f000 faf1 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80016b2:	4620      	mov	r0, r4
 80016b4:	229a      	movs	r2, #154	; 0x9a
 80016b6:	2141      	movs	r1, #65	; 0x41
 80016b8:	f000 faec 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80016bc:	4620      	mov	r0, r4
 80016be:	2201      	movs	r2, #1
 80016c0:	214a      	movs	r1, #74	; 0x4a
 80016c2:	f000 fae7 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80016c6:	4620      	mov	r0, r4
 80016c8:	2201      	movs	r2, #1
 80016ca:	214b      	movs	r1, #75	; 0x4b
 80016cc:	f000 fae2 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80016d0:	4620      	mov	r0, r4
 80016d2:	2200      	movs	r2, #0
 80016d4:	214b      	movs	r1, #75	; 0x4b
 80016d6:	f000 fadd 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 80016da:	4620      	mov	r0, r4
 80016dc:	2201      	movs	r2, #1
 80016de:	2156      	movs	r1, #86	; 0x56
 80016e0:	f000 fad8 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 80016e4:	4620      	mov	r0, r4
 80016e6:	2201      	movs	r2, #1
 80016e8:	2158      	movs	r1, #88	; 0x58
 80016ea:	f000 fad3 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 80016ee:	4620      	mov	r0, r4
 80016f0:	2201      	movs	r2, #1
 80016f2:	2140      	movs	r1, #64	; 0x40
 80016f4:	f000 face 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 80016f8:	4620      	mov	r0, r4
 80016fa:	22ff      	movs	r2, #255	; 0xff
 80016fc:	210b      	movs	r1, #11
 80016fe:	f000 fac9 	bl	8001c94 <IOE_Write>
}
 8001702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8001706:	2002      	movs	r0, #2
 8001708:	f000 bb14 	b.w	8001d34 <IOE_Delay>

0800170c <stmpe811_IO_SetEdgeMode>:
{
 800170c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8001710:	b2c7      	uxtb	r7, r0
{
 8001712:	4688      	mov	r8, r1
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8001714:	4638      	mov	r0, r7
 8001716:	2116      	movs	r1, #22
{
 8001718:	4691      	mov	r9, r2
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 800171a:	f000 fad5 	bl	8001cc8 <IOE_Read>
  tmp1 &= ~(uint8_t)IO_Pin;
 800171e:	ea6f 0508 	mvn.w	r5, r8
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8001722:	4606      	mov	r6, r0
  tmp2 = IOE_Read(DeviceAddr, STMPE811_REG_IO_RE);
 8001724:	2115      	movs	r1, #21
 8001726:	4638      	mov	r0, r7
 8001728:	f000 face 	bl	8001cc8 <IOE_Read>
  tmp1 &= ~(uint8_t)IO_Pin;
 800172c:	b26b      	sxtb	r3, r5
 800172e:	401e      	ands	r6, r3
 8001730:	b2f2      	uxtb	r2, r6
  if (Edge & STMPE811_EDGE_FALLING)
 8001732:	f019 0f01 	tst.w	r9, #1
    tmp1 |= (uint8_t)IO_Pin;
 8001736:	bf18      	it	ne
 8001738:	ea42 0208 	orrne.w	r2, r2, r8
  tmp2 &= ~(uint8_t)IO_Pin;
 800173c:	ea00 0003 	and.w	r0, r0, r3
 8001740:	b2c4      	uxtb	r4, r0
    tmp1 |= (uint8_t)IO_Pin;
 8001742:	bf18      	it	ne
 8001744:	b2d2      	uxtbne	r2, r2
  if (Edge & STMPE811_EDGE_RISING)
 8001746:	f019 0f02 	tst.w	r9, #2
    tmp2 |= (uint8_t)IO_Pin;
 800174a:	bf1c      	itt	ne
 800174c:	ea44 0408 	orrne.w	r4, r4, r8
 8001750:	b2e4      	uxtbne	r4, r4
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, tmp1);
 8001752:	4638      	mov	r0, r7
 8001754:	2116      	movs	r1, #22
 8001756:	f000 fa9d 	bl	8001c94 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 800175a:	4622      	mov	r2, r4
 800175c:	4638      	mov	r0, r7
 800175e:	2115      	movs	r1, #21
}
 8001760:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 8001764:	f000 ba96 	b.w	8001c94 <IOE_Write>

08001768 <stmpe811_IO_EnablePinIT>:
{
 8001768:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 800176a:	b2c4      	uxtb	r4, r0
{
 800176c:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 800176e:	4620      	mov	r0, r4
 8001770:	210c      	movs	r1, #12
 8001772:	f000 faa9 	bl	8001cc8 <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 8001776:	ea40 0205 	orr.w	r2, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	4620      	mov	r0, r4
 800177e:	210c      	movs	r1, #12
}
 8001780:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 8001784:	f000 ba86 	b.w	8001c94 <IOE_Write>

08001788 <stmpe811_IO_Config>:
{
 8001788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800178a:	460c      	mov	r4, r1
 800178c:	4615      	mov	r5, r2
 800178e:	2a05      	cmp	r2, #5
 8001790:	d807      	bhi.n	80017a2 <stmpe811_IO_Config+0x1a>
 8001792:	e8df f002 	tbb	[pc, r2]
 8001796:	0903      	.short	0x0903
 8001798:	4b36240e 	.word	0x4b36240e
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN);
 800179c:	2200      	movs	r2, #0
 800179e:	f7ff ff1a 	bl	80015d6 <stmpe811_IO_InitPin>
}
 80017a2:	4628      	mov	r0, r5
 80017a4:	b003      	add	sp, #12
 80017a6:	bd30      	pop	{r4, r5, pc}
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_OUT);
 80017a8:	2201      	movs	r2, #1
 80017aa:	f7ff ff14 	bl	80015d6 <stmpe811_IO_InitPin>
  uint8_t error_code = 0;
 80017ae:	2500      	movs	r5, #0
    break;    
 80017b0:	e7f7      	b.n	80017a2 <stmpe811_IO_Config+0x1a>
    stmpe811_IO_EnableIT(DeviceAddr);
 80017b2:	9001      	str	r0, [sp, #4]
 80017b4:	f7ff fe7b 	bl	80014ae <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 80017b8:	9801      	ldr	r0, [sp, #4]
 80017ba:	4621      	mov	r1, r4
 80017bc:	f7ff ffd4 	bl	8001768 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 80017c0:	2200      	movs	r2, #0
 80017c2:	9801      	ldr	r0, [sp, #4]
 80017c4:	4621      	mov	r1, r4
 80017c6:	f7ff ff06 	bl	80015d6 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);      
 80017ca:	9801      	ldr	r0, [sp, #4]
 80017cc:	2102      	movs	r1, #2
 80017ce:	f7ff febf 	bl	8001550 <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_RISING); 
 80017d2:	2202      	movs	r2, #2
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 80017d4:	9801      	ldr	r0, [sp, #4]
 80017d6:	4621      	mov	r1, r4
 80017d8:	f7ff ff98 	bl	800170c <stmpe811_IO_SetEdgeMode>
    break;
 80017dc:	e7e7      	b.n	80017ae <stmpe811_IO_Config+0x26>
    stmpe811_IO_EnableIT(DeviceAddr);
 80017de:	9001      	str	r0, [sp, #4]
 80017e0:	f7ff fe65 	bl	80014ae <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 80017e4:	9801      	ldr	r0, [sp, #4]
 80017e6:	4621      	mov	r1, r4
 80017e8:	f7ff ffbe 	bl	8001768 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 80017ec:	2200      	movs	r2, #0
 80017ee:	9801      	ldr	r0, [sp, #4]
 80017f0:	4621      	mov	r1, r4
 80017f2:	f7ff fef0 	bl	80015d6 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);    
 80017f6:	9801      	ldr	r0, [sp, #4]
 80017f8:	2102      	movs	r1, #2
 80017fa:	f7ff fea9 	bl	8001550 <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 80017fe:	2201      	movs	r2, #1
 8001800:	e7e8      	b.n	80017d4 <stmpe811_IO_Config+0x4c>
    stmpe811_IO_EnableIT(DeviceAddr);
 8001802:	9001      	str	r0, [sp, #4]
 8001804:	f7ff fe53 	bl	80014ae <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8001808:	9801      	ldr	r0, [sp, #4]
 800180a:	4621      	mov	r1, r4
 800180c:	f7ff ffac 	bl	8001768 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8001810:	9801      	ldr	r0, [sp, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	4621      	mov	r1, r4
 8001816:	f7ff fede 	bl	80015d6 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 800181a:	2100      	movs	r1, #0
 800181c:	9801      	ldr	r0, [sp, #4]
 800181e:	f7ff fe97 	bl	8001550 <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_LOW);      
 8001822:	2100      	movs	r1, #0
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 8001824:	9801      	ldr	r0, [sp, #4]
 8001826:	f7ff fe82 	bl	800152e <stmpe811_SetITPolarity>
 800182a:	e7c0      	b.n	80017ae <stmpe811_IO_Config+0x26>
    stmpe811_IO_EnableIT(DeviceAddr);
 800182c:	9001      	str	r0, [sp, #4]
 800182e:	f7ff fe3e 	bl	80014ae <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8001832:	9801      	ldr	r0, [sp, #4]
 8001834:	4621      	mov	r1, r4
 8001836:	f7ff ff97 	bl	8001768 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 800183a:	9801      	ldr	r0, [sp, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	4621      	mov	r1, r4
 8001840:	f7ff fec9 	bl	80015d6 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 8001844:	2100      	movs	r1, #0
 8001846:	9801      	ldr	r0, [sp, #4]
 8001848:	f7ff fe82 	bl	8001550 <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 800184c:	2104      	movs	r1, #4
 800184e:	e7e9      	b.n	8001824 <stmpe811_IO_Config+0x9c>

08001850 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001850:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001852:	4c21      	ldr	r4, [pc, #132]	; (80018d8 <SPIx_Init+0x88>)
{
 8001854:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001856:	4620      	mov	r0, r4
 8001858:	f003 fa06 	bl	8004c68 <HAL_SPI_GetState>
 800185c:	2800      	cmp	r0, #0
 800185e:	d138      	bne.n	80018d2 <SPIx_Init+0x82>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <SPIx_Init+0x8c>)
 8001862:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001864:	2318      	movs	r3, #24
 8001866:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 8001868:	2307      	movs	r3, #7
 800186a:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800186c:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001870:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001874:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001876:	f44f 7382 	mov.w	r3, #260	; 0x104
 800187a:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 800187c:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <SPIx_Init+0x90>)
 800187e:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001880:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001882:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001884:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001886:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001888:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 800188a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800188c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001890:	645a      	str	r2, [r3, #68]	; 0x44
 8001892:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001894:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001898:	9201      	str	r2, [sp, #4]
 800189a:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800189c:	9002      	str	r0, [sp, #8]
 800189e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018a0:	f042 0220 	orr.w	r2, r2, #32
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	f003 0320 	and.w	r3, r3, #32
 80018ac:	9302      	str	r3, [sp, #8]
 80018ae:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80018b0:	f44f 7160 	mov.w	r1, #896	; 0x380
 80018b4:	2302      	movs	r3, #2
 80018b6:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80018ba:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80018bc:	2001      	movs	r0, #1
 80018be:	2305      	movs	r3, #5
 80018c0:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 80018c4:	a903      	add	r1, sp, #12
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <SPIx_Init+0x94>)
 80018c8:	f001 fada 	bl	8002e80 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 80018cc:	4620      	mov	r0, r4
 80018ce:	f002 ff21 	bl	8004714 <HAL_SPI_Init>
}
 80018d2:	b008      	add	sp, #32
 80018d4:	bd10      	pop	{r4, pc}
 80018d6:	bf00      	nop
 80018d8:	20000c80 	.word	0x20000c80
 80018dc:	40015000 	.word	0x40015000
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40021400 	.word	0x40021400

080018e8 <I2Cx_Init>:
{
 80018e8:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80018ea:	4e33      	ldr	r6, [pc, #204]	; (80019b8 <I2Cx_Init+0xd0>)
{
 80018ec:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80018ee:	4630      	mov	r0, r6
 80018f0:	f002 f890 	bl	8003a14 <HAL_I2C_GetState>
 80018f4:	4604      	mov	r4, r0
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d15b      	bne.n	80019b2 <I2Cx_Init+0xca>
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80018fa:	4a30      	ldr	r2, [pc, #192]	; (80019bc <I2Cx_Init+0xd4>)
 80018fc:	4b30      	ldr	r3, [pc, #192]	; (80019c0 <I2Cx_Init+0xd8>)
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80018fe:	4d31      	ldr	r5, [pc, #196]	; (80019c4 <I2Cx_Init+0xdc>)
 8001900:	9000      	str	r0, [sp, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8001902:	e9c6 2300 	strd	r2, r3, [r6]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001906:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    I2cHandle.Init.OwnAddress1      = 0;
 800190a:	e9c6 0002 	strd	r0, r0, [r6, #8]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800190e:	e9c6 3004 	strd	r3, r0, [r6, #16]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8001912:	e9c6 0006 	strd	r0, r0, [r6, #24]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8001916:	6230      	str	r0, [r6, #32]
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001918:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800191a:	f043 0304 	orr.w	r3, r3, #4
 800191e:	632b      	str	r3, [r5, #48]	; 0x30
 8001920:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	9b00      	ldr	r3, [sp, #0]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800192a:	9001      	str	r0, [sp, #4]
 800192c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	632b      	str	r3, [r5, #48]	; 0x30
 8001934:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8001936:	9005      	str	r0, [sp, #20]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	9301      	str	r3, [sp, #4]
 800193e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8001940:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001944:	2312      	movs	r3, #18
 8001946:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800194a:	2002      	movs	r0, #2
 800194c:	2304      	movs	r3, #4
 800194e:	e9cd 0306 	strd	r0, r3, [sp, #24]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001952:	a903      	add	r1, sp, #12
 8001954:	481c      	ldr	r0, [pc, #112]	; (80019c8 <I2Cx_Init+0xe0>)
 8001956:	f001 fa93 	bl	8002e80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800195a:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 800195e:	481b      	ldr	r0, [pc, #108]	; (80019cc <I2Cx_Init+0xe4>)
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8001960:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001962:	a903      	add	r1, sp, #12
 8001964:	f001 fa8c 	bl	8002e80 <HAL_GPIO_Init>
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8001968:	9402      	str	r4, [sp, #8]
 800196a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800196c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001970:	642b      	str	r3, [r5, #64]	; 0x40
 8001972:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001974:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001978:	9302      	str	r3, [sp, #8]
 800197a:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_I2Cx_FORCE_RESET();
 800197c:	6a2b      	ldr	r3, [r5, #32]
 800197e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001982:	622b      	str	r3, [r5, #32]
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8001984:	6a2b      	ldr	r3, [r5, #32]
 8001986:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800198a:	622b      	str	r3, [r5, #32]
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800198c:	4622      	mov	r2, r4
 800198e:	210f      	movs	r1, #15
 8001990:	2048      	movs	r0, #72	; 0x48
 8001992:	f001 f817 	bl	80029c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001996:	2048      	movs	r0, #72	; 0x48
 8001998:	f001 f846 	bl	8002a28 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800199c:	4622      	mov	r2, r4
 800199e:	210f      	movs	r1, #15
 80019a0:	2049      	movs	r0, #73	; 0x49
 80019a2:	f001 f80f 	bl	80029c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80019a6:	2049      	movs	r0, #73	; 0x49
 80019a8:	f001 f83e 	bl	8002a28 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 80019ac:	4630      	mov	r0, r6
 80019ae:	f001 fdd7 	bl	8003560 <HAL_I2C_Init>
}
 80019b2:	b008      	add	sp, #32
 80019b4:	bd70      	pop	{r4, r5, r6, pc}
 80019b6:	bf00      	nop
 80019b8:	20009bac 	.word	0x20009bac
 80019bc:	40005c00 	.word	0x40005c00
 80019c0:	000186a0 	.word	0x000186a0
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40020800 	.word	0x40020800

080019d0 <I2Cx_Error>:
{
 80019d0:	b508      	push	{r3, lr}
  HAL_I2C_DeInit(&I2cHandle);
 80019d2:	4803      	ldr	r0, [pc, #12]	; (80019e0 <I2Cx_Error+0x10>)
 80019d4:	f001 fe6c 	bl	80036b0 <HAL_I2C_DeInit>
}
 80019d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init();
 80019dc:	f7ff bf84 	b.w	80018e8 <I2Cx_Init>
 80019e0:	20009bac 	.word	0x20009bac

080019e4 <SPIx_Write>:
{
 80019e4:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <SPIx_Write+0x28>)
{
 80019e8:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4808      	ldr	r0, [pc, #32]	; (8001a10 <SPIx_Write+0x2c>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	f10d 0106 	add.w	r1, sp, #6
 80019f6:	f002 feff 	bl	80047f8 <HAL_SPI_Transmit>
  if(status != HAL_OK)
 80019fa:	b120      	cbz	r0, 8001a06 <SPIx_Write+0x22>
  HAL_SPI_DeInit(&SpiHandle);
 80019fc:	4804      	ldr	r0, [pc, #16]	; (8001a10 <SPIx_Write+0x2c>)
 80019fe:	f002 fee5 	bl	80047cc <HAL_SPI_DeInit>
  SPIx_Init();
 8001a02:	f7ff ff25 	bl	8001850 <SPIx_Init>
}
 8001a06:	b003      	add	sp, #12
 8001a08:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a0c:	2000008c 	.word	0x2000008c
 8001a10:	20000c80 	.word	0x20000c80

08001a14 <BSP_PB_Init>:
{
 8001a14:	b510      	push	{r4, lr}
 8001a16:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001a18:	b950      	cbnz	r0, 8001a30 <BSP_PB_Init+0x1c>
 8001a1a:	4b19      	ldr	r3, [pc, #100]	; (8001a80 <BSP_PB_Init+0x6c>)
 8001a1c:	9000      	str	r0, [sp, #0]
 8001a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a20:	f042 0201 	orr.w	r2, r2, #1
 8001a24:	631a      	str	r2, [r3, #48]	; 0x30
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	9b00      	ldr	r3, [sp, #0]
  if (ButtonMode == BUTTON_MODE_GPIO)
 8001a30:	b971      	cbnz	r1, 8001a50 <BSP_PB_Init+0x3c>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001a32:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a34:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a38:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001a3a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <BSP_PB_Init+0x70>)
 8001a40:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a44:	a901      	add	r1, sp, #4
 8001a46:	68c0      	ldr	r0, [r0, #12]
 8001a48:	f001 fa1a 	bl	8002e80 <HAL_GPIO_Init>
}
 8001a4c:	b006      	add	sp, #24
 8001a4e:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 8001a50:	2901      	cmp	r1, #1
 8001a52:	d1fb      	bne.n	8001a4c <BSP_PB_Init+0x38>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8001a54:	2400      	movs	r4, #0
 8001a56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a5a:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <BSP_PB_Init+0x70>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001a60:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001a62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a66:	a901      	add	r1, sp, #4
 8001a68:	68c0      	ldr	r0, [r0, #12]
 8001a6a:	f001 fa09 	bl	8002e80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001a6e:	4622      	mov	r2, r4
 8001a70:	210f      	movs	r1, #15
 8001a72:	2006      	movs	r0, #6
 8001a74:	f000 ffa6 	bl	80029c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001a78:	2006      	movs	r0, #6
 8001a7a:	f000 ffd5 	bl	8002a28 <HAL_NVIC_EnableIRQ>
}
 8001a7e:	e7e5      	b.n	8001a4c <BSP_PB_Init+0x38>
 8001a80:	40023800 	.word	0x40023800
 8001a84:	2000008c 	.word	0x2000008c

08001a88 <BSP_PB_GetState>:
{
 8001a88:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <BSP_PB_GetState+0x14>)
 8001a8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8001a90:	2101      	movs	r1, #1
 8001a92:	68c0      	ldr	r0, [r0, #12]
 8001a94:	f001 fb7c 	bl	8003190 <HAL_GPIO_ReadPin>
}
 8001a98:	bd08      	pop	{r3, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000008c 	.word	0x2000008c

08001aa0 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <LCD_IO_Init+0xac>)
 8001aa4:	f893 5058 	ldrb.w	r5, [r3, #88]	; 0x58
{
 8001aa8:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 8001aaa:	2d00      	cmp	r5, #0
 8001aac:	d14b      	bne.n	8001b46 <LCD_IO_Init+0xa6>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001aae:	4c28      	ldr	r4, [pc, #160]	; (8001b50 <LCD_IO_Init+0xb0>)
 8001ab0:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 8001ab2:	2601      	movs	r6, #1
 8001ab4:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
    LCD_WRX_GPIO_CLK_ENABLE();
 8001ab8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001aba:	4826      	ldr	r0, [pc, #152]	; (8001b54 <LCD_IO_Init+0xb4>)
    LCD_WRX_GPIO_CLK_ENABLE();
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	6323      	str	r3, [r4, #48]	; 0x30
 8001ac2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001ac4:	9505      	str	r5, [sp, #20]
    LCD_WRX_GPIO_CLK_ENABLE();
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001acc:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 8001ace:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ad0:	9706      	str	r7, [sp, #24]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001ad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001ad6:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ad8:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001adc:	f001 f9d0 	bl	8002e80 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001ae0:	9501      	str	r5, [sp, #4]
 8001ae2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001ae4:	481b      	ldr	r0, [pc, #108]	; (8001b54 <LCD_IO_Init+0xb4>)
    LCD_RDX_GPIO_CLK_ENABLE();
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	6323      	str	r3, [r4, #48]	; 0x30
 8001aec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001af6:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001afc:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b00:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001b04:	f001 f9bc 	bl	8002e80 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001b08:	9502      	str	r5, [sp, #8]
 8001b0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001b0c:	4812      	ldr	r0, [pc, #72]	; (8001b58 <LCD_IO_Init+0xb8>)
    LCD_NCS_GPIO_CLK_ENABLE();
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	6323      	str	r3, [r4, #48]	; 0x30
 8001b14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b16:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001b1a:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 8001b1c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001b1e:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 8001b20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b22:	e9cd 4603 	strd	r4, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b26:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001b2a:	f001 f9a9 	bl	8002e80 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001b2e:	480a      	ldr	r0, [pc, #40]	; (8001b58 <LCD_IO_Init+0xb8>)
 8001b30:	462a      	mov	r2, r5
 8001b32:	4621      	mov	r1, r4
 8001b34:	f001 fb32 	bl	800319c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001b38:	4807      	ldr	r0, [pc, #28]	; (8001b58 <LCD_IO_Init+0xb8>)
 8001b3a:	4632      	mov	r2, r6
 8001b3c:	4621      	mov	r1, r4
 8001b3e:	f001 fb2d 	bl	800319c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001b42:	f7ff fe85 	bl	8001850 <SPIx_Init>
  }
}
 8001b46:	b009      	add	sp, #36	; 0x24
 8001b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000c80 	.word	0x20000c80
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40020800 	.word	0x40020800

08001b5c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001b5c:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001b5e:	4d0b      	ldr	r5, [pc, #44]	; (8001b8c <LCD_IO_WriteData+0x30>)
{
 8001b60:	4604      	mov	r4, r0
  LCD_WRX_HIGH();
 8001b62:	2201      	movs	r2, #1
 8001b64:	480a      	ldr	r0, [pc, #40]	; (8001b90 <LCD_IO_WriteData+0x34>)
 8001b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b6a:	f001 fb17 	bl	800319c <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2104      	movs	r1, #4
 8001b72:	4628      	mov	r0, r5
 8001b74:	f001 fb12 	bl	800319c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f7ff ff33 	bl	80019e4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001b7e:	4628      	mov	r0, r5
 8001b80:	2201      	movs	r2, #1
}
 8001b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8001b86:	2104      	movs	r1, #4
 8001b88:	f001 bb08 	b.w	800319c <HAL_GPIO_WritePin>
 8001b8c:	40020800 	.word	0x40020800
 8001b90:	40020c00 	.word	0x40020c00

08001b94 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001b94:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001b96:	4d0b      	ldr	r5, [pc, #44]	; (8001bc4 <LCD_IO_WriteReg+0x30>)
{
 8001b98:	4604      	mov	r4, r0
  LCD_WRX_LOW();
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	480a      	ldr	r0, [pc, #40]	; (8001bc8 <LCD_IO_WriteReg+0x34>)
 8001b9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ba2:	f001 fafb 	bl	800319c <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2104      	movs	r1, #4
 8001baa:	4628      	mov	r0, r5
 8001bac:	f001 faf6 	bl	800319c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7ff ff17 	bl	80019e4 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	2201      	movs	r2, #1
}
 8001bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	f001 baec 	b.w	800319c <HAL_GPIO_WritePin>
 8001bc4:	40020800 	.word	0x40020800
 8001bc8:	40020c00 	.word	0x40020c00

08001bcc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001bcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001bce:	4605      	mov	r5, r0
 8001bd0:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001bd2:	4815      	ldr	r0, [pc, #84]	; (8001c28 <LCD_IO_ReadData+0x5c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	f001 fae0 	bl	800319c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be2:	4812      	ldr	r0, [pc, #72]	; (8001c2c <LCD_IO_ReadData+0x60>)
 8001be4:	f001 fada 	bl	800319c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001be8:	4628      	mov	r0, r5
 8001bea:	f7ff fefb 	bl	80019e4 <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <LCD_IO_ReadData+0x64>)
 8001bf0:	4810      	ldr	r0, [pc, #64]	; (8001c34 <LCD_IO_ReadData+0x68>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4622      	mov	r2, r4
 8001bf6:	a901      	add	r1, sp, #4
 8001bf8:	f002 ff9a 	bl	8004b30 <HAL_SPI_Receive>
  if(status != HAL_OK)
 8001bfc:	b120      	cbz	r0, 8001c08 <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 8001bfe:	480d      	ldr	r0, [pc, #52]	; (8001c34 <LCD_IO_ReadData+0x68>)
 8001c00:	f002 fde4 	bl	80047cc <HAL_SPI_DeInit>
  SPIx_Init();
 8001c04:	f7ff fe24 	bl	8001850 <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001c08:	4808      	ldr	r0, [pc, #32]	; (8001c2c <LCD_IO_ReadData+0x60>)
  return readvalue;
 8001c0a:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c12:	f001 fac3 	bl	800319c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c16:	4804      	ldr	r0, [pc, #16]	; (8001c28 <LCD_IO_ReadData+0x5c>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	f001 fabe 	bl	800319c <HAL_GPIO_WritePin>
  
  return readvalue;
}
 8001c20:	4620      	mov	r0, r4
 8001c22:	b003      	add	sp, #12
 8001c24:	bd30      	pop	{r4, r5, pc}
 8001c26:	bf00      	nop
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	40020c00 	.word	0x40020c00
 8001c30:	2000008c 	.word	0x2000008c
 8001c34:	20000c80 	.word	0x20000c80

08001c38 <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8001c38:	f000 be9e 	b.w	8002978 <HAL_Delay>

08001c3c <IOE_Init>:
/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
  I2Cx_Init();
 8001c3c:	f7ff be54 	b.w	80018e8 <I2Cx_Init>

08001c40 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8001c40:	b510      	push	{r4, lr}
 8001c42:	b086      	sub	sp, #24
  STMPE811_INT_CLK_ENABLE();
 8001c44:	2400      	movs	r4, #0
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <IOE_ITConfig+0x4c>)
 8001c48:	9400      	str	r4, [sp, #0]
 8001c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001c4c:	4810      	ldr	r0, [pc, #64]	; (8001c90 <IOE_ITConfig+0x50>)
  STMPE811_INT_CLK_ENABLE();
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8001c5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c62:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8001c64:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8001c66:	e9cd 3403 	strd	r3, r4, [sp, #12]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001c6a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8001c6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001c70:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8001c72:	f001 f905 	bl	8002e80 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8001c76:	4622      	mov	r2, r4
 8001c78:	210f      	movs	r1, #15
 8001c7a:	2028      	movs	r0, #40	; 0x28
 8001c7c:	f000 fea2 	bl	80029c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8001c80:	2028      	movs	r0, #40	; 0x28
 8001c82:	f000 fed1 	bl	8002a28 <HAL_NVIC_EnableIRQ>
  I2Cx_ITConfig();
}
 8001c86:	b006      	add	sp, #24
 8001c88:	bd10      	pop	{r4, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020000 	.word	0x40020000

08001c94 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001c94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <IOE_Write+0x2c>)
 8001c98:	f88d 2017 	strb.w	r2, [sp, #23]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	9302      	str	r3, [sp, #8]
 8001ca0:	f10d 0217 	add.w	r2, sp, #23
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	9200      	str	r2, [sp, #0]
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	460a      	mov	r2, r1
 8001cac:	4601      	mov	r1, r0
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <IOE_Write+0x30>)
 8001cb0:	f001 fd18 	bl	80036e4 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8001cb4:	b108      	cbz	r0, 8001cba <IOE_Write+0x26>
    I2Cx_Error();
 8001cb6:	f7ff fe8b 	bl	80019d0 <I2Cx_Error>
  I2Cx_WriteData(Addr, Reg, Value);
}
 8001cba:	b007      	add	sp, #28
 8001cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cc0:	2000008c 	.word	0x2000008c
 8001cc4:	20009bac 	.word	0x20009bac

08001cc8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001cc8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001cd0:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <IOE_Read+0x34>)
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	9302      	str	r3, [sp, #8]
{
 8001cd6:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f10d 0117 	add.w	r1, sp, #23
 8001cde:	9100      	str	r1, [sp, #0]
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	4601      	mov	r1, r0
 8001ce4:	4806      	ldr	r0, [pc, #24]	; (8001d00 <IOE_Read+0x38>)
 8001ce6:	f001 fd8d 	bl	8003804 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001cea:	b108      	cbz	r0, 8001cf0 <IOE_Read+0x28>
    I2Cx_Error();
 8001cec:	f7ff fe70 	bl	80019d0 <I2Cx_Error>
  return I2Cx_ReadData(Addr, Reg);
}
 8001cf0:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001cf4:	b007      	add	sp, #28
 8001cf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cfa:	bf00      	nop
 8001cfc:	2000008c 	.word	0x2000008c
 8001d00:	20009bac 	.word	0x20009bac

08001d04 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8001d04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8001d06:	4c09      	ldr	r4, [pc, #36]	; (8001d2c <IOE_ReadMultiple+0x28>)
 8001d08:	6924      	ldr	r4, [r4, #16]
 8001d0a:	9200      	str	r2, [sp, #0]
 8001d0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001d10:	460a      	mov	r2, r1
 8001d12:	2301      	movs	r3, #1
 8001d14:	4601      	mov	r1, r0
 8001d16:	4806      	ldr	r0, [pc, #24]	; (8001d30 <IOE_ReadMultiple+0x2c>)
 8001d18:	f001 fd74 	bl	8003804 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 8001d1c:	b110      	cbz	r0, 8001d24 <IOE_ReadMultiple+0x20>
    I2Cx_Error();
 8001d1e:	f7ff fe57 	bl	80019d0 <I2Cx_Error>
    return 1;
 8001d22:	2001      	movs	r0, #1
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
}
 8001d24:	b280      	uxth	r0, r0
 8001d26:	b004      	add	sp, #16
 8001d28:	bd10      	pop	{r4, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000008c 	.word	0x2000008c
 8001d30:	20009bac 	.word	0x20009bac

08001d34 <IOE_Delay>:
 8001d34:	f000 be20 	b.w	8002978 <HAL_Delay>

08001d38 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8001d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8001d3c:	4c15      	ldr	r4, [pc, #84]	; (8001d94 <FillBuffer+0x5c>)
{
 8001d3e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8001d42:	4616      	mov	r6, r2
 8001d44:	461f      	mov	r7, r3
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8001d46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e9c4 2301 	strd	r2, r3, [r4, #4]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8001d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001d52:	60e3      	str	r3, [r4, #12]
{
 8001d54:	4680      	mov	r8, r0
  
  Dma2dHandler.Instance = DMA2D; 
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <FillBuffer+0x60>)
 8001d58:	6023      	str	r3, [r4, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001d5a:	4620      	mov	r0, r4
{
 8001d5c:	460d      	mov	r5, r1
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001d5e:	f000 ff83 	bl	8002c68 <HAL_DMA2D_Init>
 8001d62:	b998      	cbnz	r0, 8001d8c <FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8001d64:	4641      	mov	r1, r8
 8001d66:	4620      	mov	r0, r4
 8001d68:	f001 f846 	bl	8002df8 <HAL_DMA2D_ConfigLayer>
 8001d6c:	b970      	cbnz	r0, 8001d8c <FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001d6e:	9700      	str	r7, [sp, #0]
 8001d70:	4633      	mov	r3, r6
 8001d72:	462a      	mov	r2, r5
 8001d74:	4649      	mov	r1, r9
 8001d76:	4620      	mov	r0, r4
 8001d78:	f000 ffa2 	bl	8002cc0 <HAL_DMA2D_Start>
 8001d7c:	b930      	cbnz	r0, 8001d8c <FillBuffer+0x54>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001d7e:	210a      	movs	r1, #10
 8001d80:	4620      	mov	r0, r4
      }
    }
  } 
}
 8001d82:	b003      	add	sp, #12
 8001d84:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001d88:	f000 bfb4 	b.w	8002cf4 <HAL_DMA2D_PollForTransfer>
}
 8001d8c:	b003      	add	sp, #12
 8001d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d92:	bf00      	nop
 8001d94:	20000cdc 	.word	0x20000cdc
 8001d98:	4002b000 	.word	0x4002b000

08001d9c <BSP_LCD_GetXSize>:
{
 8001d9c:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8001d9e:	4b02      	ldr	r3, [pc, #8]	; (8001da8 <BSP_LCD_GetXSize+0xc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da4:	4798      	blx	r3
}
 8001da6:	bd08      	pop	{r3, pc}
 8001da8:	20009ca8 	.word	0x20009ca8

08001dac <BSP_LCD_GetYSize>:
{
 8001dac:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8001dae:	4b02      	ldr	r3, [pc, #8]	; (8001db8 <BSP_LCD_GetYSize+0xc>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	4798      	blx	r3
}
 8001db6:	bd08      	pop	{r3, pc}
 8001db8:	20009ca8 	.word	0x20009ca8

08001dbc <BSP_LCD_LayerDefaultInit>:
{     
 8001dbc:	b570      	push	{r4, r5, r6, lr}
 8001dbe:	b08e      	sub	sp, #56	; 0x38
  Layercfg.WindowX0 = 0;
 8001dc0:	2500      	movs	r5, #0
{     
 8001dc2:	460e      	mov	r6, r1
 8001dc4:	4604      	mov	r4, r0
  Layercfg.WindowX0 = 0;
 8001dc6:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001dc8:	f7ff ffe8 	bl	8001d9c <BSP_LCD_GetXSize>
  Layercfg.WindowY0 = 0;
 8001dcc:	e9cd 0502 	strd	r0, r5, [sp, #8]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001dd0:	f7ff ffec 	bl	8001dac <BSP_LCD_GetYSize>
  Layercfg.Alpha = 255;
 8001dd4:	23ff      	movs	r3, #255	; 0xff
  Layercfg.Alpha0 = 0;
 8001dd6:	e9cd 3506 	strd	r3, r5, [sp, #24]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001dda:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001dde:	2307      	movs	r3, #7
 8001de0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001de4:	e9cd 0504 	strd	r0, r5, [sp, #16]
  Layercfg.Backcolor.Blue = 0;
 8001de8:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Red = 0;
 8001dec:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.FBStartAdress = FB_Address;
 8001df0:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001df2:	f7ff ffd3 	bl	8001d9c <BSP_LCD_GetXSize>
 8001df6:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001df8:	f7ff ffd8 	bl	8001dac <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001dfc:	4d0b      	ldr	r5, [pc, #44]	; (8001e2c <BSP_LCD_LayerDefaultInit+0x70>)
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001dfe:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001e00:	4622      	mov	r2, r4
 8001e02:	a901      	add	r1, sp, #4
 8001e04:	4628      	mov	r0, r5
 8001e06:	f001 ff39 	bl	8003c7c <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001e0a:	4809      	ldr	r0, [pc, #36]	; (8001e30 <BSP_LCD_LayerDefaultInit+0x74>)
 8001e0c:	220c      	movs	r2, #12
 8001e0e:	fb02 0004 	mla	r0, r2, r4, r0
 8001e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e16:	6443      	str	r3, [r0, #68]	; 0x44
  DrawProp[LayerIndex].pFont     = &Font24;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <BSP_LCD_LayerDefaultInit+0x78>)
 8001e1a:	6483      	str	r3, [r0, #72]	; 0x48
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8001e1c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001e20:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001e22:	4628      	mov	r0, r5
 8001e24:	f001 ff8c 	bl	8003d40 <HAL_LTDC_EnableDither>
}
 8001e28:	b00e      	add	sp, #56	; 0x38
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	20009c00 	.word	0x20009c00
 8001e30:	20000cdc 	.word	0x20000cdc
 8001e34:	200000a0 	.word	0x200000a0

08001e38 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8001e38:	4b01      	ldr	r3, [pc, #4]	; (8001e40 <BSP_LCD_SelectLayer+0x8>)
 8001e3a:	6598      	str	r0, [r3, #88]	; 0x58
}
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000cdc 	.word	0x20000cdc

08001e44 <BSP_LCD_SetLayerVisible>:
  if(state == ENABLE)
 8001e44:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <BSP_LCD_SetLayerVisible+0x24>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	01c0      	lsls	r0, r0, #7
 8001e4a:	f102 0384 	add.w	r3, r2, #132	; 0x84
 8001e4e:	2901      	cmp	r1, #1
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8001e50:	58c1      	ldr	r1, [r0, r3]
 8001e52:	bf0c      	ite	eq
 8001e54:	f041 0101 	orreq.w	r1, r1, #1
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8001e58:	f021 0101 	bicne.w	r1, r1, #1
 8001e5c:	50c1      	str	r1, [r0, r3]
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8001e5e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001e66:	4770      	bx	lr
 8001e68:	20009c00 	.word	0x20009c00

08001e6c <BSP_LCD_SetColorKeying>:
{  
 8001e6c:	b538      	push	{r3, r4, r5, lr}
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8001e6e:	4d06      	ldr	r5, [pc, #24]	; (8001e88 <BSP_LCD_SetColorKeying+0x1c>)
{  
 8001e70:	4604      	mov	r4, r0
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8001e72:	4602      	mov	r2, r0
 8001e74:	4628      	mov	r0, r5
 8001e76:	f001 ff2e 	bl	8003cd6 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8001e7a:	4621      	mov	r1, r4
 8001e7c:	4628      	mov	r0, r5
}
 8001e7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8001e82:	f001 bf45 	b.w	8003d10 <HAL_LTDC_EnableColorKeying>
 8001e86:	bf00      	nop
 8001e88:	20009c00 	.word	0x20009c00

08001e8c <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8001e8c:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <BSP_LCD_SetTextColor+0x10>)
 8001e8e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001e90:	210c      	movs	r1, #12
 8001e92:	fb01 2303 	mla	r3, r1, r3, r2
 8001e96:	6418      	str	r0, [r3, #64]	; 0x40
}
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000cdc 	.word	0x20000cdc

08001ea0 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8001ea0:	4a03      	ldr	r2, [pc, #12]	; (8001eb0 <BSP_LCD_SetBackColor+0x10>)
 8001ea2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001ea4:	210c      	movs	r1, #12
 8001ea6:	fb01 2303 	mla	r3, r1, r3, r2
 8001eaa:	6458      	str	r0, [r3, #68]	; 0x44
}
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20000cdc 	.word	0x20000cdc

08001eb4 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 8001eb4:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <BSP_LCD_SetFont+0x10>)
 8001eb6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001eb8:	210c      	movs	r1, #12
 8001eba:	fb01 2303 	mla	r3, r1, r3, r2
 8001ebe:	6498      	str	r0, [r3, #72]	; 0x48
}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000cdc 	.word	0x20000cdc

08001ec8 <BSP_LCD_Clear>:
{ 
 8001ec8:	b530      	push	{r4, r5, lr}
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <BSP_LCD_Clear+0x38>)
 8001ecc:	4a0d      	ldr	r2, [pc, #52]	; (8001f04 <BSP_LCD_Clear+0x3c>)
 8001ece:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8001ed0:	2334      	movs	r3, #52	; 0x34
 8001ed2:	fb03 2305 	mla	r3, r3, r5, r2
{ 
 8001ed6:	b085      	sub	sp, #20
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001ed8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001eda:	9103      	str	r1, [sp, #12]
{ 
 8001edc:	4604      	mov	r4, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001ede:	f7ff ff5d 	bl	8001d9c <BSP_LCD_GetXSize>
 8001ee2:	9002      	str	r0, [sp, #8]
 8001ee4:	f7ff ff62 	bl	8001dac <BSP_LCD_GetYSize>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2000      	movs	r0, #0
 8001eec:	9000      	str	r0, [sp, #0]
 8001eee:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8001ef2:	9401      	str	r4, [sp, #4]
 8001ef4:	4628      	mov	r0, r5
 8001ef6:	f7ff ff1f 	bl	8001d38 <FillBuffer>
}
 8001efa:	b005      	add	sp, #20
 8001efc:	bd30      	pop	{r4, r5, pc}
 8001efe:	bf00      	nop
 8001f00:	20000cdc 	.word	0x20000cdc
 8001f04:	20009c00 	.word	0x20009c00

08001f08 <BSP_LCD_DrawHLine>:
{
 8001f08:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f0c:	4d10      	ldr	r5, [pc, #64]	; (8001f50 <BSP_LCD_DrawHLine+0x48>)
{
 8001f0e:	9203      	str	r2, [sp, #12]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f10:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
 8001f12:	460c      	mov	r4, r1
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f14:	490f      	ldr	r1, [pc, #60]	; (8001f54 <BSP_LCD_DrawHLine+0x4c>)
{
 8001f16:	4606      	mov	r6, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f18:	2034      	movs	r0, #52	; 0x34
 8001f1a:	fb00 1303 	mla	r3, r0, r3, r1
 8001f1e:	f8d3 805c 	ldr.w	r8, [r3, #92]	; 0x5c
 8001f22:	f7ff ff3b 	bl	8001d9c <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001f26:	6daf      	ldr	r7, [r5, #88]	; 0x58
 8001f28:	9a03      	ldr	r2, [sp, #12]
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	fb03 5307 	mla	r3, r3, r7, r5
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f30:	fb00 6404 	mla	r4, r0, r4, r6
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 8001f40:	2301      	movs	r3, #1
 8001f42:	4638      	mov	r0, r7
 8001f44:	f7ff fef8 	bl	8001d38 <FillBuffer>
}
 8001f48:	b004      	add	sp, #16
 8001f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000cdc 	.word	0x20000cdc
 8001f54:	20009c00 	.word	0x20009c00

08001f58 <BSP_LCD_DrawVLine>:
{
 8001f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f5c:	4d12      	ldr	r5, [pc, #72]	; (8001fa8 <BSP_LCD_DrawVLine+0x50>)
{
 8001f5e:	b085      	sub	sp, #20
 8001f60:	460c      	mov	r4, r1
 8001f62:	9203      	str	r2, [sp, #12]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f64:	4911      	ldr	r1, [pc, #68]	; (8001fac <BSP_LCD_DrawVLine+0x54>)
 8001f66:	6daa      	ldr	r2, [r5, #88]	; 0x58
{
 8001f68:	4680      	mov	r8, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f6a:	2034      	movs	r0, #52	; 0x34
 8001f6c:	fb00 1202 	mla	r2, r0, r2, r1
 8001f70:	6dd7      	ldr	r7, [r2, #92]	; 0x5c
 8001f72:	f7ff ff13 	bl	8001d9c <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001f76:	6dae      	ldr	r6, [r5, #88]	; 0x58
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f78:	4681      	mov	r9, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001f7a:	f7ff ff0f 	bl	8001d9c <BSP_LCD_GetXSize>
 8001f7e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8001f80:	9b03      	ldr	r3, [sp, #12]
 8001f82:	210c      	movs	r1, #12
 8001f84:	fb01 5502 	mla	r5, r1, r2, r5
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001f88:	fb09 8404 	mla	r4, r9, r4, r8
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001f8c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001f8e:	9201      	str	r2, [sp, #4]
 8001f90:	3801      	subs	r0, #1
 8001f92:	9000      	str	r0, [sp, #0]
 8001f94:	2201      	movs	r2, #1
 8001f96:	eb07 0184 	add.w	r1, r7, r4, lsl #2
 8001f9a:	4630      	mov	r0, r6
 8001f9c:	f7ff fecc 	bl	8001d38 <FillBuffer>
}
 8001fa0:	b005      	add	sp, #20
 8001fa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fa6:	bf00      	nop
 8001fa8:	20000cdc 	.word	0x20000cdc
 8001fac:	20009c00 	.word	0x20009c00

08001fb0 <BSP_LCD_DrawRect>:
{
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	461e      	mov	r6, r3
 8001fb4:	460d      	mov	r5, r1
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8001fba:	f7ff ffa5 	bl	8001f08 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8001fbe:	19a9      	adds	r1, r5, r6
 8001fc0:	463a      	mov	r2, r7
 8001fc2:	4620      	mov	r0, r4
 8001fc4:	b289      	uxth	r1, r1
 8001fc6:	f7ff ff9f 	bl	8001f08 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8001fca:	4632      	mov	r2, r6
 8001fcc:	4629      	mov	r1, r5
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f7ff ffc2 	bl	8001f58 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001fd4:	19e0      	adds	r0, r4, r7
 8001fd6:	4632      	mov	r2, r6
 8001fd8:	4629      	mov	r1, r5
 8001fda:	b280      	uxth	r0, r0
}
 8001fdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001fe0:	f7ff bfba 	b.w	8001f58 <BSP_LCD_DrawVLine>

08001fe4 <BSP_LCD_FillRect>:
{
 8001fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001fe8:	4d12      	ldr	r5, [pc, #72]	; (8002034 <BSP_LCD_FillRect+0x50>)
{
 8001fea:	9303      	str	r3, [sp, #12]
 8001fec:	4616      	mov	r6, r2
 8001fee:	460c      	mov	r4, r1
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001ff0:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8001ff2:	4911      	ldr	r1, [pc, #68]	; (8002038 <BSP_LCD_FillRect+0x54>)
{
 8001ff4:	4681      	mov	r9, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001ff6:	2034      	movs	r0, #52	; 0x34
 8001ff8:	fb00 1202 	mla	r2, r0, r2, r1
 8001ffc:	f8d2 805c 	ldr.w	r8, [r2, #92]	; 0x5c
 8002000:	f7ff fecc 	bl	8001d9c <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002004:	6daf      	ldr	r7, [r5, #88]	; 0x58
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002006:	4682      	mov	sl, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002008:	f7ff fec8 	bl	8001d9c <BSP_LCD_GetXSize>
 800200c:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800200e:	9b03      	ldr	r3, [sp, #12]
 8002010:	210c      	movs	r1, #12
 8002012:	fb01 5502 	mla	r5, r1, r2, r5
 8002016:	1b80      	subs	r0, r0, r6
 8002018:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800201a:	9201      	str	r2, [sp, #4]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800201c:	fb0a 9404 	mla	r4, sl, r4, r9
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002020:	9000      	str	r0, [sp, #0]
 8002022:	4632      	mov	r2, r6
 8002024:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 8002028:	4638      	mov	r0, r7
 800202a:	f7ff fe85 	bl	8001d38 <FillBuffer>
}
 800202e:	b004      	add	sp, #16
 8002030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002034:	20000cdc 	.word	0x20000cdc
 8002038:	20009c00 	.word	0x20009c00

0800203c <BSP_LCD_DisplayOn>:
  if(LcdDrv->DisplayOn != NULL)
 800203c:	4b02      	ldr	r3, [pc, #8]	; (8002048 <BSP_LCD_DisplayOn+0xc>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	b103      	cbz	r3, 8002046 <BSP_LCD_DisplayOn+0xa>
    LcdDrv->DisplayOn();
 8002044:	4718      	bx	r3
}
 8002046:	4770      	bx	lr
 8002048:	20009ca8 	.word	0x20009ca8

0800204c <BSP_LCD_MspInit>:
{
 800204c:	b530      	push	{r4, r5, lr}
 800204e:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002050:	4b49      	ldr	r3, [pc, #292]	; (8002178 <BSP_LCD_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002052:	4d4a      	ldr	r5, [pc, #296]	; (800217c <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002054:	484a      	ldr	r0, [pc, #296]	; (8002180 <BSP_LCD_MspInit+0x134>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002056:	4c4b      	ldr	r4, [pc, #300]	; (8002184 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002058:	2200      	movs	r2, #0
 800205a:	9201      	str	r2, [sp, #4]
 800205c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800205e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8002062:	6459      	str	r1, [r3, #68]	; 0x44
 8002064:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002066:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 800206a:	9101      	str	r1, [sp, #4]
 800206c:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800206e:	9202      	str	r2, [sp, #8]
 8002070:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002072:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002076:	6319      	str	r1, [r3, #48]	; 0x30
 8002078:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800207a:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800207e:	9102      	str	r1, [sp, #8]
 8002080:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	9203      	str	r2, [sp, #12]
 8002084:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002086:	f041 0101 	orr.w	r1, r1, #1
 800208a:	6319      	str	r1, [r3, #48]	; 0x30
 800208c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800208e:	f001 0101 	and.w	r1, r1, #1
 8002092:	9103      	str	r1, [sp, #12]
 8002094:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	9204      	str	r2, [sp, #16]
 8002098:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800209a:	f041 0102 	orr.w	r1, r1, #2
 800209e:	6319      	str	r1, [r3, #48]	; 0x30
 80020a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020a2:	f001 0102 	and.w	r1, r1, #2
 80020a6:	9104      	str	r1, [sp, #16]
 80020a8:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020aa:	9205      	str	r2, [sp, #20]
 80020ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ae:	f041 0104 	orr.w	r1, r1, #4
 80020b2:	6319      	str	r1, [r3, #48]	; 0x30
 80020b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020b6:	f001 0104 	and.w	r1, r1, #4
 80020ba:	9105      	str	r1, [sp, #20]
 80020bc:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020be:	9206      	str	r2, [sp, #24]
 80020c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020c2:	f041 0108 	orr.w	r1, r1, #8
 80020c6:	6319      	str	r1, [r3, #48]	; 0x30
 80020c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ca:	f001 0108 	and.w	r1, r1, #8
 80020ce:	9106      	str	r1, [sp, #24]
 80020d0:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020d2:	9207      	str	r2, [sp, #28]
 80020d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020d6:	f041 0120 	orr.w	r1, r1, #32
 80020da:	6319      	str	r1, [r3, #48]	; 0x30
 80020dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020de:	f001 0120 	and.w	r1, r1, #32
 80020e2:	9107      	str	r1, [sp, #28]
 80020e4:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80020e6:	9208      	str	r2, [sp, #32]
 80020e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ea:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80020ee:	6319      	str	r1, [r3, #48]	; 0x30
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f6:	9308      	str	r3, [sp, #32]
 80020f8:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80020fa:	f641 0158 	movw	r1, #6232	; 0x1858
 80020fe:	2302      	movs	r3, #2
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002100:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002104:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002108:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800210a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800210c:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800210e:	f000 feb7 	bl	8002e80 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002112:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002116:	a909      	add	r1, sp, #36	; 0x24
 8002118:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800211a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800211c:	f000 feb0 	bl	8002e80 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002120:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002124:	a909      	add	r1, sp, #36	; 0x24
 8002126:	4818      	ldr	r0, [pc, #96]	; (8002188 <BSP_LCD_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002128:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800212a:	f000 fea9 	bl	8002e80 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800212e:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002130:	a909      	add	r1, sp, #36	; 0x24
 8002132:	4816      	ldr	r0, [pc, #88]	; (800218c <BSP_LCD_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002134:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002136:	f000 fea3 	bl	8002e80 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800213a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800213e:	a909      	add	r1, sp, #36	; 0x24
 8002140:	4813      	ldr	r0, [pc, #76]	; (8002190 <BSP_LCD_MspInit+0x144>)
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002142:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002144:	f000 fe9c 	bl	8002e80 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002148:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800214c:	a909      	add	r1, sp, #36	; 0x24
 800214e:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002150:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002152:	f000 fe95 	bl	8002e80 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002156:	2303      	movs	r3, #3
 8002158:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800215a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800215c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800215e:	4628      	mov	r0, r5
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002160:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002162:	f000 fe8d 	bl	8002e80 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002166:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800216a:	a909      	add	r1, sp, #36	; 0x24
 800216c:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800216e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002170:	f000 fe86 	bl	8002e80 <HAL_GPIO_Init>
}
 8002174:	b00f      	add	sp, #60	; 0x3c
 8002176:	bd30      	pop	{r4, r5, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	40020400 	.word	0x40020400
 8002180:	40020000 	.word	0x40020000
 8002184:	40021800 	.word	0x40021800
 8002188:	40020800 	.word	0x40020800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40021400 	.word	0x40021400

08002194 <BSP_LCD_Init>:
{ 
 8002194:	b570      	push	{r4, r5, r6, lr}
    LtdcHandler.Instance = LTDC;
 8002196:	4c21      	ldr	r4, [pc, #132]	; (800221c <BSP_LCD_Init+0x88>)
 8002198:	4b21      	ldr	r3, [pc, #132]	; (8002220 <BSP_LCD_Init+0x8c>)
 800219a:	6023      	str	r3, [r4, #0]
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800219c:	2109      	movs	r1, #9
 800219e:	2301      	movs	r3, #1
 80021a0:	e9c4 1305 	strd	r1, r3, [r4, #20]
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 80021a4:	201d      	movs	r0, #29
 80021a6:	2303      	movs	r3, #3
 80021a8:	e9c4 0307 	strd	r0, r3, [r4, #28]
    LtdcHandler.Init.AccumulatedActiveH = 323;
 80021ac:	f240 150d 	movw	r5, #269	; 0x10d
 80021b0:	f240 1343 	movw	r3, #323	; 0x143
 80021b4:	e9c4 5309 	strd	r5, r3, [r4, #36]	; 0x24
    LtdcHandler.Init.TotalHeigh = 327;
 80021b8:	f240 1617 	movw	r6, #279	; 0x117
 80021bc:	f240 1347 	movw	r3, #327	; 0x147
 80021c0:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80021c4:	4e17      	ldr	r6, [pc, #92]	; (8002224 <BSP_LCD_Init+0x90>)
 80021c6:	2308      	movs	r3, #8
 80021c8:	65f3      	str	r3, [r6, #92]	; 0x5c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80021ca:	23c0      	movs	r3, #192	; 0xc0
 80021cc:	66f3      	str	r3, [r6, #108]	; 0x6c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80021ce:	2304      	movs	r3, #4
    LtdcHandler.Init.Backcolor.Blue= 0;
 80021d0:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80021d2:	6773      	str	r3, [r6, #116]	; 0x74
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80021d4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80021d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021dc:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
    LtdcHandler.Init.Backcolor.Blue= 0;
 80021e0:	86a5      	strh	r5, [r4, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Red= 0;
 80021e2:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80021e6:	f002 f877 	bl	80042d8 <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80021ea:	e9c4 5501 	strd	r5, r5, [r4, #4]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80021ee:	e9c4 5503 	strd	r5, r5, [r4, #12]
    BSP_LCD_MspInit();
 80021f2:	f7ff ff2b 	bl	800204c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80021f6:	4620      	mov	r0, r4
 80021f8:	f001 fcd4 	bl	8003ba4 <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <BSP_LCD_Init+0x94>)
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <BSP_LCD_Init+0x98>)
 8002200:	6013      	str	r3, [r2, #0]
    LcdDrv->Init();
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4798      	blx	r3
    BSP_SDRAM_Init();
 8002206:	f000 fad7 	bl	80027b8 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = pFonts;
 800220a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800220c:	220c      	movs	r2, #12
 800220e:	fb02 6603 	mla	r6, r2, r3, r6
 8002212:	4b07      	ldr	r3, [pc, #28]	; (8002230 <BSP_LCD_Init+0x9c>)
 8002214:	64b3      	str	r3, [r6, #72]	; 0x48
}  
 8002216:	4628      	mov	r0, r5
 8002218:	bd70      	pop	{r4, r5, r6, pc}
 800221a:	bf00      	nop
 800221c:	20009c00 	.word	0x20009c00
 8002220:	40016800 	.word	0x40016800
 8002224:	20000cdc 	.word	0x20000cdc
 8002228:	20009ca8 	.word	0x20009ca8
 800222c:	20000000 	.word	0x20000000
 8002230:	200000a0 	.word	0x200000a0

08002234 <BSP_LCD_DrawPixel>:
{
 8002234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <BSP_LCD_DrawPixel+0x24>)
{
 8002238:	4615      	mov	r5, r2
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800223a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <BSP_LCD_DrawPixel+0x28>)
{
 800223e:	460c      	mov	r4, r1
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002240:	2134      	movs	r1, #52	; 0x34
 8002242:	fb01 2303 	mla	r3, r1, r3, r2
{
 8002246:	4606      	mov	r6, r0
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002248:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 800224a:	f7ff fda7 	bl	8001d9c <BSP_LCD_GetXSize>
 800224e:	fb00 6004 	mla	r0, r0, r4, r6
 8002252:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8002256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002258:	20000cdc 	.word	0x20000cdc
 800225c:	20009c00 	.word	0x20009c00

08002260 <BSP_LCD_DisplayChar>:
{
 8002260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002264:	4f2f      	ldr	r7, [pc, #188]	; (8002324 <BSP_LCD_DisplayChar+0xc4>)
{
 8002266:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002268:	6dbb      	ldr	r3, [r7, #88]	; 0x58
{
 800226a:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800226e:	210c      	movs	r1, #12
 8002270:	fb01 7303 	mla	r3, r1, r3, r7
 8002274:	f1a2 0520 	sub.w	r5, r2, #32
 8002278:	6c99      	ldr	r1, [r3, #72]	; 0x48
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800227a:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 800227e:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8002282:	680a      	ldr	r2, [r1, #0]
 8002284:	f10b 0607 	add.w	r6, fp, #7
 8002288:	10f6      	asrs	r6, r6, #3
  offset = 8 *((width + 7)/8) -  width ;
 800228a:	ebcb 00c6 	rsb	r0, fp, r6, lsl #3
 800228e:	b2c3      	uxtb	r3, r0
 8002290:	9300      	str	r3, [sp, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002292:	fb0a f505 	mul.w	r5, sl, r5
      if(line & (1 << (width- j + offset- 1))) 
 8002296:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800229a:	fb06 2505 	mla	r5, r6, r5, r2
  for(i = 0; i < height; i++)
 800229e:	f04f 0900 	mov.w	r9, #0
      if(line & (1 << (width- j + offset- 1))) 
 80022a2:	9304      	str	r3, [sp, #16]
 80022a4:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 80022a6:	45d1      	cmp	r9, sl
 80022a8:	eb03 0109 	add.w	r1, r3, r9
 80022ac:	b289      	uxth	r1, r1
 80022ae:	d302      	bcc.n	80022b6 <BSP_LCD_DisplayChar+0x56>
}
 80022b0:	b007      	add	sp, #28
 80022b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 80022b6:	2e01      	cmp	r6, #1
 80022b8:	782c      	ldrb	r4, [r5, #0]
 80022ba:	d004      	beq.n	80022c6 <BSP_LCD_DisplayChar+0x66>
 80022bc:	2e02      	cmp	r6, #2
 80022be:	d10e      	bne.n	80022de <BSP_LCD_DisplayChar+0x7e>
      line =  (pchar[0]<< 8) | pchar[1];
 80022c0:	882c      	ldrh	r4, [r5, #0]
 80022c2:	ba64      	rev16	r4, r4
 80022c4:	b2a4      	uxth	r4, r4
      if(line & (1 << (width- j + offset- 1))) 
 80022c6:	9b04      	ldr	r3, [sp, #16]
 80022c8:	9a00      	ldr	r2, [sp, #0]
 80022ca:	4413      	add	r3, r2
    for (j = 0; j < width; j++)
 80022cc:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 80022d0:	9303      	str	r3, [sp, #12]
    for (j = 0; j < width; j++)
 80022d2:	45c3      	cmp	fp, r8
 80022d4:	d80a      	bhi.n	80022ec <BSP_LCD_DisplayChar+0x8c>
  for(i = 0; i < height; i++)
 80022d6:	f109 0901 	add.w	r9, r9, #1
 80022da:	4435      	add	r5, r6
 80022dc:	e7e2      	b.n	80022a4 <BSP_LCD_DisplayChar+0x44>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80022de:	786a      	ldrb	r2, [r5, #1]
 80022e0:	0424      	lsls	r4, r4, #16
 80022e2:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80022e6:	78aa      	ldrb	r2, [r5, #2]
 80022e8:	4314      	orrs	r4, r2
      break;
 80022ea:	e7ec      	b.n	80022c6 <BSP_LCD_DisplayChar+0x66>
      if(line & (1 << (width- j + offset- 1))) 
 80022ec:	9b01      	ldr	r3, [sp, #4]
 80022ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80022f0:	9105      	str	r1, [sp, #20]
 80022f2:	eb03 0008 	add.w	r0, r3, r8
      if(line & (1 << (width- j + offset- 1))) 
 80022f6:	9b03      	ldr	r3, [sp, #12]
 80022f8:	f04f 0c01 	mov.w	ip, #1
 80022fc:	eba3 0e08 	sub.w	lr, r3, r8
 8002300:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002304:	ea1c 0f04 	tst.w	ip, r4
 8002308:	f04f 0c0c 	mov.w	ip, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800230c:	fb0c 7202 	mla	r2, ip, r2, r7
 8002310:	b280      	uxth	r0, r0
 8002312:	bf14      	ite	ne
 8002314:	6c12      	ldrne	r2, [r2, #64]	; 0x40
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002316:	6c52      	ldreq	r2, [r2, #68]	; 0x44
 8002318:	f7ff ff8c 	bl	8002234 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800231c:	f108 0801 	add.w	r8, r8, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002320:	9905      	ldr	r1, [sp, #20]
    for (j = 0; j < width; j++)
 8002322:	e7d6      	b.n	80022d2 <BSP_LCD_DisplayChar+0x72>
 8002324:	20000cdc 	.word	0x20000cdc

08002328 <BSP_LCD_DisplayStringAt>:
{
 8002328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800232c:	4699      	mov	r9, r3
 800232e:	4606      	mov	r6, r0
 8002330:	4688      	mov	r8, r1
 8002332:	4615      	mov	r5, r2
  uint8_t  *ptr = pText;
 8002334:	4613      	mov	r3, r2
 8002336:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 8002338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800233c:	2a00      	cmp	r2, #0
 800233e:	d1fa      	bne.n	8002336 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002340:	4f23      	ldr	r7, [pc, #140]	; (80023d0 <BSP_LCD_DisplayStringAt+0xa8>)
 8002342:	f7ff fd2b 	bl	8001d9c <BSP_LCD_GetXSize>
 8002346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002348:	220c      	movs	r2, #12
 800234a:	fb02 7303 	mla	r3, r2, r3, r7
  switch (mode)
 800234e:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002354:	889a      	ldrh	r2, [r3, #4]
 8002356:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (mode)
 800235a:	d01b      	beq.n	8002394 <BSP_LCD_DisplayStringAt+0x6c>
 800235c:	f1b9 0f02 	cmp.w	r9, #2
 8002360:	d01f      	beq.n	80023a2 <BSP_LCD_DisplayStringAt+0x7a>
 8002362:	3d01      	subs	r5, #1
  uint8_t  *ptr = pText;
 8002364:	f04f 0900 	mov.w	r9, #0
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002368:	f04f 0a0c 	mov.w	sl, #12
 800236c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8002370:	3c00      	subs	r4, #0
 8002372:	bf18      	it	ne
 8002374:	2401      	movne	r4, #1
 8002376:	f7ff fd11 	bl	8001d9c <BSP_LCD_GetXSize>
 800237a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800237c:	fb0a 7303 	mla	r3, sl, r3, r7
 8002380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002382:	889b      	ldrh	r3, [r3, #4]
 8002384:	fb03 0019 	mls	r0, r3, r9, r0
 8002388:	b280      	uxth	r0, r0
 800238a:	4298      	cmp	r0, r3
 800238c:	d300      	bcc.n	8002390 <BSP_LCD_DisplayStringAt+0x68>
 800238e:	b96c      	cbnz	r4, 80023ac <BSP_LCD_DisplayStringAt+0x84>
}
 8002390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002394:	1b2c      	subs	r4, r5, r4
 8002396:	4420      	add	r0, r4
 8002398:	4350      	muls	r0, r2
 800239a:	eb06 0050 	add.w	r0, r6, r0, lsr #1
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800239e:	b286      	uxth	r6, r0
      break;
 80023a0:	e7df      	b.n	8002362 <BSP_LCD_DisplayStringAt+0x3a>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80023a2:	1b2c      	subs	r4, r5, r4
 80023a4:	4404      	add	r4, r0
 80023a6:	fb14 6002 	smlabb	r0, r4, r2, r6
 80023aa:	e7f8      	b.n	800239e <BSP_LCD_DisplayStringAt+0x76>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 80023ac:	4630      	mov	r0, r6
 80023ae:	782a      	ldrb	r2, [r5, #0]
 80023b0:	4641      	mov	r1, r8
 80023b2:	f7ff ff55 	bl	8002260 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80023b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023b8:	fb0a 7303 	mla	r3, sl, r3, r7
    i++;
 80023bc:	f109 0901 	add.w	r9, r9, #1
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80023c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c2:	8898      	ldrh	r0, [r3, #4]
 80023c4:	4430      	add	r0, r6
 80023c6:	b286      	uxth	r6, r0
    i++;
 80023c8:	fa1f f989 	uxth.w	r9, r9
 80023cc:	e7ce      	b.n	800236c <BSP_LCD_DisplayStringAt+0x44>
 80023ce:	bf00      	nop
 80023d0:	20000cdc 	.word	0x20000cdc

080023d4 <BSP_LCD_DrawCircle>:
{
 80023d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023d8:	b087      	sub	sp, #28
 80023da:	e9cd 0101 	strd	r0, r1, [sp, #4]
  d = 3 - (Radius << 1);
 80023de:	0055      	lsls	r5, r2, #1
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80023e0:	4c44      	ldr	r4, [pc, #272]	; (80024f4 <BSP_LCD_DrawCircle+0x120>)
  d = 3 - (Radius << 1);
 80023e2:	f1c5 0503 	rsb	r5, r5, #3
  cury = Radius;
 80023e6:	4616      	mov	r6, r2
  curx = 0;
 80023e8:	f04f 0800 	mov.w	r8, #0
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80023ec:	270c      	movs	r7, #12
 80023ee:	b2b2      	uxth	r2, r6
 80023f0:	9200      	str	r2, [sp, #0]
 80023f2:	9900      	ldr	r1, [sp, #0]
 80023f4:	9a02      	ldr	r2, [sp, #8]
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	1a51      	subs	r1, r2, r1
 80023fa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80023fc:	fa13 f388 	uxtah	r3, r3, r8
 8002400:	fb07 4202 	mla	r2, r7, r2, r4
 8002404:	b29b      	uxth	r3, r3
 8002406:	b289      	uxth	r1, r1
 8002408:	4618      	mov	r0, r3
 800240a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800240c:	9104      	str	r1, [sp, #16]
 800240e:	9305      	str	r3, [sp, #20]
 8002410:	f7ff ff10 	bl	8002234 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8002414:	9b01      	ldr	r3, [sp, #4]
 8002416:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002418:	9904      	ldr	r1, [sp, #16]
 800241a:	fa1f f988 	uxth.w	r9, r8
 800241e:	eba3 0b09 	sub.w	fp, r3, r9
 8002422:	fb07 4202 	mla	r2, r7, r2, r4
 8002426:	fa1f fb8b 	uxth.w	fp, fp
 800242a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800242c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002430:	4658      	mov	r0, fp
 8002432:	f7ff feff 	bl	8002234 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8002436:	e9dd 3200 	ldrd	r3, r2, [sp]
 800243a:	eb03 0a02 	add.w	sl, r3, r2
 800243e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8002442:	1a99      	subs	r1, r3, r2
 8002444:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002446:	fb07 4202 	mla	r2, r7, r2, r4
 800244a:	fa1f fa8a 	uxth.w	sl, sl
 800244e:	b289      	uxth	r1, r1
 8002450:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002452:	9104      	str	r1, [sp, #16]
 8002454:	4650      	mov	r0, sl
 8002456:	f7ff feed 	bl	8002234 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 800245a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800245e:	eba3 0902 	sub.w	r9, r3, r2
 8002462:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002464:	9904      	ldr	r1, [sp, #16]
 8002466:	fb07 4202 	mla	r2, r7, r2, r4
 800246a:	fa1f f989 	uxth.w	r9, r9
 800246e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002470:	4648      	mov	r0, r9
 8002472:	f7ff fedf 	bl	8002234 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002476:	9b00      	ldr	r3, [sp, #0]
 8002478:	9a02      	ldr	r2, [sp, #8]
 800247a:	1899      	adds	r1, r3, r2
 800247c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800247e:	9b05      	ldr	r3, [sp, #20]
 8002480:	fb07 4202 	mla	r2, r7, r2, r4
 8002484:	b289      	uxth	r1, r1
 8002486:	4618      	mov	r0, r3
 8002488:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800248a:	9100      	str	r1, [sp, #0]
 800248c:	f7ff fed2 	bl	8002234 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8002490:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002492:	9900      	ldr	r1, [sp, #0]
 8002494:	fb07 4303 	mla	r3, r7, r3, r4
 8002498:	4658      	mov	r0, fp
 800249a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800249c:	f7ff feca 	bl	8002234 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 80024a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80024a4:	1899      	adds	r1, r3, r2
 80024a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024a8:	fb07 4303 	mla	r3, r7, r3, r4
 80024ac:	b289      	uxth	r1, r1
 80024ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b0:	9100      	str	r1, [sp, #0]
 80024b2:	4650      	mov	r0, sl
 80024b4:	f7ff febe 	bl	8002234 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 80024b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024ba:	9900      	ldr	r1, [sp, #0]
 80024bc:	fb07 4303 	mla	r3, r7, r3, r4
 80024c0:	4648      	mov	r0, r9
 80024c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024c4:	f7ff feb6 	bl	8002234 <BSP_LCD_DrawPixel>
    if (d < 0)
 80024c8:	2d00      	cmp	r5, #0
      d += (curx << 2) + 6;
 80024ca:	bfb5      	itete	lt
 80024cc:	3506      	addlt	r5, #6
      d += ((curx - cury) << 2) + 10;
 80024ce:	eba8 0306 	subge.w	r3, r8, r6
      d += (curx << 2) + 6;
 80024d2:	eb05 0588 	addlt.w	r5, r5, r8, lsl #2
      d += ((curx - cury) << 2) + 10;
 80024d6:	350a      	addge	r5, #10
      cury--;
 80024d8:	bfa8      	it	ge
 80024da:	f106 36ff 	addge.w	r6, r6, #4294967295	; 0xffffffff
    curx++;
 80024de:	f108 0801 	add.w	r8, r8, #1
      d += ((curx - cury) << 2) + 10;
 80024e2:	bfa8      	it	ge
 80024e4:	eb05 0583 	addge.w	r5, r5, r3, lsl #2
  while (curx <= cury)
 80024e8:	4546      	cmp	r6, r8
 80024ea:	d280      	bcs.n	80023ee <BSP_LCD_DrawCircle+0x1a>
}
 80024ec:	b007      	add	sp, #28
 80024ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024f2:	bf00      	nop
 80024f4:	20000cdc 	.word	0x20000cdc

080024f8 <BSP_LCD_FillCircle>:
{
 80024f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  d = 3 - (Radius << 1);
 80024fc:	0054      	lsls	r4, r2, #1
{
 80024fe:	4680      	mov	r8, r0
 8002500:	460e      	mov	r6, r1
 8002502:	4691      	mov	r9, r2
  d = 3 - (Radius << 1);
 8002504:	f1c4 0403 	rsb	r4, r4, #3
  cury = Radius;
 8002508:	4617      	mov	r7, r2
  curx = 0;
 800250a:	2500      	movs	r5, #0
    if(cury > 0) 
 800250c:	b1af      	cbz	r7, 800253a <BSP_LCD_FillCircle+0x42>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 800250e:	b2ba      	uxth	r2, r7
 8002510:	eba8 0002 	sub.w	r0, r8, r2
 8002514:	fa16 f185 	uxtah	r1, r6, r5
 8002518:	0052      	lsls	r2, r2, #1
 800251a:	b280      	uxth	r0, r0
 800251c:	b292      	uxth	r2, r2
 800251e:	b289      	uxth	r1, r1
 8002520:	fa1f fa85 	uxth.w	sl, r5
 8002524:	9201      	str	r2, [sp, #4]
 8002526:	9000      	str	r0, [sp, #0]
 8002528:	f7ff fcee 	bl	8001f08 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 800252c:	4651      	mov	r1, sl
 800252e:	1a71      	subs	r1, r6, r1
 8002530:	9a01      	ldr	r2, [sp, #4]
 8002532:	9800      	ldr	r0, [sp, #0]
 8002534:	b289      	uxth	r1, r1
 8002536:	f7ff fce7 	bl	8001f08 <BSP_LCD_DrawHLine>
    if(curx > 0) 
 800253a:	b1a5      	cbz	r5, 8002566 <BSP_LCD_FillCircle+0x6e>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 800253c:	b2aa      	uxth	r2, r5
 800253e:	b2b9      	uxth	r1, r7
 8002540:	eba8 0002 	sub.w	r0, r8, r2
 8002544:	468a      	mov	sl, r1
 8002546:	0052      	lsls	r2, r2, #1
 8002548:	1a71      	subs	r1, r6, r1
 800254a:	b280      	uxth	r0, r0
 800254c:	b292      	uxth	r2, r2
 800254e:	b289      	uxth	r1, r1
 8002550:	9201      	str	r2, [sp, #4]
 8002552:	9000      	str	r0, [sp, #0]
 8002554:	f7ff fcd8 	bl	8001f08 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8002558:	eb0a 0106 	add.w	r1, sl, r6
 800255c:	9a01      	ldr	r2, [sp, #4]
 800255e:	9800      	ldr	r0, [sp, #0]
 8002560:	b289      	uxth	r1, r1
 8002562:	f7ff fcd1 	bl	8001f08 <BSP_LCD_DrawHLine>
    if (d < 0)
 8002566:	2c00      	cmp	r4, #0
      d += (curx << 2) + 6;
 8002568:	bfb5      	itete	lt
 800256a:	3406      	addlt	r4, #6
      d += ((curx - cury) << 2) + 10;
 800256c:	1beb      	subge	r3, r5, r7
      d += (curx << 2) + 6;
 800256e:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
      d += ((curx - cury) << 2) + 10;
 8002572:	340a      	addge	r4, #10
      cury--;
 8002574:	bfa8      	it	ge
 8002576:	f107 37ff 	addge.w	r7, r7, #4294967295	; 0xffffffff
    curx++;
 800257a:	f105 0501 	add.w	r5, r5, #1
      d += ((curx - cury) << 2) + 10;
 800257e:	bfa8      	it	ge
 8002580:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (curx <= cury)
 8002584:	42af      	cmp	r7, r5
 8002586:	d2c1      	bcs.n	800250c <BSP_LCD_FillCircle+0x14>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002588:	464a      	mov	r2, r9
 800258a:	4631      	mov	r1, r6
 800258c:	4640      	mov	r0, r8
}
 800258e:	b002      	add	sp, #8
 8002590:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002594:	f7ff bf1e 	b.w	80023d4 <BSP_LCD_DrawCircle>

08002598 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002598:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800259c:	4c21      	ldr	r4, [pc, #132]	; (8002624 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800259e:	f104 0510 	add.w	r5, r4, #16
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025a2:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 80025a4:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025a8:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025aa:	4621      	mov	r1, r4
{
 80025ac:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025b2:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025b4:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 80025b8:	e9c4 6802 	strd	r6, r8, [r4, #8]
  __IO uint32_t tmpmrd =0;
 80025bc:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025c0:	f001 ffd4 	bl	800456c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80025c4:	4630      	mov	r0, r6
 80025c6:	f000 f9d7 	bl	8002978 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 80025ca:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80025cc:	4621      	mov	r1, r4
 80025ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d2:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025d4:	e9c4 3700 	strd	r3, r7, [r4]
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 80025d8:	f04f 0a04 	mov.w	sl, #4
  Command.ModeRegisterDefinition  = 0;
 80025dc:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80025e0:	f001 ffc4 	bl	800456c <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80025e4:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025e6:	4621      	mov	r1, r4
 80025e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ec:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80025ee:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 80025f2:	e9c4 a802 	strd	sl, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80025f6:	f001 ffb9 	bl	800456c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80025fa:	f44f 730c 	mov.w	r3, #560	; 0x230
 80025fe:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 8002600:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber       = 1;
 8002602:	60a6      	str	r6, [r4, #8]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002604:	4621      	mov	r1, r4
 8002606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800260a:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800260c:	e9c4 a700 	strd	sl, r7, [r4]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002610:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002612:	f001 ffab 	bl	800456c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002616:	4649      	mov	r1, r9
 8002618:	4628      	mov	r0, r5
}
 800261a:	b002      	add	sp, #8
 800261c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002620:	f001 bfbb 	b.w	800459a <HAL_SDRAM_ProgramRefreshRate>
 8002624:	20000d68 	.word	0x20000d68

08002628 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002628:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800262a:	4606      	mov	r6, r0
{
 800262c:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 800262e:	2800      	cmp	r0, #0
 8002630:	f000 80ad 	beq.w	800278e <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002634:	4b57      	ldr	r3, [pc, #348]	; (8002794 <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002636:	4858      	ldr	r0, [pc, #352]	; (8002798 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8002638:	2400      	movs	r4, #0
 800263a:	9401      	str	r4, [sp, #4]
 800263c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800263e:	f042 0201 	orr.w	r2, r2, #1
 8002642:	639a      	str	r2, [r3, #56]	; 0x38
 8002644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002646:	f002 0201 	and.w	r2, r2, #1
 800264a:	9201      	str	r2, [sp, #4]
 800264c:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 800264e:	9402      	str	r4, [sp, #8]
 8002650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002652:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002656:	631a      	str	r2, [r3, #48]	; 0x30
 8002658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800265a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800265e:	9202      	str	r2, [sp, #8]
 8002660:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002662:	9403      	str	r4, [sp, #12]
 8002664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002666:	f042 0202 	orr.w	r2, r2, #2
 800266a:	631a      	str	r2, [r3, #48]	; 0x30
 800266c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800266e:	f002 0202 	and.w	r2, r2, #2
 8002672:	9203      	str	r2, [sp, #12]
 8002674:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002676:	9404      	str	r4, [sp, #16]
 8002678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800267a:	f042 0204 	orr.w	r2, r2, #4
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
 8002680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002682:	f002 0204 	and.w	r2, r2, #4
 8002686:	9204      	str	r2, [sp, #16]
 8002688:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800268a:	9405      	str	r4, [sp, #20]
 800268c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800268e:	f042 0208 	orr.w	r2, r2, #8
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
 8002694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002696:	f002 0208 	and.w	r2, r2, #8
 800269a:	9205      	str	r2, [sp, #20]
 800269c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800269e:	9406      	str	r4, [sp, #24]
 80026a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026a2:	f042 0210 	orr.w	r2, r2, #16
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
 80026a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026aa:	f002 0210 	and.w	r2, r2, #16
 80026ae:	9206      	str	r2, [sp, #24]
 80026b0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026b2:	9407      	str	r4, [sp, #28]
 80026b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026b6:	f042 0220 	orr.w	r2, r2, #32
 80026ba:	631a      	str	r2, [r3, #48]	; 0x30
 80026bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026be:	f002 0220 	and.w	r2, r2, #32
 80026c2:	9207      	str	r2, [sp, #28]
 80026c4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026c6:	9408      	str	r4, [sp, #32]
 80026c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	9308      	str	r3, [sp, #32]
 80026d8:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80026da:	2302      	movs	r3, #2
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80026dc:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80026e0:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80026e2:	230c      	movs	r3, #12
 80026e4:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80026e6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80026e8:	2360      	movs	r3, #96	; 0x60
 80026ea:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80026ec:	f000 fbc8 	bl	8002e80 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80026f0:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80026f2:	482a      	ldr	r0, [pc, #168]	; (800279c <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80026f4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80026f6:	a909      	add	r1, sp, #36	; 0x24
 80026f8:	f000 fbc2 	bl	8002e80 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80026fc:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002700:	4827      	ldr	r0, [pc, #156]	; (80027a0 <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002702:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002704:	a909      	add	r1, sp, #36	; 0x24
 8002706:	f000 fbbb 	bl	8002e80 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800270a:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800270e:	4825      	ldr	r0, [pc, #148]	; (80027a4 <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002710:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002712:	a909      	add	r1, sp, #36	; 0x24
 8002714:	f000 fbb4 	bl	8002e80 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8002718:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800271c:	4822      	ldr	r0, [pc, #136]	; (80027a8 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800271e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002720:	a909      	add	r1, sp, #36	; 0x24
 8002722:	f000 fbad 	bl	8002e80 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002726:	f248 1333 	movw	r3, #33075	; 0x8133
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800272a:	4820      	ldr	r0, [pc, #128]	; (80027ac <BSP_SDRAM_MspInit+0x184>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800272c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800272e:	a909      	add	r1, sp, #36	; 0x24
 8002730:	f000 fba6 	bl	8002e80 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002734:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <BSP_SDRAM_MspInit+0x188>)
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	f44f 7200 	mov.w	r2, #512	; 0x200
 800273c:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002740:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002744:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002748:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800274c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8002750:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002754:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002758:	461d      	mov	r5, r3
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800275a:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800275e:	2203      	movs	r2, #3
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002760:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <BSP_SDRAM_MspInit+0x18c>)
 8002766:	f845 2f44 	str.w	r2, [r5, #68]!
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800276a:	675c      	str	r4, [r3, #116]	; 0x74
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800276c:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800276e:	6335      	str	r5, [r6, #48]	; 0x30
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002770:	649c      	str	r4, [r3, #72]	; 0x48
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002772:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dmaHandle);
 8002774:	f000 fa0c 	bl	8002b90 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8002778:	4628      	mov	r0, r5
 800277a:	f000 f989 	bl	8002a90 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800277e:	2038      	movs	r0, #56	; 0x38
 8002780:	4622      	mov	r2, r4
 8002782:	210f      	movs	r1, #15
 8002784:	f000 f91e 	bl	80029c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002788:	2038      	movs	r0, #56	; 0x38
 800278a:	f000 f94d 	bl	8002a28 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800278e:	b00e      	add	sp, #56	; 0x38
 8002790:	bd70      	pop	{r4, r5, r6, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	40020400 	.word	0x40020400
 800279c:	40020800 	.word	0x40020800
 80027a0:	40020c00 	.word	0x40020c00
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40021400 	.word	0x40021400
 80027ac:	40021800 	.word	0x40021800
 80027b0:	20000d68 	.word	0x20000d68
 80027b4:	40026410 	.word	0x40026410

080027b8 <BSP_SDRAM_Init>:
{
 80027b8:	b510      	push	{r4, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80027ba:	4c1b      	ldr	r4, [pc, #108]	; (8002828 <BSP_SDRAM_Init+0x70>)
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <BSP_SDRAM_Init+0x74>)
 80027be:	6123      	str	r3, [r4, #16]
  Timing.SelfRefreshTime      = 4;
 80027c0:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 80027c2:	2302      	movs	r3, #2
 80027c4:	2107      	movs	r1, #7
  Timing.RowCycleDelay        = 7;
 80027c6:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  Timing.ExitSelfRefreshDelay = 7;
 80027ca:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 80027ce:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80027d2:	2100      	movs	r1, #0
  Timing.RCDDelay             = 2;
 80027d4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80027d8:	2301      	movs	r3, #1
 80027da:	e9c4 3105 	strd	r3, r1, [r4, #20]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80027de:	2010      	movs	r0, #16
 80027e0:	2340      	movs	r3, #64	; 0x40
 80027e2:	e9c4 0308 	strd	r0, r3, [r4, #32]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80027e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80027ea:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80027ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80027f2:	e9c4 310c 	strd	r3, r1, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80027f6:	f104 0010 	add.w	r0, r4, #16
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80027fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80027fe:	61e2      	str	r2, [r4, #28]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002800:	63a3      	str	r3, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002802:	f7ff ff11 	bl	8002628 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002806:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 800280a:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 800280e:	f001 fe8d 	bl	800452c <HAL_SDRAM_Init>
 8002812:	4c07      	ldr	r4, [pc, #28]	; (8002830 <BSP_SDRAM_Init+0x78>)
 8002814:	3800      	subs	r0, #0
 8002816:	bf18      	it	ne
 8002818:	2001      	movne	r0, #1
 800281a:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800281c:	f240 506a 	movw	r0, #1386	; 0x56a
 8002820:	f7ff feba 	bl	8002598 <BSP_SDRAM_Initialization_sequence>
}
 8002824:	7820      	ldrb	r0, [r4, #0]
 8002826:	bd10      	pop	{r4, pc}
 8002828:	20000d68 	.word	0x20000d68
 800282c:	a0000140 	.word	0xa0000140
 8002830:	200000c8 	.word	0x200000c8

08002834 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8002834:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = TS_ERROR;

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8002836:	4c0b      	ldr	r4, [pc, #44]	; (8002864 <BSP_TS_Init+0x30>)
  TsYBoundary = YSize;

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002838:	4d0b      	ldr	r5, [pc, #44]	; (8002868 <BSP_TS_Init+0x34>)
  TsXBoundary = XSize;
 800283a:	8020      	strh	r0, [r4, #0]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 800283c:	686b      	ldr	r3, [r5, #4]
  TsYBoundary = YSize;
 800283e:	8061      	strh	r1, [r4, #2]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8002840:	2082      	movs	r0, #130	; 0x82
 8002842:	4798      	blx	r3
 8002844:	f640 0311 	movw	r3, #2065	; 0x811
 8002848:	4298      	cmp	r0, r3
 800284a:	d109      	bne.n	8002860 <BSP_TS_Init+0x2c>
  }

  if(ret == TS_OK)
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 800284c:	682b      	ldr	r3, [r5, #0]
    TsDrv = &stmpe811_ts_drv;
 800284e:	6065      	str	r5, [r4, #4]
    TsDrv->Init(TS_I2C_ADDRESS);
 8002850:	2082      	movs	r0, #130	; 0x82
 8002852:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8002854:	6863      	ldr	r3, [r4, #4]
 8002856:	2082      	movs	r0, #130	; 0x82
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4798      	blx	r3
    ret = TS_OK;
 800285c:	2000      	movs	r0, #0
  }

  return ret;
}
 800285e:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = TS_ERROR;
 8002860:	2001      	movs	r0, #1
 8002862:	e7fc      	b.n	800285e <BSP_TS_Init+0x2a>
 8002864:	20000e88 	.word	0x20000e88
 8002868:	20000064 	.word	0x20000064

0800286c <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 800286c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 800286e:	4c2b      	ldr	r4, [pc, #172]	; (800291c <BSP_TS_GetState+0xb0>)
 8002870:	6863      	ldr	r3, [r4, #4]
{
 8002872:	4605      	mov	r5, r0
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2082      	movs	r0, #130	; 0x82
 8002878:	4798      	blx	r3
 800287a:	b280      	uxth	r0, r0
 800287c:	8028      	strh	r0, [r5, #0]
  
  if(TsState->TouchDetected)
 800287e:	2800      	cmp	r0, #0
 8002880:	d041      	beq.n	8002906 <BSP_TS_GetState+0x9a>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8002882:	6863      	ldr	r3, [r4, #4]
 8002884:	f10d 0206 	add.w	r2, sp, #6
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	a901      	add	r1, sp, #4
 800288c:	2082      	movs	r0, #130	; 0x82
 800288e:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8002890:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8002894:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
    
    /* Y value second correction */
    yr = y / 11;
 8002898:	b292      	uxth	r2, r2
 800289a:	230b      	movs	r3, #11
 800289c:	fbb2 f2f3 	udiv	r2, r2, r3
    
    // Tobias own flip
    yr = 320 - yr;
 80028a0:	f5c2 72a0 	rsb	r2, r2, #320	; 0x140
 80028a4:	b292      	uxth	r2, r2

    /* Return y position value */
    if(yr <= 0)
 80028a6:	b12a      	cbz	r2, 80028b4 <BSP_TS_GetState+0x48>
    {
      yr = 0;
    }
    else if (yr > TsYBoundary)
 80028a8:	8863      	ldrh	r3, [r4, #2]
 80028aa:	4293      	cmp	r3, r2
    {
      yr = TsYBoundary - 1;
 80028ac:	bf3c      	itt	cc
 80028ae:	f103 32ff 	addcc.w	r2, r3, #4294967295	; 0xffffffff
 80028b2:	b292      	uxthcc	r2, r2
    else
    {}
    y = yr;
    
    /* X value first correction */
    if(x <= 3000)
 80028b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80028b8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80028bc:	428b      	cmp	r3, r1
 80028be:	d824      	bhi.n	800290a <BSP_TS_GetState+0x9e>
    {
      x = 3870 - x;
 80028c0:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80028c4:	330e      	adds	r3, #14
 80028c6:	b29b      	uxth	r3, r3
    {
      x = 3800 - x;
    }
    
    /* X value second correction */  
    xr = x / 15;
 80028c8:	210f      	movs	r1, #15
 80028ca:	fbb3 f3f1 	udiv	r3, r3, r1
    /* Return X position value */
    if(xr <= 0)
    {
      xr = 0;
    }
    else if (xr > TsXBoundary)
 80028ce:	8821      	ldrh	r1, [r4, #0]
 80028d0:	4299      	cmp	r1, r3
 80028d2:	d201      	bcs.n	80028d8 <BSP_TS_GetState+0x6c>
    {
      xr = TsXBoundary - 1;
 80028d4:	1e4b      	subs	r3, r1, #1
 80028d6:	b29b      	uxth	r3, r3
    }
    else 
    {}
    
    x = xr;
    xDiff = x > _x? (x - _x): (_x - x);
 80028d8:	68a0      	ldr	r0, [r4, #8]
    yDiff = y > _y? (y - _y): (_y - y); 
 80028da:	68e6      	ldr	r6, [r4, #12]
    xDiff = x > _x? (x - _x): (_x - x);
 80028dc:	4283      	cmp	r3, r0
 80028de:	b281      	uxth	r1, r0
 80028e0:	bf8c      	ite	hi
 80028e2:	1a59      	subhi	r1, r3, r1
 80028e4:	1ac9      	subls	r1, r1, r3
 80028e6:	b2b0      	uxth	r0, r6
    yDiff = y > _y? (y - _y): (_y - y); 
 80028e8:	42b2      	cmp	r2, r6
 80028ea:	bf8c      	ite	hi
 80028ec:	1a10      	subhi	r0, r2, r0
 80028ee:	1a80      	subls	r0, r0, r2
    xDiff = x > _x? (x - _x): (_x - x);
 80028f0:	b289      	uxth	r1, r1
    yDiff = y > _y? (y - _y): (_y - y); 
 80028f2:	b280      	uxth	r0, r0
    
    if (xDiff + yDiff > 5)
 80028f4:	4401      	add	r1, r0
 80028f6:	2905      	cmp	r1, #5
    {
      _x = x;
      _y = y;
 80028f8:	bfc8      	it	gt
 80028fa:	e9c4 3202 	strdgt	r3, r2, [r4, #8]
    }
    
    /* Update the X position */
    TsState->X = _x;
 80028fe:	68a3      	ldr	r3, [r4, #8]
 8002900:	806b      	strh	r3, [r5, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8002902:	68e3      	ldr	r3, [r4, #12]
 8002904:	80ab      	strh	r3, [r5, #4]
  }
}
 8002906:	b002      	add	sp, #8
 8002908:	bd70      	pop	{r4, r5, r6, pc}
      x = 3800 - x;
 800290a:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 800290e:	3308      	adds	r3, #8
 8002910:	b29b      	uxth	r3, r3
    if(xr <= 0)
 8002912:	2b0e      	cmp	r3, #14
 8002914:	d8d8      	bhi.n	80028c8 <BSP_TS_GetState+0x5c>
      xr = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	e7de      	b.n	80028d8 <BSP_TS_GetState+0x6c>
 800291a:	bf00      	nop
 800291c:	20000e88 	.word	0x20000e88

08002920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002920:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <HAL_Init+0x30>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002932:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800293a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800293c:	2003      	movs	r0, #3
 800293e:	f000 f82f 	bl	80029a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002942:	2000      	movs	r0, #0
 8002944:	f003 fd5a 	bl	80063fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002948:	f003 fd3c 	bl	80063c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800294c:	2000      	movs	r0, #0
 800294e:	bd08      	pop	{r3, pc}
 8002950:	40023c00 	.word	0x40023c00

08002954 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002954:	4a03      	ldr	r2, [pc, #12]	; (8002964 <HAL_IncTick+0x10>)
 8002956:	4b04      	ldr	r3, [pc, #16]	; (8002968 <HAL_IncTick+0x14>)
 8002958:	6811      	ldr	r1, [r2, #0]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	440b      	add	r3, r1
 800295e:	6013      	str	r3, [r2, #0]
}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	20009cac 	.word	0x20009cac
 8002968:	200000cc 	.word	0x200000cc

0800296c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800296c:	4b01      	ldr	r3, [pc, #4]	; (8002974 <HAL_GetTick+0x8>)
 800296e:	6818      	ldr	r0, [r3, #0]
}
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20009cac 	.word	0x20009cac

08002978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002978:	b538      	push	{r3, r4, r5, lr}
 800297a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800297c:	f7ff fff6 	bl	800296c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002980:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002982:	bf1c      	itt	ne
 8002984:	4b05      	ldrne	r3, [pc, #20]	; (800299c <HAL_Delay+0x24>)
 8002986:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002988:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800298a:	bf18      	it	ne
 800298c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800298e:	f7ff ffed 	bl	800296c <HAL_GetTick>
 8002992:	1b43      	subs	r3, r0, r5
 8002994:	42a3      	cmp	r3, r4
 8002996:	d3fa      	bcc.n	800298e <HAL_Delay+0x16>
  {
  }
}
 8002998:	bd38      	pop	{r3, r4, r5, pc}
 800299a:	bf00      	nop
 800299c:	200000cc 	.word	0x200000cc

080029a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a0:	4907      	ldr	r1, [pc, #28]	; (80029c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80029a2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029aa:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029b0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80029bc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c4:	4b16      	ldr	r3, [pc, #88]	; (8002a20 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c6:	b530      	push	{r4, r5, lr}
 80029c8:	68dc      	ldr	r4, [r3, #12]
 80029ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ce:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d4:	2d04      	cmp	r5, #4
 80029d6:	bf28      	it	cs
 80029d8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e0:	bf8c      	ite	hi
 80029e2:	3c03      	subhi	r4, #3
 80029e4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e6:	fa03 f505 	lsl.w	r5, r3, r5
 80029ea:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029ee:	40a3      	lsls	r3, r4
 80029f0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80029f6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	bfac      	ite	ge
 80029fe:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a02:	4a08      	ldrlt	r2, [pc, #32]	; (8002a24 <HAL_NVIC_SetPriority+0x60>)
 8002a04:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002a08:	bfb8      	it	lt
 8002a0a:	f000 000f 	andlt.w	r0, r0, #15
 8002a0e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a10:	bfaa      	itet	ge
 8002a12:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a16:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a18:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002a1c:	bd30      	pop	{r4, r5, pc}
 8002a1e:	bf00      	nop
 8002a20:	e000ed00 	.word	0xe000ed00
 8002a24:	e000ed14 	.word	0xe000ed14

08002a28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002a28:	2800      	cmp	r0, #0
 8002a2a:	db08      	blt.n	8002a3e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2c:	0942      	lsrs	r2, r0, #5
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f000 001f 	and.w	r0, r0, #31
 8002a34:	fa03 f000 	lsl.w	r0, r3, r0
 8002a38:	4b01      	ldr	r3, [pc, #4]	; (8002a40 <HAL_NVIC_EnableIRQ+0x18>)
 8002a3a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002a3e:	4770      	bx	lr
 8002a40:	e000e100 	.word	0xe000e100

08002a44 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002a44:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002a46:	4604      	mov	r4, r0
 8002a48:	b150      	cbz	r0, 8002a60 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002a4a:	7943      	ldrb	r3, [r0, #5]
 8002a4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a50:	b913      	cbnz	r3, 8002a58 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002a52:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002a54:	f002 fca0 	bl	8005398 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8002a5c:	2000      	movs	r0, #0
}
 8002a5e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a60:	2001      	movs	r0, #1
 8002a62:	e7fc      	b.n	8002a5e <HAL_CRC_Init+0x1a>

08002a64 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a64:	6803      	ldr	r3, [r0, #0]
{
 8002a66:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a68:	4c08      	ldr	r4, [pc, #32]	; (8002a8c <DMA_CalcBaseAndBitshift+0x28>)
{
 8002a6a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a6c:	b2d9      	uxtb	r1, r3
 8002a6e:	3910      	subs	r1, #16
 8002a70:	2018      	movs	r0, #24
 8002a72:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a76:	5c20      	ldrb	r0, [r4, r0]
 8002a78:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a7a:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002a7e:	f020 0003 	bic.w	r0, r0, #3
 8002a82:	295f      	cmp	r1, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a84:	bf88      	it	hi
 8002a86:	3004      	addhi	r0, #4
 8002a88:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002a8a:	bd10      	pop	{r4, pc}
 8002a8c:	0801707c 	.word	0x0801707c

08002a90 <HAL_DMA_Init>:
{
 8002a90:	b570      	push	{r4, r5, r6, lr}
 8002a92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a94:	f7ff ff6a 	bl	800296c <HAL_GetTick>
 8002a98:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002a9a:	2c00      	cmp	r4, #0
 8002a9c:	d073      	beq.n	8002b86 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002aa4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002aac:	6813      	ldr	r3, [r2, #0]
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab4:	6821      	ldr	r1, [r4, #0]
 8002ab6:	680b      	ldr	r3, [r1, #0]
 8002ab8:	07d8      	lsls	r0, r3, #31
 8002aba:	d42f      	bmi.n	8002b1c <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8002abc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002abe:	4d33      	ldr	r5, [pc, #204]	; (8002b8c <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ac2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ac4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	68e2      	ldr	r2, [r4, #12]
 8002acc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ace:	6922      	ldr	r2, [r4, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	6962      	ldr	r2, [r4, #20]
 8002ad4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ad6:	69e2      	ldr	r2, [r4, #28]
 8002ad8:	4303      	orrs	r3, r0
 8002ada:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002adc:	6a22      	ldr	r2, [r4, #32]
 8002ade:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ae0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002ae2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ae4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ae8:	bf02      	ittt	eq
 8002aea:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002aee:	4335      	orreq	r5, r6
 8002af0:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8002af2:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002af4:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af6:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002af8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002afc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b00:	d133      	bne.n	8002b6a <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8002b02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b04:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002b06:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b08:	b37d      	cbz	r5, 8002b6a <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b0a:	b990      	cbnz	r0, 8002b32 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002b0c:	2a01      	cmp	r2, #1
 8002b0e:	d021      	beq.n	8002b54 <HAL_DMA_Init+0xc4>
 8002b10:	f032 0202 	bics.w	r2, r2, #2
 8002b14:	d129      	bne.n	8002b6a <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b16:	01ea      	lsls	r2, r5, #7
 8002b18:	d527      	bpl.n	8002b6a <HAL_DMA_Init+0xda>
 8002b1a:	e01e      	b.n	8002b5a <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b1c:	f7ff ff26 	bl	800296c <HAL_GetTick>
 8002b20:	1b40      	subs	r0, r0, r5
 8002b22:	2805      	cmp	r0, #5
 8002b24:	d9c6      	bls.n	8002ab4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b26:	2320      	movs	r3, #32
 8002b28:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b2a:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002b2c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002b30:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b32:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002b36:	d114      	bne.n	8002b62 <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002b38:	2a03      	cmp	r2, #3
 8002b3a:	d816      	bhi.n	8002b6a <HAL_DMA_Init+0xda>
 8002b3c:	a001      	add	r0, pc, #4	; (adr r0, 8002b44 <HAL_DMA_Init+0xb4>)
 8002b3e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002b42:	bf00      	nop
 8002b44:	08002b5b 	.word	0x08002b5b
 8002b48:	08002b17 	.word	0x08002b17
 8002b4c:	08002b5b 	.word	0x08002b5b
 8002b50:	08002b55 	.word	0x08002b55
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b54:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002b58:	d107      	bne.n	8002b6a <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b5a:	2340      	movs	r3, #64	; 0x40
 8002b5c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002b5e:	2001      	movs	r0, #1
 8002b60:	e7e4      	b.n	8002b2c <HAL_DMA_Init+0x9c>
    switch (tmp)
 8002b62:	2a02      	cmp	r2, #2
 8002b64:	d9f9      	bls.n	8002b5a <HAL_DMA_Init+0xca>
 8002b66:	2a03      	cmp	r2, #3
 8002b68:	d0d5      	beq.n	8002b16 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002b6a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7ff ff79 	bl	8002a64 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b72:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002b74:	233f      	movs	r3, #63	; 0x3f
 8002b76:	4093      	lsls	r3, r2
 8002b78:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002b80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002b84:	e7d4      	b.n	8002b30 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8002b86:	2001      	movs	r0, #1
 8002b88:	e7d2      	b.n	8002b30 <HAL_DMA_Init+0xa0>
 8002b8a:	bf00      	nop
 8002b8c:	f010803f 	.word	0xf010803f

08002b90 <HAL_DMA_DeInit>:
{
 8002b90:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002b92:	4605      	mov	r5, r0
 8002b94:	b320      	cbz	r0, 8002be0 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002b96:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	b2dc      	uxtb	r4, r3
 8002b9e:	d01d      	beq.n	8002bdc <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002ba0:	6803      	ldr	r3, [r0, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8002ba8:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002baa:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8002bac:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8002bae:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002bb0:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8002bb2:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8002bb4:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8002bb6:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8002bb8:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bba:	f7ff ff53 	bl	8002a64 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bbe:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002bc0:	233f      	movs	r3, #63	; 0x3f
 8002bc2:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8002bc4:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8002bc8:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 8002bcc:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd0:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd2:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8002bd4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8002bd8:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 8002bdc:	4620      	mov	r0, r4
 8002bde:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002be0:	2401      	movs	r4, #1
 8002be2:	e7fb      	b.n	8002bdc <HAL_DMA_DeInit+0x4c>

08002be4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002be4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8002be6:	6804      	ldr	r4, [r0, #0]
 8002be8:	9d04      	ldr	r5, [sp, #16]
 8002bea:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8002bec:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8002bf0:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8002bf4:	4333      	orrs	r3, r6
 8002bf6:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002bf8:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8002bfa:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8002bfc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c00:	d130      	bne.n	8002c64 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002c02:	6886      	ldr	r6, [r0, #8]
 8002c04:	b11e      	cbz	r6, 8002c0e <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002c06:	2e01      	cmp	r6, #1
 8002c08:	d103      	bne.n	8002c12 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002c0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002c0e:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002c10:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002c12:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002c14:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002c18:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002c1c:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002c1e:	d107      	bne.n	8002c30 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8002c20:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002c22:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002c24:	02db      	lsls	r3, r3, #11
 8002c26:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8002c2a:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8002c2e:	e7ee      	b.n	8002c0e <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002c30:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002c32:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002c36:	d10a      	bne.n	8002c4e <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8002c38:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002c3a:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002c3c:	029b      	lsls	r3, r3, #10
 8002c3e:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8002c42:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 8002c46:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002c48:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002c4c:	e7df      	b.n	8002c0e <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8002c4e:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002c50:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002c52:	0209      	lsls	r1, r1, #8
 8002c54:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002c58:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8002c5c:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002c5e:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8002c62:	e7d4      	b.n	8002c0e <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002c64:	60e1      	str	r1, [r4, #12]
}
 8002c66:	e7d3      	b.n	8002c10 <DMA2D_SetConfig+0x2c>

08002c68 <HAL_DMA2D_Init>:
{
 8002c68:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	b330      	cbz	r0, 8002cbc <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c6e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c72:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c76:	b91b      	cbnz	r3, 8002c80 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8002c78:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002c7c:	f002 fbc4 	bl	8005408 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002c80:	6822      	ldr	r2, [r4, #0]
 8002c82:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c84:	2302      	movs	r3, #2
 8002c86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002c8a:	6813      	ldr	r3, [r2, #0]
 8002c8c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002c94:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002c96:	68a1      	ldr	r1, [r4, #8]
 8002c98:	f023 0307 	bic.w	r3, r3, #7
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002ca0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002ca2:	68e1      	ldr	r1, [r4, #12]
 8002ca4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ca8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cac:	430b      	orrs	r3, r1
 8002cae:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002cb0:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002cb2:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002cb4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002cb6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002cba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	e7fc      	b.n	8002cba <HAL_DMA2D_Init+0x52>

08002cc0 <HAL_DMA2D_Start>:
{
 8002cc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8002cc2:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 8002cc6:	2d01      	cmp	r5, #1
{
 8002cc8:	4604      	mov	r4, r0
 8002cca:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hdma2d);
 8002cce:	d00f      	beq.n	8002cf0 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002cd0:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8002cd4:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002cd6:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 8002cd8:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002cdc:	9500      	str	r5, [sp, #0]
 8002cde:	f7ff ff81 	bl	8002be4 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8002ce2:	6822      	ldr	r2, [r4, #0]
 8002ce4:	6813      	ldr	r3, [r2, #0]
 8002ce6:	4333      	orrs	r3, r6
 8002ce8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002cea:	2000      	movs	r0, #0
}
 8002cec:	b002      	add	sp, #8
 8002cee:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8002cf0:	4628      	mov	r0, r5
 8002cf2:	e7fb      	b.n	8002cec <HAL_DMA2D_Start+0x2c>

08002cf4 <HAL_DMA2D_PollForTransfer>:
{
 8002cf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002cfa:	6803      	ldr	r3, [r0, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	07db      	lsls	r3, r3, #31
{
 8002d00:	4604      	mov	r4, r0
 8002d02:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002d04:	d417      	bmi.n	8002d36 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002d06:	6822      	ldr	r2, [r4, #0]
 8002d08:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002d0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d0c:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002d0e:	069e      	lsls	r6, r3, #26
 8002d10:	d506      	bpl.n	8002d20 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8002d12:	f7ff fe2b 	bl	800296c <HAL_GetTick>
 8002d16:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002d18:	6823      	ldr	r3, [r4, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	06d2      	lsls	r2, r2, #27
 8002d1e:	d543      	bpl.n	8002da8 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	2212      	movs	r2, #18
 8002d24:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8002d26:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002d2e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002d32:	b002      	add	sp, #8
 8002d34:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002d36:	f7ff fe19 	bl	800296c <HAL_GetTick>
 8002d3a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	0792      	lsls	r2, r2, #30
 8002d42:	d4e0      	bmi.n	8002d06 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002d48:	9a01      	ldr	r2, [sp, #4]
 8002d4a:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002d4e:	d017      	beq.n	8002d80 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d50:	9a01      	ldr	r2, [sp, #4]
 8002d52:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d54:	bf42      	ittt	mi
 8002d56:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002d58:	f042 0202 	orrmi.w	r2, r2, #2
 8002d5c:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002d5e:	9a01      	ldr	r2, [sp, #4]
 8002d60:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002d62:	bf42      	ittt	mi
 8002d64:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002d66:	f042 0201 	orrmi.w	r2, r2, #1
 8002d6a:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002d6c:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002d6e:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d70:	2304      	movs	r3, #4
 8002d72:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002d76:	2300      	movs	r3, #0
 8002d78:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	e7d8      	b.n	8002d32 <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 8002d80:	1c69      	adds	r1, r5, #1
 8002d82:	d0dc      	beq.n	8002d3e <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d84:	f7ff fdf2 	bl	800296c <HAL_GetTick>
 8002d88:	1b80      	subs	r0, r0, r6
 8002d8a:	42a8      	cmp	r0, r5
 8002d8c:	d801      	bhi.n	8002d92 <HAL_DMA2D_PollForTransfer+0x9e>
 8002d8e:	2d00      	cmp	r5, #0
 8002d90:	d1d4      	bne.n	8002d3c <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002d92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d94:	f043 0320 	orr.w	r3, r3, #32
 8002d98:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002d9a:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8002d9c:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002d9e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002da2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002da6:	e7c4      	b.n	8002d32 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002dac:	9a01      	ldr	r2, [sp, #4]
 8002dae:	f012 0f29 	tst.w	r2, #41	; 0x29
 8002db2:	d016      	beq.n	8002de2 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002db4:	9a01      	ldr	r2, [sp, #4]
 8002db6:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002db8:	bf42      	ittt	mi
 8002dba:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002dbc:	f042 0204 	orrmi.w	r2, r2, #4
 8002dc0:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002dc2:	9a01      	ldr	r2, [sp, #4]
 8002dc4:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002dc6:	bf42      	ittt	mi
 8002dc8:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002dca:	f042 0202 	orrmi.w	r2, r2, #2
 8002dce:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002dd0:	9a01      	ldr	r2, [sp, #4]
 8002dd2:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002dd4:	bf42      	ittt	mi
 8002dd6:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002dd8:	f042 0201 	orrmi.w	r2, r2, #1
 8002ddc:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002dde:	2229      	movs	r2, #41	; 0x29
 8002de0:	e7c5      	b.n	8002d6e <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 8002de2:	1c69      	adds	r1, r5, #1
 8002de4:	d099      	beq.n	8002d1a <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002de6:	f7ff fdc1 	bl	800296c <HAL_GetTick>
 8002dea:	1b80      	subs	r0, r0, r6
 8002dec:	42a8      	cmp	r0, r5
 8002dee:	d8d0      	bhi.n	8002d92 <HAL_DMA2D_PollForTransfer+0x9e>
 8002df0:	2d00      	cmp	r5, #0
 8002df2:	d191      	bne.n	8002d18 <HAL_DMA2D_PollForTransfer+0x24>
 8002df4:	e7cd      	b.n	8002d92 <HAL_DMA2D_PollForTransfer+0x9e>
	...

08002df8 <HAL_DMA2D_ConfigLayer>:
{
 8002df8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 8002dfa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	f04f 0302 	mov.w	r3, #2
 8002e04:	d02b      	beq.n	8002e5e <HAL_DMA2D_ConfigLayer+0x66>
 8002e06:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002e08:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8002e0c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002e10:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002e14:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 8002e18:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8002e1a:	4f18      	ldr	r7, [pc, #96]	; (8002e7c <HAL_DMA2D_ConfigLayer+0x84>)
 8002e1c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e20:	3c09      	subs	r4, #9
 8002e22:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002e24:	bf9c      	itt	ls
 8002e26:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
 8002e2a:	431a      	orrls	r2, r3
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002e2c:	ea4f 1601 	mov.w	r6, r1, lsl #4
 8002e30:	6803      	ldr	r3, [r0, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002e32:	bf88      	it	hi
 8002e34:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002e38:	b999      	cbnz	r1, 8002e62 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002e3a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e3c:	4039      	ands	r1, r7
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e42:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002e44:	6982      	ldr	r2, [r0, #24]
 8002e46:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e48:	d803      	bhi.n	8002e52 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002e4a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002e4c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002e50:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e52:	2301      	movs	r3, #1
 8002e54:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8002e5e:	4618      	mov	r0, r3
}
 8002e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002e62:	69d9      	ldr	r1, [r3, #28]
 8002e64:	4039      	ands	r1, r7
 8002e66:	430a      	orrs	r2, r1
 8002e68:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002e6a:	1982      	adds	r2, r0, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002e6c:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002e6e:	6992      	ldr	r2, [r2, #24]
 8002e70:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002e72:	bf9c      	itt	ls
 8002e74:	f025 457f 	bicls.w	r5, r5, #4278190080	; 0xff000000
 8002e78:	621d      	strls	r5, [r3, #32]
 8002e7a:	e7ea      	b.n	8002e52 <HAL_DMA2D_ConfigLayer+0x5a>
 8002e7c:	00fcfff0 	.word	0x00fcfff0

08002e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e84:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8003048 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e88:	4a6d      	ldr	r2, [pc, #436]	; (8003040 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e8c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002e8e:	2401      	movs	r4, #1
 8002e90:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e92:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002e96:	43ac      	bics	r4, r5
 8002e98:	f040 80b9 	bne.w	800300e <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e9c:	684d      	ldr	r5, [r1, #4]
 8002e9e:	f005 0403 	and.w	r4, r5, #3
 8002ea2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8002ea6:	2603      	movs	r6, #3
 8002ea8:	1e67      	subs	r7, r4, #1
 8002eaa:	fa06 f608 	lsl.w	r6, r6, r8
 8002eae:	2f01      	cmp	r7, #1
 8002eb0:	ea6f 0606 	mvn.w	r6, r6
 8002eb4:	d834      	bhi.n	8002f20 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002eb6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002eb8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ebc:	68cf      	ldr	r7, [r1, #12]
 8002ebe:	fa07 f708 	lsl.w	r7, r7, r8
 8002ec2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002ec6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002ec8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002eca:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ece:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002ed2:	409f      	lsls	r7, r3
 8002ed4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002ed8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002eda:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002edc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee0:	688f      	ldr	r7, [r1, #8]
 8002ee2:	fa07 f708 	lsl.w	r7, r7, r8
 8002ee6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eea:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002eec:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eee:	d119      	bne.n	8002f24 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002ef0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002ef4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ef8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002efc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f00:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002f04:	f04f 0e0f 	mov.w	lr, #15
 8002f08:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002f0c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f10:	690f      	ldr	r7, [r1, #16]
 8002f12:	fa07 f70b 	lsl.w	r7, r7, fp
 8002f16:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002f1a:	f8ca 7020 	str.w	r7, [sl, #32]
 8002f1e:	e001      	b.n	8002f24 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f20:	2c03      	cmp	r4, #3
 8002f22:	d1da      	bne.n	8002eda <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002f24:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f26:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f2a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f2c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f2e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002f32:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f34:	d06b      	beq.n	800300e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f36:	f04f 0a00 	mov.w	sl, #0
 8002f3a:	f8cd a004 	str.w	sl, [sp, #4]
 8002f3e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f42:	4c40      	ldr	r4, [pc, #256]	; (8003044 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f44:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002f48:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002f4c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002f50:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002f54:	9601      	str	r6, [sp, #4]
 8002f56:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f58:	f023 0603 	bic.w	r6, r3, #3
 8002f5c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002f60:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f64:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002f68:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f6c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002f70:	270f      	movs	r7, #15
 8002f72:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f76:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f78:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f7c:	d04e      	beq.n	800301c <HAL_GPIO_Init+0x19c>
 8002f7e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f82:	42a0      	cmp	r0, r4
 8002f84:	d04c      	beq.n	8003020 <HAL_GPIO_Init+0x1a0>
 8002f86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f8a:	42a0      	cmp	r0, r4
 8002f8c:	d04a      	beq.n	8003024 <HAL_GPIO_Init+0x1a4>
 8002f8e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f92:	42a0      	cmp	r0, r4
 8002f94:	d048      	beq.n	8003028 <HAL_GPIO_Init+0x1a8>
 8002f96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002f9a:	42a0      	cmp	r0, r4
 8002f9c:	d046      	beq.n	800302c <HAL_GPIO_Init+0x1ac>
 8002f9e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fa2:	42a0      	cmp	r0, r4
 8002fa4:	d044      	beq.n	8003030 <HAL_GPIO_Init+0x1b0>
 8002fa6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002faa:	42a0      	cmp	r0, r4
 8002fac:	d042      	beq.n	8003034 <HAL_GPIO_Init+0x1b4>
 8002fae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fb2:	42a0      	cmp	r0, r4
 8002fb4:	d040      	beq.n	8003038 <HAL_GPIO_Init+0x1b8>
 8002fb6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fba:	42a0      	cmp	r0, r4
 8002fbc:	d03e      	beq.n	800303c <HAL_GPIO_Init+0x1bc>
 8002fbe:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fc2:	42a0      	cmp	r0, r4
 8002fc4:	bf0c      	ite	eq
 8002fc6:	2409      	moveq	r4, #9
 8002fc8:	240a      	movne	r4, #10
 8002fca:	fa04 f40e 	lsl.w	r4, r4, lr
 8002fce:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd0:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 8002fd2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8002fd4:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fd8:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002fda:	bf54      	ite	pl
 8002fdc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002fde:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002fe2:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8002fe4:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe6:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002fe8:	bf54      	ite	pl
 8002fea:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002fec:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002ff0:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ff2:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff4:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002ff6:	bf54      	ite	pl
 8002ff8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002ffa:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002ffe:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8003000:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003002:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8003004:	bf54      	ite	pl
 8003006:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003008:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 800300c:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300e:	3301      	adds	r3, #1
 8003010:	2b10      	cmp	r3, #16
 8003012:	f47f af3b 	bne.w	8002e8c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8003016:	b003      	add	sp, #12
 8003018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800301c:	4654      	mov	r4, sl
 800301e:	e7d4      	b.n	8002fca <HAL_GPIO_Init+0x14a>
 8003020:	2401      	movs	r4, #1
 8003022:	e7d2      	b.n	8002fca <HAL_GPIO_Init+0x14a>
 8003024:	2402      	movs	r4, #2
 8003026:	e7d0      	b.n	8002fca <HAL_GPIO_Init+0x14a>
 8003028:	2403      	movs	r4, #3
 800302a:	e7ce      	b.n	8002fca <HAL_GPIO_Init+0x14a>
 800302c:	2404      	movs	r4, #4
 800302e:	e7cc      	b.n	8002fca <HAL_GPIO_Init+0x14a>
 8003030:	2405      	movs	r4, #5
 8003032:	e7ca      	b.n	8002fca <HAL_GPIO_Init+0x14a>
 8003034:	2406      	movs	r4, #6
 8003036:	e7c8      	b.n	8002fca <HAL_GPIO_Init+0x14a>
 8003038:	2407      	movs	r4, #7
 800303a:	e7c6      	b.n	8002fca <HAL_GPIO_Init+0x14a>
 800303c:	2408      	movs	r4, #8
 800303e:	e7c4      	b.n	8002fca <HAL_GPIO_Init+0x14a>
 8003040:	40013c00 	.word	0x40013c00
 8003044:	40020000 	.word	0x40020000
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800304c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003050:	4c4a      	ldr	r4, [pc, #296]	; (800317c <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003052:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8003184 <HAL_GPIO_DeInit+0x138>
 8003056:	f8df a130 	ldr.w	sl, [pc, #304]	; 8003188 <HAL_GPIO_DeInit+0x13c>
 800305a:	f8df b130 	ldr.w	fp, [pc, #304]	; 800318c <HAL_GPIO_DeInit+0x140>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305e:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8003060:	2301      	movs	r3, #1
 8003062:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 8003066:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800306a:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 800306e:	d16e      	bne.n	800314e <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003070:	f022 0503 	bic.w	r5, r2, #3
 8003074:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8003078:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800307c:	4b40      	ldr	r3, [pc, #256]	; (8003180 <HAL_GPIO_DeInit+0x134>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 800307e:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003082:	f002 0c03 	and.w	ip, r2, #3
 8003086:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800308a:	260f      	movs	r6, #15
 800308c:	fa06 f60c 	lsl.w	r6, r6, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003090:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003092:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003096:	d05f      	beq.n	8003158 <HAL_GPIO_DeInit+0x10c>
 8003098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800309c:	4298      	cmp	r0, r3
 800309e:	d05d      	beq.n	800315c <HAL_GPIO_DeInit+0x110>
 80030a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030a4:	4298      	cmp	r0, r3
 80030a6:	d05b      	beq.n	8003160 <HAL_GPIO_DeInit+0x114>
 80030a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030ac:	4298      	cmp	r0, r3
 80030ae:	d059      	beq.n	8003164 <HAL_GPIO_DeInit+0x118>
 80030b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030b4:	4298      	cmp	r0, r3
 80030b6:	d057      	beq.n	8003168 <HAL_GPIO_DeInit+0x11c>
 80030b8:	4548      	cmp	r0, r9
 80030ba:	d057      	beq.n	800316c <HAL_GPIO_DeInit+0x120>
 80030bc:	4550      	cmp	r0, sl
 80030be:	d057      	beq.n	8003170 <HAL_GPIO_DeInit+0x124>
 80030c0:	4558      	cmp	r0, fp
 80030c2:	d057      	beq.n	8003174 <HAL_GPIO_DeInit+0x128>
 80030c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c8:	4298      	cmp	r0, r3
 80030ca:	d055      	beq.n	8003178 <HAL_GPIO_DeInit+0x12c>
 80030cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030d0:	4298      	cmp	r0, r3
 80030d2:	bf0c      	ite	eq
 80030d4:	2309      	moveq	r3, #9
 80030d6:	230a      	movne	r3, #10
 80030d8:	fa03 f30c 	lsl.w	r3, r3, ip
 80030dc:	4543      	cmp	r3, r8
 80030de:	d113      	bne.n	8003108 <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	ea23 0307 	bic.w	r3, r3, r7
 80030e6:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030e8:	6863      	ldr	r3, [r4, #4]
 80030ea:	ea23 0307 	bic.w	r3, r3, r7
 80030ee:	6063      	str	r3, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030f0:	68a3      	ldr	r3, [r4, #8]
 80030f2:	ea23 0307 	bic.w	r3, r3, r7
 80030f6:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030f8:	68e3      	ldr	r3, [r4, #12]
 80030fa:	ea23 0707 	bic.w	r7, r3, r7
 80030fe:	60e7      	str	r7, [r4, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003100:	68ab      	ldr	r3, [r5, #8]
 8003102:	ea23 0606 	bic.w	r6, r3, r6
 8003106:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003108:	6805      	ldr	r5, [r0, #0]
 800310a:	2603      	movs	r6, #3
 800310c:	0053      	lsls	r3, r2, #1
 800310e:	fa06 f303 	lsl.w	r3, r6, r3
 8003112:	ea25 0503 	bic.w	r5, r5, r3
 8003116:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003118:	fa22 f506 	lsr.w	r5, r2, r6
 800311c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8003120:	f002 0c07 	and.w	ip, r2, #7
 8003124:	6a2e      	ldr	r6, [r5, #32]
 8003126:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800312a:	270f      	movs	r7, #15
 800312c:	fa07 f70c 	lsl.w	r7, r7, ip
 8003130:	ea26 0707 	bic.w	r7, r6, r7
 8003134:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003136:	68c5      	ldr	r5, [r0, #12]
 8003138:	ea25 0503 	bic.w	r5, r5, r3
 800313c:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800313e:	6845      	ldr	r5, [r0, #4]
 8003140:	ea25 050e 	bic.w	r5, r5, lr
 8003144:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003146:	6885      	ldr	r5, [r0, #8]
 8003148:	ea25 0303 	bic.w	r3, r5, r3
 800314c:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800314e:	3201      	adds	r2, #1
 8003150:	2a10      	cmp	r2, #16
 8003152:	d185      	bne.n	8003060 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8003154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003158:	2300      	movs	r3, #0
 800315a:	e7bd      	b.n	80030d8 <HAL_GPIO_DeInit+0x8c>
 800315c:	2301      	movs	r3, #1
 800315e:	e7bb      	b.n	80030d8 <HAL_GPIO_DeInit+0x8c>
 8003160:	2302      	movs	r3, #2
 8003162:	e7b9      	b.n	80030d8 <HAL_GPIO_DeInit+0x8c>
 8003164:	2303      	movs	r3, #3
 8003166:	e7b7      	b.n	80030d8 <HAL_GPIO_DeInit+0x8c>
 8003168:	2304      	movs	r3, #4
 800316a:	e7b5      	b.n	80030d8 <HAL_GPIO_DeInit+0x8c>
 800316c:	2305      	movs	r3, #5
 800316e:	e7b3      	b.n	80030d8 <HAL_GPIO_DeInit+0x8c>
 8003170:	2306      	movs	r3, #6
 8003172:	e7b1      	b.n	80030d8 <HAL_GPIO_DeInit+0x8c>
 8003174:	2307      	movs	r3, #7
 8003176:	e7af      	b.n	80030d8 <HAL_GPIO_DeInit+0x8c>
 8003178:	2308      	movs	r3, #8
 800317a:	e7ad      	b.n	80030d8 <HAL_GPIO_DeInit+0x8c>
 800317c:	40013c00 	.word	0x40013c00
 8003180:	40020000 	.word	0x40020000
 8003184:	40021400 	.word	0x40021400
 8003188:	40021800 	.word	0x40021800
 800318c:	40021c00 	.word	0x40021c00

08003190 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003190:	6903      	ldr	r3, [r0, #16]
 8003192:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003194:	bf14      	ite	ne
 8003196:	2001      	movne	r0, #1
 8003198:	2000      	moveq	r0, #0
 800319a:	4770      	bx	lr

0800319c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800319c:	b10a      	cbz	r2, 80031a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800319e:	6181      	str	r1, [r0, #24]
  }
}
 80031a0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031a2:	0409      	lsls	r1, r1, #16
 80031a4:	e7fb      	b.n	800319e <HAL_GPIO_WritePin+0x2>

080031a6 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a6:	6801      	ldr	r1, [r0, #0]
 80031a8:	694b      	ldr	r3, [r1, #20]
 80031aa:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	d010      	beq.n	80031d6 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b4:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80031b8:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80031ba:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80031bc:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031be:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c6:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031cc:	f043 0304 	orr.w	r3, r3, #4
 80031d0:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80031d2:	2001      	movs	r0, #1
 80031d4:	4770      	bx	lr
  }
  return HAL_OK;
 80031d6:	4618      	mov	r0, r3
}
 80031d8:	4770      	bx	lr

080031da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80031da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031de:	4604      	mov	r4, r0
 80031e0:	460f      	mov	r7, r1
 80031e2:	4616      	mov	r6, r2
 80031e4:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031e6:	6825      	ldr	r5, [r4, #0]
 80031e8:	6968      	ldr	r0, [r5, #20]
 80031ea:	ea27 0000 	bic.w	r0, r7, r0
 80031ee:	b280      	uxth	r0, r0
 80031f0:	b1b8      	cbz	r0, 8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f2:	696b      	ldr	r3, [r5, #20]
 80031f4:	055a      	lsls	r2, r3, #21
 80031f6:	d516      	bpl.n	8003226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	682b      	ldr	r3, [r5, #0]
 80031fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031fe:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003200:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8003204:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003206:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003208:	2300      	movs	r3, #0
 800320a:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003210:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003214:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003216:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800321c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003220:	2001      	movs	r0, #1
}
 8003222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003226:	1c73      	adds	r3, r6, #1
 8003228:	d0de      	beq.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7ff fb9f 	bl	800296c <HAL_GetTick>
 800322e:	eba0 0008 	sub.w	r0, r0, r8
 8003232:	42b0      	cmp	r0, r6
 8003234:	d801      	bhi.n	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8003236:	2e00      	cmp	r6, #0
 8003238:	d1d5      	bne.n	80031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800323a:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 800323c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800323e:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003240:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003244:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003248:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800324a:	f042 0220 	orr.w	r2, r2, #32
 800324e:	e7e4      	b.n	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08003250 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	4604      	mov	r4, r0
 8003254:	460d      	mov	r5, r1
 8003256:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	075b      	lsls	r3, r3, #29
 800325e:	d501      	bpl.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8003260:	2000      	movs	r0, #0
}
 8003262:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003264:	4620      	mov	r0, r4
 8003266:	f7ff ff9e 	bl	80031a6 <I2C_IsAcknowledgeFailed>
 800326a:	b9a8      	cbnz	r0, 8003298 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800326c:	1c6a      	adds	r2, r5, #1
 800326e:	d0f3      	beq.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003270:	f7ff fb7c 	bl	800296c <HAL_GetTick>
 8003274:	1b80      	subs	r0, r0, r6
 8003276:	42a8      	cmp	r0, r5
 8003278:	d801      	bhi.n	800327e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800327a:	2d00      	cmp	r5, #0
 800327c:	d1ec      	bne.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800327e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003280:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003282:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003284:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003288:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800328c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800328e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003292:	f042 0220 	orr.w	r2, r2, #32
 8003296:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8003298:	2001      	movs	r0, #1
 800329a:	e7e2      	b.n	8003262 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

0800329c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	4604      	mov	r4, r0
 80032a0:	460d      	mov	r5, r1
 80032a2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032a4:	6821      	ldr	r1, [r4, #0]
 80032a6:	694b      	ldr	r3, [r1, #20]
 80032a8:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 80032ac:	d001      	beq.n	80032b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80032ae:	2000      	movs	r0, #0
 80032b0:	e010      	b.n	80032d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032b2:	694a      	ldr	r2, [r1, #20]
 80032b4:	06d2      	lsls	r2, r2, #27
 80032b6:	d50e      	bpl.n	80032d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b8:	f06f 0210 	mvn.w	r2, #16
 80032bc:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80032be:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032c0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032c2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032cc:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80032ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80032d2:	2001      	movs	r0, #1
}
 80032d4:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d6:	f7ff fb49 	bl	800296c <HAL_GetTick>
 80032da:	1b80      	subs	r0, r0, r6
 80032dc:	42a8      	cmp	r0, r5
 80032de:	d801      	bhi.n	80032e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d1df      	bne.n	80032a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032e4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80032e6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80032e8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80032ea:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	e7e8      	b.n	80032cc <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080032fa <I2C_WaitOnFlagUntilTimeout>:
{
 80032fa:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80032fe:	4606      	mov	r6, r0
 8003300:	460f      	mov	r7, r1
 8003302:	4691      	mov	r9, r2
 8003304:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003306:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800330a:	6833      	ldr	r3, [r6, #0]
 800330c:	f1ba 0f01 	cmp.w	sl, #1
 8003310:	bf0c      	ite	eq
 8003312:	695c      	ldreq	r4, [r3, #20]
 8003314:	699c      	ldrne	r4, [r3, #24]
 8003316:	ea27 0404 	bic.w	r4, r7, r4
 800331a:	b2a4      	uxth	r4, r4
 800331c:	fab4 f484 	clz	r4, r4
 8003320:	0964      	lsrs	r4, r4, #5
 8003322:	45a1      	cmp	r9, r4
 8003324:	d001      	beq.n	800332a <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003326:	2000      	movs	r0, #0
 8003328:	e017      	b.n	800335a <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800332a:	1c6a      	adds	r2, r5, #1
 800332c:	d0ee      	beq.n	800330c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7ff fb1d 	bl	800296c <HAL_GetTick>
 8003332:	9b08      	ldr	r3, [sp, #32]
 8003334:	1ac0      	subs	r0, r0, r3
 8003336:	42a8      	cmp	r0, r5
 8003338:	d801      	bhi.n	800333e <I2C_WaitOnFlagUntilTimeout+0x44>
 800333a:	2d00      	cmp	r5, #0
 800333c:	d1e5      	bne.n	800330a <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800333e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003340:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003342:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003344:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003348:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800334c:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800334e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003352:	f042 0220 	orr.w	r2, r2, #32
 8003356:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003358:	2001      	movs	r0, #1
}
 800335a:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

0800335e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800335e:	b570      	push	{r4, r5, r6, lr}
 8003360:	4604      	mov	r4, r0
 8003362:	460d      	mov	r5, r1
 8003364:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	061b      	lsls	r3, r3, #24
 800336c:	d501      	bpl.n	8003372 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800336e:	2000      	movs	r0, #0
}
 8003370:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003372:	4620      	mov	r0, r4
 8003374:	f7ff ff17 	bl	80031a6 <I2C_IsAcknowledgeFailed>
 8003378:	b9a8      	cbnz	r0, 80033a6 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800337a:	1c6a      	adds	r2, r5, #1
 800337c:	d0f3      	beq.n	8003366 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337e:	f7ff faf5 	bl	800296c <HAL_GetTick>
 8003382:	1b80      	subs	r0, r0, r6
 8003384:	42a8      	cmp	r0, r5
 8003386:	d801      	bhi.n	800338c <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003388:	2d00      	cmp	r5, #0
 800338a:	d1ec      	bne.n	8003366 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800338c:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800338e:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003390:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003392:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003396:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800339a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800339c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	f042 0220 	orr.w	r2, r2, #32
 80033a4:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80033a6:	2001      	movs	r0, #1
 80033a8:	e7e2      	b.n	8003370 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

080033ac <I2C_RequestMemoryWrite>:
{
 80033ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033b0:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b2:	6802      	ldr	r2, [r0, #0]
{
 80033b4:	b085      	sub	sp, #20
 80033b6:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80033ba:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033bc:	6813      	ldr	r3, [r2, #0]
 80033be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c2:	6013      	str	r3, [r2, #0]
{
 80033c4:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c6:	463b      	mov	r3, r7
 80033c8:	f8cd 8000 	str.w	r8, [sp]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80033d2:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033d4:	f7ff ff91 	bl	80032fa <I2C_WaitOnFlagUntilTimeout>
 80033d8:	6823      	ldr	r3, [r4, #0]
 80033da:	b138      	cbz	r0, 80033ec <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	05db      	lsls	r3, r3, #23
 80033e0:	d502      	bpl.n	80033e8 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033e6:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80033e8:	2003      	movs	r0, #3
 80033ea:	e00a      	b.n	8003402 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033ec:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80033f0:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f2:	4919      	ldr	r1, [pc, #100]	; (8003458 <I2C_RequestMemoryWrite+0xac>)
 80033f4:	4643      	mov	r3, r8
 80033f6:	463a      	mov	r2, r7
 80033f8:	4620      	mov	r0, r4
 80033fa:	f7ff feee 	bl	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033fe:	b118      	cbz	r0, 8003408 <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 8003400:	2001      	movs	r0, #1
}
 8003402:	b005      	add	sp, #20
 8003404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003408:	6823      	ldr	r3, [r4, #0]
 800340a:	9003      	str	r0, [sp, #12]
 800340c:	695a      	ldr	r2, [r3, #20]
 800340e:	9203      	str	r2, [sp, #12]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003414:	4642      	mov	r2, r8
 8003416:	4639      	mov	r1, r7
 8003418:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341c:	f7ff ff9f 	bl	800335e <I2C_WaitOnTXEFlagUntilTimeout>
 8003420:	b140      	cbz	r0, 8003434 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003422:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003424:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003426:	bf01      	itttt	eq
 8003428:	6822      	ldreq	r2, [r4, #0]
 800342a:	6813      	ldreq	r3, [r2, #0]
 800342c:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003430:	6013      	streq	r3, [r2, #0]
 8003432:	e7e5      	b.n	8003400 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003434:	f1b9 0f01 	cmp.w	r9, #1
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	d102      	bne.n	8003442 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800343c:	b2ed      	uxtb	r5, r5
 800343e:	611d      	str	r5, [r3, #16]
 8003440:	e7df      	b.n	8003402 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003442:	0a2a      	lsrs	r2, r5, #8
 8003444:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003446:	4639      	mov	r1, r7
 8003448:	4642      	mov	r2, r8
 800344a:	4620      	mov	r0, r4
 800344c:	f7ff ff87 	bl	800335e <I2C_WaitOnTXEFlagUntilTimeout>
 8003450:	2800      	cmp	r0, #0
 8003452:	d1e6      	bne.n	8003422 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	e7f1      	b.n	800343c <I2C_RequestMemoryWrite+0x90>
 8003458:	00010002 	.word	0x00010002

0800345c <I2C_RequestMemoryRead>:
{
 800345c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003460:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003462:	6803      	ldr	r3, [r0, #0]
{
 8003464:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800346c:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800346e:	681a      	ldr	r2, [r3, #0]
{
 8003470:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003474:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003478:	601a      	str	r2, [r3, #0]
{
 800347a:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800347c:	463b      	mov	r3, r7
 800347e:	f8cd 8000 	str.w	r8, [sp]
 8003482:	2200      	movs	r2, #0
 8003484:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8003488:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800348a:	f7ff ff36 	bl	80032fa <I2C_WaitOnFlagUntilTimeout>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	b148      	cbz	r0, 80034a6 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003492:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003494:	05db      	lsls	r3, r3, #23
 8003496:	d502      	bpl.n	800349e <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800349c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800349e:	2003      	movs	r0, #3
}
 80034a0:	b004      	add	sp, #16
 80034a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034a6:	fa5f f986 	uxtb.w	r9, r6
 80034aa:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80034ae:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034b0:	492a      	ldr	r1, [pc, #168]	; (800355c <I2C_RequestMemoryRead+0x100>)
 80034b2:	4643      	mov	r3, r8
 80034b4:	463a      	mov	r2, r7
 80034b6:	4620      	mov	r0, r4
 80034b8:	f7ff fe8f 	bl	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034bc:	b108      	cbz	r0, 80034c2 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 80034be:	2001      	movs	r0, #1
 80034c0:	e7ee      	b.n	80034a0 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034c2:	6823      	ldr	r3, [r4, #0]
 80034c4:	9003      	str	r0, [sp, #12]
 80034c6:	695a      	ldr	r2, [r3, #20]
 80034c8:	9203      	str	r2, [sp, #12]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ce:	4642      	mov	r2, r8
 80034d0:	4639      	mov	r1, r7
 80034d2:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d4:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034d6:	f7ff ff42 	bl	800335e <I2C_WaitOnTXEFlagUntilTimeout>
 80034da:	b140      	cbz	r0, 80034ee <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034de:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e0:	bf01      	itttt	eq
 80034e2:	6822      	ldreq	r2, [r4, #0]
 80034e4:	6813      	ldreq	r3, [r2, #0]
 80034e6:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80034ea:	6013      	streq	r3, [r2, #0]
 80034ec:	e7e7      	b.n	80034be <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034ee:	f1ba 0f01 	cmp.w	sl, #1
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	d11a      	bne.n	800352c <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034f6:	b2ed      	uxtb	r5, r5
 80034f8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034fa:	4642      	mov	r2, r8
 80034fc:	4639      	mov	r1, r7
 80034fe:	4620      	mov	r0, r4
 8003500:	f7ff ff2d 	bl	800335e <I2C_WaitOnTXEFlagUntilTimeout>
 8003504:	2800      	cmp	r0, #0
 8003506:	d1e9      	bne.n	80034dc <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003508:	6822      	ldr	r2, [r4, #0]
 800350a:	6813      	ldr	r3, [r2, #0]
 800350c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003510:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003512:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003516:	4602      	mov	r2, r0
 8003518:	f8cd 8000 	str.w	r8, [sp]
 800351c:	463b      	mov	r3, r7
 800351e:	4620      	mov	r0, r4
 8003520:	f7ff feeb 	bl	80032fa <I2C_WaitOnFlagUntilTimeout>
 8003524:	6822      	ldr	r2, [r4, #0]
 8003526:	b160      	cbz	r0, 8003542 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003528:	6813      	ldr	r3, [r2, #0]
 800352a:	e7b3      	b.n	8003494 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800352c:	0a2a      	lsrs	r2, r5, #8
 800352e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003530:	4639      	mov	r1, r7
 8003532:	4642      	mov	r2, r8
 8003534:	4620      	mov	r0, r4
 8003536:	f7ff ff12 	bl	800335e <I2C_WaitOnTXEFlagUntilTimeout>
 800353a:	2800      	cmp	r0, #0
 800353c:	d1ce      	bne.n	80034dc <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	e7d9      	b.n	80034f6 <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003542:	f049 0301 	orr.w	r3, r9, #1
 8003546:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003548:	4904      	ldr	r1, [pc, #16]	; (800355c <I2C_RequestMemoryRead+0x100>)
 800354a:	4643      	mov	r3, r8
 800354c:	463a      	mov	r2, r7
 800354e:	4620      	mov	r0, r4
 8003550:	f7ff fe43 	bl	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003554:	3800      	subs	r0, #0
 8003556:	bf18      	it	ne
 8003558:	2001      	movne	r0, #1
 800355a:	e7a1      	b.n	80034a0 <I2C_RequestMemoryRead+0x44>
 800355c:	00010002 	.word	0x00010002

08003560 <HAL_I2C_Init>:
{
 8003560:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8003562:	4604      	mov	r4, r0
 8003564:	b908      	cbnz	r0, 800356a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8003566:	2001      	movs	r0, #1
}
 8003568:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800356a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800356e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003572:	b91b      	cbnz	r3, 800357c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8003574:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003578:	f002 f90e 	bl	8005798 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800357c:	2324      	movs	r3, #36	; 0x24
 800357e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003582:	6823      	ldr	r3, [r4, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	f022 0201 	bic.w	r2, r2, #1
 800358a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003592:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800359a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800359c:	f000 fe5e 	bl	800425c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035a0:	4a3f      	ldr	r2, [pc, #252]	; (80036a0 <HAL_I2C_Init+0x140>)
 80035a2:	6863      	ldr	r3, [r4, #4]
 80035a4:	4293      	cmp	r3, r2
 80035a6:	bf94      	ite	ls
 80035a8:	4a3e      	ldrls	r2, [pc, #248]	; (80036a4 <HAL_I2C_Init+0x144>)
 80035aa:	4a3f      	ldrhi	r2, [pc, #252]	; (80036a8 <HAL_I2C_Init+0x148>)
 80035ac:	4290      	cmp	r0, r2
 80035ae:	bf8c      	ite	hi
 80035b0:	2200      	movhi	r2, #0
 80035b2:	2201      	movls	r2, #1
 80035b4:	2a00      	cmp	r2, #0
 80035b6:	d1d6      	bne.n	8003566 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035b8:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80035ba:	4e3c      	ldr	r6, [pc, #240]	; (80036ac <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035bc:	684a      	ldr	r2, [r1, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80035be:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035c2:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80035c6:	4332      	orrs	r2, r6
 80035c8:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ca:	4a35      	ldr	r2, [pc, #212]	; (80036a0 <HAL_I2C_Init+0x140>)
 80035cc:	6a0d      	ldr	r5, [r1, #32]
 80035ce:	4293      	cmp	r3, r2
 80035d0:	bf84      	itt	hi
 80035d2:	f44f 7296 	movhi.w	r2, #300	; 0x12c
 80035d6:	4372      	mulhi	r2, r6
 80035d8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80035dc:	bf91      	iteee	ls
 80035de:	1c72      	addls	r2, r6, #1
 80035e0:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80035e4:	fbb2 f2f6 	udivhi	r2, r2, r6
 80035e8:	3201      	addhi	r2, #1
 80035ea:	432a      	orrs	r2, r5
 80035ec:	620a      	str	r2, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035ee:	69cd      	ldr	r5, [r1, #28]
 80035f0:	1e42      	subs	r2, r0, #1
 80035f2:	482b      	ldr	r0, [pc, #172]	; (80036a0 <HAL_I2C_Init+0x140>)
 80035f4:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80035f8:	4283      	cmp	r3, r0
 80035fa:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80035fe:	d832      	bhi.n	8003666 <HAL_I2C_Init+0x106>
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	f640 72fc 	movw	r2, #4092	; 0xffc
 800360a:	3301      	adds	r3, #1
 800360c:	4213      	tst	r3, r2
 800360e:	d042      	beq.n	8003696 <HAL_I2C_Init+0x136>
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003614:	432b      	orrs	r3, r5
 8003616:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003618:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800361c:	680a      	ldr	r2, [r1, #0]
 800361e:	4303      	orrs	r3, r0
 8003620:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003628:	688a      	ldr	r2, [r1, #8]
 800362a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800362e:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 8003632:	4303      	orrs	r3, r0
 8003634:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003638:	4313      	orrs	r3, r2
 800363a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800363c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003640:	68ca      	ldr	r2, [r1, #12]
 8003642:	4303      	orrs	r3, r0
 8003644:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003648:	4313      	orrs	r3, r2
 800364a:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 800364c:	680b      	ldr	r3, [r1, #0]
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003654:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003656:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003658:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800365a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800365e:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003660:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8003664:	e780      	b.n	8003568 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003666:	68a0      	ldr	r0, [r4, #8]
 8003668:	b950      	cbnz	r0, 8003680 <HAL_I2C_Init+0x120>
 800366a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800366e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003672:	3301      	adds	r3, #1
 8003674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003678:	b17b      	cbz	r3, 800369a <HAL_I2C_Init+0x13a>
 800367a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800367e:	e7c9      	b.n	8003614 <HAL_I2C_Init+0xb4>
 8003680:	2019      	movs	r0, #25
 8003682:	4343      	muls	r3, r0
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368e:	b123      	cbz	r3, 800369a <HAL_I2C_Init+0x13a>
 8003690:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003694:	e7be      	b.n	8003614 <HAL_I2C_Init+0xb4>
 8003696:	2304      	movs	r3, #4
 8003698:	e7bc      	b.n	8003614 <HAL_I2C_Init+0xb4>
 800369a:	2301      	movs	r3, #1
 800369c:	e7ba      	b.n	8003614 <HAL_I2C_Init+0xb4>
 800369e:	bf00      	nop
 80036a0:	000186a0 	.word	0x000186a0
 80036a4:	001e847f 	.word	0x001e847f
 80036a8:	003d08ff 	.word	0x003d08ff
 80036ac:	000f4240 	.word	0x000f4240

080036b0 <HAL_I2C_DeInit>:
{
 80036b0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80036b2:	4604      	mov	r4, r0
 80036b4:	b198      	cbz	r0, 80036de <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80036b6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b8:	2324      	movs	r3, #36	; 0x24
 80036ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80036be:	6813      	ldr	r3, [r2, #0]
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80036c6:	f002 f8b9 	bl	800583c <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80036ca:	2000      	movs	r0, #0
 80036cc:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80036ce:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80036d2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036d8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80036dc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80036de:	2001      	movs	r0, #1
 80036e0:	e7fc      	b.n	80036dc <HAL_I2C_DeInit+0x2c>
	...

080036e4 <HAL_I2C_Mem_Write>:
{
 80036e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80036e8:	4604      	mov	r4, r0
 80036ea:	4699      	mov	r9, r3
 80036ec:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80036ee:	460f      	mov	r7, r1
 80036f0:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80036f2:	f7ff f93b 	bl	800296c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80036fa:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80036fc:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fe:	d003      	beq.n	8003708 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8003700:	2002      	movs	r0, #2
}
 8003702:	b003      	add	sp, #12
 8003704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003708:	9000      	str	r0, [sp, #0]
 800370a:	493c      	ldr	r1, [pc, #240]	; (80037fc <HAL_I2C_Mem_Write+0x118>)
 800370c:	2319      	movs	r3, #25
 800370e:	2201      	movs	r2, #1
 8003710:	4620      	mov	r0, r4
 8003712:	f7ff fdf2 	bl	80032fa <I2C_WaitOnFlagUntilTimeout>
 8003716:	2800      	cmp	r0, #0
 8003718:	d1f2      	bne.n	8003700 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 800371a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800371e:	2b01      	cmp	r3, #1
 8003720:	d0ee      	beq.n	8003700 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003722:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003724:	2301      	movs	r3, #1
 8003726:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800372a:	6803      	ldr	r3, [r0, #0]
 800372c:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800372e:	bf5e      	ittt	pl
 8003730:	6803      	ldrpl	r3, [r0, #0]
 8003732:	f043 0301 	orrpl.w	r3, r3, #1
 8003736:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003738:	6803      	ldr	r3, [r0, #0]
 800373a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800373e:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003740:	2321      	movs	r3, #33	; 0x21
 8003742:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003746:	2340      	movs	r3, #64	; 0x40
 8003748:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374c:	2300      	movs	r3, #0
 800374e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003752:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003754:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003758:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800375a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800375c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800375e:	4b28      	ldr	r3, [pc, #160]	; (8003800 <HAL_I2C_Mem_Write+0x11c>)
 8003760:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003762:	e9cd 6500 	strd	r6, r5, [sp]
 8003766:	464b      	mov	r3, r9
 8003768:	4642      	mov	r2, r8
 800376a:	4639      	mov	r1, r7
 800376c:	4620      	mov	r0, r4
 800376e:	f7ff fe1d 	bl	80033ac <I2C_RequestMemoryWrite>
 8003772:	2800      	cmp	r0, #0
 8003774:	d02a      	beq.n	80037cc <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8003776:	2001      	movs	r0, #1
 8003778:	e7c3      	b.n	8003702 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377a:	f7ff fdf0 	bl	800335e <I2C_WaitOnTXEFlagUntilTimeout>
 800377e:	b140      	cbz	r0, 8003792 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003780:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003782:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003784:	bf01      	itttt	eq
 8003786:	6822      	ldreq	r2, [r4, #0]
 8003788:	6813      	ldreq	r3, [r2, #0]
 800378a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 800378e:	6013      	streq	r3, [r2, #0]
 8003790:	e7f1      	b.n	8003776 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003792:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003794:	6827      	ldr	r7, [r4, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	f812 1b01 	ldrb.w	r1, [r2], #1
 800379c:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800379e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80037a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80037a2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80037a4:	3a01      	subs	r2, #1
 80037a6:	b292      	uxth	r2, r2
 80037a8:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037aa:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80037ac:	1e48      	subs	r0, r1, #1
 80037ae:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037b0:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80037b2:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037b4:	d50a      	bpl.n	80037cc <HAL_I2C_Mem_Write+0xe8>
 80037b6:	b148      	cbz	r0, 80037cc <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037b8:	785a      	ldrb	r2, [r3, #1]
 80037ba:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 80037bc:	3302      	adds	r3, #2
 80037be:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80037c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037c2:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 80037c4:	3902      	subs	r1, #2
        hi2c->XferCount--;
 80037c6:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80037c8:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80037ca:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ce:	462a      	mov	r2, r5
 80037d0:	4631      	mov	r1, r6
 80037d2:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1d0      	bne.n	800377a <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d8:	f7ff fd3a 	bl	8003250 <I2C_WaitOnBTFFlagUntilTimeout>
 80037dc:	2800      	cmp	r0, #0
 80037de:	d1cf      	bne.n	8003780 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e0:	6822      	ldr	r2, [r4, #0]
 80037e2:	6813      	ldr	r3, [r2, #0]
 80037e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e8:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	2320      	movs	r3, #32
 80037ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80037f0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80037f8:	e783      	b.n	8003702 <HAL_I2C_Mem_Write+0x1e>
 80037fa:	bf00      	nop
 80037fc:	00100002 	.word	0x00100002
 8003800:	ffff0000 	.word	0xffff0000

08003804 <HAL_I2C_Mem_Read>:
{
 8003804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003808:	4604      	mov	r4, r0
 800380a:	b087      	sub	sp, #28
 800380c:	4699      	mov	r9, r3
 800380e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003810:	460d      	mov	r5, r1
 8003812:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8003814:	f7ff f8aa 	bl	800296c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003818:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800381c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 800381e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003820:	d004      	beq.n	800382c <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8003822:	2502      	movs	r5, #2
}
 8003824:	4628      	mov	r0, r5
 8003826:	b007      	add	sp, #28
 8003828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800382c:	9000      	str	r0, [sp, #0]
 800382e:	4976      	ldr	r1, [pc, #472]	; (8003a08 <HAL_I2C_Mem_Read+0x204>)
 8003830:	2319      	movs	r3, #25
 8003832:	2201      	movs	r2, #1
 8003834:	4620      	mov	r0, r4
 8003836:	f7ff fd60 	bl	80032fa <I2C_WaitOnFlagUntilTimeout>
 800383a:	2800      	cmp	r0, #0
 800383c:	d1f1      	bne.n	8003822 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 800383e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8003842:	2b01      	cmp	r3, #1
 8003844:	d0ed      	beq.n	8003822 <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003846:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003848:	2301      	movs	r3, #1
 800384a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800384e:	6803      	ldr	r3, [r0, #0]
 8003850:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003852:	bf5e      	ittt	pl
 8003854:	6803      	ldrpl	r3, [r0, #0]
 8003856:	f043 0301 	orrpl.w	r3, r3, #1
 800385a:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800385c:	6803      	ldr	r3, [r0, #0]
 800385e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003862:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003864:	2322      	movs	r3, #34	; 0x22
 8003866:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800386a:	2340      	movs	r3, #64	; 0x40
 800386c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003870:	2300      	movs	r3, #0
 8003872:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003876:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003878:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800387c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800387e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003880:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003882:	4b62      	ldr	r3, [pc, #392]	; (8003a0c <HAL_I2C_Mem_Read+0x208>)
 8003884:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003886:	4629      	mov	r1, r5
 8003888:	e9cd 7600 	strd	r7, r6, [sp]
 800388c:	464b      	mov	r3, r9
 800388e:	4642      	mov	r2, r8
 8003890:	4620      	mov	r0, r4
 8003892:	f7ff fde3 	bl	800345c <I2C_RequestMemoryRead>
 8003896:	4605      	mov	r5, r0
 8003898:	b108      	cbz	r0, 800389e <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 800389a:	2501      	movs	r5, #1
 800389c:	e7c2      	b.n	8003824 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 800389e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	b9b2      	cbnz	r2, 80038d2 <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a4:	9002      	str	r0, [sp, #8]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	9202      	str	r2, [sp, #8]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	9202      	str	r2, [sp, #8]
 80038ae:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b6:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038b8:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8003a10 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 80038bc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d12c      	bne.n	800391c <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	2220      	movs	r2, #32
 80038c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80038c8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80038d0:	e7a8      	b.n	8003824 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 80038d2:	2a01      	cmp	r2, #1
 80038d4:	d10a      	bne.n	80038ec <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038dc:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038de:	9003      	str	r0, [sp, #12]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	9203      	str	r2, [sp, #12]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	9203      	str	r2, [sp, #12]
 80038e8:	9a03      	ldr	r2, [sp, #12]
 80038ea:	e7e1      	b.n	80038b0 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 80038ec:	2a02      	cmp	r2, #2
 80038ee:	d10e      	bne.n	800390e <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fe:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003900:	9004      	str	r0, [sp, #16]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	9204      	str	r2, [sp, #16]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	9304      	str	r3, [sp, #16]
 800390a:	9b04      	ldr	r3, [sp, #16]
 800390c:	e7d4      	b.n	80038b8 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390e:	9005      	str	r0, [sp, #20]
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	9205      	str	r2, [sp, #20]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	9305      	str	r3, [sp, #20]
 8003918:	9b05      	ldr	r3, [sp, #20]
 800391a:	e7cd      	b.n	80038b8 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 800391c:	2b03      	cmp	r3, #3
 800391e:	d856      	bhi.n	80039ce <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 8003920:	2b01      	cmp	r3, #1
 8003922:	d115      	bne.n	8003950 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003924:	4632      	mov	r2, r6
 8003926:	4639      	mov	r1, r7
 8003928:	4620      	mov	r0, r4
 800392a:	f7ff fcb7 	bl	800329c <I2C_WaitOnRXNEFlagUntilTimeout>
 800392e:	2800      	cmp	r0, #0
 8003930:	d1b3      	bne.n	800389a <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003938:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800393a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800393c:	3301      	adds	r3, #1
 800393e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003940:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003942:	3b01      	subs	r3, #1
 8003944:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003946:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003948:	3b01      	subs	r3, #1
 800394a:	b29b      	uxth	r3, r3
 800394c:	8563      	strh	r3, [r4, #42]	; 0x2a
 800394e:	e7b5      	b.n	80038bc <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8003950:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003952:	9600      	str	r6, [sp, #0]
 8003954:	463b      	mov	r3, r7
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	4641      	mov	r1, r8
 800395c:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 800395e:	d119      	bne.n	8003994 <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003960:	f7ff fccb 	bl	80032fa <I2C_WaitOnFlagUntilTimeout>
 8003964:	2800      	cmp	r0, #0
 8003966:	d198      	bne.n	800389a <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003970:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003976:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003978:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800397a:	1c53      	adds	r3, r2, #1
 800397c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800397e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003980:	3b01      	subs	r3, #1
 8003982:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003984:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003986:	3b01      	subs	r3, #1
 8003988:	b29b      	uxth	r3, r3
 800398a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398c:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	7053      	strb	r3, [r2, #1]
 8003992:	e7d2      	b.n	800393a <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003994:	f7ff fcb1 	bl	80032fa <I2C_WaitOnFlagUntilTimeout>
 8003998:	2800      	cmp	r0, #0
 800399a:	f47f af7e 	bne.w	800389a <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039a6:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039a8:	691a      	ldr	r2, [r3, #16]
 80039aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039ac:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80039ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039b0:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 80039b2:	3301      	adds	r3, #1
 80039b4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80039b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80039b8:	3b01      	subs	r3, #1
 80039ba:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80039bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039be:	3b01      	subs	r3, #1
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039c4:	4602      	mov	r2, r0
 80039c6:	463b      	mov	r3, r7
 80039c8:	4641      	mov	r1, r8
 80039ca:	4620      	mov	r0, r4
 80039cc:	e7c8      	b.n	8003960 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ce:	4632      	mov	r2, r6
 80039d0:	4639      	mov	r1, r7
 80039d2:	4620      	mov	r0, r4
 80039d4:	f7ff fc62 	bl	800329c <I2C_WaitOnRXNEFlagUntilTimeout>
 80039d8:	2800      	cmp	r0, #0
 80039da:	f47f af5e 	bne.w	800389a <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039de:	6823      	ldr	r3, [r4, #0]
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039e4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80039e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80039e8:	1c53      	adds	r3, r2, #1
 80039ea:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80039ec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80039ee:	3b01      	subs	r3, #1
 80039f0:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80039f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039fa:	6823      	ldr	r3, [r4, #0]
 80039fc:	6959      	ldr	r1, [r3, #20]
 80039fe:	0749      	lsls	r1, r1, #29
 8003a00:	f57f af5c 	bpl.w	80038bc <HAL_I2C_Mem_Read+0xb8>
 8003a04:	e7c3      	b.n	800398e <HAL_I2C_Mem_Read+0x18a>
 8003a06:	bf00      	nop
 8003a08:	00100002 	.word	0x00100002
 8003a0c:	ffff0000 	.word	0xffff0000
 8003a10:	00010004 	.word	0x00010004

08003a14 <HAL_I2C_GetState>:
  return hi2c->State;
 8003a14:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8003a18:	4770      	bx	lr

08003a1a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a1a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	b2dc      	uxtb	r4, r3
 8003a24:	d116      	bne.n	8003a54 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a26:	2324      	movs	r3, #36	; 0x24
 8003a28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a2c:	6803      	ldr	r3, [r0, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	f022 0201 	bic.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a38:	f022 0210 	bic.w	r2, r2, #16
 8003a3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a40:	4311      	orrs	r1, r2
 8003a42:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 8003a50:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003a52:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8003a54:	2002      	movs	r0, #2
 8003a56:	e7fc      	b.n	8003a52 <HAL_I2CEx_ConfigAnalogFilter+0x38>

08003a58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a58:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	b2dc      	uxtb	r4, r3
 8003a62:	d116      	bne.n	8003a92 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a64:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a66:	2324      	movs	r3, #36	; 0x24
 8003a68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8003a6c:	6813      	ldr	r3, [r2, #0]
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003a74:	6a55      	ldr	r5, [r2, #36]	; 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003a76:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003a7a:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003a7c:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003a7e:	b289      	uxth	r1, r1
 8003a80:	6251      	str	r1, [r2, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a82:	6813      	ldr	r3, [r2, #0]
 8003a84:	f043 0301 	orr.w	r3, r3, #1
 8003a88:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a8a:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 8003a8e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003a90:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 8003a92:	2002      	movs	r0, #2
 8003a94:	e7fc      	b.n	8003a90 <HAL_I2CEx_ConfigDigitalFilter+0x38>

08003a96 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003a96:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003a9a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003a9c:	6804      	ldr	r4, [r0, #0]
 8003a9e:	684f      	ldr	r7, [r1, #4]
 8003aa0:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003aa2:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003aa6:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003aaa:	3284      	adds	r2, #132	; 0x84
 8003aac:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003aae:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003ab2:	6858      	ldr	r0, [r3, #4]
 8003ab4:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8003ab8:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003aba:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003abc:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ac0:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8003ac4:	4430      	add	r0, r6
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ac6:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ac8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003acc:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003ace:	68e0      	ldr	r0, [r4, #12]
 8003ad0:	68cd      	ldr	r5, [r1, #12]
 8003ad2:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8003ad6:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003ad8:	6898      	ldr	r0, [r3, #8]
 8003ada:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8003ade:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003ae0:	68e6      	ldr	r6, [r4, #12]
 8003ae2:	6888      	ldr	r0, [r1, #8]
 8003ae4:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8003ae8:	3001      	adds	r0, #1
 8003aea:	4430      	add	r0, r6
 8003aec:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003af0:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003af2:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003af4:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003af6:	f020 0007 	bic.w	r0, r0, #7
 8003afa:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003afc:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003b00:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b02:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003b04:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003b08:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003b0c:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003b10:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003b14:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003b18:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003b1c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003b20:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003b22:	6958      	ldr	r0, [r3, #20]
 8003b24:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003b28:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003b2a:	6948      	ldr	r0, [r1, #20]
 8003b2c:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003b2e:	69d8      	ldr	r0, [r3, #28]
 8003b30:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8003b34:	f020 0007 	bic.w	r0, r0, #7
 8003b38:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003b3a:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8003b3e:	4305      	orrs	r5, r0
 8003b40:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003b42:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003b44:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003b46:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003b4a:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003b4c:	b31e      	cbz	r6, 8003b96 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003b4e:	2e01      	cmp	r6, #1
 8003b50:	d023      	beq.n	8003b9a <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003b52:	1eb0      	subs	r0, r6, #2
 8003b54:	2802      	cmp	r0, #2
 8003b56:	d922      	bls.n	8003b9e <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003b58:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2002      	moveq	r0, #2
 8003b5e:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003b60:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003b62:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003b66:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003b68:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003b6a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003b6c:	eba7 070c 	sub.w	r7, r7, ip
 8003b70:	4345      	muls	r5, r0
 8003b72:	4378      	muls	r0, r7
 8003b74:	3003      	adds	r0, #3
 8003b76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003b7a:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003b7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003b7e:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8003b82:	f020 0007 	bic.w	r0, r0, #7
 8003b86:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003b88:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003b8a:	58a3      	ldr	r3, [r4, r2]
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	50a3      	str	r3, [r4, r2]
}
 8003b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8003b96:	2004      	movs	r0, #4
 8003b98:	e7e2      	b.n	8003b60 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8003b9a:	2003      	movs	r0, #3
 8003b9c:	e7e0      	b.n	8003b60 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8003b9e:	2002      	movs	r0, #2
 8003ba0:	e7de      	b.n	8003b60 <LTDC_SetConfig+0xca>
	...

08003ba4 <HAL_LTDC_Init>:
{
 8003ba4:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8003ba6:	4604      	mov	r4, r0
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	d063      	beq.n	8003c74 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003bac:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003bb0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003bb4:	b91b      	cbnz	r3, 8003bbe <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8003bb6:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003bba:	f001 feb5 	bl	8005928 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	699a      	ldr	r2, [r3, #24]
 8003bc8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003bcc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bce:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8003bd2:	4302      	orrs	r2, r0
 8003bd4:	68e0      	ldr	r0, [r4, #12]
 8003bd6:	6999      	ldr	r1, [r3, #24]
 8003bd8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003bda:	6920      	ldr	r0, [r4, #16]
 8003bdc:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003bde:	430a      	orrs	r2, r1
 8003be0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	4924      	ldr	r1, [pc, #144]	; (8003c78 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003be6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003be8:	400a      	ands	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003bf2:	69a0      	ldr	r0, [r4, #24]
 8003bf4:	4302      	orrs	r2, r0
 8003bf6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003bf8:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003bfa:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003bfc:	400a      	ands	r2, r1
 8003bfe:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003c06:	6a20      	ldr	r0, [r4, #32]
 8003c08:	4302      	orrs	r2, r0
 8003c0a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c0c:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003c0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003c10:	400a      	ands	r2, r1
 8003c12:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003c1a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003c1c:	4302      	orrs	r2, r0
 8003c1e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003c20:	695a      	ldr	r2, [r3, #20]
 8003c22:	4011      	ands	r1, r2
 8003c24:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c26:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003c28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003c2a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003c2e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003c30:	430a      	orrs	r2, r1
 8003c32:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003c36:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003c3a:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003c3e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8003c42:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003c44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c46:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003c50:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003c54:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003c56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c58:	f042 0206 	orr.w	r2, r2, #6
 8003c5c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	f042 0201 	orr.w	r2, r2, #1
 8003c64:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003c66:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8003c68:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003c6a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003c6e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8003c72:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003c74:	2001      	movs	r0, #1
 8003c76:	e7fc      	b.n	8003c72 <HAL_LTDC_Init+0xce>
 8003c78:	f000f800 	.word	0xf000f800

08003c7c <HAL_LTDC_ConfigLayer>:
{
 8003c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8003c80:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003c84:	2b01      	cmp	r3, #1
{
 8003c86:	4606      	mov	r6, r0
 8003c88:	460f      	mov	r7, r1
 8003c8a:	4694      	mov	ip, r2
 8003c8c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8003c90:	d01f      	beq.n	8003cd2 <HAL_LTDC_ConfigLayer+0x56>
 8003c92:	f04f 0801 	mov.w	r8, #1
 8003c96:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c9a:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003c9e:	2434      	movs	r4, #52	; 0x34
 8003ca0:	460d      	mov	r5, r1
 8003ca2:	fb04 6402 	mla	r4, r4, r2, r6
 8003ca6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ca8:	3438      	adds	r4, #56	; 0x38
 8003caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003cb8:	4630      	mov	r0, r6
 8003cba:	4662      	mov	r2, ip
 8003cbc:	4639      	mov	r1, r7
 8003cbe:	f7ff feea 	bl	8003a96 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003cc2:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003cc4:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003cc6:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003cca:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003cce:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003cd6 <HAL_LTDC_ConfigColorKeying>:
{
 8003cd6:	b510      	push	{r4, lr}
  __HAL_LOCK(hltdc);
 8003cd8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	f04f 0302 	mov.w	r3, #2
 8003ce2:	d013      	beq.n	8003d0c <HAL_LTDC_ConfigColorKeying+0x36>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8003ce4:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ce6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8003cea:	eb04 12c2 	add.w	r2, r4, r2, lsl #7
 8003cee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003cf2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003cf6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003cfa:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8003cfc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d00:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d02:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003d06:	2300      	movs	r3, #0
 8003d08:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8003d0c:	4618      	mov	r0, r3
}
 8003d0e:	bd10      	pop	{r4, pc}

08003d10 <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 8003d10:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	f04f 0302 	mov.w	r3, #2
 8003d1a:	d00f      	beq.n	8003d3c <HAL_LTDC_EnableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8003d1c:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d1e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8003d22:	3184      	adds	r1, #132	; 0x84
 8003d24:	6803      	ldr	r3, [r0, #0]
 8003d26:	585a      	ldr	r2, [r3, r1]
 8003d28:	f042 0202 	orr.w	r2, r2, #2
 8003d2c:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d2e:	2201      	movs	r2, #1
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 8003d32:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d34:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003d38:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8003d3c:	4618      	mov	r0, r3
}
 8003d3e:	4770      	bx	lr

08003d40 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8003d40:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	f04f 0302 	mov.w	r3, #2
 8003d4a:	d00c      	beq.n	8003d66 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003d4c:	4a07      	ldr	r2, [pc, #28]	; (8003d6c <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d4e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003d52:	6993      	ldr	r3, [r2, #24]
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003d60:	2300      	movs	r3, #0
 8003d62:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8003d66:	4618      	mov	r0, r3
}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40016800 	.word	0x40016800

08003d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d74:	4604      	mov	r4, r0
 8003d76:	b340      	cbz	r0, 8003dca <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d78:	6803      	ldr	r3, [r0, #0]
 8003d7a:	07dd      	lsls	r5, r3, #31
 8003d7c:	d410      	bmi.n	8003da0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	0798      	lsls	r0, r3, #30
 8003d82:	d45e      	bmi.n	8003e42 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	071a      	lsls	r2, r3, #28
 8003d88:	f100 80a0 	bmi.w	8003ecc <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	075b      	lsls	r3, r3, #29
 8003d90:	f100 80be 	bmi.w	8003f10 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d94:	69a0      	ldr	r0, [r4, #24]
 8003d96:	2800      	cmp	r0, #0
 8003d98:	f040 811f 	bne.w	8003fda <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	e02b      	b.n	8003df8 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003da0:	4ba6      	ldr	r3, [pc, #664]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	f002 020c 	and.w	r2, r2, #12
 8003da8:	2a04      	cmp	r2, #4
 8003daa:	d007      	beq.n	8003dbc <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003db2:	2a08      	cmp	r2, #8
 8003db4:	d10b      	bne.n	8003dce <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	0251      	lsls	r1, r2, #9
 8003dba:	d508      	bpl.n	8003dce <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbc:	4b9f      	ldr	r3, [pc, #636]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	039a      	lsls	r2, r3, #14
 8003dc2:	d5dc      	bpl.n	8003d7e <HAL_RCC_OscConfig+0xe>
 8003dc4:	6863      	ldr	r3, [r4, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1d9      	bne.n	8003d7e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003dca:	2001      	movs	r0, #1
 8003dcc:	e014      	b.n	8003df8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dce:	6862      	ldr	r2, [r4, #4]
 8003dd0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003dd4:	d113      	bne.n	8003dfe <HAL_RCC_OscConfig+0x8e>
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ddc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003dde:	f7fe fdc5 	bl	800296c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	4e96      	ldr	r6, [pc, #600]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8003de4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de6:	6833      	ldr	r3, [r6, #0]
 8003de8:	039b      	lsls	r3, r3, #14
 8003dea:	d4c8      	bmi.n	8003d7e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe fdbe 	bl	800296c <HAL_GetTick>
 8003df0:	1b40      	subs	r0, r0, r5
 8003df2:	2864      	cmp	r0, #100	; 0x64
 8003df4:	d9f7      	bls.n	8003de6 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8003df6:	2003      	movs	r0, #3
}
 8003df8:	b002      	add	sp, #8
 8003dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfe:	4d8f      	ldr	r5, [pc, #572]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
 8003e00:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003e04:	682b      	ldr	r3, [r5, #0]
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_OscConfig+0xa8>
 8003e08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e0c:	602b      	str	r3, [r5, #0]
 8003e0e:	682b      	ldr	r3, [r5, #0]
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e14:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e16:	e7e2      	b.n	8003dde <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1c:	602b      	str	r3, [r5, #0]
 8003e1e:	682b      	ldr	r3, [r5, #0]
 8003e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e24:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e26:	2a00      	cmp	r2, #0
 8003e28:	d1d9      	bne.n	8003dde <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8003e2a:	f7fe fd9f 	bl	800296c <HAL_GetTick>
 8003e2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	039f      	lsls	r7, r3, #14
 8003e34:	d5a3      	bpl.n	8003d7e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e36:	f7fe fd99 	bl	800296c <HAL_GetTick>
 8003e3a:	1b80      	subs	r0, r0, r6
 8003e3c:	2864      	cmp	r0, #100	; 0x64
 8003e3e:	d9f7      	bls.n	8003e30 <HAL_RCC_OscConfig+0xc0>
 8003e40:	e7d9      	b.n	8003df6 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e42:	4b7e      	ldr	r3, [pc, #504]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	f012 0f0c 	tst.w	r2, #12
 8003e4a:	d007      	beq.n	8003e5c <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e52:	2a08      	cmp	r2, #8
 8003e54:	d111      	bne.n	8003e7a <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	025e      	lsls	r6, r3, #9
 8003e5a:	d40e      	bmi.n	8003e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5c:	4b77      	ldr	r3, [pc, #476]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	0795      	lsls	r5, r2, #30
 8003e62:	d502      	bpl.n	8003e6a <HAL_RCC_OscConfig+0xfa>
 8003e64:	68e2      	ldr	r2, [r4, #12]
 8003e66:	2a01      	cmp	r2, #1
 8003e68:	d1af      	bne.n	8003dca <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	6921      	ldr	r1, [r4, #16]
 8003e6e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003e72:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8003e76:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e78:	e784      	b.n	8003d84 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e7a:	68e2      	ldr	r2, [r4, #12]
 8003e7c:	4b70      	ldr	r3, [pc, #448]	; (8004040 <HAL_RCC_OscConfig+0x2d0>)
 8003e7e:	b1b2      	cbz	r2, 8003eae <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8003e80:	2201      	movs	r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e84:	f7fe fd72 	bl	800296c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e88:	4d6c      	ldr	r5, [pc, #432]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8003e8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	0798      	lsls	r0, r3, #30
 8003e90:	d507      	bpl.n	8003ea2 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e92:	682b      	ldr	r3, [r5, #0]
 8003e94:	6922      	ldr	r2, [r4, #16]
 8003e96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003e9a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e9e:	602b      	str	r3, [r5, #0]
 8003ea0:	e770      	b.n	8003d84 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea2:	f7fe fd63 	bl	800296c <HAL_GetTick>
 8003ea6:	1b80      	subs	r0, r0, r6
 8003ea8:	2802      	cmp	r0, #2
 8003eaa:	d9ef      	bls.n	8003e8c <HAL_RCC_OscConfig+0x11c>
 8003eac:	e7a3      	b.n	8003df6 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8003eae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003eb0:	f7fe fd5c 	bl	800296c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb4:	4e61      	ldr	r6, [pc, #388]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8003eb6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb8:	6833      	ldr	r3, [r6, #0]
 8003eba:	0799      	lsls	r1, r3, #30
 8003ebc:	f57f af62 	bpl.w	8003d84 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec0:	f7fe fd54 	bl	800296c <HAL_GetTick>
 8003ec4:	1b40      	subs	r0, r0, r5
 8003ec6:	2802      	cmp	r0, #2
 8003ec8:	d9f6      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x148>
 8003eca:	e794      	b.n	8003df6 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ecc:	6962      	ldr	r2, [r4, #20]
 8003ece:	4b5d      	ldr	r3, [pc, #372]	; (8004044 <HAL_RCC_OscConfig+0x2d4>)
 8003ed0:	b17a      	cbz	r2, 8003ef2 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003ed6:	f7fe fd49 	bl	800296c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eda:	4e58      	ldr	r6, [pc, #352]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8003edc:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ede:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003ee0:	079f      	lsls	r7, r3, #30
 8003ee2:	f53f af53 	bmi.w	8003d8c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee6:	f7fe fd41 	bl	800296c <HAL_GetTick>
 8003eea:	1b40      	subs	r0, r0, r5
 8003eec:	2802      	cmp	r0, #2
 8003eee:	d9f6      	bls.n	8003ede <HAL_RCC_OscConfig+0x16e>
 8003ef0:	e781      	b.n	8003df6 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8003ef2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003ef4:	f7fe fd3a 	bl	800296c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef8:	4e50      	ldr	r6, [pc, #320]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8003efa:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003efc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003efe:	0798      	lsls	r0, r3, #30
 8003f00:	f57f af44 	bpl.w	8003d8c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f04:	f7fe fd32 	bl	800296c <HAL_GetTick>
 8003f08:	1b40      	subs	r0, r0, r5
 8003f0a:	2802      	cmp	r0, #2
 8003f0c:	d9f6      	bls.n	8003efc <HAL_RCC_OscConfig+0x18c>
 8003f0e:	e772      	b.n	8003df6 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f10:	4b4a      	ldr	r3, [pc, #296]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
 8003f12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f14:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8003f18:	d128      	bne.n	8003f6c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	9201      	str	r2, [sp, #4]
 8003f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	9301      	str	r3, [sp, #4]
 8003f2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003f2e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f30:	4d45      	ldr	r5, [pc, #276]	; (8004048 <HAL_RCC_OscConfig+0x2d8>)
 8003f32:	682b      	ldr	r3, [r5, #0]
 8003f34:	05d9      	lsls	r1, r3, #23
 8003f36:	d51b      	bpl.n	8003f70 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f38:	68a3      	ldr	r3, [r4, #8]
 8003f3a:	4d40      	ldr	r5, [pc, #256]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d127      	bne.n	8003f90 <HAL_RCC_OscConfig+0x220>
 8003f40:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003f42:	f043 0301 	orr.w	r3, r3, #1
 8003f46:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003f48:	f7fe fd10 	bl	800296c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4c:	4e3b      	ldr	r6, [pc, #236]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8003f4e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f50:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f54:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003f56:	079b      	lsls	r3, r3, #30
 8003f58:	d539      	bpl.n	8003fce <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8003f5a:	2f00      	cmp	r7, #0
 8003f5c:	f43f af1a 	beq.w	8003d94 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f60:	4a36      	ldr	r2, [pc, #216]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
 8003f62:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f68:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6a:	e713      	b.n	8003d94 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003f6c:	2700      	movs	r7, #0
 8003f6e:	e7df      	b.n	8003f30 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f70:	682b      	ldr	r3, [r5, #0]
 8003f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f76:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003f78:	f7fe fcf8 	bl	800296c <HAL_GetTick>
 8003f7c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	682b      	ldr	r3, [r5, #0]
 8003f80:	05da      	lsls	r2, r3, #23
 8003f82:	d4d9      	bmi.n	8003f38 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f84:	f7fe fcf2 	bl	800296c <HAL_GetTick>
 8003f88:	1b80      	subs	r0, r0, r6
 8003f8a:	2802      	cmp	r0, #2
 8003f8c:	d9f7      	bls.n	8003f7e <HAL_RCC_OscConfig+0x20e>
 8003f8e:	e732      	b.n	8003df6 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d104      	bne.n	8003f9e <HAL_RCC_OscConfig+0x22e>
 8003f94:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003f96:	f043 0304 	orr.w	r3, r3, #4
 8003f9a:	672b      	str	r3, [r5, #112]	; 0x70
 8003f9c:	e7d0      	b.n	8003f40 <HAL_RCC_OscConfig+0x1d0>
 8003f9e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	672a      	str	r2, [r5, #112]	; 0x70
 8003fa6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003fa8:	f022 0204 	bic.w	r2, r2, #4
 8003fac:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ca      	bne.n	8003f48 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8003fb2:	f7fe fcdb 	bl	800296c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003fba:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fbc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003fbe:	0798      	lsls	r0, r3, #30
 8003fc0:	d5cb      	bpl.n	8003f5a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fe fcd3 	bl	800296c <HAL_GetTick>
 8003fc6:	1b80      	subs	r0, r0, r6
 8003fc8:	4540      	cmp	r0, r8
 8003fca:	d9f7      	bls.n	8003fbc <HAL_RCC_OscConfig+0x24c>
 8003fcc:	e713      	b.n	8003df6 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fce:	f7fe fccd 	bl	800296c <HAL_GetTick>
 8003fd2:	1b40      	subs	r0, r0, r5
 8003fd4:	4540      	cmp	r0, r8
 8003fd6:	d9bd      	bls.n	8003f54 <HAL_RCC_OscConfig+0x1e4>
 8003fd8:	e70d      	b.n	8003df6 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fda:	4d18      	ldr	r5, [pc, #96]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
 8003fdc:	68ab      	ldr	r3, [r5, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d047      	beq.n	8004076 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fe6:	4e19      	ldr	r6, [pc, #100]	; (800404c <HAL_RCC_OscConfig+0x2dc>)
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003fec:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fee:	d135      	bne.n	800405c <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8003ff0:	f7fe fcbc 	bl	800296c <HAL_GetTick>
 8003ff4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ff6:	682b      	ldr	r3, [r5, #0]
 8003ff8:	0199      	lsls	r1, r3, #6
 8003ffa:	d429      	bmi.n	8004050 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ffc:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8004000:	4313      	orrs	r3, r2
 8004002:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004004:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004008:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800400a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800400e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004010:	0852      	lsrs	r2, r2, #1
 8004012:	3a01      	subs	r2, #1
 8004014:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004018:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800401a:	2301      	movs	r3, #1
 800401c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800401e:	f7fe fca5 	bl	800296c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004022:	4d06      	ldr	r5, [pc, #24]	; (800403c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8004024:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004026:	682b      	ldr	r3, [r5, #0]
 8004028:	019a      	lsls	r2, r3, #6
 800402a:	f53f aeb7 	bmi.w	8003d9c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800402e:	f7fe fc9d 	bl	800296c <HAL_GetTick>
 8004032:	1b00      	subs	r0, r0, r4
 8004034:	2802      	cmp	r0, #2
 8004036:	d9f6      	bls.n	8004026 <HAL_RCC_OscConfig+0x2b6>
 8004038:	e6dd      	b.n	8003df6 <HAL_RCC_OscConfig+0x86>
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	42470000 	.word	0x42470000
 8004044:	42470e80 	.word	0x42470e80
 8004048:	40007000 	.word	0x40007000
 800404c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004050:	f7fe fc8c 	bl	800296c <HAL_GetTick>
 8004054:	1bc0      	subs	r0, r0, r7
 8004056:	2802      	cmp	r0, #2
 8004058:	d9cd      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x286>
 800405a:	e6cc      	b.n	8003df6 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 800405c:	f7fe fc86 	bl	800296c <HAL_GetTick>
 8004060:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	682b      	ldr	r3, [r5, #0]
 8004064:	019b      	lsls	r3, r3, #6
 8004066:	f57f ae99 	bpl.w	8003d9c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406a:	f7fe fc7f 	bl	800296c <HAL_GetTick>
 800406e:	1b00      	subs	r0, r0, r4
 8004070:	2802      	cmp	r0, #2
 8004072:	d9f6      	bls.n	8004062 <HAL_RCC_OscConfig+0x2f2>
 8004074:	e6bf      	b.n	8003df6 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004076:	2801      	cmp	r0, #1
 8004078:	f43f aebe 	beq.w	8003df8 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 800407c:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407e:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004080:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004084:	4291      	cmp	r1, r2
 8004086:	f47f aea0 	bne.w	8003dca <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800408c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004090:	428a      	cmp	r2, r1
 8004092:	f47f ae9a 	bne.w	8003dca <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004096:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004098:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800409c:	401a      	ands	r2, r3
 800409e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80040a2:	f47f ae92 	bne.w	8003dca <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80040a8:	0852      	lsrs	r2, r2, #1
 80040aa:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80040ae:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80040b4:	f47f ae89 	bne.w	8003dca <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80040ba:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040be:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80040c2:	f43f ae6b 	beq.w	8003d9c <HAL_RCC_OscConfig+0x2c>
 80040c6:	e680      	b.n	8003dca <HAL_RCC_OscConfig+0x5a>

080040c8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040c8:	4913      	ldr	r1, [pc, #76]	; (8004118 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80040ca:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040cc:	688b      	ldr	r3, [r1, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d01c      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x48>
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d11c      	bne.n	8004114 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040da:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040dc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040de:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040e0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e4:	bf14      	ite	ne
 80040e6:	480d      	ldrne	r0, [pc, #52]	; (800411c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e8:	480d      	ldreq	r0, [pc, #52]	; (8004120 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ea:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80040ee:	bf18      	it	ne
 80040f0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040f2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f6:	fba1 0100 	umull	r0, r1, r1, r0
 80040fa:	f7fc fdd5 	bl	8000ca8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040fe:	4b06      	ldr	r3, [pc, #24]	; (8004118 <HAL_RCC_GetSysClockFreq+0x50>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004106:	3301      	adds	r3, #1
 8004108:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800410a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800410e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004110:	4802      	ldr	r0, [pc, #8]	; (800411c <HAL_RCC_GetSysClockFreq+0x54>)
 8004112:	e7fc      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8004114:	4802      	ldr	r0, [pc, #8]	; (8004120 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8004116:	e7fa      	b.n	800410e <HAL_RCC_GetSysClockFreq+0x46>
 8004118:	40023800 	.word	0x40023800
 800411c:	007a1200 	.word	0x007a1200
 8004120:	00f42400 	.word	0x00f42400

08004124 <HAL_RCC_ClockConfig>:
{
 8004124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004128:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800412a:	4604      	mov	r4, r0
 800412c:	b910      	cbnz	r0, 8004134 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800412e:	2001      	movs	r0, #1
}
 8004130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004134:	4b44      	ldr	r3, [pc, #272]	; (8004248 <HAL_RCC_ClockConfig+0x124>)
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	f002 020f 	and.w	r2, r2, #15
 800413c:	428a      	cmp	r2, r1
 800413e:	d328      	bcc.n	8004192 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004140:	6822      	ldr	r2, [r4, #0]
 8004142:	0797      	lsls	r7, r2, #30
 8004144:	d42d      	bmi.n	80041a2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004146:	07d0      	lsls	r0, r2, #31
 8004148:	d441      	bmi.n	80041ce <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800414a:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <HAL_RCC_ClockConfig+0x124>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	f002 020f 	and.w	r2, r2, #15
 8004152:	42aa      	cmp	r2, r5
 8004154:	d866      	bhi.n	8004224 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004156:	6822      	ldr	r2, [r4, #0]
 8004158:	0751      	lsls	r1, r2, #29
 800415a:	d46c      	bmi.n	8004236 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800415c:	0713      	lsls	r3, r2, #28
 800415e:	d507      	bpl.n	8004170 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004160:	4a3a      	ldr	r2, [pc, #232]	; (800424c <HAL_RCC_ClockConfig+0x128>)
 8004162:	6921      	ldr	r1, [r4, #16]
 8004164:	6893      	ldr	r3, [r2, #8]
 8004166:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800416a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800416e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004170:	f7ff ffaa 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8004174:	4b35      	ldr	r3, [pc, #212]	; (800424c <HAL_RCC_ClockConfig+0x128>)
 8004176:	4a36      	ldr	r2, [pc, #216]	; (8004250 <HAL_RCC_ClockConfig+0x12c>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800417e:	5cd3      	ldrb	r3, [r2, r3]
 8004180:	40d8      	lsrs	r0, r3
 8004182:	4b34      	ldr	r3, [pc, #208]	; (8004254 <HAL_RCC_ClockConfig+0x130>)
 8004184:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8004186:	4b34      	ldr	r3, [pc, #208]	; (8004258 <HAL_RCC_ClockConfig+0x134>)
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	f002 f937 	bl	80063fc <HAL_InitTick>
  return HAL_OK;
 800418e:	2000      	movs	r0, #0
 8004190:	e7ce      	b.n	8004130 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004192:	b2ca      	uxtb	r2, r1
 8004194:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	428b      	cmp	r3, r1
 800419e:	d1c6      	bne.n	800412e <HAL_RCC_ClockConfig+0xa>
 80041a0:	e7ce      	b.n	8004140 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a2:	4b2a      	ldr	r3, [pc, #168]	; (800424c <HAL_RCC_ClockConfig+0x128>)
 80041a4:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a8:	bf1e      	ittt	ne
 80041aa:	6899      	ldrne	r1, [r3, #8]
 80041ac:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80041b0:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b2:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041b4:	bf42      	ittt	mi
 80041b6:	6899      	ldrmi	r1, [r3, #8]
 80041b8:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 80041bc:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041be:	4923      	ldr	r1, [pc, #140]	; (800424c <HAL_RCC_ClockConfig+0x128>)
 80041c0:	68a0      	ldr	r0, [r4, #8]
 80041c2:	688b      	ldr	r3, [r1, #8]
 80041c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041c8:	4303      	orrs	r3, r0
 80041ca:	608b      	str	r3, [r1, #8]
 80041cc:	e7bb      	b.n	8004146 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ce:	6862      	ldr	r2, [r4, #4]
 80041d0:	4b1e      	ldr	r3, [pc, #120]	; (800424c <HAL_RCC_ClockConfig+0x128>)
 80041d2:	2a01      	cmp	r2, #1
 80041d4:	d11c      	bne.n	8004210 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041dc:	d0a7      	beq.n	800412e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041de:	4e1b      	ldr	r6, [pc, #108]	; (800424c <HAL_RCC_ClockConfig+0x128>)
 80041e0:	68b3      	ldr	r3, [r6, #8]
 80041e2:	f023 0303 	bic.w	r3, r3, #3
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80041ea:	f7fe fbbf 	bl	800296c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041ee:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80041f2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f4:	68b3      	ldr	r3, [r6, #8]
 80041f6:	6862      	ldr	r2, [r4, #4]
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004200:	d0a3      	beq.n	800414a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004202:	f7fe fbb3 	bl	800296c <HAL_GetTick>
 8004206:	1bc0      	subs	r0, r0, r7
 8004208:	4540      	cmp	r0, r8
 800420a:	d9f3      	bls.n	80041f4 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800420c:	2003      	movs	r0, #3
 800420e:	e78f      	b.n	8004130 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004210:	1e91      	subs	r1, r2, #2
 8004212:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004214:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004216:	d802      	bhi.n	800421e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004218:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800421c:	e7de      	b.n	80041dc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421e:	f013 0f02 	tst.w	r3, #2
 8004222:	e7db      	b.n	80041dc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004224:	b2ea      	uxtb	r2, r5
 8004226:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 030f 	and.w	r3, r3, #15
 800422e:	42ab      	cmp	r3, r5
 8004230:	f47f af7d 	bne.w	800412e <HAL_RCC_ClockConfig+0xa>
 8004234:	e78f      	b.n	8004156 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004236:	4905      	ldr	r1, [pc, #20]	; (800424c <HAL_RCC_ClockConfig+0x128>)
 8004238:	68e0      	ldr	r0, [r4, #12]
 800423a:	688b      	ldr	r3, [r1, #8]
 800423c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8004240:	4303      	orrs	r3, r0
 8004242:	608b      	str	r3, [r1, #8]
 8004244:	e78a      	b.n	800415c <HAL_RCC_ClockConfig+0x38>
 8004246:	bf00      	nop
 8004248:	40023c00 	.word	0x40023c00
 800424c:	40023800 	.word	0x40023800
 8004250:	0813cd08 	.word	0x0813cd08
 8004254:	20000a80 	.word	0x20000a80
 8004258:	200000d0 	.word	0x200000d0

0800425c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x14>)
 800425e:	4a05      	ldr	r2, [pc, #20]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004266:	5cd3      	ldrb	r3, [r2, r3]
 8004268:	4a03      	ldr	r2, [pc, #12]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800426a:	6810      	ldr	r0, [r2, #0]
}
 800426c:	40d8      	lsrs	r0, r3
 800426e:	4770      	bx	lr
 8004270:	40023800 	.word	0x40023800
 8004274:	0813cd18 	.word	0x0813cd18
 8004278:	20000a80 	.word	0x20000a80

0800427c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <HAL_RCC_GetPCLK2Freq+0x14>)
 800427e:	4a05      	ldr	r2, [pc, #20]	; (8004294 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004286:	5cd3      	ldrb	r3, [r2, r3]
 8004288:	4a03      	ldr	r2, [pc, #12]	; (8004298 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800428a:	6810      	ldr	r0, [r2, #0]
}
 800428c:	40d8      	lsrs	r0, r3
 800428e:	4770      	bx	lr
 8004290:	40023800 	.word	0x40023800
 8004294:	0813cd18 	.word	0x0813cd18
 8004298:	20000a80 	.word	0x20000a80

0800429c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800429c:	230f      	movs	r3, #15
 800429e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <HAL_RCC_GetClockConfig+0x34>)
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	f002 0203 	and.w	r2, r2, #3
 80042a8:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80042b0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80042b8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	08db      	lsrs	r3, r3, #3
 80042be:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80042c2:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <HAL_RCC_GetClockConfig+0x38>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	600b      	str	r3, [r1, #0]
}
 80042ce:	4770      	bx	lr
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40023c00 	.word	0x40023c00

080042d8 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80042d8:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042da:	f013 0f43 	tst.w	r3, #67	; 0x43
{
 80042de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042e0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042e2:	f040 808a 	bne.w	80043fa <HAL_RCCEx_PeriphCLKConfig+0x122>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	f013 0f0c 	tst.w	r3, #12
 80042ec:	d044      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042ee:	4d89      	ldr	r5, [pc, #548]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042f0:	4e89      	ldr	r6, [pc, #548]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    __HAL_RCC_PLLSAI_DISABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80042f6:	f7fe fb39 	bl	800296c <HAL_GetTick>
 80042fa:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042fc:	6833      	ldr	r3, [r6, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	f100 80cc 	bmi.w	800449c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004304:	6821      	ldr	r1, [r4, #0]
 8004306:	074f      	lsls	r7, r1, #29
 8004308:	d515      	bpl.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800430a:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800430e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004312:	061b      	lsls	r3, r3, #24
 8004314:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8004318:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800431c:	4313      	orrs	r3, r2
 800431e:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004322:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8004326:	6a22      	ldr	r2, [r4, #32]
 8004328:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800432c:	3a01      	subs	r2, #1
 800432e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004332:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004336:	070e      	lsls	r6, r1, #28
 8004338:	d514      	bpl.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800433a:	4a77      	ldr	r2, [pc, #476]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x240>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800433c:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800433e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004342:	6920      	ldr	r0, [r4, #16]
 8004344:	071b      	lsls	r3, r3, #28
 8004346:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800434a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800434e:	430b      	orrs	r3, r1
 8004350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004354:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004358:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800435a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800435e:	430b      	orrs	r3, r1
 8004360:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004364:	2301      	movs	r3, #1
 8004366:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004368:	f7fe fb00 	bl	800296c <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800436c:	4e6a      	ldr	r6, [pc, #424]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    tickstart = HAL_GetTick();
 800436e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004370:	6833      	ldr	r3, [r6, #0]
 8004372:	0098      	lsls	r0, r3, #2
 8004374:	f140 8099 	bpl.w	80044aa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	069a      	lsls	r2, r3, #26
 800437c:	d533      	bpl.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	4b65      	ldr	r3, [pc, #404]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x240>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004384:	4d65      	ldr	r5, [pc, #404]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x244>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004388:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800438c:	641a      	str	r2, [r3, #64]	; 0x40
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439e:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fe fae4 	bl	800296c <HAL_GetTick>
 80043a4:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043a6:	682b      	ldr	r3, [r5, #0]
 80043a8:	05d9      	lsls	r1, r3, #23
 80043aa:	f140 8085 	bpl.w	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ae:	4d5a      	ldr	r5, [pc, #360]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043b2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80043b6:	f040 8086 	bne.w	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043bc:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80043c0:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80043c4:	4a54      	ldr	r2, [pc, #336]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043c6:	f040 80a0 	bne.w	800450a <HAL_RCCEx_PeriphCLKConfig+0x232>
 80043ca:	6891      	ldr	r1, [r2, #8]
 80043cc:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80043d0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80043d4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80043d8:	4301      	orrs	r1, r0
 80043da:	6091      	str	r1, [r2, #8]
 80043dc:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80043de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e2:	430b      	orrs	r3, r1
 80043e4:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80043e6:	6820      	ldr	r0, [r4, #0]
 80043e8:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043ec:	bf1f      	itttt	ne
 80043ee:	4b4c      	ldrne	r3, [pc, #304]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043f0:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 80043f4:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 80043f6:	2000      	movne	r0, #0
 80043f8:	e04e      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_PLLI2S_DISABLE();
 80043fa:	4d4a      	ldr	r5, [pc, #296]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80043fc:	4f46      	ldr	r7, [pc, #280]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    __HAL_RCC_PLLI2S_DISABLE();
 80043fe:	2300      	movs	r3, #0
 8004400:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004402:	f7fe fab3 	bl	800296c <HAL_GetTick>
 8004406:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	011a      	lsls	r2, r3, #4
 800440c:	d43e      	bmi.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800440e:	6821      	ldr	r1, [r4, #0]
 8004410:	07cb      	lsls	r3, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004412:	bf41      	itttt	mi
 8004414:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8004418:	071b      	lslmi	r3, r3, #28
 800441a:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 800441e:	f8c7 3084 	strmi.w	r3, [r7, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004422:	078e      	lsls	r6, r1, #30
 8004424:	d515      	bpl.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004426:	4a3c      	ldr	r2, [pc, #240]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x240>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004428:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800442a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800442e:	6866      	ldr	r6, [r4, #4]
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004436:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800443a:	4303      	orrs	r3, r0
 800443c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004440:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8004444:	69e3      	ldr	r3, [r4, #28]
 8004446:	f020 001f 	bic.w	r0, r0, #31
 800444a:	3b01      	subs	r3, #1
 800444c:	4303      	orrs	r3, r0
 800444e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004452:	0648      	lsls	r0, r1, #25
 8004454:	d50a      	bpl.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004456:	68e3      	ldr	r3, [r4, #12]
 8004458:	6862      	ldr	r2, [r4, #4]
 800445a:	061b      	lsls	r3, r3, #24
 800445c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004460:	68a2      	ldr	r2, [r4, #8]
 8004462:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004466:	4a2c      	ldr	r2, [pc, #176]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004468:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800446c:	2301      	movs	r3, #1
 800446e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004470:	f7fe fa7c 	bl	800296c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004474:	4e28      	ldr	r6, [pc, #160]	; (8004518 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    tickstart = HAL_GetTick();
 8004476:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004478:	6833      	ldr	r3, [r6, #0]
 800447a:	0119      	lsls	r1, r3, #4
 800447c:	f53f af33 	bmi.w	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004480:	f7fe fa74 	bl	800296c <HAL_GetTick>
 8004484:	1b40      	subs	r0, r0, r5
 8004486:	2802      	cmp	r0, #2
 8004488:	d9f6      	bls.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800448a:	e004      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800448c:	f7fe fa6e 	bl	800296c <HAL_GetTick>
 8004490:	1b80      	subs	r0, r0, r6
 8004492:	2802      	cmp	r0, #2
 8004494:	d9b8      	bls.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x130>
        return HAL_TIMEOUT;
 8004496:	2003      	movs	r0, #3
}
 8004498:	b003      	add	sp, #12
 800449a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800449c:	f7fe fa66 	bl	800296c <HAL_GetTick>
 80044a0:	1bc0      	subs	r0, r0, r7
 80044a2:	2802      	cmp	r0, #2
 80044a4:	f67f af2a 	bls.w	80042fc <HAL_RCCEx_PeriphCLKConfig+0x24>
 80044a8:	e7f5      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80044aa:	f7fe fa5f 	bl	800296c <HAL_GetTick>
 80044ae:	1b40      	subs	r0, r0, r5
 80044b0:	2802      	cmp	r0, #2
 80044b2:	f67f af5d 	bls.w	8004370 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80044b6:	e7ee      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80044b8:	f7fe fa58 	bl	800296c <HAL_GetTick>
 80044bc:	1b80      	subs	r0, r0, r6
 80044be:	2802      	cmp	r0, #2
 80044c0:	f67f af71 	bls.w	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 80044c4:	e7e7      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80044c8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80044cc:	4293      	cmp	r3, r2
 80044ce:	f43f af74 	beq.w	80043ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80044d4:	4a14      	ldr	r2, [pc, #80]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80044d6:	2101      	movs	r1, #1
 80044d8:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044de:	2100      	movs	r1, #0
 80044e0:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80044e2:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80044e6:	07da      	lsls	r2, r3, #31
 80044e8:	f57f af67 	bpl.w	80043ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
        tickstart = HAL_GetTick();
 80044ec:	f7fe fa3e 	bl	800296c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f0:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80044f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80044f8:	079b      	lsls	r3, r3, #30
 80044fa:	f53f af5e 	bmi.w	80043ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044fe:	f7fe fa35 	bl	800296c <HAL_GetTick>
 8004502:	1b80      	subs	r0, r0, r6
 8004504:	42b8      	cmp	r0, r7
 8004506:	d9f6      	bls.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004508:	e7c5      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800450a:	6891      	ldr	r1, [r2, #8]
 800450c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004510:	e763      	b.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x102>
 8004512:	bf00      	nop
 8004514:	42470070 	.word	0x42470070
 8004518:	40023800 	.word	0x40023800
 800451c:	40007000 	.word	0x40007000
 8004520:	424711e0 	.word	0x424711e0
 8004524:	42470068 	.word	0x42470068
 8004528:	42470e40 	.word	0x42470e40

0800452c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800452c:	b538      	push	{r3, r4, r5, lr}
 800452e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8004530:	4604      	mov	r4, r0
 8004532:	b1c8      	cbz	r0, 8004568 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004534:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004538:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800453c:	b91b      	cbnz	r3, 8004546 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800453e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004542:	f000 ffab 	bl	800549c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004546:	2302      	movs	r3, #2
 8004548:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800454c:	1d21      	adds	r1, r4, #4
 800454e:	6820      	ldr	r0, [r4, #0]
 8004550:	f000 fe72 	bl	8005238 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8004554:	6862      	ldr	r2, [r4, #4]
 8004556:	6820      	ldr	r0, [r4, #0]
 8004558:	4629      	mov	r1, r5
 800455a:	f000 fea3 	bl	80052a4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800455e:	2301      	movs	r3, #1
 8004560:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8004564:	2000      	movs	r0, #0
}
 8004566:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004568:	2001      	movs	r0, #1
 800456a:	e7fc      	b.n	8004566 <HAL_SDRAM_Init+0x3a>

0800456c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800456c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800456e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004572:	2b02      	cmp	r3, #2
{
 8004574:	4604      	mov	r4, r0
 8004576:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004578:	b2d8      	uxtb	r0, r3
 800457a:	d00d      	beq.n	8004598 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800457c:	2302      	movs	r3, #2
 800457e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004582:	6820      	ldr	r0, [r4, #0]
 8004584:	f000 feca 	bl	800531c <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004588:	682b      	ldr	r3, [r5, #0]
 800458a:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800458c:	bf0c      	ite	eq
 800458e:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004590:	2301      	movne	r3, #1
 8004592:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8004596:	2000      	movs	r0, #0
}
 8004598:	bd38      	pop	{r3, r4, r5, pc}

0800459a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800459a:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800459c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80045a0:	2b02      	cmp	r3, #2
{
 80045a2:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80045a4:	b2d8      	uxtb	r0, r3
 80045a6:	d009      	beq.n	80045bc <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80045a8:	2302      	movs	r3, #2
 80045aa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80045ae:	6820      	ldr	r0, [r4, #0]
 80045b0:	f000 fedb 	bl	800536a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80045b4:	2301      	movs	r3, #1
 80045b6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80045ba:	2000      	movs	r0, #0
}
 80045bc:	bd10      	pop	{r4, pc}
	...

080045c0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80045c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80045c4:	461d      	mov	r5, r3
 80045c6:	4617      	mov	r7, r2
 80045c8:	4688      	mov	r8, r1
 80045ca:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045cc:	f7fe f9ce 	bl	800296c <HAL_GetTick>
 80045d0:	443d      	add	r5, r7
 80045d2:	1a2c      	subs	r4, r5, r0
  tmp_tickstart = HAL_GetTick();
 80045d4:	f7fe f9ca 	bl	800296c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045d8:	4b22      	ldr	r3, [pc, #136]	; (8004664 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 80045e0:	4605      	mov	r5, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045e2:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045e4:	6832      	ldr	r2, [r6, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80045e6:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045e8:	6893      	ldr	r3, [r2, #8]
 80045ea:	ea38 0303 	bics.w	r3, r8, r3
 80045ee:	d001      	beq.n	80045f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80045f0:	2000      	movs	r0, #0
 80045f2:	e02d      	b.n	8004650 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
    if (Timeout != HAL_MAX_DELAY)
 80045f4:	1c7b      	adds	r3, r7, #1
 80045f6:	d0f7      	beq.n	80045e8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045f8:	f7fe f9b8 	bl	800296c <HAL_GetTick>
 80045fc:	1b40      	subs	r0, r0, r5
 80045fe:	42a0      	cmp	r0, r4
 8004600:	d329      	bcc.n	8004656 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004602:	6833      	ldr	r3, [r6, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800460a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800460c:	6872      	ldr	r2, [r6, #4]
 800460e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004612:	d10a      	bne.n	800462a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8004614:	68b2      	ldr	r2, [r6, #8]
 8004616:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800461a:	d002      	beq.n	8004622 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800461c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004620:	d103      	bne.n	800462a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004628:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800462a:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800462c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004630:	d107      	bne.n	8004642 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
          SPI_RESET_CRC(hspi);
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004640:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004642:	2301      	movs	r3, #1
 8004644:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004648:	2300      	movs	r3, #0
 800464a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800464e:	2003      	movs	r0, #3
}
 8004650:	b002      	add	sp, #8
 8004652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8004656:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004658:	2b00      	cmp	r3, #0
      count--;
 800465a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800465c:	bf08      	it	eq
 800465e:	2400      	moveq	r4, #0
      count--;
 8004660:	3b01      	subs	r3, #1
 8004662:	e7bf      	b.n	80045e4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8004664:	20000a80 	.word	0x20000a80

08004668 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004668:	b538      	push	{r3, r4, r5, lr}
 800466a:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800466c:	6842      	ldr	r2, [r0, #4]
 800466e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8004672:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004674:	d11f      	bne.n	80046b6 <SPI_EndRxTransaction+0x4e>
 8004676:	6882      	ldr	r2, [r0, #8]
 8004678:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800467c:	d002      	beq.n	8004684 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800467e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004682:	d107      	bne.n	8004694 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004684:	6825      	ldr	r5, [r4, #0]
 8004686:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004688:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 800468c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8004690:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004692:	d007      	beq.n	80046a4 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004694:	460a      	mov	r2, r1
 8004696:	2180      	movs	r1, #128	; 0x80
 8004698:	4620      	mov	r0, r4
 800469a:	f7ff ff91 	bl	80045c0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800469e:	b920      	cbnz	r0, 80046aa <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80046a0:	2000      	movs	r0, #0
}
 80046a2:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046a4:	460a      	mov	r2, r1
 80046a6:	2101      	movs	r1, #1
 80046a8:	e7f6      	b.n	8004698 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046ac:	f043 0320 	orr.w	r3, r3, #32
 80046b0:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80046b2:	2003      	movs	r0, #3
 80046b4:	e7f5      	b.n	80046a2 <SPI_EndRxTransaction+0x3a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046b6:	460a      	mov	r2, r1
 80046b8:	2101      	movs	r1, #1
 80046ba:	e7ee      	b.n	800469a <SPI_EndRxTransaction+0x32>

080046bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046be:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046c0:	4a12      	ldr	r2, [pc, #72]	; (800470c <SPI_EndRxTxTransaction+0x50>)
 80046c2:	4d13      	ldr	r5, [pc, #76]	; (8004710 <SPI_EndRxTxTransaction+0x54>)
 80046c4:	6812      	ldr	r2, [r2, #0]
 80046c6:	fbb2 f5f5 	udiv	r5, r2, r5
 80046ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046ce:	436a      	muls	r2, r5
 80046d0:	9201      	str	r2, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046d2:	6842      	ldr	r2, [r0, #4]
 80046d4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80046d8:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046da:	d10b      	bne.n	80046f4 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046dc:	460a      	mov	r2, r1
 80046de:	2180      	movs	r1, #128	; 0x80
 80046e0:	f7ff ff6e 	bl	80045c0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80046e4:	b178      	cbz	r0, 8004706 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80046e8:	f043 0320 	orr.w	r3, r3, #32
 80046ec:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80046ee:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80046f0:	b003      	add	sp, #12
 80046f2:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 80046f4:	9b01      	ldr	r3, [sp, #4]
 80046f6:	b133      	cbz	r3, 8004706 <SPI_EndRxTxTransaction+0x4a>
      count--;
 80046f8:	9b01      	ldr	r3, [sp, #4]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	061b      	lsls	r3, r3, #24
 8004704:	d4f6      	bmi.n	80046f4 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8004706:	2000      	movs	r0, #0
 8004708:	e7f2      	b.n	80046f0 <SPI_EndRxTxTransaction+0x34>
 800470a:	bf00      	nop
 800470c:	20000a80 	.word	0x20000a80
 8004710:	016e3600 	.word	0x016e3600

08004714 <HAL_SPI_Init>:
{
 8004714:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8004716:	4604      	mov	r4, r0
 8004718:	2800      	cmp	r0, #0
 800471a:	d055      	beq.n	80047c8 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800471c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800471e:	2b00      	cmp	r3, #0
 8004720:	d14e      	bne.n	80047c0 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004722:	6842      	ldr	r2, [r0, #4]
 8004724:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004728:	d000      	beq.n	800472c <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800472a:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800472c:	2300      	movs	r3, #0
 800472e:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004730:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004734:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004738:	b923      	cbnz	r3, 8004744 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800473a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800473e:	4620      	mov	r0, r4
 8004740:	f001 fdf4 	bl	800632c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004744:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004746:	68a0      	ldr	r0, [r4, #8]
 8004748:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800474a:	2302      	movs	r3, #2
 800474c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004750:	680b      	ldr	r3, [r1, #0]
 8004752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004756:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004758:	6863      	ldr	r3, [r4, #4]
 800475a:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800475e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8004762:	4303      	orrs	r3, r0
 8004764:	68e0      	ldr	r0, [r4, #12]
 8004766:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 800476a:	4303      	orrs	r3, r0
 800476c:	6920      	ldr	r0, [r4, #16]
 800476e:	f000 0002 	and.w	r0, r0, #2
 8004772:	4303      	orrs	r3, r0
 8004774:	6960      	ldr	r0, [r4, #20]
 8004776:	f000 0001 	and.w	r0, r0, #1
 800477a:	4303      	orrs	r3, r0
 800477c:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8004780:	4303      	orrs	r3, r0
 8004782:	69e0      	ldr	r0, [r4, #28]
 8004784:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8004788:	4303      	orrs	r3, r0
 800478a:	6a20      	ldr	r0, [r4, #32]
 800478c:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8004790:	4303      	orrs	r3, r0
 8004792:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004794:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8004798:	4303      	orrs	r3, r0
 800479a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800479c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800479e:	0c12      	lsrs	r2, r2, #16
 80047a0:	f003 0310 	and.w	r3, r3, #16
 80047a4:	f002 0204 	and.w	r2, r2, #4
 80047a8:	431a      	orrs	r2, r3
 80047aa:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047ac:	69cb      	ldr	r3, [r1, #28]
 80047ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047b2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047b4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80047b6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047b8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047ba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80047be:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047c0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047c6:	e7b1      	b.n	800472c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80047c8:	2001      	movs	r0, #1
 80047ca:	e7f8      	b.n	80047be <HAL_SPI_Init+0xaa>

080047cc <HAL_SPI_DeInit>:
{
 80047cc:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80047ce:	4604      	mov	r4, r0
 80047d0:	b180      	cbz	r0, 80047f4 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 80047d2:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80047d4:	2302      	movs	r3, #2
 80047d6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80047da:	6813      	ldr	r3, [r2, #0]
 80047dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047e0:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80047e2:	f001 fdd9 	bl	8006398 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047e6:	2000      	movs	r0, #0
 80047e8:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 80047ea:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 80047ee:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 80047f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80047f4:	2001      	movs	r0, #1
 80047f6:	e7fc      	b.n	80047f2 <HAL_SPI_DeInit+0x26>

080047f8 <HAL_SPI_Transmit>:
{
 80047f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80047fc:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80047fe:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004802:	2b01      	cmp	r3, #1
{
 8004804:	4604      	mov	r4, r0
 8004806:	460d      	mov	r5, r1
 8004808:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 800480a:	f000 80a0 	beq.w	800494e <HAL_SPI_Transmit+0x156>
 800480e:	2301      	movs	r3, #1
 8004810:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004814:	f7fe f8aa 	bl	800296c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004818:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800481c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800481e:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004820:	b2d8      	uxtb	r0, r3
 8004822:	f040 8092 	bne.w	800494a <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8004826:	2d00      	cmp	r5, #0
 8004828:	d061      	beq.n	80048ee <HAL_SPI_Transmit+0xf6>
 800482a:	f1b8 0f00 	cmp.w	r8, #0
 800482e:	d05e      	beq.n	80048ee <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004830:	2303      	movs	r3, #3
 8004832:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004836:	2300      	movs	r3, #0
 8004838:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800483a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800483e:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004842:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004844:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004846:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004848:	68a3      	ldr	r3, [r4, #8]
 800484a:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800484c:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800484e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 8004852:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004856:	d107      	bne.n	8004868 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8004858:	6833      	ldr	r3, [r6, #0]
 800485a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800485e:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8004860:	6833      	ldr	r3, [r6, #0]
 8004862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004866:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004868:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800486a:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800486c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800486e:	bf5e      	ittt	pl
 8004870:	6833      	ldrpl	r3, [r6, #0]
 8004872:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8004876:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004878:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800487c:	6863      	ldr	r3, [r4, #4]
 800487e:	d13f      	bne.n	8004900 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004880:	b113      	cbz	r3, 8004888 <HAL_SPI_Transmit+0x90>
 8004882:	f1b8 0f01 	cmp.w	r8, #1
 8004886:	d107      	bne.n	8004898 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004888:	f835 3b02 	ldrh.w	r3, [r5], #2
 800488c:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800488e:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004890:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004892:	3b01      	subs	r3, #1
 8004894:	b29b      	uxth	r3, r3
 8004896:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004898:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800489a:	b29b      	uxth	r3, r3
 800489c:	b9a3      	cbnz	r3, 80048c8 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800489e:	464a      	mov	r2, r9
 80048a0:	4639      	mov	r1, r7
 80048a2:	4620      	mov	r0, r4
 80048a4:	f7ff ff0a 	bl	80046bc <SPI_EndRxTxTransaction>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d14b      	bne.n	8004944 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ac:	68a3      	ldr	r3, [r4, #8]
 80048ae:	b933      	cbnz	r3, 80048be <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048b0:	9301      	str	r3, [sp, #4]
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	9201      	str	r2, [sp, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048be:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80048c0:	3800      	subs	r0, #0
 80048c2:	bf18      	it	ne
 80048c4:	2001      	movne	r0, #1
error:
 80048c6:	e012      	b.n	80048ee <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048c8:	6822      	ldr	r2, [r4, #0]
 80048ca:	6893      	ldr	r3, [r2, #8]
 80048cc:	0798      	lsls	r0, r3, #30
 80048ce:	d505      	bpl.n	80048dc <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048d2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80048d6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048d8:	6323      	str	r3, [r4, #48]	; 0x30
 80048da:	e7d9      	b.n	8004890 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048dc:	f7fe f846 	bl	800296c <HAL_GetTick>
 80048e0:	eba0 0009 	sub.w	r0, r0, r9
 80048e4:	42b8      	cmp	r0, r7
 80048e6:	d3d7      	bcc.n	8004898 <HAL_SPI_Transmit+0xa0>
 80048e8:	1c79      	adds	r1, r7, #1
 80048ea:	d0d5      	beq.n	8004898 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80048ec:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80048ee:	2301      	movs	r3, #1
 80048f0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80048f4:	2300      	movs	r3, #0
 80048f6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80048fa:	b003      	add	sp, #12
 80048fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004900:	b113      	cbz	r3, 8004908 <HAL_SPI_Transmit+0x110>
 8004902:	f1b8 0f01 	cmp.w	r8, #1
 8004906:	d108      	bne.n	800491a <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004908:	782b      	ldrb	r3, [r5, #0]
 800490a:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800490c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800490e:	3301      	adds	r3, #1
 8004910:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004912:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004914:	3b01      	subs	r3, #1
 8004916:	b29b      	uxth	r3, r3
 8004918:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800491a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0bd      	beq.n	800489e <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	0792      	lsls	r2, r2, #30
 8004928:	d503      	bpl.n	8004932 <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800492a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800492c:	7812      	ldrb	r2, [r2, #0]
 800492e:	731a      	strb	r2, [r3, #12]
 8004930:	e7ec      	b.n	800490c <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004932:	f7fe f81b 	bl	800296c <HAL_GetTick>
 8004936:	eba0 0009 	sub.w	r0, r0, r9
 800493a:	42b8      	cmp	r0, r7
 800493c:	d3ed      	bcc.n	800491a <HAL_SPI_Transmit+0x122>
 800493e:	1c7b      	adds	r3, r7, #1
 8004940:	d0eb      	beq.n	800491a <HAL_SPI_Transmit+0x122>
 8004942:	e7d3      	b.n	80048ec <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004944:	2320      	movs	r3, #32
 8004946:	6563      	str	r3, [r4, #84]	; 0x54
 8004948:	e7b0      	b.n	80048ac <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 800494a:	2002      	movs	r0, #2
 800494c:	e7cf      	b.n	80048ee <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 800494e:	2002      	movs	r0, #2
 8004950:	e7d3      	b.n	80048fa <HAL_SPI_Transmit+0x102>

08004952 <HAL_SPI_TransmitReceive>:
{
 8004952:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004956:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8004958:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800495c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004960:	2b01      	cmp	r3, #1
{
 8004962:	4604      	mov	r4, r0
 8004964:	460d      	mov	r5, r1
 8004966:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8004968:	f000 80e0 	beq.w	8004b2c <HAL_SPI_TransmitReceive+0x1da>
 800496c:	2301      	movs	r3, #1
 800496e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004972:	f7fd fffb 	bl	800296c <HAL_GetTick>
  tmp_state           = hspi->State;
 8004976:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 800497a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800497c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800497e:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8004980:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004982:	d00a      	beq.n	800499a <HAL_SPI_TransmitReceive+0x48>
 8004984:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004988:	f040 80ce 	bne.w	8004b28 <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800498c:	68a3      	ldr	r3, [r4, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 80ca 	bne.w	8004b28 <HAL_SPI_TransmitReceive+0x1d6>
 8004994:	2904      	cmp	r1, #4
 8004996:	f040 80c7 	bne.w	8004b28 <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800499a:	2d00      	cmp	r5, #0
 800499c:	d03f      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0xcc>
 800499e:	f1b9 0f00 	cmp.w	r9, #0
 80049a2:	d03c      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0xcc>
 80049a4:	2e00      	cmp	r6, #0
 80049a6:	d03a      	beq.n	8004a1e <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049a8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049ac:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049b0:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049b2:	bf1c      	itt	ne
 80049b4:	2305      	movne	r3, #5
 80049b6:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80049be:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049c2:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80049c4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80049c6:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049c8:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 80049ca:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049cc:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 80049ce:	bf58      	it	pl
 80049d0:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80049d2:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80049d4:	bf58      	it	pl
 80049d6:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 80049da:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80049dc:	bf58      	it	pl
 80049de:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049e0:	68e1      	ldr	r1, [r4, #12]
 80049e2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80049e6:	d151      	bne.n	8004a8c <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049e8:	b10a      	cbz	r2, 80049ee <HAL_SPI_TransmitReceive+0x9c>
 80049ea:	2e01      	cmp	r6, #1
 80049ec:	d107      	bne.n	80049fe <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ee:	f835 2b02 	ldrh.w	r2, [r5], #2
 80049f2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80049f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f6:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80049fe:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	b96b      	cbnz	r3, 8004a22 <HAL_SPI_TransmitReceive+0xd0>
 8004a06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	b953      	cbnz	r3, 8004a22 <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a0c:	463a      	mov	r2, r7
 8004a0e:	4641      	mov	r1, r8
 8004a10:	4620      	mov	r0, r4
 8004a12:	f7ff fe53 	bl	80046bc <SPI_EndRxTxTransaction>
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d07b      	beq.n	8004b12 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a1a:	2320      	movs	r3, #32
 8004a1c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004a1e:	2001      	movs	r0, #1
 8004a20:	e02b      	b.n	8004a7a <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a22:	6821      	ldr	r1, [r4, #0]
 8004a24:	688b      	ldr	r3, [r1, #8]
 8004a26:	079a      	lsls	r2, r3, #30
 8004a28:	d50d      	bpl.n	8004a46 <HAL_SPI_TransmitReceive+0xf4>
 8004a2a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	b153      	cbz	r3, 8004a46 <HAL_SPI_TransmitReceive+0xf4>
 8004a30:	b14d      	cbz	r5, 8004a46 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a32:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a34:	f833 2b02 	ldrh.w	r2, [r3], #2
 8004a38:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a3a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004a3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004a44:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a46:	688a      	ldr	r2, [r1, #8]
 8004a48:	f012 0201 	ands.w	r2, r2, #1
 8004a4c:	d00c      	beq.n	8004a68 <HAL_SPI_TransmitReceive+0x116>
 8004a4e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	b14b      	cbz	r3, 8004a68 <HAL_SPI_TransmitReceive+0x116>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a56:	68c9      	ldr	r1, [r1, #12]
 8004a58:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a5c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004a5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a60:	3b01      	subs	r3, #1
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004a66:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a68:	f7fd ff80 	bl	800296c <HAL_GetTick>
 8004a6c:	1bc0      	subs	r0, r0, r7
 8004a6e:	4540      	cmp	r0, r8
 8004a70:	d3c6      	bcc.n	8004a00 <HAL_SPI_TransmitReceive+0xae>
 8004a72:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004a76:	d0c3      	beq.n	8004a00 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8004a78:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a80:	2300      	movs	r3, #0
 8004a82:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004a86:	b003      	add	sp, #12
 8004a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a8c:	b10a      	cbz	r2, 8004a92 <HAL_SPI_TransmitReceive+0x140>
 8004a8e:	2e01      	cmp	r6, #1
 8004a90:	d108      	bne.n	8004aa4 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a92:	782a      	ldrb	r2, [r5, #0]
 8004a94:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004a98:	3301      	adds	r3, #1
 8004a9a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004a9c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004aa4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aa6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	b91b      	cbnz	r3, 8004ab4 <HAL_SPI_TransmitReceive+0x162>
 8004aac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0ab      	beq.n	8004a0c <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ab4:	6822      	ldr	r2, [r4, #0]
 8004ab6:	6893      	ldr	r3, [r2, #8]
 8004ab8:	079b      	lsls	r3, r3, #30
 8004aba:	d50e      	bpl.n	8004ada <HAL_SPI_TransmitReceive+0x188>
 8004abc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	b15b      	cbz	r3, 8004ada <HAL_SPI_TransmitReceive+0x188>
 8004ac2:	b155      	cbz	r5, 8004ada <HAL_SPI_TransmitReceive+0x188>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ac4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8004aca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004acc:	3301      	adds	r3, #1
 8004ace:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004ad0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8004ad8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ada:	6822      	ldr	r2, [r4, #0]
 8004adc:	6891      	ldr	r1, [r2, #8]
 8004ade:	f011 0101 	ands.w	r1, r1, #1
 8004ae2:	d00d      	beq.n	8004b00 <HAL_SPI_TransmitReceive+0x1ae>
 8004ae4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	b153      	cbz	r3, 8004b00 <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004aea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004aec:	68d2      	ldr	r2, [r2, #12]
 8004aee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004af0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004af2:	3301      	adds	r3, #1
 8004af4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004af6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004af8:	3b01      	subs	r3, #1
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004afe:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b00:	f7fd ff34 	bl	800296c <HAL_GetTick>
 8004b04:	1bc0      	subs	r0, r0, r7
 8004b06:	4540      	cmp	r0, r8
 8004b08:	d3cd      	bcc.n	8004aa6 <HAL_SPI_TransmitReceive+0x154>
 8004b0a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8004b0e:	d0ca      	beq.n	8004aa6 <HAL_SPI_TransmitReceive+0x154>
 8004b10:	e7b2      	b.n	8004a78 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b12:	68a3      	ldr	r3, [r4, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1b0      	bne.n	8004a7a <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	9001      	str	r0, [sp, #4]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	9201      	str	r2, [sp, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	9301      	str	r3, [sp, #4]
 8004b24:	9b01      	ldr	r3, [sp, #4]
 8004b26:	e7a8      	b.n	8004a7a <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8004b28:	2002      	movs	r0, #2
 8004b2a:	e7a6      	b.n	8004a7a <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8004b2c:	2002      	movs	r0, #2
 8004b2e:	e7aa      	b.n	8004a86 <HAL_SPI_TransmitReceive+0x134>

08004b30 <HAL_SPI_Receive>:
{
 8004b30:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004b34:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b36:	6843      	ldr	r3, [r0, #4]
 8004b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8004b3c:	4604      	mov	r4, r0
 8004b3e:	4688      	mov	r8, r1
 8004b40:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b42:	d10c      	bne.n	8004b5e <HAL_SPI_Receive+0x2e>
 8004b44:	6883      	ldr	r3, [r0, #8]
 8004b46:	b953      	cbnz	r3, 8004b5e <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b48:	2304      	movs	r3, #4
 8004b4a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b4e:	4613      	mov	r3, r2
 8004b50:	9500      	str	r5, [sp, #0]
 8004b52:	460a      	mov	r2, r1
 8004b54:	f7ff fefd 	bl	8004952 <HAL_SPI_TransmitReceive>
}
 8004b58:	b002      	add	sp, #8
 8004b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8004b5e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d07e      	beq.n	8004c64 <HAL_SPI_Receive+0x134>
 8004b66:	2301      	movs	r3, #1
 8004b68:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004b6c:	f7fd fefe 	bl	800296c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004b70:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004b74:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8004b76:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8004b78:	b2d8      	uxtb	r0, r3
 8004b7a:	d171      	bne.n	8004c60 <HAL_SPI_Receive+0x130>
  if ((pData == NULL) || (Size == 0U))
 8004b7c:	f1b8 0f00 	cmp.w	r8, #0
 8004b80:	d05c      	beq.n	8004c3c <HAL_SPI_Receive+0x10c>
 8004b82:	2e00      	cmp	r6, #0
 8004b84:	d05a      	beq.n	8004c3c <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b86:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b88:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b92:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004b9c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004ba0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004ba2:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004ba4:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004ba6:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferSize  = Size;
 8004ba8:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	d107      	bne.n	8004bbe <HAL_SPI_Receive+0x8e>
    __HAL_SPI_DISABLE(hspi);
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bbc:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004bc2:	bf5e      	ittt	pl
 8004bc4:	681a      	ldrpl	r2, [r3, #0]
 8004bc6:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8004bca:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004bcc:	68e3      	ldr	r3, [r4, #12]
 8004bce:	b1f3      	cbz	r3, 8004c0e <HAL_SPI_Receive+0xde>
    while (hspi->RxXferCount > 0U)
 8004bd0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	b1fb      	cbz	r3, 8004c16 <HAL_SPI_Receive+0xe6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	07d2      	lsls	r2, r2, #31
 8004bdc:	d535      	bpl.n	8004c4a <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bde:	68da      	ldr	r2, [r3, #12]
 8004be0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004be2:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004be6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004be8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004bf0:	e7ee      	b.n	8004bd0 <HAL_SPI_Receive+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bf2:	6823      	ldr	r3, [r4, #0]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	07d0      	lsls	r0, r2, #31
 8004bf8:	d518      	bpl.n	8004c2c <HAL_SPI_Receive+0xfc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004bfa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004bfc:	7b1b      	ldrb	r3, [r3, #12]
 8004bfe:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c02:	3301      	adds	r3, #1
 8004c04:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004c06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004c0e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1ed      	bne.n	8004bf2 <HAL_SPI_Receive+0xc2>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c16:	463a      	mov	r2, r7
 8004c18:	4629      	mov	r1, r5
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f7ff fd24 	bl	8004668 <SPI_EndRxTransaction>
 8004c20:	b9d8      	cbnz	r0, 8004c5a <HAL_SPI_Receive+0x12a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c22:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004c24:	3800      	subs	r0, #0
 8004c26:	bf18      	it	ne
 8004c28:	2001      	movne	r0, #1
error :
 8004c2a:	e007      	b.n	8004c3c <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c2c:	f7fd fe9e 	bl	800296c <HAL_GetTick>
 8004c30:	1bc0      	subs	r0, r0, r7
 8004c32:	42a8      	cmp	r0, r5
 8004c34:	d3eb      	bcc.n	8004c0e <HAL_SPI_Receive+0xde>
 8004c36:	1c69      	adds	r1, r5, #1
 8004c38:	d0e9      	beq.n	8004c0e <HAL_SPI_Receive+0xde>
          errorcode = HAL_TIMEOUT;
 8004c3a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c42:	2300      	movs	r3, #0
 8004c44:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8004c48:	e786      	b.n	8004b58 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c4a:	f7fd fe8f 	bl	800296c <HAL_GetTick>
 8004c4e:	1bc0      	subs	r0, r0, r7
 8004c50:	42a8      	cmp	r0, r5
 8004c52:	d3bd      	bcc.n	8004bd0 <HAL_SPI_Receive+0xa0>
 8004c54:	1c6b      	adds	r3, r5, #1
 8004c56:	d0bb      	beq.n	8004bd0 <HAL_SPI_Receive+0xa0>
 8004c58:	e7ef      	b.n	8004c3a <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c5a:	2320      	movs	r3, #32
 8004c5c:	6563      	str	r3, [r4, #84]	; 0x54
 8004c5e:	e7e0      	b.n	8004c22 <HAL_SPI_Receive+0xf2>
    errorcode = HAL_BUSY;
 8004c60:	2002      	movs	r0, #2
 8004c62:	e7eb      	b.n	8004c3c <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 8004c64:	2002      	movs	r0, #2
 8004c66:	e777      	b.n	8004b58 <HAL_SPI_Receive+0x28>

08004c68 <HAL_SPI_GetState>:
  return hspi->State;
 8004c68:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8004c6c:	4770      	bx	lr
	...

08004c70 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c70:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d130      	bne.n	8004cda <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	2302      	movs	r3, #2
 8004c7a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c7e:	6803      	ldr	r3, [r0, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	f042 0201 	orr.w	r2, r2, #1
 8004c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c88:	4a15      	ldr	r2, [pc, #84]	; (8004ce0 <HAL_TIM_Base_Start_IT+0x70>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d01a      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x54>
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c92:	d017      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x54>
 8004c94:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x54>
 8004c9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d00f      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x54>
 8004ca4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d00b      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x54>
 8004cac:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d007      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x54>
 8004cb4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d003      	beq.n	8004cc4 <HAL_TIM_Base_Start_IT+0x54>
 8004cbc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	2a06      	cmp	r2, #6
 8004ccc:	d003      	beq.n	8004cd6 <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	f042 0201 	orr.w	r2, r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cd6:	2000      	movs	r0, #0
}
 8004cd8:	4770      	bx	lr
    return HAL_ERROR;
 8004cda:	2001      	movs	r0, #1
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40010000 	.word	0x40010000

08004ce4 <HAL_TIM_OC_DelayElapsedCallback>:
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_TIM_IC_CaptureCallback>:
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004ce8:	4770      	bx	lr

08004cea <HAL_TIM_TriggerCallback>:
 8004cea:	4770      	bx	lr

08004cec <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cec:	6803      	ldr	r3, [r0, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	0791      	lsls	r1, r2, #30
{
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf6:	d50e      	bpl.n	8004d16 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	0792      	lsls	r2, r2, #30
 8004cfc:	d50b      	bpl.n	8004d16 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cfe:	f06f 0202 	mvn.w	r2, #2
 8004d02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d04:	2201      	movs	r2, #1
 8004d06:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	079b      	lsls	r3, r3, #30
 8004d0c:	d077      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	f7ff ffea 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d12:	2300      	movs	r3, #0
 8004d14:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	0750      	lsls	r0, r2, #29
 8004d1c:	d510      	bpl.n	8004d40 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	0751      	lsls	r1, r2, #29
 8004d22:	d50d      	bpl.n	8004d40 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d24:	f06f 0204 	mvn.w	r2, #4
 8004d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d36:	d068      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d38:	f7ff ffd5 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d40:	6823      	ldr	r3, [r4, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	0712      	lsls	r2, r2, #28
 8004d46:	d50f      	bpl.n	8004d68 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d48:	68da      	ldr	r2, [r3, #12]
 8004d4a:	0710      	lsls	r0, r2, #28
 8004d4c:	d50c      	bpl.n	8004d68 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d4e:	f06f 0208 	mvn.w	r2, #8
 8004d52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d54:	2204      	movs	r2, #4
 8004d56:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d5e:	d05a      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d60:	f7ff ffc1 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d64:	2300      	movs	r3, #0
 8004d66:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	06d2      	lsls	r2, r2, #27
 8004d6e:	d510      	bpl.n	8004d92 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	06d0      	lsls	r0, r2, #27
 8004d74:	d50d      	bpl.n	8004d92 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d76:	f06f 0210 	mvn.w	r2, #16
 8004d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d7c:	2208      	movs	r2, #8
 8004d7e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d86:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d88:	d04b      	beq.n	8004e22 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	f7ff ffac 	bl	8004ce6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d92:	6823      	ldr	r3, [r4, #0]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	07d1      	lsls	r1, r2, #31
 8004d98:	d508      	bpl.n	8004dac <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	07d2      	lsls	r2, r2, #31
 8004d9e:	d505      	bpl.n	8004dac <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004da0:	f06f 0201 	mvn.w	r2, #1
 8004da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004da6:	4620      	mov	r0, r4
 8004da8:	f001 f9e2 	bl	8006170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	0610      	lsls	r0, r2, #24
 8004db2:	d508      	bpl.n	8004dc6 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	0611      	lsls	r1, r2, #24
 8004db8:	d505      	bpl.n	8004dc6 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	f000 f9ac 	bl	800511e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dc6:	6823      	ldr	r3, [r4, #0]
 8004dc8:	691a      	ldr	r2, [r3, #16]
 8004dca:	0652      	lsls	r2, r2, #25
 8004dcc:	d508      	bpl.n	8004de0 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	0650      	lsls	r0, r2, #25
 8004dd2:	d505      	bpl.n	8004de0 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f7ff ff85 	bl	8004cea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004de0:	6823      	ldr	r3, [r4, #0]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	0691      	lsls	r1, r2, #26
 8004de6:	d522      	bpl.n	8004e2e <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004de8:	68da      	ldr	r2, [r3, #12]
 8004dea:	0692      	lsls	r2, r2, #26
 8004dec:	d51f      	bpl.n	8004e2e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dee:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004df4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004dfa:	f000 b98f 	b.w	800511c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	f7ff ff71 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e02:	4620      	mov	r0, r4
 8004e04:	f7ff ff70 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e08:	e783      	b.n	8004d12 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	f7ff ff6b 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f7ff ff6a 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e14:	e792      	b.n	8004d3c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e16:	f7ff ff65 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7ff ff64 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e20:	e7a0      	b.n	8004d64 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e22:	f7ff ff5f 	bl	8004ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e26:	4620      	mov	r0, r4
 8004e28:	f7ff ff5e 	bl	8004ce8 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e2c:	e7af      	b.n	8004d8e <HAL_TIM_IRQHandler+0xa2>
}
 8004e2e:	bd10      	pop	{r4, pc}

08004e30 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e30:	4a30      	ldr	r2, [pc, #192]	; (8004ef4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8004e32:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e34:	4290      	cmp	r0, r2
 8004e36:	d012      	beq.n	8004e5e <TIM_Base_SetConfig+0x2e>
 8004e38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004e3c:	d00f      	beq.n	8004e5e <TIM_Base_SetConfig+0x2e>
 8004e3e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004e42:	4290      	cmp	r0, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_Base_SetConfig+0x2e>
 8004e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e4a:	4290      	cmp	r0, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_Base_SetConfig+0x2e>
 8004e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e52:	4290      	cmp	r0, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_Base_SetConfig+0x2e>
 8004e56:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004e5a:	4290      	cmp	r0, r2
 8004e5c:	d119      	bne.n	8004e92 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004e5e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004e64:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e66:	4a23      	ldr	r2, [pc, #140]	; (8004ef4 <TIM_Base_SetConfig+0xc4>)
 8004e68:	4290      	cmp	r0, r2
 8004e6a:	d029      	beq.n	8004ec0 <TIM_Base_SetConfig+0x90>
 8004e6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004e70:	d026      	beq.n	8004ec0 <TIM_Base_SetConfig+0x90>
 8004e72:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004e76:	4290      	cmp	r0, r2
 8004e78:	d022      	beq.n	8004ec0 <TIM_Base_SetConfig+0x90>
 8004e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e7e:	4290      	cmp	r0, r2
 8004e80:	d01e      	beq.n	8004ec0 <TIM_Base_SetConfig+0x90>
 8004e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e86:	4290      	cmp	r0, r2
 8004e88:	d01a      	beq.n	8004ec0 <TIM_Base_SetConfig+0x90>
 8004e8a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004e8e:	4290      	cmp	r0, r2
 8004e90:	d016      	beq.n	8004ec0 <TIM_Base_SetConfig+0x90>
 8004e92:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <TIM_Base_SetConfig+0xc8>)
 8004e94:	4290      	cmp	r0, r2
 8004e96:	d013      	beq.n	8004ec0 <TIM_Base_SetConfig+0x90>
 8004e98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004e9c:	4290      	cmp	r0, r2
 8004e9e:	d00f      	beq.n	8004ec0 <TIM_Base_SetConfig+0x90>
 8004ea0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ea4:	4290      	cmp	r0, r2
 8004ea6:	d00b      	beq.n	8004ec0 <TIM_Base_SetConfig+0x90>
 8004ea8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004eac:	4290      	cmp	r0, r2
 8004eae:	d007      	beq.n	8004ec0 <TIM_Base_SetConfig+0x90>
 8004eb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004eb4:	4290      	cmp	r0, r2
 8004eb6:	d003      	beq.n	8004ec0 <TIM_Base_SetConfig+0x90>
 8004eb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ebc:	4290      	cmp	r0, r2
 8004ebe:	d103      	bne.n	8004ec8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ec6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec8:	694a      	ldr	r2, [r1, #20]
 8004eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ece:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004ed0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ed2:	688b      	ldr	r3, [r1, #8]
 8004ed4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ed6:	680b      	ldr	r3, [r1, #0]
 8004ed8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eda:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <TIM_Base_SetConfig+0xc4>)
 8004edc:	4298      	cmp	r0, r3
 8004ede:	d003      	beq.n	8004ee8 <TIM_Base_SetConfig+0xb8>
 8004ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ee4:	4298      	cmp	r0, r3
 8004ee6:	d101      	bne.n	8004eec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ee8:	690b      	ldr	r3, [r1, #16]
 8004eea:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eec:	2301      	movs	r3, #1
 8004eee:	6143      	str	r3, [r0, #20]
}
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40010000 	.word	0x40010000
 8004ef8:	40014000 	.word	0x40014000

08004efc <HAL_TIM_Base_Init>:
{
 8004efc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004efe:	4604      	mov	r4, r0
 8004f00:	b330      	cbz	r0, 8004f50 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004f02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004f06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f0a:	b91b      	cbnz	r3, 8004f14 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004f0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004f10:	f001 fb02 	bl	8006518 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f16:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1c:	1d21      	adds	r1, r4, #4
 8004f1e:	f7ff ff87 	bl	8004e30 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8004f28:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004f2e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004f32:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004f36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004f46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004f4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004f4e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004f50:	2001      	movs	r0, #1
 8004f52:	e7fc      	b.n	8004f4e <HAL_TIM_Base_Init+0x52>

08004f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f54:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f56:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f58:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f5a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f5e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8004f62:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f64:	6083      	str	r3, [r0, #8]
}
 8004f66:	bd10      	pop	{r4, pc}

08004f68 <HAL_TIM_ConfigClockSource>:
{
 8004f68:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004f6a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f6e:	2b01      	cmp	r3, #1
{
 8004f70:	4604      	mov	r4, r0
 8004f72:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8004f76:	f000 8091 	beq.w	800509c <HAL_TIM_ConfigClockSource+0x134>
 8004f7a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004f80:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004f84:	6800      	ldr	r0, [r0, #0]
 8004f86:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f8c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004f90:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004f92:	680b      	ldr	r3, [r1, #0]
 8004f94:	2b60      	cmp	r3, #96	; 0x60
 8004f96:	d052      	beq.n	800503e <HAL_TIM_ConfigClockSource+0xd6>
 8004f98:	d833      	bhi.n	8005002 <HAL_TIM_ConfigClockSource+0x9a>
 8004f9a:	2b40      	cmp	r3, #64	; 0x40
 8004f9c:	d067      	beq.n	800506e <HAL_TIM_ConfigClockSource+0x106>
 8004f9e:	d816      	bhi.n	8004fce <HAL_TIM_ConfigClockSource+0x66>
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d00d      	beq.n	8004fc0 <HAL_TIM_ConfigClockSource+0x58>
 8004fa4:	d80a      	bhi.n	8004fbc <HAL_TIM_ConfigClockSource+0x54>
 8004fa6:	f033 0110 	bics.w	r1, r3, #16
 8004faa:	d009      	beq.n	8004fc0 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8004fac:	2301      	movs	r3, #1
 8004fae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004fb8:	4610      	mov	r0, r2
 8004fba:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004fbc:	2b30      	cmp	r3, #48	; 0x30
 8004fbe:	d1f5      	bne.n	8004fac <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8004fc0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fc2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f043 0307 	orr.w	r3, r3, #7
 8004fcc:	e017      	b.n	8004ffe <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004fce:	2b50      	cmp	r3, #80	; 0x50
 8004fd0:	d1ec      	bne.n	8004fac <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd2:	684a      	ldr	r2, [r1, #4]
 8004fd4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8004fd6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fd8:	6a05      	ldr	r5, [r0, #32]
 8004fda:	f025 0501 	bic.w	r5, r5, #1
 8004fde:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fe2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fe6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fea:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004fee:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004ff0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004ff2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004ff4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ffa:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004ffe:	6083      	str	r3, [r0, #8]
 8005000:	e011      	b.n	8005026 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005006:	d00e      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0xbe>
 8005008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500c:	d00d      	beq.n	800502a <HAL_TIM_ConfigClockSource+0xc2>
 800500e:	2b70      	cmp	r3, #112	; 0x70
 8005010:	d1cc      	bne.n	8004fac <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8005012:	68cb      	ldr	r3, [r1, #12]
 8005014:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005018:	f7ff ff9c 	bl	8004f54 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800501c:	6822      	ldr	r2, [r4, #0]
 800501e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005020:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005024:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005026:	2200      	movs	r2, #0
 8005028:	e7c0      	b.n	8004fac <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800502a:	68cb      	ldr	r3, [r1, #12]
 800502c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005030:	f7ff ff90 	bl	8004f54 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	6893      	ldr	r3, [r2, #8]
 8005038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800503c:	e7f2      	b.n	8005024 <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800503e:	684d      	ldr	r5, [r1, #4]
 8005040:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005042:	6a01      	ldr	r1, [r0, #32]
 8005044:	f021 0110 	bic.w	r1, r1, #16
 8005048:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800504a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800504c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800504e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005052:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005056:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800505a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800505e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8005060:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005062:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005068:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800506c:	e7c7      	b.n	8004ffe <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800506e:	684a      	ldr	r2, [r1, #4]
 8005070:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005072:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005074:	6a05      	ldr	r5, [r0, #32]
 8005076:	f025 0501 	bic.w	r5, r5, #1
 800507a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800507c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800507e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005082:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005086:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800508a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800508c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800508e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005090:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005096:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800509a:	e7b0      	b.n	8004ffe <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 800509c:	461a      	mov	r2, r3
 800509e:	e78b      	b.n	8004fb8 <HAL_TIM_ConfigClockSource+0x50>

080050a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	f04f 0302 	mov.w	r3, #2
 80050ac:	d032      	beq.n	8005114 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050b2:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050b4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80050b6:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80050b8:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80050ba:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050be:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050c0:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c2:	4c15      	ldr	r4, [pc, #84]	; (8005118 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80050c4:	42a3      	cmp	r3, r4
 80050c6:	d01a      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80050c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050cc:	d017      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80050ce:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80050d2:	42a3      	cmp	r3, r4
 80050d4:	d013      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80050d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050da:	42a3      	cmp	r3, r4
 80050dc:	d00f      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80050de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	d00b      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80050e6:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80050ea:	42a3      	cmp	r3, r4
 80050ec:	d007      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80050ee:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80050f2:	42a3      	cmp	r3, r4
 80050f4:	d003      	beq.n	80050fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80050f6:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80050fa:	42a3      	cmp	r3, r4
 80050fc:	d104      	bne.n	8005108 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050fe:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005104:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005108:	2301      	movs	r3, #1
 800510a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800510e:	2300      	movs	r3, #0
 8005110:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8005114:	4618      	mov	r0, r3

  return HAL_OK;
}
 8005116:	bd30      	pop	{r4, r5, pc}
 8005118:	40010000 	.word	0x40010000

0800511c <HAL_TIMEx_CommutCallback>:
 800511c:	4770      	bx	lr

0800511e <HAL_TIMEx_BreakCallback>:
 800511e:	4770      	bx	lr

08005120 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005120:	6802      	ldr	r2, [r0, #0]
 8005122:	68c1      	ldr	r1, [r0, #12]
{
 8005124:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005126:	6913      	ldr	r3, [r2, #16]
 8005128:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800512c:	430b      	orrs	r3, r1
 800512e:	6113      	str	r3, [r2, #16]
{
 8005130:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005132:	6883      	ldr	r3, [r0, #8]
 8005134:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8005136:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005138:	4303      	orrs	r3, r0
 800513a:	6968      	ldr	r0, [r5, #20]
 800513c:	4303      	orrs	r3, r0
 800513e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8005140:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8005144:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005148:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800514a:	430b      	orrs	r3, r1
 800514c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800514e:	6953      	ldr	r3, [r2, #20]
 8005150:	69a9      	ldr	r1, [r5, #24]
 8005152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005156:	430b      	orrs	r3, r1
 8005158:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800515a:	4b1f      	ldr	r3, [pc, #124]	; (80051d8 <UART_SetConfig+0xb8>)
 800515c:	429a      	cmp	r2, r3
 800515e:	d003      	beq.n	8005168 <UART_SetConfig+0x48>
 8005160:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005164:	429a      	cmp	r2, r3
 8005166:	d124      	bne.n	80051b2 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005168:	f7ff f888 	bl	800427c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800516c:	69ea      	ldr	r2, [r5, #28]
 800516e:	2319      	movs	r3, #25
 8005170:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005174:	fba0 0103 	umull	r0, r1, r0, r3
 8005178:	e9d5 4300 	ldrd	r4, r3, [r5]
 800517c:	d11c      	bne.n	80051b8 <UART_SetConfig+0x98>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800517e:	461a      	mov	r2, r3
 8005180:	1892      	adds	r2, r2, r2
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	415b      	adcs	r3, r3
 8005188:	f7fb fd8e 	bl	8000ca8 <__aeabi_uldivmod>
 800518c:	2164      	movs	r1, #100	; 0x64
 800518e:	fbb0 f5f1 	udiv	r5, r0, r1
 8005192:	fb01 0315 	mls	r3, r1, r5, r0
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	3332      	adds	r3, #50	; 0x32
 800519a:	fbb3 f3f1 	udiv	r3, r3, r1
 800519e:	f003 0207 	and.w	r2, r3, #7
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80051a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051ac:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ae:	60a3      	str	r3, [r4, #8]
  }
}
 80051b0:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80051b2:	f7ff f853 	bl	800425c <HAL_RCC_GetPCLK1Freq>
 80051b6:	e7d9      	b.n	800516c <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051b8:	009a      	lsls	r2, r3, #2
 80051ba:	0f9b      	lsrs	r3, r3, #30
 80051bc:	f7fb fd74 	bl	8000ca8 <__aeabi_uldivmod>
 80051c0:	2264      	movs	r2, #100	; 0x64
 80051c2:	fbb0 f1f2 	udiv	r1, r0, r2
 80051c6:	fb02 0311 	mls	r3, r2, r1, r0
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	3332      	adds	r3, #50	; 0x32
 80051ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80051d2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80051d6:	e7ea      	b.n	80051ae <UART_SetConfig+0x8e>
 80051d8:	40011000 	.word	0x40011000

080051dc <HAL_UART_Init>:
{
 80051dc:	b510      	push	{r4, lr}
  if (huart == NULL)
 80051de:	4604      	mov	r4, r0
 80051e0:	b340      	cbz	r0, 8005234 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80051e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80051e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80051ea:	b91b      	cbnz	r3, 80051f4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80051ec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80051f0:	f001 f9c6 	bl	8006580 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80051f4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80051f6:	2324      	movs	r3, #36	; 0x24
 80051f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80051fc:	68d3      	ldr	r3, [r2, #12]
 80051fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005202:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8005204:	4620      	mov	r0, r4
 8005206:	f7ff ff8b 	bl	8005120 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	691a      	ldr	r2, [r3, #16]
 800520e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005212:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800521a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005222:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005224:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8005226:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005228:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800522a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800522e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8005232:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005234:	2001      	movs	r0, #1
 8005236:	e7fc      	b.n	8005232 <HAL_UART_Init+0x56>

08005238 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800523c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800523e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8005242:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8005246:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800524a:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800524e:	6809      	ldr	r1, [r1, #0]
 8005250:	2901      	cmp	r1, #1
 8005252:	ea43 0304 	orr.w	r3, r3, r4
 8005256:	4912      	ldr	r1, [pc, #72]	; (80052a0 <FMC_SDRAM_Init+0x68>)
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005258:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800525a:	d00f      	beq.n	800527c <FMC_SDRAM_Init+0x44>
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800525c:	431a      	orrs	r2, r3
 800525e:	432a      	orrs	r2, r5
 8005260:	ea42 0308 	orr.w	r3, r2, r8
 8005264:	ea43 030e 	orr.w	r3, r3, lr
 8005268:	ea43 030c 	orr.w	r3, r3, ip
 800526c:	433b      	orrs	r3, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800526e:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005270:	4333      	orrs	r3, r6
 8005272:	430b      	orrs	r3, r1
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005274:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8005276:	2000      	movs	r0, #0
 8005278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800527c:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800527e:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005280:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005282:	ea45 0208 	orr.w	r2, r5, r8
 8005286:	ea42 020e 	orr.w	r2, r2, lr
 800528a:	ea42 020c 	orr.w	r2, r2, ip
 800528e:	433a      	orrs	r2, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005290:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005294:	4332      	orrs	r2, r6
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005296:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005298:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800529a:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800529c:	6042      	str	r2, [r0, #4]
 800529e:	e7ea      	b.n	8005276 <FMC_SDRAM_Init+0x3e>
 80052a0:	ffff8000 	.word	0xffff8000

080052a4 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80052a4:	68cb      	ldr	r3, [r1, #12]
{
 80052a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a8:	680c      	ldr	r4, [r1, #0]
 80052aa:	688e      	ldr	r6, [r1, #8]
 80052ac:	690d      	ldr	r5, [r1, #16]
 80052ae:	1e5f      	subs	r7, r3, #1
 80052b0:	694b      	ldr	r3, [r1, #20]
 80052b2:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 80052b6:	684c      	ldr	r4, [r1, #4]
 80052b8:	6989      	ldr	r1, [r1, #24]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	051b      	lsls	r3, r3, #20
 80052be:	3c01      	subs	r4, #1
 80052c0:	3e01      	subs	r6, #1
 80052c2:	3d01      	subs	r5, #1
 80052c4:	3901      	subs	r1, #1
  if (Bank != FMC_SDRAM_BANK2) 
 80052c6:	2a01      	cmp	r2, #1
 80052c8:	ea4f 1404 	mov.w	r4, r4, lsl #4
 80052cc:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80052d0:	ea4f 4505 	mov.w	r5, r5, lsl #16
 80052d4:	ea4f 6101 	mov.w	r1, r1, lsl #24
 80052d8:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
 80052dc:	d00c      	beq.n	80052f8 <FMC_SDRAM_Timing_Init+0x54>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80052de:	ea43 030c 	orr.w	r3, r3, ip
 80052e2:	4323      	orrs	r3, r4
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80052e4:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80052e6:	4333      	orrs	r3, r6
 80052e8:	432b      	orrs	r3, r5
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80052ea:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80052ee:	430b      	orrs	r3, r1
 80052f0:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
                       (((Timing->RPDelay)-1U) << 20U)             |\
                       (((Timing->RCDDelay)-1U) << 24U));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80052f2:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 80052f4:	2000      	movs	r0, #0
 80052f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80052f8:	6887      	ldr	r7, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80052fa:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
 80052fe:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005302:	4334      	orrs	r4, r6
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005304:	433b      	orrs	r3, r7
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005306:	ea44 020c 	orr.w	r2, r4, ip
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800530a:	68c7      	ldr	r7, [r0, #12]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800530c:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800530e:	432a      	orrs	r2, r5
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005310:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005314:	430a      	orrs	r2, r1
 8005316:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005318:	60c2      	str	r2, [r0, #12]
 800531a:	e7eb      	b.n	80052f4 <FMC_SDRAM_Timing_Init+0x50>

0800531c <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800531c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	9301      	str	r3, [sp, #4]
{
 8005322:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005324:	e9d1 3200 	ldrd	r3, r2, [r1]
 8005328:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 800532a:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800532c:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8005330:	688a      	ldr	r2, [r1, #8]
 8005332:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8005334:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8005338:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 800533a:	9b01      	ldr	r3, [sp, #4]
 800533c:	6103      	str	r3, [r0, #16]
{
 800533e:	4604      	mov	r4, r0

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005340:	f7fd fb14 	bl	800296c <HAL_GetTick>
 8005344:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005346:	69a3      	ldr	r3, [r4, #24]
 8005348:	f013 0320 	ands.w	r3, r3, #32
 800534c:	d101      	bne.n	8005352 <FMC_SDRAM_SendCommand+0x36>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800534e:	4618      	mov	r0, r3
 8005350:	e003      	b.n	800535a <FMC_SDRAM_SendCommand+0x3e>
    if(Timeout != HAL_MAX_DELAY)
 8005352:	1c6b      	adds	r3, r5, #1
 8005354:	d0f7      	beq.n	8005346 <FMC_SDRAM_SendCommand+0x2a>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005356:	b915      	cbnz	r5, 800535e <FMC_SDRAM_SendCommand+0x42>
        return HAL_TIMEOUT;
 8005358:	2003      	movs	r0, #3
}
 800535a:	b002      	add	sp, #8
 800535c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800535e:	f7fd fb05 	bl	800296c <HAL_GetTick>
 8005362:	1b80      	subs	r0, r0, r6
 8005364:	42a8      	cmp	r0, r5
 8005366:	d9ee      	bls.n	8005346 <FMC_SDRAM_SendCommand+0x2a>
 8005368:	e7f6      	b.n	8005358 <FMC_SDRAM_SendCommand+0x3c>

0800536a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800536a:	6943      	ldr	r3, [r0, #20]
 800536c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8005370:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8005372:	2000      	movs	r0, #0
 8005374:	4770      	bx	lr
	...

08005378 <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005378:	4805      	ldr	r0, [pc, #20]	; (8005390 <MX_CRC_Init+0x18>)
{
 800537a:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800537c:	4b05      	ldr	r3, [pc, #20]	; (8005394 <MX_CRC_Init+0x1c>)
 800537e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005380:	f7fd fb60 	bl	8002a44 <HAL_CRC_Init>
 8005384:	b118      	cbz	r0, 800538e <MX_CRC_Init+0x16>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8005386:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800538a:	f000 befb 	b.w	8006184 <Error_Handler>
}
 800538e:	bd08      	pop	{r3, pc}
 8005390:	20009cb0 	.word	0x20009cb0
 8005394:	40023000 	.word	0x40023000

08005398 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8005398:	6802      	ldr	r2, [r0, #0]
 800539a:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <HAL_CRC_MspInit+0x28>)
 800539c:	429a      	cmp	r2, r3
{
 800539e:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 80053a0:	d10b      	bne.n	80053ba <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80053a2:	2300      	movs	r3, #0
 80053a4:	9301      	str	r3, [sp, #4]
 80053a6:	4b07      	ldr	r3, [pc, #28]	; (80053c4 <HAL_CRC_MspInit+0x2c>)
 80053a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80053ba:	b002      	add	sp, #8
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40023000 	.word	0x40023000
 80053c4:	40023800 	.word	0x40023800

080053c8 <MX_DMA2D_Init>:
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80053c8:	480d      	ldr	r0, [pc, #52]	; (8005400 <MX_DMA2D_Init+0x38>)
  hdma2d.Init.Mode = DMA2D_M2M;
 80053ca:	4a0e      	ldr	r2, [pc, #56]	; (8005404 <MX_DMA2D_Init+0x3c>)
{
 80053cc:	b508      	push	{r3, lr}
  hdma2d.Init.Mode = DMA2D_M2M;
 80053ce:	2300      	movs	r3, #0
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
  hdma2d.Init.OutputOffset = 0;
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80053d0:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80053d4:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 80053d8:	e9c0 2300 	strd	r2, r3, [r0]
  hdma2d.Init.OutputOffset = 0;
 80053dc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80053e0:	f7fd fc42 	bl	8002c68 <HAL_DMA2D_Init>
 80053e4:	b108      	cbz	r0, 80053ea <MX_DMA2D_Init+0x22>
  {
    Error_Handler();
 80053e6:	f000 fecd 	bl	8006184 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80053ea:	4805      	ldr	r0, [pc, #20]	; (8005400 <MX_DMA2D_Init+0x38>)
 80053ec:	2101      	movs	r1, #1
 80053ee:	f7fd fd03 	bl	8002df8 <HAL_DMA2D_ConfigLayer>
 80053f2:	b118      	cbz	r0, 80053fc <MX_DMA2D_Init+0x34>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80053f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80053f8:	f000 bec4 	b.w	8006184 <Error_Handler>
}
 80053fc:	bd08      	pop	{r3, pc}
 80053fe:	bf00      	nop
 8005400:	20009cb8 	.word	0x20009cb8
 8005404:	4002b000 	.word	0x4002b000

08005408 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 8005408:	6802      	ldr	r2, [r0, #0]
 800540a:	4b09      	ldr	r3, [pc, #36]	; (8005430 <HAL_DMA2D_MspInit+0x28>)
 800540c:	429a      	cmp	r2, r3
{
 800540e:	b082      	sub	sp, #8
  if(dma2dHandle->Instance==DMA2D)
 8005410:	d10b      	bne.n	800542a <HAL_DMA2D_MspInit+0x22>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8005412:	2300      	movs	r3, #0
 8005414:	9301      	str	r3, [sp, #4]
 8005416:	4b07      	ldr	r3, [pc, #28]	; (8005434 <HAL_DMA2D_MspInit+0x2c>)
 8005418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800541a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800541e:	631a      	str	r2, [r3, #48]	; 0x30
 8005420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800542a:	b002      	add	sp, #8
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	4002b000 	.word	0x4002b000
 8005434:	40023800 	.word	0x40023800

08005438 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005438:	4816      	ldr	r0, [pc, #88]	; (8005494 <MX_FMC_Init+0x5c>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800543a:	4a17      	ldr	r2, [pc, #92]	; (8005498 <MX_FMC_Init+0x60>)
{
 800543c:	b500      	push	{lr}
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800543e:	2301      	movs	r3, #1
 8005440:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8005444:	f04f 0c10 	mov.w	ip, #16
 8005448:	2240      	movs	r2, #64	; 0x40
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800544a:	2300      	movs	r3, #0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800544c:	e9c0 c204 	strd	ip, r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8005450:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8005454:	2104      	movs	r1, #4
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005456:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800545a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800545e:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8005462:	e9c0 2308 	strd	r2, r3, [r0, #32]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8005466:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800546a:	b089      	sub	sp, #36	; 0x24
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 7;
 800546c:	2207      	movs	r2, #7
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800546e:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.ExitSelfRefreshDelay = 7;
 8005470:	2302      	movs	r3, #2
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 7;
 8005472:	e9cd 1203 	strd	r1, r2, [sp, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8005476:	e9cd 3201 	strd	r3, r2, [sp, #4]
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800547a:	4469      	add	r1, sp
  SdramTiming.WriteRecoveryTime = 3;
 800547c:	2203      	movs	r2, #3
  SdramTiming.RPDelay = 2;
 800547e:	e9cd 2305 	strd	r2, r3, [sp, #20]
  SdramTiming.RCDDelay = 2;
 8005482:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005484:	f7ff f852 	bl	800452c <HAL_SDRAM_Init>
 8005488:	b108      	cbz	r0, 800548e <MX_FMC_Init+0x56>
  {
    Error_Handler( );
 800548a:	f000 fe7b 	bl	8006184 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800548e:	b009      	add	sp, #36	; 0x24
 8005490:	f85d fb04 	ldr.w	pc, [sp], #4
 8005494:	20009cf8 	.word	0x20009cf8
 8005498:	a0000140 	.word	0xa0000140

0800549c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800549c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FMC_Initialized) {
 80054a0:	4b2c      	ldr	r3, [pc, #176]	; (8005554 <HAL_SDRAM_MspInit+0xb8>)
 80054a2:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80054a4:	b086      	sub	sp, #24
  if (FMC_Initialized) {
 80054a6:	2c00      	cmp	r4, #0
 80054a8:	d150      	bne.n	800554c <HAL_SDRAM_MspInit+0xb0>
  FMC_Initialized = 1;
 80054aa:	f04f 0801 	mov.w	r8, #1
 80054ae:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 80054b2:	4b29      	ldr	r3, [pc, #164]	; (8005558 <HAL_SDRAM_MspInit+0xbc>)
 80054b4:	9400      	str	r4, [sp, #0]
 80054b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054b8:	4828      	ldr	r0, [pc, #160]	; (800555c <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80054ba:	ea42 0208 	orr.w	r2, r2, r8
 80054be:	639a      	str	r2, [r3, #56]	; 0x38
 80054c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c2:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 80054c4:	ea03 0308 	and.w	r3, r3, r8
 80054c8:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ca:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054cc:	2603      	movs	r6, #3
 80054ce:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80054d0:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054d2:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80054d8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054dc:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054e0:	f7fd fcce 	bl	8002e80 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80054e4:	481e      	ldr	r0, [pc, #120]	; (8005560 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054e6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80054e8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ea:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ee:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80054f2:	f7fd fcc5 	bl	8002e80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80054f6:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80054fa:	481a      	ldr	r0, [pc, #104]	; (8005564 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054fc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80054fe:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005500:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005504:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005508:	f7fd fcba 	bl	8002e80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800550c:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005510:	4815      	ldr	r0, [pc, #84]	; (8005568 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005512:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005514:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005516:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800551a:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800551e:	f7fd fcaf 	bl	8002e80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8005522:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005526:	4811      	ldr	r0, [pc, #68]	; (800556c <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005528:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800552a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005530:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005534:	f7fd fca4 	bl	8002e80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8005538:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800553a:	480d      	ldr	r0, [pc, #52]	; (8005570 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800553c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800553e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005540:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005544:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005548:	f7fd fc9a 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800554c:	b006      	add	sp, #24
 800554e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005552:	bf00      	nop
 8005554:	20000e98 	.word	0x20000e98
 8005558:	40023800 	.word	0x40023800
 800555c:	40021400 	.word	0x40021400
 8005560:	40020800 	.word	0x40020800
 8005564:	40021800 	.word	0x40021800
 8005568:	40021000 	.word	0x40021000
 800556c:	40020c00 	.word	0x40020c00
 8005570:	40020400 	.word	0x40020400

08005574 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8005574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005578:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800557a:	2214      	movs	r2, #20
 800557c:	2100      	movs	r1, #0
 800557e:	a809      	add	r0, sp, #36	; 0x24
 8005580:	f009 f94c 	bl	800e81c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005584:	2400      	movs	r4, #0
 8005586:	4b68      	ldr	r3, [pc, #416]	; (8005728 <MX_GPIO_Init+0x1b4>)
 8005588:	9401      	str	r4, [sp, #4]
 800558a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800558c:	4f67      	ldr	r7, [pc, #412]	; (800572c <MX_GPIO_Init+0x1b8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800558e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005738 <MX_GPIO_Init+0x1c4>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8005592:	4e67      	ldr	r6, [pc, #412]	; (8005730 <MX_GPIO_Init+0x1bc>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8005594:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 800573c <MX_GPIO_Init+0x1c8>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005598:	f042 0204 	orr.w	r2, r2, #4
 800559c:	631a      	str	r2, [r3, #48]	; 0x30
 800559e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055a0:	f002 0204 	and.w	r2, r2, #4
 80055a4:	9201      	str	r2, [sp, #4]
 80055a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80055a8:	9402      	str	r4, [sp, #8]
 80055aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055ac:	f042 0220 	orr.w	r2, r2, #32
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
 80055b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055b4:	f002 0220 	and.w	r2, r2, #32
 80055b8:	9202      	str	r2, [sp, #8]
 80055ba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80055bc:	9403      	str	r4, [sp, #12]
 80055be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
 80055c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055c8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80055cc:	9203      	str	r2, [sp, #12]
 80055ce:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d0:	9404      	str	r4, [sp, #16]
 80055d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055d4:	f042 0201 	orr.w	r2, r2, #1
 80055d8:	631a      	str	r2, [r3, #48]	; 0x30
 80055da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055dc:	f002 0201 	and.w	r2, r2, #1
 80055e0:	9204      	str	r2, [sp, #16]
 80055e2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055e4:	9405      	str	r4, [sp, #20]
 80055e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e8:	f042 0202 	orr.w	r2, r2, #2
 80055ec:	631a      	str	r2, [r3, #48]	; 0x30
 80055ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055f0:	f002 0202 	and.w	r2, r2, #2
 80055f4:	9205      	str	r2, [sp, #20]
 80055f6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80055f8:	9406      	str	r4, [sp, #24]
 80055fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005600:	631a      	str	r2, [r3, #48]	; 0x30
 8005602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005604:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005608:	9206      	str	r2, [sp, #24]
 800560a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800560c:	9407      	str	r4, [sp, #28]
 800560e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005610:	f042 0210 	orr.w	r2, r2, #16
 8005614:	631a      	str	r2, [r3, #48]	; 0x30
 8005616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005618:	f002 0210 	and.w	r2, r2, #16
 800561c:	9207      	str	r2, [sp, #28]
 800561e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005620:	9408      	str	r4, [sp, #32]
 8005622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005624:	f042 0208 	orr.w	r2, r2, #8
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8005632:	4622      	mov	r2, r4
 8005634:	4638      	mov	r0, r7
 8005636:	2116      	movs	r1, #22
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005638:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800563a:	f7fd fdaf 	bl	800319c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800563e:	4622      	mov	r2, r4
 8005640:	4640      	mov	r0, r8
 8005642:	2180      	movs	r1, #128	; 0x80
 8005644:	f7fd fdaa 	bl	800319c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8005648:	4622      	mov	r2, r4
 800564a:	4630      	mov	r0, r6
 800564c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8005650:	f7fd fda4 	bl	800319c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8005654:	4622      	mov	r2, r4
 8005656:	4648      	mov	r0, r9
 8005658:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800565c:	f7fd fd9e 	bl	800319c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005660:	2501      	movs	r5, #1
 8005662:	2316      	movs	r3, #22
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005664:	a909      	add	r1, sp, #36	; 0x24
 8005666:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005668:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800566c:	f44f 1a90 	mov.w	sl, #1179648	; 0x120000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005670:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005674:	f7fd fc04 	bl	8002e80 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005678:	f248 0307 	movw	r3, #32775	; 0x8007
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800567c:	a909      	add	r1, sp, #36	; 0x24
 800567e:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8005680:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005684:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005686:	f7fd fbfb 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800568a:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800568c:	a909      	add	r1, sp, #36	; 0x24
 800568e:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005690:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005694:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8005698:	f7fd fbf2 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800569c:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800569e:	a909      	add	r1, sp, #36	; 0x24
 80056a0:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80056a2:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056a6:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80056a8:	f7fd fbea 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80056ac:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80056ae:	a909      	add	r1, sp, #36	; 0x24
 80056b0:	4820      	ldr	r0, [pc, #128]	; (8005734 <MX_GPIO_Init+0x1c0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056b4:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80056b8:	f7fd fbe2 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056bc:	f44f 4250 	mov.w	r2, #53248	; 0xd000
 80056c0:	2302      	movs	r3, #2
 80056c2:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056c6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80056c8:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ca:	481a      	ldr	r0, [pc, #104]	; (8005734 <MX_GPIO_Init+0x1c0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80056cc:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ce:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056d2:	f7fd fbd5 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80056d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80056da:	a909      	add	r1, sp, #36	; 0x24
 80056dc:	4815      	ldr	r0, [pc, #84]	; (8005734 <MX_GPIO_Init+0x1c0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056de:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056e0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80056e4:	f7fd fbcc 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80056e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80056ec:	a909      	add	r1, sp, #36	; 0x24
 80056ee:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056f0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80056f6:	f7fd fbc3 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80056fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056fe:	a909      	add	r1, sp, #36	; 0x24
 8005700:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005702:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005706:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800570a:	f7fd fbb9 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800570e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005712:	a909      	add	r1, sp, #36	; 0x24
 8005714:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005716:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800571a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800571e:	f7fd fbaf 	bl	8002e80 <HAL_GPIO_Init>

}
 8005722:	b00e      	add	sp, #56	; 0x38
 8005724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005728:	40023800 	.word	0x40023800
 800572c:	40020800 	.word	0x40020800
 8005730:	40020c00 	.word	0x40020c00
 8005734:	40020400 	.word	0x40020400
 8005738:	40020000 	.word	0x40020000
 800573c:	40021800 	.word	0x40021800

08005740 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8005740:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005742:	4812      	ldr	r0, [pc, #72]	; (800578c <MX_I2C3_Init+0x4c>)
  hi2c3.Init.ClockSpeed = 100000;
 8005744:	4a12      	ldr	r2, [pc, #72]	; (8005790 <MX_I2C3_Init+0x50>)
 8005746:	4b13      	ldr	r3, [pc, #76]	; (8005794 <MX_I2C3_Init+0x54>)
 8005748:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800574c:	2300      	movs	r3, #0
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800574e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.OwnAddress1 = 0;
 8005752:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005756:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800575a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800575e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005760:	f7fd fefe 	bl	8003560 <HAL_I2C_Init>
 8005764:	b108      	cbz	r0, 800576a <MX_I2C3_Init+0x2a>
  {
    Error_Handler();
 8005766:	f000 fd0d 	bl	8006184 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800576a:	4808      	ldr	r0, [pc, #32]	; (800578c <MX_I2C3_Init+0x4c>)
 800576c:	2100      	movs	r1, #0
 800576e:	f7fe f954 	bl	8003a1a <HAL_I2CEx_ConfigAnalogFilter>
 8005772:	b108      	cbz	r0, 8005778 <MX_I2C3_Init+0x38>
  {
    Error_Handler();
 8005774:	f000 fd06 	bl	8006184 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8005778:	4804      	ldr	r0, [pc, #16]	; (800578c <MX_I2C3_Init+0x4c>)
 800577a:	2100      	movs	r1, #0
 800577c:	f7fe f96c 	bl	8003a58 <HAL_I2CEx_ConfigDigitalFilter>
 8005780:	b118      	cbz	r0, 800578a <MX_I2C3_Init+0x4a>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005786:	f000 bcfd 	b.w	8006184 <Error_Handler>
}
 800578a:	bd08      	pop	{r3, pc}
 800578c:	20009d2c 	.word	0x20009d2c
 8005790:	40005c00 	.word	0x40005c00
 8005794:	000186a0 	.word	0x000186a0

08005798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579c:	4604      	mov	r4, r0
 800579e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057a0:	2214      	movs	r2, #20
 80057a2:	2100      	movs	r1, #0
 80057a4:	a803      	add	r0, sp, #12
 80057a6:	f009 f839 	bl	800e81c <memset>
  if(i2cHandle->Instance==I2C3)
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	4b1f      	ldr	r3, [pc, #124]	; (800582c <HAL_I2C_MspInit+0x94>)
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d139      	bne.n	8005826 <HAL_I2C_MspInit+0x8e>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057b2:	4c1f      	ldr	r4, [pc, #124]	; (8005830 <HAL_I2C_MspInit+0x98>)
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80057b4:	481f      	ldr	r0, [pc, #124]	; (8005834 <HAL_I2C_MspInit+0x9c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057b6:	2500      	movs	r5, #0
 80057b8:	9500      	str	r5, [sp, #0]
 80057ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057bc:	f043 0304 	orr.w	r3, r3, #4
 80057c0:	6323      	str	r3, [r4, #48]	; 0x30
 80057c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057cc:	9501      	str	r5, [sp, #4]
 80057ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057d0:	f043 0301 	orr.w	r3, r3, #1
 80057d4:	6323      	str	r3, [r4, #48]	; 0x30
 80057d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057e0:	f04f 0812 	mov.w	r8, #18
 80057e4:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057e8:	2701      	movs	r7, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80057ea:	2604      	movs	r6, #4
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80057ec:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057ee:	e9cd 3803 	strd	r3, r8, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057f2:	e9cd 7505 	strd	r7, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80057f6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80057f8:	f7fd fb42 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80057fc:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8005800:	480d      	ldr	r0, [pc, #52]	; (8005838 <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005802:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8005804:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005806:	e9cd 3803 	strd	r3, r8, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800580a:	e9cd 7505 	strd	r7, r5, [sp, #20]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800580e:	f7fd fb37 	bl	8002e80 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005812:	9502      	str	r5, [sp, #8]
 8005814:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005816:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800581a:	6423      	str	r3, [r4, #64]	; 0x40
 800581c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800581e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005822:	9302      	str	r3, [sp, #8]
 8005824:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8005826:	b008      	add	sp, #32
 8005828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800582c:	40005c00 	.word	0x40005c00
 8005830:	40023800 	.word	0x40023800
 8005834:	40020800 	.word	0x40020800
 8005838:	40020000 	.word	0x40020000

0800583c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800583c:	b508      	push	{r3, lr}

  if(i2cHandle->Instance==I2C3)
 800583e:	6802      	ldr	r2, [r0, #0]
 8005840:	4b0a      	ldr	r3, [pc, #40]	; (800586c <HAL_I2C_MspDeInit+0x30>)
 8005842:	429a      	cmp	r2, r3
 8005844:	d110      	bne.n	8005868 <HAL_I2C_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005846:	4a0a      	ldr	r2, [pc, #40]	; (8005870 <HAL_I2C_MspDeInit+0x34>)

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8005848:	480a      	ldr	r0, [pc, #40]	; (8005874 <HAL_I2C_MspDeInit+0x38>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 800584a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800584c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005850:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8005852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005856:	f7fd fbf9 	bl	800304c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800585a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 800585e:	4806      	ldr	r0, [pc, #24]	; (8005878 <HAL_I2C_MspDeInit+0x3c>)
 8005860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005864:	f7fd bbf2 	b.w	800304c <HAL_GPIO_DeInit>
}
 8005868:	bd08      	pop	{r3, pc}
 800586a:	bf00      	nop
 800586c:	40005c00 	.word	0x40005c00
 8005870:	40023800 	.word	0x40023800
 8005874:	40020800 	.word	0x40020800
 8005878:	40020000 	.word	0x40020000

0800587c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800587c:	b510      	push	{r4, lr}
 800587e:	b08e      	sub	sp, #56	; 0x38

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8005880:	2234      	movs	r2, #52	; 0x34
 8005882:	2100      	movs	r1, #0
 8005884:	a801      	add	r0, sp, #4
 8005886:	f008 ffc9 	bl	800e81c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800588a:	4825      	ldr	r0, [pc, #148]	; (8005920 <MX_LTDC_Init+0xa4>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800588c:	4b25      	ldr	r3, [pc, #148]	; (8005924 <MX_LTDC_Init+0xa8>)
 800588e:	2400      	movs	r4, #0
 8005890:	e9c0 3400 	strd	r3, r4, [r0]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 9;
  hltdc.Init.VerticalSync = 1;
 8005894:	f04f 0c09 	mov.w	ip, #9
 8005898:	2301      	movs	r3, #1
 800589a:	e9c0 c305 	strd	ip, r3, [r0, #20]
  hltdc.Init.AccumulatedHBP = 29;
  hltdc.Init.AccumulatedVBP = 3;
 800589e:	f04f 0e1d 	mov.w	lr, #29
 80058a2:	2303      	movs	r3, #3
 80058a4:	e9c0 e307 	strd	lr, r3, [r0, #28]
  hltdc.Init.AccumulatedActiveW = 269;
  hltdc.Init.AccumulatedActiveH = 323;
 80058a8:	f240 120d 	movw	r2, #269	; 0x10d
 80058ac:	f240 1343 	movw	r3, #323	; 0x143
 80058b0:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
  hltdc.Init.TotalWidth = 279;
  hltdc.Init.TotalHeigh = 327;
 80058b4:	f240 1117 	movw	r1, #279	; 0x117
 80058b8:	f240 1347 	movw	r3, #327	; 0x147
  hltdc.Init.Backcolor.Blue = 0;
 80058bc:	8684      	strh	r4, [r0, #52]	; 0x34
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80058be:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hltdc.Init.TotalHeigh = 327;
 80058c2:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80058c6:	6104      	str	r4, [r0, #16]
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
 80058c8:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80058cc:	f7fe f96a 	bl	8003ba4 <HAL_LTDC_Init>
 80058d0:	b108      	cbz	r0, 80058d6 <MX_LTDC_Init+0x5a>
  {
    Error_Handler();
 80058d2:	f000 fc57 	bl	8006184 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 240;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 320;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80058d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80058da:	2102      	movs	r1, #2
 80058dc:	e9cd 3104 	strd	r3, r1, [sp, #16]
  pLayerCfg.Alpha = 255;
 80058e0:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80058e2:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  pLayerCfg.Alpha0 = 0;
 80058e6:	e9cd 1406 	strd	r1, r4, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80058ea:	2107      	movs	r1, #7
  pLayerCfg.WindowX1 = 240;
 80058ec:	22f0      	movs	r2, #240	; 0xf0
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80058ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
  pLayerCfg.FBStartAdress = 0xD0000000;
 80058f2:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
  pLayerCfg.ImageWidth = 240;
 80058f6:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  pLayerCfg.WindowY0 = 0;
 80058fa:	e9cd 2402 	strd	r2, r4, [sp, #8]
  pLayerCfg.ImageHeight = 320;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80058fe:	4808      	ldr	r0, [pc, #32]	; (8005920 <MX_LTDC_Init+0xa4>)
  pLayerCfg.WindowX0 = 0;
 8005900:	9401      	str	r4, [sp, #4]
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005902:	2200      	movs	r2, #0
 8005904:	a901      	add	r1, sp, #4
  pLayerCfg.ImageHeight = 320;
 8005906:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8005908:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 800590c:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8005910:	f7fe f9b4 	bl	8003c7c <HAL_LTDC_ConfigLayer>
 8005914:	b108      	cbz	r0, 800591a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8005916:	f000 fc35 	bl	8006184 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800591a:	b00e      	add	sp, #56	; 0x38
 800591c:	bd10      	pop	{r4, pc}
 800591e:	bf00      	nop
 8005920:	20009d80 	.word	0x20009d80
 8005924:	40016800 	.word	0x40016800

08005928 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8005928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592a:	4604      	mov	r4, r0
 800592c:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800592e:	2214      	movs	r2, #20
 8005930:	2100      	movs	r1, #0
 8005932:	a807      	add	r0, sp, #28
 8005934:	f008 ff72 	bl	800e81c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(ltdcHandle->Instance==LTDC)
 8005938:	6822      	ldr	r2, [r4, #0]
 800593a:	4b54      	ldr	r3, [pc, #336]	; (8005a8c <HAL_LTDC_MspInit+0x164>)
 800593c:	429a      	cmp	r2, r3
 800593e:	f040 80a2 	bne.w	8005a86 <HAL_LTDC_MspInit+0x15e>
    {
      Error_Handler();
    }*/

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005942:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8005946:	2400      	movs	r4, #0
 8005948:	9400      	str	r4, [sp, #0]
 800594a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = ENABLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800594c:	4850      	ldr	r0, [pc, #320]	; (8005a90 <HAL_LTDC_MspInit+0x168>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 800594e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005952:	645a      	str	r2, [r3, #68]	; 0x44
 8005954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005956:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800595a:	9200      	str	r2, [sp, #0]
 800595c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800595e:	9401      	str	r4, [sp, #4]
 8005960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005962:	f042 0220 	orr.w	r2, r2, #32
 8005966:	631a      	str	r2, [r3, #48]	; 0x30
 8005968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800596a:	f002 0220 	and.w	r2, r2, #32
 800596e:	9201      	str	r2, [sp, #4]
 8005970:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005972:	9402      	str	r4, [sp, #8]
 8005974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005976:	f042 0201 	orr.w	r2, r2, #1
 800597a:	631a      	str	r2, [r3, #48]	; 0x30
 800597c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800597e:	f002 0201 	and.w	r2, r2, #1
 8005982:	9202      	str	r2, [sp, #8]
 8005984:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005986:	9403      	str	r4, [sp, #12]
 8005988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800598a:	f042 0202 	orr.w	r2, r2, #2
 800598e:	631a      	str	r2, [r3, #48]	; 0x30
 8005990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005992:	f002 0202 	and.w	r2, r2, #2
 8005996:	9203      	str	r2, [sp, #12]
 8005998:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800599a:	9404      	str	r4, [sp, #16]
 800599c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800599e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
 80059a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80059aa:	9204      	str	r2, [sp, #16]
 80059ac:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059ae:	9405      	str	r4, [sp, #20]
 80059b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b2:	f042 0204 	orr.w	r2, r2, #4
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
 80059b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059ba:	f002 0204 	and.w	r2, r2, #4
 80059be:	9205      	str	r2, [sp, #20]
 80059c0:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059c2:	9406      	str	r4, [sp, #24]
 80059c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059c6:	f042 0208 	orr.w	r2, r2, #8
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
 80059cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d4:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80059d6:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80059d8:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80059da:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80059e0:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059e2:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059e6:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80059ea:	f7fd fa49 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80059ee:	f641 0358 	movw	r3, #6232	; 0x1858
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059f2:	4828      	ldr	r0, [pc, #160]	; (8005a94 <HAL_LTDC_MspInit+0x16c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80059f4:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059f6:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059f8:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80059fc:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059fe:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a02:	f7fd fa3d 	bl	8002e80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8005a06:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a08:	4823      	ldr	r0, [pc, #140]	; (8005a98 <HAL_LTDC_MspInit+0x170>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005a0a:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a0c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a0e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a12:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a16:	f7fd fa33 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8005a1a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a1e:	481e      	ldr	r0, [pc, #120]	; (8005a98 <HAL_LTDC_MspInit+0x170>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a20:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a22:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a24:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a28:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a2c:	f7fd fa28 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8005a30:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a34:	4819      	ldr	r0, [pc, #100]	; (8005a9c <HAL_LTDC_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a36:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a38:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a3a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a3e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a42:	f7fd fa1d 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8005a46:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a4a:	4815      	ldr	r0, [pc, #84]	; (8005aa0 <HAL_LTDC_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a4c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a4e:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a50:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a54:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a58:	f7fd fa12 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8005a5c:	2348      	movs	r3, #72	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a5e:	4811      	ldr	r0, [pc, #68]	; (8005aa4 <HAL_LTDC_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005a60:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a62:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a64:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a68:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005a6c:	f7fd fa08 	bl	8002e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8005a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a74:	4809      	ldr	r0, [pc, #36]	; (8005a9c <HAL_LTDC_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005a76:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a78:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a7a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a7e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a82:	f7fd f9fd 	bl	8002e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8005a86:	b00d      	add	sp, #52	; 0x34
 8005a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40016800 	.word	0x40016800
 8005a90:	40021400 	.word	0x40021400
 8005a94:	40020000 	.word	0x40020000
 8005a98:	40020400 	.word	0x40020400
 8005a9c:	40021800 	.word	0x40021800
 8005aa0:	40020800 	.word	0x40020800
 8005aa4:	40020c00 	.word	0x40020c00

08005aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005aa8:	b530      	push	{r4, r5, lr}
 8005aaa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005aac:	2210      	movs	r2, #16
 8005aae:	2100      	movs	r1, #0
 8005ab0:	a80a      	add	r0, sp, #40	; 0x28
 8005ab2:	f008 feb3 	bl	800e81c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005ab6:	2214      	movs	r2, #20
 8005ab8:	2100      	movs	r1, #0
 8005aba:	a803      	add	r0, sp, #12
 8005abc:	f008 feae 	bl	800e81c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ac0:	2400      	movs	r4, #0
 8005ac2:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <SystemClock_Config+0x90>)
 8005ac4:	9401      	str	r4, [sp, #4]
 8005ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ac8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005acc:	641a      	str	r2, [r3, #64]	; 0x40
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005ad8:	4b18      	ldr	r3, [pc, #96]	; (8005b3c <SystemClock_Config+0x94>)
 8005ada:	9402      	str	r4, [sp, #8]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005aea:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005aec:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005aee:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005af0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005af4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005af8:	2502      	movs	r5, #2
 8005afa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005afe:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8005b02:	2104      	movs	r1, #4
 8005b04:	23a8      	movs	r3, #168	; 0xa8
 8005b06:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b0a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005b0c:	2307      	movs	r3, #7
 8005b0e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005b10:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b12:	f7fe f92d 	bl	8003d70 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b16:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b18:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005b1c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8005b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b24:	e9cd 0306 	strd	r0, r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005b28:	2105      	movs	r1, #5
 8005b2a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005b2c:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005b2e:	f7fe faf9 	bl	8004124 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8005b32:	b015      	add	sp, #84	; 0x54
 8005b34:	bd30      	pop	{r4, r5, pc}
 8005b36:	bf00      	nop
 8005b38:	40023800 	.word	0x40023800
 8005b3c:	40007000 	.word	0x40007000

08005b40 <mnist_game_reset>:

/* USER CODE BEGIN 4 */

// Lab8: Reset function
void mnist_game_reset(ai_float *in_data, ai_float *out_data,
		pred_probType *_1st_pred, pred_probType *_2nd_pred) {
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	4615      	mov	r5, r2
 8005b44:	460e      	mov	r6, r1
	memset(in_data, 0.0, sizeof(in_data[0]) * AI_NETWORK_IN_1_SIZE);
 8005b46:	f44f 6244 	mov.w	r2, #3136	; 0xc40
 8005b4a:	2100      	movs	r1, #0
		pred_probType *_1st_pred, pred_probType *_2nd_pred) {
 8005b4c:	461c      	mov	r4, r3
	memset(in_data, 0.0, sizeof(in_data[0]) * AI_NETWORK_IN_1_SIZE);
 8005b4e:	f008 fe65 	bl	800e81c <memset>
	memset(out_data, 0.0, sizeof(out_data[0]) * AI_NETWORK_OUT_1_SIZE);
 8005b52:	2228      	movs	r2, #40	; 0x28
 8005b54:	2100      	movs	r1, #0
 8005b56:	4630      	mov	r0, r6
 8005b58:	f008 fe60 	bl	800e81c <memset>
	_2nd_pred->label = _2nd_pred->prob = _1st_pred->label = _1st_pred->prob =
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	2300      	movs	r3, #0
 8005b60:	602a      	str	r2, [r5, #0]
 8005b62:	712b      	strb	r3, [r5, #4]
 8005b64:	6022      	str	r2, [r4, #0]
 8005b66:	7123      	strb	r3, [r4, #4]
			0.0;
}
 8005b68:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b6c <aiInit>:

/*
 * Bootstrap code
 */
int aiInit(void) {
 8005b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	ai_error err;

	/* 1 - Create an instance of the model */
	err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG /* or NULL */);
 8005b6e:	4d1c      	ldr	r5, [pc, #112]	; (8005be0 <aiInit+0x74>)
int aiInit(void) {
 8005b70:	b08d      	sub	sp, #52	; 0x34
	err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG /* or NULL */);
 8005b72:	2100      	movs	r1, #0
 8005b74:	4628      	mov	r0, r5
 8005b76:	f000 fb09 	bl	800618c <ai_network_create>
	if (err.type != AI_ERROR_NONE) {
 8005b7a:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8005b7e:	d008      	beq.n	8005b92 <aiInit+0x26>
		printf("E: AI ai_network_create error - type=%d code=%d\r\n", err.type,
 8005b80:	0a02      	lsrs	r2, r0, #8
 8005b82:	4818      	ldr	r0, [pc, #96]	; (8005be4 <aiInit+0x78>)
 8005b84:	4621      	mov	r1, r4
			AI_NETWORK_DATA_ACTIVATIONS(activations)
	);

	if (!ai_network_init(network, &params)) {
		err = ai_network_get_error(network);
		printf("E: AI ai_network_init error - type=%d code=%d\r\n", err.type,
 8005b86:	f009 fd75 	bl	800f674 <iprintf>
				err.code);
		return -1;
 8005b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return 0;
}
 8005b8e:	b00d      	add	sp, #52	; 0x34
 8005b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8005b92:	4b15      	ldr	r3, [pc, #84]	; (8005be8 <aiInit+0x7c>)
 8005b94:	f04f 1701 	mov.w	r7, #65537	; 0x10001
 8005b98:	e9cd 3700 	strd	r3, r7, [sp]
 8005b9c:	2601      	movs	r6, #1
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <aiInit+0x80>)
 8005ba0:	9303      	str	r3, [sp, #12]
 8005ba2:	f8ad 6008 	strh.w	r6, [sp, #8]
 8005ba6:	f000 fb9b 	bl	80062e0 <ai_network_data_weights_get>
 8005baa:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <aiInit+0x84>)
 8005bac:	f8ad 6020 	strh.w	r6, [sp, #32]
 8005bb0:	e9cd 3706 	strd	r3, r7, [sp, #24]
 8005bb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bb8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bba:	4b0e      	ldr	r3, [pc, #56]	; (8005bf4 <aiInit+0x88>)
 8005bbc:	e9cd 0404 	strd	r0, r4, [sp, #16]
	if (!ai_network_init(network, &params)) {
 8005bc0:	4669      	mov	r1, sp
 8005bc2:	6828      	ldr	r0, [r5, #0]
	const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 8005bc4:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
	if (!ai_network_init(network, &params)) {
 8005bc8:	f000 faee 	bl	80061a8 <ai_network_init>
 8005bcc:	b930      	cbnz	r0, 8005bdc <aiInit+0x70>
		err = ai_network_get_error(network);
 8005bce:	6828      	ldr	r0, [r5, #0]
 8005bd0:	f000 fad9 	bl	8006186 <ai_network_get_error>
		printf("E: AI ai_network_init error - type=%d code=%d\r\n", err.type,
 8005bd4:	0a02      	lsrs	r2, r0, #8
 8005bd6:	b2c1      	uxtb	r1, r0
 8005bd8:	4807      	ldr	r0, [pc, #28]	; (8005bf8 <aiInit+0x8c>)
 8005bda:	e7d4      	b.n	8005b86 <aiInit+0x1a>
	return 0;
 8005bdc:	4620      	mov	r0, r4
 8005bde:	e7d6      	b.n	8005b8e <aiInit+0x22>
 8005be0:	20000ea0 	.word	0x20000ea0
 8005be4:	0813cd24 	.word	0x0813cd24
 8005be8:	40040440 	.word	0x40040440
 8005bec:	001251c8 	.word	0x001251c8
 8005bf0:	00040440 	.word	0x00040440
 8005bf4:	20001b40 	.word	0x20001b40
 8005bf8:	0813cd56 	.word	0x0813cd56

08005bfc <aiRun>:

/*
 * Run inference code
 */
int aiRun(const void *in_data, void *out_data) {
 8005bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	ai_i32 n_batch;
	ai_error err;

	/* 1 - Create the AI buffer IO handlers with the default definition */
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8005bfe:	4c18      	ldr	r4, [pc, #96]	; (8005c60 <aiRun+0x64>)
int aiRun(const void *in_data, void *out_data) {
 8005c00:	4607      	mov	r7, r0
 8005c02:	460e      	mov	r6, r1
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8005c04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
int aiRun(const void *in_data, void *out_data) {
 8005c06:	b08d      	sub	sp, #52	; 0x34
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8005c08:	466d      	mov	r5, sp
 8005c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c0c:	e894 0003 	ldmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8005c10:	3408      	adds	r4, #8
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8005c12:	e885 0003 	stmia.w	r5, {r0, r1}
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8005c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005c18:	ad06      	add	r5, sp, #24
 8005c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005c1c:	e894 0003 	ldmia.w	r4, {r0, r1}
	ai_input[0].data = AI_HANDLE_PTR(in_data);
	ai_output[0].n_batches = 1;
	ai_output[0].data = AI_HANDLE_PTR(out_data);

	/* 3 - Perform the inference */
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005c20:	4c10      	ldr	r4, [pc, #64]	; (8005c64 <aiRun+0x68>)
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8005c22:	9704      	str	r7, [sp, #16]
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8005c24:	e885 0003 	stmia.w	r5, {r0, r1}
	ai_input[0].n_batches = 1;
 8005c28:	2301      	movs	r3, #1
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005c2a:	6820      	ldr	r0, [r4, #0]
	ai_input[0].n_batches = 1;
 8005c2c:	f8ad 3004 	strh.w	r3, [sp, #4]
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005c30:	aa06      	add	r2, sp, #24
 8005c32:	4669      	mov	r1, sp
	ai_output[0].n_batches = 1;
 8005c34:	f8ad 301c 	strh.w	r3, [sp, #28]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8005c38:	960a      	str	r6, [sp, #40]	; 0x28
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 8005c3a:	f000 fb4f 	bl	80062dc <ai_network_run>
	if (n_batch != 1) {
 8005c3e:	2801      	cmp	r0, #1
 8005c40:	d00b      	beq.n	8005c5a <aiRun+0x5e>
		err = ai_network_get_error(network);
 8005c42:	6820      	ldr	r0, [r4, #0]
 8005c44:	f000 fa9f 	bl	8006186 <ai_network_get_error>
		printf("E: AI ai_network_run error - type=%d code=%d\r\n", err.type,
 8005c48:	0a02      	lsrs	r2, r0, #8
 8005c4a:	b2c1      	uxtb	r1, r0
 8005c4c:	4806      	ldr	r0, [pc, #24]	; (8005c68 <aiRun+0x6c>)
 8005c4e:	f009 fd11 	bl	800f674 <iprintf>
				err.code);
		return -1;
 8005c52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	};

	return 0;
}
 8005c56:	b00d      	add	sp, #52	; 0x34
 8005c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
 8005c5a:	2000      	movs	r0, #0
 8005c5c:	e7fb      	b.n	8005c56 <aiRun+0x5a>
 8005c5e:	bf00      	nop
 8005c60:	08017084 	.word	0x08017084
 8005c64:	20000ea0 	.word	0x20000ea0
 8005c68:	0813cd86 	.word	0x0813cd86

08005c6c <user_interface_init>:
 *
 * @brief: TLCD INIT Implementation
 * @Param: Board Support Package
 *
 */
void user_interface_init(void) {
 8005c6c:	b508      	push	{r3, lr}
	// Initialise LCD. Use functions from stm32f429i_discovery_lcd.h
	BSP_LCD_Init();
 8005c6e:	f7fc fa91 	bl	8002194 <BSP_LCD_Init>

	// Initialise LCD Layer 1 (background layer) with FB address that points to layer 1
	BSP_LCD_LayerDefaultInit(LCD_LAYER_1, LCD_FRAME_BUFFER_LAYER1);
 8005c72:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8005c76:	2001      	movs	r0, #1
 8005c78:	f7fc f8a0 	bl	8001dbc <BSP_LCD_LayerDefaultInit>

	// Select layer 1
	BSP_LCD_SelectLayer(LCD_LAYER_1);
 8005c7c:	2001      	movs	r0, #1
 8005c7e:	f7fc f8db 	bl	8001e38 <BSP_LCD_SelectLayer>

	// Clear LCD (color red)
	BSP_LCD_Clear(LCD_COLOR_RED);
 8005c82:	4811      	ldr	r0, [pc, #68]	; (8005cc8 <user_interface_init+0x5c>)
 8005c84:	f7fc f920 	bl	8001ec8 <BSP_LCD_Clear>

	// Set colour keyring for layer 1 (colour dark cyan)
	BSP_LCD_SetColorKeying(LCD_LAYER_1, LCD_COLOR_DARKCYAN);
 8005c88:	4910      	ldr	r1, [pc, #64]	; (8005ccc <user_interface_init+0x60>)
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	f7fc f8ee 	bl	8001e6c <BSP_LCD_SetColorKeying>

	// Set layer 1 visibility to disabled
	BSP_LCD_SetLayerVisible(LCD_LAYER_1, DISABLE);
 8005c90:	2100      	movs	r1, #0
 8005c92:	2001      	movs	r0, #1
 8005c94:	f7fc f8d6 	bl	8001e44 <BSP_LCD_SetLayerVisible>

	// Initialise Layer 0 (foreground or visible layer) with FB address that points to layer 0
	BSP_LCD_LayerDefaultInit(LCD_LAYER_0, LCD_FRAME_BUFFER_LAYER0);
 8005c98:	490d      	ldr	r1, [pc, #52]	; (8005cd0 <user_interface_init+0x64>)
 8005c9a:	2000      	movs	r0, #0
 8005c9c:	f7fc f88e 	bl	8001dbc <BSP_LCD_LayerDefaultInit>

	// Select Layer 0
	BSP_LCD_SelectLayer(LCD_LAYER_0);
 8005ca0:	2000      	movs	r0, #0
 8005ca2:	f7fc f8c9 	bl	8001e38 <BSP_LCD_SelectLayer>

	// Switch LCD display on
	BSP_LCD_DisplayOn();
 8005ca6:	f7fc f9c9 	bl	800203c <BSP_LCD_DisplayOn>

	HAL_Delay(200);
 8005caa:	20c8      	movs	r0, #200	; 0xc8
 8005cac:	f7fc fe64 	bl	8002978 <HAL_Delay>

	// Clear the whole LCD with color lightcyan
	BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 8005cb0:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8005cb4:	f7fc f908 	bl	8001ec8 <BSP_LCD_Clear>

	HAL_Delay(100);
 8005cb8:	2064      	movs	r0, #100	; 0x64
 8005cba:	f7fc fe5d 	bl	8002978 <HAL_Delay>

	printf("LCD initialisation completed \r\n");
}
 8005cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf("LCD initialisation completed \r\n");
 8005cc2:	4804      	ldr	r0, [pc, #16]	; (8005cd4 <user_interface_init+0x68>)
 8005cc4:	f009 bd5c 	b.w	800f780 <puts>
 8005cc8:	ffff0000 	.word	0xffff0000
 8005ccc:	ff008080 	.word	0xff008080
 8005cd0:	d0130000 	.word	0xd0130000
 8005cd4:	0813cdb5 	.word	0x0813cdb5

08005cd8 <user_interface_reset>:
 *
 * @brief: User Interface Control Function Implementation
 * @Param: Board Support Package
 *
 */
void user_interface_reset(void) {
 8005cd8:	b538      	push	{r3, r4, r5, lr}
	// Clear LCD with light cyan color. Possible color definitions in stm32f429i_discovery_lcd.h
	BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 8005cda:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000

	// Set text color to black
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);

	// set font size 16
	BSP_LCD_SetFont(&Font16);
 8005cde:	4d23      	ldr	r5, [pc, #140]	; (8005d6c <user_interface_reset+0x94>)
	// Draw rectangle to mark prediction output area. Marked with "B" on image.
	// Position x,y = (200, 250) and dimensions = (28, 28)
	BSP_LCD_DrawRect(200, 250, 28, 28);

	// Set text color to blue
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8005ce0:	4c23      	ldr	r4, [pc, #140]	; (8005d70 <user_interface_reset+0x98>)
	BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 8005ce2:	f7fc f8f1 	bl	8001ec8 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005ce6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005cea:	f7fc f8cf 	bl	8001e8c <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font16);
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f7fc f8e0 	bl	8001eb4 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8005cf4:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8005cf8:	f7fc f8d2 	bl	8001ea0 <BSP_LCD_SetBackColor>
	BSP_LCD_DisplayStringAt(5, 255, (uint8_t*) "NN OUTPUT: ", LEFT_MODE);
 8005cfc:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <user_interface_reset+0x9c>)
 8005cfe:	2303      	movs	r3, #3
 8005d00:	21ff      	movs	r1, #255	; 0xff
 8005d02:	2005      	movs	r0, #5
 8005d04:	f7fc fb10 	bl	8002328 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DrawRect(200, 250, 28, 28);
 8005d08:	231c      	movs	r3, #28
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	21fa      	movs	r1, #250	; 0xfa
 8005d0e:	20c8      	movs	r0, #200	; 0xc8
 8005d10:	f7fc f94e 	bl	8001fb0 <BSP_LCD_DrawRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8005d14:	4620      	mov	r0, r4
 8005d16:	f7fc f8b9 	bl	8001e8c <BSP_LCD_SetTextColor>

	// Write clear button area, marked with "C". Draw filled rectangle to position x,y = (5, 285) with dimensions = (230, 30)
	BSP_LCD_FillRect(5, 285, 230, 30);
 8005d1a:	231e      	movs	r3, #30
 8005d1c:	22e6      	movs	r2, #230	; 0xe6
 8005d1e:	f240 111d 	movw	r1, #285	; 0x11d
 8005d22:	2005      	movs	r0, #5
 8005d24:	f7fc f95e 	bl	8001fe4 <BSP_LCD_FillRect>

	// Set text color to white
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d2c:	f7fc f8ae 	bl	8001e8c <BSP_LCD_SetTextColor>

	// Set font size to 16
	BSP_LCD_SetFont(&Font16);
 8005d30:	4628      	mov	r0, r5
 8005d32:	f7fc f8bf 	bl	8001eb4 <BSP_LCD_SetFont>

	// Set background color as blue
	BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8005d36:	4620      	mov	r0, r4
 8005d38:	f7fc f8b2 	bl	8001ea0 <BSP_LCD_SetBackColor>

	// Display string "CLEAR" to position x,y = (330, 291)
	BSP_LCD_DisplayStringAt(330, 291, (uint8_t*) "SELGE", LEFT_MODE);
 8005d3c:	4a0e      	ldr	r2, [pc, #56]	; (8005d78 <user_interface_reset+0xa0>)
 8005d3e:	2303      	movs	r3, #3
 8005d40:	f240 1123 	movw	r1, #291	; 0x123
 8005d44:	f44f 70a5 	mov.w	r0, #330	; 0x14a
 8005d48:	f7fc faee 	bl	8002328 <BSP_LCD_DisplayStringAt>

	// Draw minimized user drawing area, marked with "D" on figure. Draw rectangle to position x,y = (2,2) and dimensions (237,237)
	BSP_LCD_DrawRect(2, 2, 237, 237);
 8005d4c:	23ed      	movs	r3, #237	; 0xed
 8005d4e:	2102      	movs	r1, #2
 8005d50:	461a      	mov	r2, r3
 8005d52:	4608      	mov	r0, r1
 8005d54:	f7fc f92c 	bl	8001fb0 <BSP_LCD_DrawRect>

	// Set text color as black
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005d58:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005d5c:	f7fc f896 	bl	8001e8c <BSP_LCD_SetTextColor>

	printf("LCD Interface INIT successful \r\n");
}
 8005d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("LCD Interface INIT successful \r\n");
 8005d64:	4805      	ldr	r0, [pc, #20]	; (8005d7c <user_interface_reset+0xa4>)
 8005d66:	f009 bd0b 	b.w	800f780 <puts>
 8005d6a:	bf00      	nop
 8005d6c:	200000b8 	.word	0x200000b8
 8005d70:	ff0000ff 	.word	0xff0000ff
 8005d74:	0813cdd4 	.word	0x0813cdd4
 8005d78:	0813cde0 	.word	0x0813cde0
 8005d7c:	0813cde6 	.word	0x0813cde6

08005d80 <touch_sensor_init>:
 *
 * @brief: Touch Sensor INIT Implementation
 * @Param: Board Support Package
 *
 */
void touch_sensor_init(void) {
 8005d80:	b508      	push	{r3, lr}
	// Initialise touch sensor to use a whole LCD area (240x320) and print to UART whether the initialization was successful or not
	if (BSP_TS_Init(240, 320) == TS_ERROR) {
 8005d82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005d86:	20f0      	movs	r0, #240	; 0xf0
 8005d88:	f7fc fd54 	bl	8002834 <BSP_TS_Init>
 8005d8c:	2801      	cmp	r0, #1
		printf("Touch sensor initialization failed \r\n");
 8005d8e:	bf0c      	ite	eq
 8005d90:	4804      	ldreq	r0, [pc, #16]	; (8005da4 <touch_sensor_init+0x24>)
	} else {
		printf("Touch sensor initialization successful \r\n");
 8005d92:	4805      	ldrne	r0, [pc, #20]	; (8005da8 <touch_sensor_init+0x28>)
 8005d94:	f009 fcf4 	bl	800f780 <puts>
	}
	HAL_Delay(50);
}
 8005d98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(50);
 8005d9c:	2032      	movs	r0, #50	; 0x32
 8005d9e:	f7fc bdeb 	b.w	8002978 <HAL_Delay>
 8005da2:	bf00      	nop
 8005da4:	0813ce06 	.word	0x0813ce06
 8005da8:	0813ce2b 	.word	0x0813ce2b

08005dac <main>:
{
 8005dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	setvbuf(stdin, NULL, _IONBF, 0);
 8005db0:	4bcd      	ldr	r3, [pc, #820]	; (80060e8 <main+0x33c>)
				mnist_game_reset(in_data, out_data, &_1st_pred, &_2nd_pred);
 8005db2:	f8df 833c 	ldr.w	r8, [pc, #828]	; 80060f0 <main+0x344>
	setvbuf(stdin, NULL, _IONBF, 0);
 8005db6:	6818      	ldr	r0, [r3, #0]
{
 8005db8:	ed2d 8b02 	vpush	{d8}
	setvbuf(stdin, NULL, _IONBF, 0);
 8005dbc:	2300      	movs	r3, #0
{
 8005dbe:	b08d      	sub	sp, #52	; 0x34
	setvbuf(stdin, NULL, _IONBF, 0);
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	6840      	ldr	r0, [r0, #4]
 8005dc6:	f009 fcf3 	bl	800f7b0 <setvbuf>
  HAL_Init();
 8005dca:	f7fc fda9 	bl	8002920 <HAL_Init>
  SystemClock_Config();
 8005dce:	f7ff fe6b 	bl	8005aa8 <SystemClock_Config>
  MX_GPIO_Init();
 8005dd2:	f7ff fbcf 	bl	8005574 <MX_GPIO_Init>
  MX_CRC_Init();
 8005dd6:	f7ff facf 	bl	8005378 <MX_CRC_Init>
  MX_DMA2D_Init();
 8005dda:	f7ff faf5 	bl	80053c8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8005dde:	f7ff fb2b 	bl	8005438 <MX_FMC_Init>
  MX_I2C3_Init();
 8005de2:	f7ff fcad 	bl	8005740 <MX_I2C3_Init>
  MX_LTDC_Init();
 8005de6:	f7ff fd49 	bl	800587c <MX_LTDC_Init>
  MX_SPI5_Init();
 8005dea:	f000 fa7d 	bl	80062e8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8005dee:	f000 fb5f 	bl	80064b0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8005df2:	f000 fba9 	bl	8006548 <MX_USART1_UART_Init>
	printf("[MAIN] Application running \r\n");
 8005df6:	48bd      	ldr	r0, [pc, #756]	; (80060ec <main+0x340>)
 8005df8:	f009 fcc2 	bl	800f780 <puts>
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	4608      	mov	r0, r1
 8005e00:	f7fb fe08 	bl	8001a14 <BSP_PB_Init>
	touch_sensor_init();
 8005e04:	f7ff ffbc 	bl	8005d80 <touch_sensor_init>
	user_interface_init();
 8005e08:	f7ff ff30 	bl	8005c6c <user_interface_init>
	user_interface_reset();
 8005e0c:	f7ff ff64 	bl	8005cd8 <user_interface_reset>
	mnist_game_reset(in_data, out_data, &_1st_pred, &_2nd_pred);
 8005e10:	49b7      	ldr	r1, [pc, #732]	; (80060f0 <main+0x344>)
	_1st_pred.prob = _2nd_pred.prob = 0.0f;
 8005e12:	2300      	movs	r3, #0
 8005e14:	9304      	str	r3, [sp, #16]
 8005e16:	9302      	str	r3, [sp, #8]
	mnist_game_reset(in_data, out_data, &_1st_pred, &_2nd_pred);
 8005e18:	aa02      	add	r2, sp, #8
 8005e1a:	ab04      	add	r3, sp, #16
 8005e1c:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8005e20:	f7ff fe8e 	bl	8005b40 <mnist_game_reset>
	aiInit();
 8005e24:	f7ff fea2 	bl	8005b6c <aiInit>
		BSP_TS_GetState(&ui_state);
 8005e28:	4fb2      	ldr	r7, [pc, #712]	; (80060f4 <main+0x348>)
				int x = ui_state.Y * ((float) 20 / 240) + 4;
 8005e2a:	ed9f 8ab3 	vldr	s16, [pc, #716]	; 80060f8 <main+0x34c>
		BSP_TS_GetState(&ui_state);
 8005e2e:	48b1      	ldr	r0, [pc, #708]	; (80060f4 <main+0x348>)
 8005e30:	f7fc fd1c 	bl	800286c <BSP_TS_GetState>
		if (ui_state.TouchDetected) {
 8005e34:	883b      	ldrh	r3, [r7, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 80d2 	beq.w	8005fe0 <main+0x234>
			if ((ui_state.X > DRAW_IMG_X1 && ui_state.X < DRAW_IMG_X2)
 8005e3c:	8878      	ldrh	r0, [r7, #2]
 8005e3e:	f1a0 030b 	sub.w	r3, r0, #11
 8005e42:	2bda      	cmp	r3, #218	; 0xda
 8005e44:	f200 8174 	bhi.w	8006130 <main+0x384>
					&& (ui_state.Y > DRAW_IMG_Y1 && ui_state.Y < DRAW_IMG_Y2)) {
 8005e48:	88b9      	ldrh	r1, [r7, #4]
 8005e4a:	f1a1 030b 	sub.w	r3, r1, #11
 8005e4e:	2bda      	cmp	r3, #218	; 0xda
 8005e50:	f200 8172 	bhi.w	8006138 <main+0x38c>
				BSP_LCD_FillCircle(ui_state.X, ui_state.Y, size);
 8005e54:	2204      	movs	r2, #4
 8005e56:	f7fc fb4f 	bl	80024f8 <BSP_LCD_FillCircle>
				BSP_LCD_FillCircle((ui_state.X) + delta, ui_state.Y, size);
 8005e5a:	8878      	ldrh	r0, [r7, #2]
 8005e5c:	88b9      	ldrh	r1, [r7, #4]
 8005e5e:	3004      	adds	r0, #4
 8005e60:	2204      	movs	r2, #4
 8005e62:	b280      	uxth	r0, r0
 8005e64:	f7fc fb48 	bl	80024f8 <BSP_LCD_FillCircle>
				BSP_LCD_FillCircle(ui_state.X, (ui_state.Y) + delta, size);
 8005e68:	88b9      	ldrh	r1, [r7, #4]
 8005e6a:	8878      	ldrh	r0, [r7, #2]
 8005e6c:	3104      	adds	r1, #4
 8005e6e:	2204      	movs	r2, #4
 8005e70:	b289      	uxth	r1, r1
 8005e72:	f7fc fb41 	bl	80024f8 <BSP_LCD_FillCircle>
				BSP_LCD_FillCircle((ui_state.X) - delta, ui_state.Y, size);
 8005e76:	8878      	ldrh	r0, [r7, #2]
 8005e78:	88b9      	ldrh	r1, [r7, #4]
 8005e7a:	3804      	subs	r0, #4
 8005e7c:	2204      	movs	r2, #4
 8005e7e:	b280      	uxth	r0, r0
 8005e80:	f7fc fb3a 	bl	80024f8 <BSP_LCD_FillCircle>
				BSP_LCD_FillCircle(ui_state.X, (ui_state.Y) - delta, size);
 8005e84:	88b9      	ldrh	r1, [r7, #4]
 8005e86:	8878      	ldrh	r0, [r7, #2]
 8005e88:	3904      	subs	r1, #4
 8005e8a:	2204      	movs	r2, #4
 8005e8c:	b289      	uxth	r1, r1
 8005e8e:	f7fc fb33 	bl	80024f8 <BSP_LCD_FillCircle>
				int x = ui_state.Y * ((float) 20 / 240) + 4;
 8005e92:	88bb      	ldrh	r3, [r7, #4]
				in_data[28 * (x - 2) + (y + 1)] = PXL_SET;
 8005e94:	4a99      	ldr	r2, [pc, #612]	; (80060fc <main+0x350>)
				int x = ui_state.Y * ((float) 20 / 240) + 4;
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8005e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ea2:	eef0 6a47 	vmov.f32	s13, s14
 8005ea6:	eee7 6a88 	vfma.f32	s13, s15, s16
				int y = ui_state.X * ((float) 20 / 240) + 4;
 8005eaa:	887b      	ldrh	r3, [r7, #2]
				in_data[28 * (x - 2) + (y + 1)] = PXL_SET;
 8005eac:	261c      	movs	r6, #28
				int x = ui_state.Y * ((float) 20 / 240) + 4;
 8005eae:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8005eb2:	ee17 5a90 	vmov	r5, s15
				int y = ui_state.X * ((float) 20 / 240) + 4;
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				in_data[28 * (x - 2) + (y + 1)] = PXL_SET;
 8005ebe:	1eab      	subs	r3, r5, #2
				int y = ui_state.X * ((float) 20 / 240) + 4;
 8005ec0:	eea7 7a88 	vfma.f32	s14, s15, s16
				in_data[28 * (x - 2) + (y + 1)] = PXL_SET;
 8005ec4:	435e      	muls	r6, r3
 8005ec6:	4b8e      	ldr	r3, [pc, #568]	; (8006100 <main+0x354>)
				int y = ui_state.X * ((float) 20 / 240) + 4;
 8005ec8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
				in_data[28 * (x - 1) + (y + 1)] = PXL_SET;
 8005ecc:	f106 0c1c 	add.w	ip, r6, #28
				int y = ui_state.X * ((float) 20 / 240) + 4;
 8005ed0:	ee17 4a90 	vmov	r4, s15
				in_data[28 * (x - 2) + (y + 1)] = PXL_SET;
 8005ed4:	1c60      	adds	r0, r4, #1
 8005ed6:	1831      	adds	r1, r6, r0
 8005ed8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				in_data[28 * (x - 2) + (y - 1)] = PXL_SET;
 8005edc:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
				in_data[28 * (x - 2) + (y + 1)] = PXL_SET;
 8005ee0:	660a      	str	r2, [r1, #96]	; 0x60
				in_data[28 * (x - 2) + (y)] = PXL_SET;
 8005ee2:	1931      	adds	r1, r6, r4
 8005ee4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8005ee8:	b2ad      	uxth	r5, r5
				in_data[28 * (x - 2) + (y)] = PXL_SET;
 8005eea:	660a      	str	r2, [r1, #96]	; 0x60
				in_data[28 * (x - 2) + (y - 1)] = PXL_SET;
 8005eec:	eb06 010e 	add.w	r1, r6, lr
 8005ef0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8005ef4:	f105 09fb 	add.w	r9, r5, #251	; 0xfb
				in_data[28 * (x - 2) + (y - 1)] = PXL_SET;
 8005ef8:	660a      	str	r2, [r1, #96]	; 0x60
				in_data[28 * (x - 1) + (y + 1)] = PXL_SET;
 8005efa:	eb00 010c 	add.w	r1, r0, ip
 8005efe:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8005f02:	fa1f f989 	uxth.w	r9, r9
				in_data[28 * (x - 1) + (y + 1)] = PXL_SET;
 8005f06:	660a      	str	r2, [r1, #96]	; 0x60
				in_data[28 * (x - 1) + (y)] = PXL_SET;
 8005f08:	eb0c 0104 	add.w	r1, ip, r4
				in_data[28 * (x - 1) + (y - 1)] = PXL_SET;
 8005f0c:	44f4      	add	ip, lr
				in_data[28 * (x - 1) + (y)] = PXL_SET;
 8005f0e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				in_data[28 * (x - 1) + (y - 1)] = PXL_SET;
 8005f12:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
				in_data[28 * (x - 1) + (y)] = PXL_SET;
 8005f16:	660a      	str	r2, [r1, #96]	; 0x60
				in_data[28 * (x - 1) + (y - 1)] = PXL_SET;
 8005f18:	f8cc 2060 	str.w	r2, [ip, #96]	; 0x60
				in_data[28 * (x) + (y + 1)] = PXL_SET;
 8005f1c:	f106 0c38 	add.w	ip, r6, #56	; 0x38
 8005f20:	eb00 010c 	add.w	r1, r0, ip
 8005f24:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				in_data[28 * (x + 1) + (y + 1)] = PXL_SET;
 8005f28:	3654      	adds	r6, #84	; 0x54
				in_data[28 * (x) + (y + 1)] = PXL_SET;
 8005f2a:	660a      	str	r2, [r1, #96]	; 0x60
				in_data[28 * (x) + (y)] = PXL_SET;
 8005f2c:	eb0c 0104 	add.w	r1, ip, r4
 8005f30:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				in_data[28 * (x) + (y - 1)] = PXL_SET;
 8005f34:	44f4      	add	ip, lr
				in_data[28 * (x) + (y)] = PXL_SET;
 8005f36:	660a      	str	r2, [r1, #96]	; 0x60
				in_data[28 * (x + 1) + (y + 1)] = PXL_SET;
 8005f38:	4430      	add	r0, r6
				in_data[28 * (x + 1) + (y)] = PXL_SET;
 8005f3a:	1931      	adds	r1, r6, r4
				in_data[28 * (x + 1) + (y - 1)] = PXL_SET;
 8005f3c:	4476      	add	r6, lr
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8005f3e:	b2a4      	uxth	r4, r4
				in_data[28 * (x) + (y - 1)] = PXL_SET;
 8005f40:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
				in_data[28 * (x + 1) + (y + 1)] = PXL_SET;
 8005f44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
				in_data[28 * (x + 1) + (y)] = PXL_SET;
 8005f48:	eb03 0181 	add.w	r1, r3, r1, lsl #2
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8005f4c:	f104 0ac9 	add.w	sl, r4, #201	; 0xc9
				in_data[28 * (x + 1) + (y - 1)] = PXL_SET;
 8005f50:	eb03 0386 	add.w	r3, r3, r6, lsl #2
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8005f54:	fa1f fa8a 	uxth.w	sl, sl
				BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT,
 8005f58:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
 8005f5c:	f105 0bf9 	add.w	fp, r5, #249	; 0xf9
				in_data[28 * (x) + (y - 1)] = PXL_SET;
 8005f60:	f8cc 2060 	str.w	r2, [ip, #96]	; 0x60
				BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT,
 8005f64:	b2b6      	uxth	r6, r6
				in_data[28 * (x + 1) + (y + 1)] = PXL_SET;
 8005f66:	6602      	str	r2, [r0, #96]	; 0x60
				BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT,
 8005f68:	fa1f fb8b 	uxth.w	fp, fp
				in_data[28 * (x + 1) + (y)] = PXL_SET;
 8005f6c:	660a      	str	r2, [r1, #96]	; 0x60
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8005f6e:	4650      	mov	r0, sl
				in_data[28 * (x + 1) + (y - 1)] = PXL_SET;
 8005f70:	661a      	str	r2, [r3, #96]	; 0x60
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8005f72:	4649      	mov	r1, r9
 8005f74:	22ff      	movs	r2, #255	; 0xff
 8005f76:	f7fc f95d 	bl	8002234 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT,
 8005f7a:	22ff      	movs	r2, #255	; 0xff
 8005f7c:	4659      	mov	r1, fp
 8005f7e:	4630      	mov	r0, r6
 8005f80:	f7fc f958 	bl	8002234 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8005f84:	f105 01fa 	add.w	r1, r5, #250	; 0xfa
 8005f88:	b289      	uxth	r1, r1
 8005f8a:	22ff      	movs	r2, #255	; 0xff
 8005f8c:	4650      	mov	r0, sl
 8005f8e:	9101      	str	r1, [sp, #4]
 8005f90:	f7fc f950 	bl	8002234 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT,
 8005f94:	9901      	ldr	r1, [sp, #4]
 8005f96:	22ff      	movs	r2, #255	; 0xff
 8005f98:	4630      	mov	r0, r6
 8005f9a:	f7fc f94b 	bl	8002234 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT,
 8005f9e:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
 8005fa2:	9901      	ldr	r1, [sp, #4]
 8005fa4:	b280      	uxth	r0, r0
 8005fa6:	22ff      	movs	r2, #255	; 0xff
 8005fa8:	9001      	str	r0, [sp, #4]
 8005faa:	f7fc f943 	bl	8002234 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT,
 8005fae:	9801      	ldr	r0, [sp, #4]
 8005fb0:	22ff      	movs	r2, #255	; 0xff
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	f7fc f93e 	bl	8002234 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + IMG_SCALED_X_SHIFT,
 8005fb8:	9801      	ldr	r0, [sp, #4]
 8005fba:	22ff      	movs	r2, #255	; 0xff
 8005fbc:	4659      	mov	r1, fp
 8005fbe:	f7fc f939 	bl	8002234 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y + 1 + IMG_SCALED_X_SHIFT,
 8005fc2:	22ff      	movs	r2, #255	; 0xff
 8005fc4:	4659      	mov	r1, fp
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	f7fc f934 	bl	8002234 <BSP_LCD_DrawPixel>
				BSP_LCD_DrawPixel(y - 1 + IMG_SCALED_X_SHIFT,
 8005fcc:	22ff      	movs	r2, #255	; 0xff
 8005fce:	4649      	mov	r1, r9
 8005fd0:	4630      	mov	r0, r6
 8005fd2:	f7fc f92f 	bl	8002234 <BSP_LCD_DrawPixel>
				printf("X =%d Y=%d\r\n", ui_state.X, ui_state.Y);
 8005fd6:	88ba      	ldrh	r2, [r7, #4]
 8005fd8:	8879      	ldrh	r1, [r7, #2]
 8005fda:	484a      	ldr	r0, [pc, #296]	; (8006104 <main+0x358>)
 8005fdc:	f009 fb4a 	bl	800f674 <iprintf>
		HAL_Delay(1);
 8005fe0:	2001      	movs	r0, #1
 8005fe2:	f7fc fcc9 	bl	8002978 <HAL_Delay>
		if (BSP_PB_GetState(BUTTON_KEY)) {
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	f7fb fd4e 	bl	8001a88 <BSP_PB_GetState>
 8005fec:	2800      	cmp	r0, #0
 8005fee:	f43f af1e 	beq.w	8005e2e <main+0x82>
			printf("NN processing...");
 8005ff2:	4845      	ldr	r0, [pc, #276]	; (8006108 <main+0x35c>)
 8005ff4:	4d3e      	ldr	r5, [pc, #248]	; (80060f0 <main+0x344>)
 8005ff6:	f009 fb3d 	bl	800f674 <iprintf>
			aiRun(in_data, out_data);
 8005ffa:	4641      	mov	r1, r8
 8005ffc:	4843      	ldr	r0, [pc, #268]	; (800610c <main+0x360>)
 8005ffe:	f7ff fdfd 	bl	8005bfc <aiRun>
 8006002:	2300      	movs	r3, #0
 8006004:	ed9d 7a02 	vldr	s14, [sp, #8]
 8006008:	eddd 7a04 	vldr	s15, [sp, #16]
 800600c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8006010:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8006014:	461c      	mov	r4, r3
			for (int i = 0; i < NUM_CLASSES; i++) {
 8006016:	461a      	mov	r2, r3
				if (_1st_pred.prob < out_data[i]) {
 8006018:	ecf5 6a01 	vldmia	r5!, {s13}
 800601c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006024:	f340 8098 	ble.w	8006158 <main+0x3ac>
					_1st_pred.label = i;
 8006028:	2301      	movs	r3, #1
					_2nd_pred.prob = _1st_pred.prob;
 800602a:	eef0 7a47 	vmov.f32	s15, s14
					_2nd_pred.label = _1st_pred.label;
 800602e:	4601      	mov	r1, r0
					_1st_pred.prob = out_data[i];
 8006030:	eeb0 7a66 	vmov.f32	s14, s13
					_1st_pred.label = i;
 8006034:	b2d0      	uxtb	r0, r2
 8006036:	461c      	mov	r4, r3
			for (int i = 0; i < NUM_CLASSES; i++) {
 8006038:	3201      	adds	r2, #1
 800603a:	2a0a      	cmp	r2, #10
 800603c:	d1ec      	bne.n	8006018 <main+0x26c>
 800603e:	b11c      	cbz	r4, 8006048 <main+0x29c>
 8006040:	ed8d 7a02 	vstr	s14, [sp, #8]
 8006044:	f88d 000c 	strb.w	r0, [sp, #12]
 8006048:	b11b      	cbz	r3, 8006052 <main+0x2a6>
 800604a:	f88d 1014 	strb.w	r1, [sp, #20]
 800604e:	edcd 7a04 	vstr	s15, [sp, #16]
			printf("NN First Guess: %d  %f \n\r", _1st_pred.label,
 8006052:	9802      	ldr	r0, [sp, #8]
 8006054:	f7fa fa88 	bl	8000568 <__aeabi_f2d>
 8006058:	4602      	mov	r2, r0
 800605a:	460b      	mov	r3, r1
 800605c:	482c      	ldr	r0, [pc, #176]	; (8006110 <main+0x364>)
 800605e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8006062:	f009 fb07 	bl	800f674 <iprintf>
			printf("NN Second Guess: %d  %f \n\r", _2nd_pred.label,
 8006066:	9804      	ldr	r0, [sp, #16]
 8006068:	f7fa fa7e 	bl	8000568 <__aeabi_f2d>
 800606c:	460b      	mov	r3, r1
 800606e:	4602      	mov	r2, r0
 8006070:	f89d 1014 	ldrb.w	r1, [sp, #20]
 8006074:	4827      	ldr	r0, [pc, #156]	; (8006114 <main+0x368>)
 8006076:	f009 fafd 	bl	800f674 <iprintf>
			sprintf(_1st_pred_str, "%d", _1st_pred.label);
 800607a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800607e:	4926      	ldr	r1, [pc, #152]	; (8006118 <main+0x36c>)
 8006080:	a806      	add	r0, sp, #24
 8006082:	f009 fc5b 	bl	800f93c <siprintf>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8006086:	4825      	ldr	r0, [pc, #148]	; (800611c <main+0x370>)
 8006088:	f7fb ff00 	bl	8001e8c <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&Font20);
 800608c:	4824      	ldr	r0, [pc, #144]	; (8006120 <main+0x374>)
 800608e:	f7fb ff11 	bl	8001eb4 <BSP_LCD_SetFont>
			BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8006092:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8006096:	f7fb ff03 	bl	8001ea0 <BSP_LCD_SetBackColor>
			BSP_LCD_DisplayStringAt(130, 255, (uint8_t*) _1st_pred_str,
 800609a:	aa06      	add	r2, sp, #24
 800609c:	2303      	movs	r3, #3
 800609e:	21ff      	movs	r1, #255	; 0xff
 80060a0:	2082      	movs	r0, #130	; 0x82
 80060a2:	f7fc f941 	bl	8002328 <BSP_LCD_DisplayStringAt>
			sprintf(_1st_pred_prob_str, "%.1f", (float) _1st_pred.prob * 100);
 80060a6:	ed9d 7a02 	vldr	s14, [sp, #8]
 80060aa:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006124 <main+0x378>
 80060ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b2:	ee17 0a90 	vmov	r0, s15
 80060b6:	f7fa fa57 	bl	8000568 <__aeabi_f2d>
 80060ba:	4602      	mov	r2, r0
 80060bc:	460b      	mov	r3, r1
 80060be:	a809      	add	r0, sp, #36	; 0x24
 80060c0:	4919      	ldr	r1, [pc, #100]	; (8006128 <main+0x37c>)
 80060c2:	f009 fc3b 	bl	800f93c <siprintf>
			BSP_LCD_DisplayStringAt(10, 220, (uint8_t*) _1st_pred_prob_str,
 80060c6:	aa09      	add	r2, sp, #36	; 0x24
 80060c8:	2303      	movs	r3, #3
 80060ca:	21dc      	movs	r1, #220	; 0xdc
 80060cc:	200a      	movs	r0, #10
 80060ce:	f7fc f92b 	bl	8002328 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(80, 220, (uint8_t*) "%", LEFT_MODE);
 80060d2:	4a16      	ldr	r2, [pc, #88]	; (800612c <main+0x380>)
 80060d4:	2303      	movs	r3, #3
 80060d6:	21dc      	movs	r1, #220	; 0xdc
 80060d8:	2050      	movs	r0, #80	; 0x50
 80060da:	f7fc f925 	bl	8002328 <BSP_LCD_DisplayStringAt>
			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80060de:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80060e2:	f7fb fed3 	bl	8001e8c <BSP_LCD_SetTextColor>
 80060e6:	e69f      	b.n	8005e28 <main+0x7c>
 80060e8:	20000a88 	.word	0x20000a88
 80060ec:	0813ce54 	.word	0x0813ce54
 80060f0:	20000ec0 	.word	0x20000ec0
 80060f4:	20009e28 	.word	0x20009e28
 80060f8:	3daaaaab 	.word	0x3daaaaab
 80060fc:	3f7d70a4 	.word	0x3f7d70a4
 8006100:	20000ea0 	.word	0x20000ea0
 8006104:	0813ce71 	.word	0x0813ce71
 8006108:	0813ce7e 	.word	0x0813ce7e
 800610c:	20000f00 	.word	0x20000f00
 8006110:	0813ce8f 	.word	0x0813ce8f
 8006114:	0813cea9 	.word	0x0813cea9
 8006118:	0813cec4 	.word	0x0813cec4
 800611c:	ffff0000 	.word	0xffff0000
 8006120:	200000c0 	.word	0x200000c0
 8006124:	42c80000 	.word	0x42c80000
 8006128:	0813cec7 	.word	0x0813cec7
 800612c:	0813cecc 	.word	0x0813cecc
			} else if ((ui_state.X > ERASE_BUTTON_X1
 8006130:	3806      	subs	r0, #6
 8006132:	28e4      	cmp	r0, #228	; 0xe4
 8006134:	f63f af54 	bhi.w	8005fe0 <main+0x234>
							&& ui_state.Y < ERASE_BUTTON_Y2)) {
 8006138:	88bb      	ldrh	r3, [r7, #4]
 800613a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
					&& (ui_state.Y > ERASE_BUTTON_Y1
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b1c      	cmp	r3, #28
 8006142:	f63f af4d 	bhi.w	8005fe0 <main+0x234>
				user_interface_reset();
 8006146:	f7ff fdc7 	bl	8005cd8 <user_interface_reset>
				mnist_game_reset(in_data, out_data, &_1st_pred, &_2nd_pred);
 800614a:	4808      	ldr	r0, [pc, #32]	; (800616c <main+0x3c0>)
 800614c:	ab04      	add	r3, sp, #16
 800614e:	aa02      	add	r2, sp, #8
 8006150:	4641      	mov	r1, r8
 8006152:	f7ff fcf5 	bl	8005b40 <mnist_game_reset>
 8006156:	e743      	b.n	8005fe0 <main+0x234>
				} else if (_2nd_pred.prob < out_data[i]) {
 8006158:	eef4 6ae7 	vcmpe.f32	s13, s15
 800615c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					_2nd_pred.label = i;
 8006160:	bfc2      	ittt	gt
 8006162:	b2d1      	uxtbgt	r1, r2
					_2nd_pred.prob = out_data[i];
 8006164:	eef0 7a66 	vmovgt.f32	s15, s13
				} else if (_2nd_pred.prob < out_data[i]) {
 8006168:	2301      	movgt	r3, #1
 800616a:	e765      	b.n	8006038 <main+0x28c>
 800616c:	20000f00 	.word	0x20000f00

08006170 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006170:	6802      	ldr	r2, [r0, #0]
 8006172:	4b03      	ldr	r3, [pc, #12]	; (8006180 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8006174:	429a      	cmp	r2, r3
 8006176:	d101      	bne.n	800617c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8006178:	f7fc bbec 	b.w	8002954 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40001000 	.word	0x40001000

08006184 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006184:	4770      	bx	lr

08006186 <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8006186:	f000 bac9 	b.w	800671c <ai_platform_network_get_error>
	...

0800618c <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800618c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800618e:	2304      	movs	r3, #4
 8006190:	2200      	movs	r2, #0
 8006192:	e9cd 3200 	strd	r3, r2, [sp]
 8006196:	4a03      	ldr	r2, [pc, #12]	; (80061a4 <ai_network_create+0x18>)
 8006198:	2301      	movs	r3, #1
 800619a:	f000 fb39 	bl	8006810 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800619e:	b003      	add	sp, #12
 80061a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80061a4:	200000d4 	.word	0x200000d4

080061a8 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 80061a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061aa:	b085      	sub	sp, #20
 80061ac:	4606      	mov	r6, r0
 80061ae:	9101      	str	r1, [sp, #4]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80061b0:	f000 fc04 	bl	80069bc <ai_platform_network_init>
  if (!net_ctx) return false;
 80061b4:	2800      	cmp	r0, #0
 80061b6:	f000 808d 	beq.w	80062d4 <ai_network_init+0x12c>
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80061ba:	9a01      	ldr	r2, [sp, #4]
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80061bc:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80061be:	2101      	movs	r1, #1
 80061c0:	a803      	add	r0, sp, #12
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 80061c2:	9303      	str	r3, [sp, #12]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 80061c4:	f000 fa42 	bl	800664c <ai_platform_get_weights_map>
 80061c8:	9a01      	ldr	r2, [sp, #4]
 80061ca:	4604      	mov	r4, r0
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d04b      	beq.n	8006268 <ai_network_init+0xc0>
    quantize_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80061d0:	4b41      	ldr	r3, [pc, #260]	; (80062d8 <ai_network_init+0x130>)
    quantize_conv2d_weights_array.data = AI_PTR(weights_map[0] + 0);
 80061d2:	9d03      	ldr	r5, [sp, #12]
    quantize_conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 80061d4:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80061d6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80061da:	6499      	str	r1, [r3, #72]	; 0x48
    quantize_conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 80061dc:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80061de:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80061e2:	6599      	str	r1, [r3, #88]	; 0x58
    quantize_conv2d_bias_array.data = AI_PTR(weights_map[0] + 288);
 80061e4:	f505 7190 	add.w	r1, r5, #288	; 0x120
    quantize_conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 288);
 80061e8:	e9c3 1118 	strd	r1, r1, [r3, #96]	; 0x60
    quantize_conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80061ec:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80061ee:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80061f2:	6699      	str	r1, [r3, #104]	; 0x68
    quantize_conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 416);
 80061f4:	f505 71d0 	add.w	r1, r5, #416	; 0x1a0
    quantize_conv2d_1_weights_array.data_start = AI_PTR(weights_map[0] + 416);
 80061f8:	e9c3 111c 	strd	r1, r1, [r3, #112]	; 0x70
    quantize_conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80061fc:	6f99      	ldr	r1, [r3, #120]	; 0x78
 80061fe:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006202:	6799      	str	r1, [r3, #120]	; 0x78
    quantize_conv2d_1_bias_array.data = AI_PTR(weights_map[0] + 18848);
 8006204:	f505 4193 	add.w	r1, r5, #18816	; 0x4980
 8006208:	3120      	adds	r1, #32
    quantize_conv2d_1_bias_array.data_start = AI_PTR(weights_map[0] + 18848);
 800620a:	e9c3 1120 	strd	r1, r1, [r3, #128]	; 0x80
    quantize_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800620e:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8006212:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006216:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    quantize_dense_weights_array.data = AI_PTR(weights_map[0] + 19104);
 800621a:	f505 4195 	add.w	r1, r5, #19072	; 0x4a80
 800621e:	3120      	adds	r1, #32
    quantize_dense_weights_array.data_start = AI_PTR(weights_map[0] + 19104);
 8006220:	e9c3 1124 	strd	r1, r1, [r3, #144]	; 0x90
    quantize_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006224:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    quantize_conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8006228:	e9c3 5514 	strd	r5, r5, [r3, #80]	; 0x50
    quantize_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800622c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    quantize_dense_bias_array.data = AI_PTR(weights_map[0] + 1198752);
 8006230:	f505 1592 	add.w	r5, r5, #1196032	; 0x124000
    quantize_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006234:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
    quantize_dense_bias_array.data = AI_PTR(weights_map[0] + 1198752);
 8006238:	f505 612a 	add.w	r1, r5, #2720	; 0xaa0
    quantize_dense_bias_array.data_start = AI_PTR(weights_map[0] + 1198752);
 800623c:	e9c3 1128 	strd	r1, r1, [r3, #160]	; 0xa0
    quantize_dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8006240:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8006244:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006248:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
    quantize_dense_1_weights_array.data = AI_PTR(weights_map[0] + 1199264);
 800624c:	f505 614a 	add.w	r1, r5, #3232	; 0xca0
    quantize_dense_1_weights_array.data_start = AI_PTR(weights_map[0] + 1199264);
 8006250:	e9c3 112c 	strd	r1, r1, [r3, #176]	; 0xb0
    quantize_dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8006254:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
    quantize_dense_1_bias_array.data = AI_PTR(weights_map[0] + 1200544);
 8006258:	f505 558d 	add.w	r5, r5, #4512	; 0x11a0
    quantize_dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800625c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8006260:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
    quantize_dense_1_bias_array.data_start = AI_PTR(weights_map[0] + 1200544);
 8006264:	e9c3 5530 	strd	r5, r5, [r3, #192]	; 0xc0
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8006268:	2500      	movs	r5, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800626a:	2101      	movs	r1, #1
 800626c:	a803      	add	r0, sp, #12
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800626e:	9503      	str	r5, [sp, #12]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8006270:	f000 fa20 	bl	80066b4 <ai_platform_get_activations_map>
 8006274:	4607      	mov	r7, r0
 8006276:	b338      	cbz	r0, 80062c8 <ai_network_init+0x120>
    quantize_conv2d_output_array.data = AI_PTR(activations_map[0] + 832);
 8006278:	9a03      	ldr	r2, [sp, #12]
    quantize_conv2d_input_output_array.data = AI_PTR(NULL);
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <ai_network_init+0x130>)
    quantize_conv2d_output_array.data = AI_PTR(activations_map[0] + 832);
 800627c:	f502 7150 	add.w	r1, r2, #832	; 0x340
    quantize_conv2d_output_array.data_start = AI_PTR(activations_map[0] + 832);
 8006280:	e9c3 1138 	strd	r1, r1, [r3, #224]	; 0xe0
    quantize_dense_output_array.data = AI_PTR(activations_map[0] + 28928);
 8006284:	f502 41e2 	add.w	r1, r2, #28928	; 0x7100
    quantize_dense_output_array.data_start = AI_PTR(activations_map[0] + 28928);
 8006288:	e9c3 1140 	strd	r1, r1, [r3, #256]	; 0x100
    quantize_dense_1_output_array.data = AI_PTR(activations_map[0] + 356);
 800628c:	f502 71b2 	add.w	r1, r2, #356	; 0x164
    quantize_dense_1_output_array.data_start = AI_PTR(activations_map[0] + 356);
 8006290:	e9c3 1144 	strd	r1, r1, [r3, #272]	; 0x110
    quantize_conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 22464);
 8006294:	f502 41af 	add.w	r1, r2, #22400	; 0x5780
 8006298:	3140      	adds	r1, #64	; 0x40
    quantize_conv2d_scratch0_array.data_start = AI_PTR(activations_map[0] + 22464);
 800629a:	e9c3 1150 	strd	r1, r1, [r3, #320]	; 0x140
    quantize_conv2d_1_scratch0_array.data_start = AI_PTR(activations_map[0] + 22464);
 800629e:	e9c3 1154 	strd	r1, r1, [r3, #336]	; 0x150
    quantize_conv2d_1_scratch1_array.data = AI_PTR(activations_map[0] + 29632);
 80062a2:	f502 41e7 	add.w	r1, r2, #29568	; 0x7380
 80062a6:	3140      	adds	r1, #64	; 0x40
    quantize_conv2d_1_scratch1_array.data_start = AI_PTR(activations_map[0] + 29632);
 80062a8:	e9c3 1158 	strd	r1, r1, [r3, #352]	; 0x160
    quantize_dense_scratch0_array.data = AI_PTR(activations_map[0] + 9216);
 80062ac:	f502 5110 	add.w	r1, r2, #9216	; 0x2400
    quantize_conv2d_input_output_array.data_start = AI_PTR(NULL);
 80062b0:	e9c3 5534 	strd	r5, r5, [r3, #208]	; 0xd0
    quantize_conv2d_1_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80062b4:	e9c3 223c 	strd	r2, r2, [r3, #240]	; 0xf0
    quantize_dense_1_fmt_conv_output_array.data_start = AI_PTR(activations_map[0] + 0);
 80062b8:	e9c3 2248 	strd	r2, r2, [r3, #288]	; 0x120
    softmax_8_output_array.data_start = AI_PTR(NULL);
 80062bc:	e9c3 554c 	strd	r5, r5, [r3, #304]	; 0x130
    quantize_dense_scratch0_array.data_start = AI_PTR(activations_map[0] + 9216);
 80062c0:	e9c3 115c 	strd	r1, r1, [r3, #368]	; 0x170
    quantize_dense_1_scratch0_array.data_start = AI_PTR(activations_map[0] + 0);
 80062c4:	e9c3 2260 	strd	r2, r2, [r3, #384]	; 0x180

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80062c8:	4630      	mov	r0, r6
 80062ca:	f000 fc89 	bl	8006be0 <ai_platform_network_post_init>
 80062ce:	4038      	ands	r0, r7
 80062d0:	4020      	ands	r0, r4
 80062d2:	b2c0      	uxtb	r0, r0

  return ok;
}
 80062d4:	b005      	add	sp, #20
 80062d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062d8:	200000d4 	.word	0x200000d4

080062dc <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 80062dc:	f000 bd14 	b.w	8006d08 <ai_platform_network_process>

080062e0 <ai_network_data_weights_get>:
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);

}
 80062e0:	4800      	ldr	r0, [pc, #0]	; (80062e4 <ai_network_data_weights_get+0x4>)
 80062e2:	4770      	bx	lr
 80062e4:	08017b20 	.word	0x08017b20

080062e8 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80062e8:	480e      	ldr	r0, [pc, #56]	; (8006324 <MX_SPI5_Init+0x3c>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80062ea:	4a0f      	ldr	r2, [pc, #60]	; (8006328 <MX_SPI5_Init+0x40>)
{
 80062ec:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80062ee:	f44f 7382 	mov.w	r3, #260	; 0x104
 80062f2:	e9c0 2300 	strd	r2, r3, [r0]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80062f6:	2300      	movs	r3, #0
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80062f8:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80062fc:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006300:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006304:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8006308:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800630c:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800630e:	230a      	movs	r3, #10
 8006310:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8006312:	f7fe f9ff 	bl	8004714 <HAL_SPI_Init>
 8006316:	b118      	cbz	r0, 8006320 <MX_SPI5_Init+0x38>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8006318:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800631c:	f7ff bf32 	b.w	8006184 <Error_Handler>
}
 8006320:	bd08      	pop	{r3, pc}
 8006322:	bf00      	nop
 8006324:	20009e30 	.word	0x20009e30
 8006328:	40015000 	.word	0x40015000

0800632c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800632c:	b510      	push	{r4, lr}
 800632e:	4604      	mov	r4, r0
 8006330:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006332:	2214      	movs	r2, #20
 8006334:	2100      	movs	r1, #0
 8006336:	a803      	add	r0, sp, #12
 8006338:	f008 fa70 	bl	800e81c <memset>
  if(spiHandle->Instance==SPI5)
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	4b14      	ldr	r3, [pc, #80]	; (8006390 <HAL_SPI_MspInit+0x64>)
 8006340:	429a      	cmp	r2, r3
 8006342:	d123      	bne.n	800638c <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006344:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8006348:	2200      	movs	r2, #0
 800634a:	9201      	str	r2, [sp, #4]
 800634c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800634e:	4811      	ldr	r0, [pc, #68]	; (8006394 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8006350:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006354:	6459      	str	r1, [r3, #68]	; 0x44
 8006356:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8006358:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 800635c:	9101      	str	r1, [sp, #4]
 800635e:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006360:	9202      	str	r2, [sp, #8]
 8006362:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006364:	f041 0120 	orr.w	r1, r1, #32
 8006368:	6319      	str	r1, [r3, #48]	; 0x30
 800636a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006372:	f44f 7160 	mov.w	r1, #896	; 0x380
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006376:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006378:	2302      	movs	r3, #2
 800637a:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800637e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006380:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006382:	e9cd 2205 	strd	r2, r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8006386:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006388:	f7fc fd7a 	bl	8002e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800638c:	b008      	add	sp, #32
 800638e:	bd10      	pop	{r4, pc}
 8006390:	40015000 	.word	0x40015000
 8006394:	40021400 	.word	0x40021400

08006398 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{

  if(spiHandle->Instance==SPI5)
 8006398:	6802      	ldr	r2, [r0, #0]
 800639a:	4b07      	ldr	r3, [pc, #28]	; (80063b8 <HAL_SPI_MspDeInit+0x20>)
 800639c:	429a      	cmp	r2, r3
 800639e:	d109      	bne.n	80063b4 <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80063a0:	4a06      	ldr	r2, [pc, #24]	; (80063bc <HAL_SPI_MspDeInit+0x24>)
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80063a2:	4807      	ldr	r0, [pc, #28]	; (80063c0 <HAL_SPI_MspDeInit+0x28>)
    __HAL_RCC_SPI5_CLK_DISABLE();
 80063a4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80063a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80063aa:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80063ac:	f44f 7160 	mov.w	r1, #896	; 0x380
 80063b0:	f7fc be4c 	b.w	800304c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40015000 	.word	0x40015000
 80063bc:	40023800 	.word	0x40023800
 80063c0:	40021400 	.word	0x40021400

080063c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063c4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063c6:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <HAL_MspInit+0x34>)
 80063c8:	2100      	movs	r1, #0
 80063ca:	9100      	str	r1, [sp, #0]
 80063cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063d2:	645a      	str	r2, [r3, #68]	; 0x44
 80063d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063d6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80063da:	9200      	str	r2, [sp, #0]
 80063dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063de:	9101      	str	r1, [sp, #4]
 80063e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063e2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80063e6:	641a      	str	r2, [r3, #64]	; 0x40
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ee:	9301      	str	r3, [sp, #4]
 80063f0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063f2:	b002      	add	sp, #8
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40023800 	.word	0x40023800

080063fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063fc:	b530      	push	{r4, r5, lr}
 80063fe:	4601      	mov	r1, r0
 8006400:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8006402:	2200      	movs	r2, #0
 8006404:	2036      	movs	r0, #54	; 0x36
 8006406:	f7fc fadd 	bl	80029c4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800640a:	2036      	movs	r0, #54	; 0x36
 800640c:	f7fc fb0c 	bl	8002a28 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006410:	2500      	movs	r5, #0
 8006412:	4b15      	ldr	r3, [pc, #84]	; (8006468 <HAL_InitTick+0x6c>)
 8006414:	9502      	str	r5, [sp, #8]
 8006416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006418:	4c14      	ldr	r4, [pc, #80]	; (800646c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 800641a:	f042 0210 	orr.w	r2, r2, #16
 800641e:	641a      	str	r2, [r3, #64]	; 0x40
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	f003 0310 	and.w	r3, r3, #16
 8006426:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006428:	a901      	add	r1, sp, #4
 800642a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800642c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800642e:	f7fd ff35 	bl	800429c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006432:	f7fd ff13 	bl	800425c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8006436:	4b0e      	ldr	r3, [pc, #56]	; (8006470 <HAL_InitTick+0x74>)
 8006438:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800643a:	f240 33e7 	movw	r3, #999	; 0x3e7
 800643e:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006440:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006442:	4b0c      	ldr	r3, [pc, #48]	; (8006474 <HAL_InitTick+0x78>)
 8006444:	fbb0 f0f3 	udiv	r0, r0, r3
 8006448:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800644a:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800644c:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 800644e:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006450:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8006452:	f7fe fd53 	bl	8004efc <HAL_TIM_Base_Init>
 8006456:	b920      	cbnz	r0, 8006462 <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8006458:	4620      	mov	r0, r4
 800645a:	f7fe fc09 	bl	8004c70 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 800645e:	b009      	add	sp, #36	; 0x24
 8006460:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8006462:	2001      	movs	r0, #1
 8006464:	e7fb      	b.n	800645e <HAL_InitTick+0x62>
 8006466:	bf00      	nop
 8006468:	40023800 	.word	0x40023800
 800646c:	20009e88 	.word	0x20009e88
 8006470:	40001000 	.word	0x40001000
 8006474:	000f4240 	.word	0x000f4240

08006478 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006478:	4770      	bx	lr

0800647a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800647a:	e7fe      	b.n	800647a <HardFault_Handler>

0800647c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800647c:	e7fe      	b.n	800647c <MemManage_Handler>

0800647e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800647e:	e7fe      	b.n	800647e <BusFault_Handler>

08006480 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006480:	e7fe      	b.n	8006480 <UsageFault_Handler>

08006482 <SVC_Handler>:
 8006482:	4770      	bx	lr

08006484 <DebugMon_Handler>:
 8006484:	4770      	bx	lr

08006486 <PendSV_Handler>:
 8006486:	4770      	bx	lr

08006488 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006488:	4801      	ldr	r0, [pc, #4]	; (8006490 <TIM6_DAC_IRQHandler+0x8>)
 800648a:	f7fe bc2f 	b.w	8004cec <HAL_TIM_IRQHandler>
 800648e:	bf00      	nop
 8006490:	20009e88 	.word	0x20009e88

08006494 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <SystemInit+0x18>)
 8006496:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800649a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800649e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80064a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80064a6:	609a      	str	r2, [r3, #8]
#endif
}
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	e000ed00 	.word	0xe000ed00

080064b0 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80064b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80064b2:	2210      	movs	r2, #16
 80064b4:	2100      	movs	r1, #0
 80064b6:	a802      	add	r0, sp, #8
 80064b8:	f008 f9b0 	bl	800e81c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80064bc:	4814      	ldr	r0, [pc, #80]	; (8006510 <MX_TIM1_Init+0x60>)
 80064be:	4a15      	ldr	r2, [pc, #84]	; (8006514 <MX_TIM1_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064c0:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 0;
 80064c2:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
 80064c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064ca:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064ce:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064d2:	e9c0 3305 	strd	r3, r3, [r0, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064d6:	6083      	str	r3, [r0, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80064d8:	f7fe fd10 	bl	8004efc <HAL_TIM_Base_Init>
 80064dc:	b108      	cbz	r0, 80064e2 <MX_TIM1_Init+0x32>
  {
    Error_Handler();
 80064de:	f7ff fe51 	bl	8006184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80064e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80064e6:	480a      	ldr	r0, [pc, #40]	; (8006510 <MX_TIM1_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80064e8:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80064ea:	a902      	add	r1, sp, #8
 80064ec:	f7fe fd3c 	bl	8004f68 <HAL_TIM_ConfigClockSource>
 80064f0:	b108      	cbz	r0, 80064f6 <MX_TIM1_Init+0x46>
  {
    Error_Handler();
 80064f2:	f7ff fe47 	bl	8006184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064f6:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80064f8:	4805      	ldr	r0, [pc, #20]	; (8006510 <MX_TIM1_Init+0x60>)
 80064fa:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064fc:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006500:	f7fe fdce 	bl	80050a0 <HAL_TIMEx_MasterConfigSynchronization>
 8006504:	b108      	cbz	r0, 800650a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8006506:	f7ff fe3d 	bl	8006184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800650a:	b007      	add	sp, #28
 800650c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006510:	20009ed0 	.word	0x20009ed0
 8006514:	40010000 	.word	0x40010000

08006518 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8006518:	6802      	ldr	r2, [r0, #0]
 800651a:	4b09      	ldr	r3, [pc, #36]	; (8006540 <HAL_TIM_Base_MspInit+0x28>)
 800651c:	429a      	cmp	r2, r3
{
 800651e:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8006520:	d10b      	bne.n	800653a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006522:	2300      	movs	r3, #0
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	4b07      	ldr	r3, [pc, #28]	; (8006544 <HAL_TIM_Base_MspInit+0x2c>)
 8006528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	645a      	str	r2, [r3, #68]	; 0x44
 8006530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	9301      	str	r3, [sp, #4]
 8006538:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800653a:	b002      	add	sp, #8
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40010000 	.word	0x40010000
 8006544:	40023800 	.word	0x40023800

08006548 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006548:	480b      	ldr	r0, [pc, #44]	; (8006578 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 800654a:	4a0c      	ldr	r2, [pc, #48]	; (800657c <MX_USART1_UART_Init+0x34>)
{
 800654c:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 115200;
 800654e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8006552:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006556:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006558:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 800655a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800655e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006562:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006564:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006566:	f7fe fe39 	bl	80051dc <HAL_UART_Init>
 800656a:	b118      	cbz	r0, 8006574 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800656c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8006570:	f7ff be08 	b.w	8006184 <Error_Handler>
}
 8006574:	bd08      	pop	{r3, pc}
 8006576:	bf00      	nop
 8006578:	20009f18 	.word	0x20009f18
 800657c:	40011000 	.word	0x40011000

08006580 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006580:	b510      	push	{r4, lr}
 8006582:	4604      	mov	r4, r0
 8006584:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006586:	2214      	movs	r2, #20
 8006588:	2100      	movs	r1, #0
 800658a:	a803      	add	r0, sp, #12
 800658c:	f008 f946 	bl	800e81c <memset>
  if(uartHandle->Instance==USART1)
 8006590:	6822      	ldr	r2, [r4, #0]
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <HAL_UART_MspInit+0x68>)
 8006594:	429a      	cmp	r2, r3
 8006596:	d124      	bne.n	80065e2 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006598:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 800659c:	2200      	movs	r2, #0
 800659e:	9201      	str	r2, [sp, #4]
 80065a0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80065a2:	f041 0110 	orr.w	r1, r1, #16
 80065a6:	6459      	str	r1, [r3, #68]	; 0x44
 80065a8:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80065aa:	f001 0110 	and.w	r1, r1, #16
 80065ae:	9101      	str	r1, [sp, #4]
 80065b0:	9901      	ldr	r1, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065b2:	9202      	str	r2, [sp, #8]
 80065b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065b6:	f041 0101 	orr.w	r1, r1, #1
 80065ba:	6319      	str	r1, [r3, #48]	; 0x30
 80065bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065be:	9205      	str	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065ca:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065cc:	2302      	movs	r3, #2
 80065ce:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80065d2:	2003      	movs	r0, #3
 80065d4:	2307      	movs	r3, #7
 80065d6:	e9cd 0306 	strd	r0, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065da:	a903      	add	r1, sp, #12
 80065dc:	4803      	ldr	r0, [pc, #12]	; (80065ec <HAL_UART_MspInit+0x6c>)
 80065de:	f7fc fc4f 	bl	8002e80 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80065e2:	b008      	add	sp, #32
 80065e4:	bd10      	pop	{r4, pc}
 80065e6:	bf00      	nop
 80065e8:	40011000 	.word	0x40011000
 80065ec:	40020000 	.word	0x40020000

080065f0 <Reset_Handler>:
 80065f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006628 <LoopFillZerobss+0x14>
 80065f4:	2100      	movs	r1, #0
 80065f6:	e003      	b.n	8006600 <LoopCopyDataInit>

080065f8 <CopyDataInit>:
 80065f8:	4b0c      	ldr	r3, [pc, #48]	; (800662c <LoopFillZerobss+0x18>)
 80065fa:	585b      	ldr	r3, [r3, r1]
 80065fc:	5043      	str	r3, [r0, r1]
 80065fe:	3104      	adds	r1, #4

08006600 <LoopCopyDataInit>:
 8006600:	480b      	ldr	r0, [pc, #44]	; (8006630 <LoopFillZerobss+0x1c>)
 8006602:	4b0c      	ldr	r3, [pc, #48]	; (8006634 <LoopFillZerobss+0x20>)
 8006604:	1842      	adds	r2, r0, r1
 8006606:	429a      	cmp	r2, r3
 8006608:	d3f6      	bcc.n	80065f8 <CopyDataInit>
 800660a:	4a0b      	ldr	r2, [pc, #44]	; (8006638 <LoopFillZerobss+0x24>)
 800660c:	e002      	b.n	8006614 <LoopFillZerobss>

0800660e <FillZerobss>:
 800660e:	2300      	movs	r3, #0
 8006610:	f842 3b04 	str.w	r3, [r2], #4

08006614 <LoopFillZerobss>:
 8006614:	4b09      	ldr	r3, [pc, #36]	; (800663c <LoopFillZerobss+0x28>)
 8006616:	429a      	cmp	r2, r3
 8006618:	d3f9      	bcc.n	800660e <FillZerobss>
 800661a:	f7ff ff3b 	bl	8006494 <SystemInit>
 800661e:	f008 f8c3 	bl	800e7a8 <__libc_init_array>
 8006622:	f7ff fbc3 	bl	8005dac <main>
 8006626:	4770      	bx	lr
 8006628:	20030000 	.word	0x20030000
 800662c:	0813d3cc 	.word	0x0813d3cc
 8006630:	20000000 	.word	0x20000000
 8006634:	20000c5c 	.word	0x20000c5c
 8006638:	20000c60 	.word	0x20000c60
 800663c:	20009f6c 	.word	0x20009f6c

08006640 <ADC_IRQHandler>:
 8006640:	e7fe      	b.n	8006640 <ADC_IRQHandler>
	...

08006644 <_ai_platform_acquire_crc>:
 8006644:	2001      	movs	r0, #1
 8006646:	4770      	bx	lr

08006648 <_ai_platform_release_crc>:
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop

0800664c <ai_platform_get_weights_map>:
 800664c:	b132      	cbz	r2, 800665c <ai_platform_get_weights_map+0x10>
 800664e:	6912      	ldr	r2, [r2, #16]
 8006650:	b122      	cbz	r2, 800665c <ai_platform_get_weights_map+0x10>
 8006652:	b110      	cbz	r0, 800665a <ai_platform_get_weights_map+0xe>
 8006654:	b921      	cbnz	r1, 8006660 <ai_platform_get_weights_map+0x14>
 8006656:	4608      	mov	r0, r1
 8006658:	4770      	bx	lr
 800665a:	4770      	bx	lr
 800665c:	4610      	mov	r0, r2
 800665e:	4770      	bx	lr
 8006660:	b470      	push	{r4, r5, r6}
 8006662:	4b13      	ldr	r3, [pc, #76]	; (80066b0 <ai_platform_get_weights_map+0x64>)
 8006664:	6815      	ldr	r5, [r2, #0]
 8006666:	429d      	cmp	r5, r3
 8006668:	d007      	beq.n	800667a <ai_platform_get_weights_map+0x2e>
 800666a:	6002      	str	r2, [r0, #0]
 800666c:	f1a1 0001 	sub.w	r0, r1, #1
 8006670:	fab0 f080 	clz	r0, r0
 8006674:	0940      	lsrs	r0, r0, #5
 8006676:	bc70      	pop	{r4, r5, r6}
 8006678:	4770      	bx	lr
 800667a:	6854      	ldr	r4, [r2, #4]
 800667c:	42ac      	cmp	r4, r5
 800667e:	f102 0204 	add.w	r2, r2, #4
 8006682:	d011      	beq.n	80066a8 <ai_platform_get_weights_map+0x5c>
 8006684:	1f03      	subs	r3, r0, #4
 8006686:	4616      	mov	r6, r2
 8006688:	2000      	movs	r0, #0
 800668a:	e003      	b.n	8006694 <ai_platform_get_weights_map+0x48>
 800668c:	f856 4f04 	ldr.w	r4, [r6, #4]!
 8006690:	42ac      	cmp	r4, r5
 8006692:	d009      	beq.n	80066a8 <ai_platform_get_weights_map+0x5c>
 8006694:	3001      	adds	r0, #1
 8006696:	4281      	cmp	r1, r0
 8006698:	f843 4f04 	str.w	r4, [r3, #4]!
 800669c:	d1f6      	bne.n	800668c <ai_platform_get_weights_map+0x40>
 800669e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80066a2:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <ai_platform_get_weights_map+0x64>)
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d001      	beq.n	80066ac <ai_platform_get_weights_map+0x60>
 80066a8:	2000      	movs	r0, #0
 80066aa:	e7e4      	b.n	8006676 <ai_platform_get_weights_map+0x2a>
 80066ac:	2001      	movs	r0, #1
 80066ae:	e7e2      	b.n	8006676 <ai_platform_get_weights_map+0x2a>
 80066b0:	a1facade 	.word	0xa1facade

080066b4 <ai_platform_get_activations_map>:
 80066b4:	b132      	cbz	r2, 80066c4 <ai_platform_get_activations_map+0x10>
 80066b6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80066b8:	b122      	cbz	r2, 80066c4 <ai_platform_get_activations_map+0x10>
 80066ba:	b110      	cbz	r0, 80066c2 <ai_platform_get_activations_map+0xe>
 80066bc:	b921      	cbnz	r1, 80066c8 <ai_platform_get_activations_map+0x14>
 80066be:	4608      	mov	r0, r1
 80066c0:	4770      	bx	lr
 80066c2:	4770      	bx	lr
 80066c4:	4610      	mov	r0, r2
 80066c6:	4770      	bx	lr
 80066c8:	b470      	push	{r4, r5, r6}
 80066ca:	4b13      	ldr	r3, [pc, #76]	; (8006718 <ai_platform_get_activations_map+0x64>)
 80066cc:	6815      	ldr	r5, [r2, #0]
 80066ce:	429d      	cmp	r5, r3
 80066d0:	d007      	beq.n	80066e2 <ai_platform_get_activations_map+0x2e>
 80066d2:	6002      	str	r2, [r0, #0]
 80066d4:	f1a1 0001 	sub.w	r0, r1, #1
 80066d8:	fab0 f080 	clz	r0, r0
 80066dc:	0940      	lsrs	r0, r0, #5
 80066de:	bc70      	pop	{r4, r5, r6}
 80066e0:	4770      	bx	lr
 80066e2:	6854      	ldr	r4, [r2, #4]
 80066e4:	42ac      	cmp	r4, r5
 80066e6:	f102 0204 	add.w	r2, r2, #4
 80066ea:	d011      	beq.n	8006710 <ai_platform_get_activations_map+0x5c>
 80066ec:	1f03      	subs	r3, r0, #4
 80066ee:	4616      	mov	r6, r2
 80066f0:	2000      	movs	r0, #0
 80066f2:	e003      	b.n	80066fc <ai_platform_get_activations_map+0x48>
 80066f4:	f856 4f04 	ldr.w	r4, [r6, #4]!
 80066f8:	42ac      	cmp	r4, r5
 80066fa:	d009      	beq.n	8006710 <ai_platform_get_activations_map+0x5c>
 80066fc:	3001      	adds	r0, #1
 80066fe:	4281      	cmp	r1, r0
 8006700:	f843 4f04 	str.w	r4, [r3, #4]!
 8006704:	d1f6      	bne.n	80066f4 <ai_platform_get_activations_map+0x40>
 8006706:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800670a:	4b03      	ldr	r3, [pc, #12]	; (8006718 <ai_platform_get_activations_map+0x64>)
 800670c:	429a      	cmp	r2, r3
 800670e:	d001      	beq.n	8006714 <ai_platform_get_activations_map+0x60>
 8006710:	2000      	movs	r0, #0
 8006712:	e7e4      	b.n	80066de <ai_platform_get_activations_map+0x2a>
 8006714:	2001      	movs	r0, #1
 8006716:	e7e2      	b.n	80066de <ai_platform_get_activations_map+0x2a>
 8006718:	a1facade 	.word	0xa1facade

0800671c <ai_platform_network_get_error>:
 800671c:	b510      	push	{r4, lr}
 800671e:	b120      	cbz	r0, 800672a <ai_platform_network_get_error+0xe>
 8006720:	4b32      	ldr	r3, [pc, #200]	; (80067ec <ai_platform_network_get_error+0xd0>)
 8006722:	6802      	ldr	r2, [r0, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	4604      	mov	r4, r0
 8006728:	d02e      	beq.n	8006788 <ai_platform_network_get_error+0x6c>
 800672a:	4a31      	ldr	r2, [pc, #196]	; (80067f0 <ai_platform_network_get_error+0xd4>)
 800672c:	6813      	ldr	r3, [r2, #0]
 800672e:	f023 0301 	bic.w	r3, r3, #1
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	f7ff ff86 	bl	8006644 <_ai_platform_acquire_crc>
 8006738:	4b2e      	ldr	r3, [pc, #184]	; (80067f4 <ai_platform_network_get_error+0xd8>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006744:	d00d      	beq.n	8006762 <ai_platform_network_get_error+0x46>
 8006746:	4b2c      	ldr	r3, [pc, #176]	; (80067f8 <ai_platform_network_get_error+0xdc>)
 8006748:	2201      	movs	r2, #1
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	2a00      	cmp	r2, #0
 8006750:	d1fc      	bne.n	800674c <ai_platform_network_get_error+0x30>
 8006752:	4b2a      	ldr	r3, [pc, #168]	; (80067fc <ai_platform_network_get_error+0xe0>)
 8006754:	4a2a      	ldr	r2, [pc, #168]	; (8006800 <ai_platform_network_get_error+0xe4>)
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4b2a      	ldr	r3, [pc, #168]	; (8006804 <ai_platform_network_get_error+0xe8>)
 800675c:	429a      	cmp	r2, r3
 800675e:	d00d      	beq.n	800677c <ai_platform_network_get_error+0x60>
 8006760:	e7fe      	b.n	8006760 <ai_platform_network_get_error+0x44>
 8006762:	4b29      	ldr	r3, [pc, #164]	; (8006808 <ai_platform_network_get_error+0xec>)
 8006764:	2201      	movs	r2, #1
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	2a00      	cmp	r2, #0
 800676c:	d1fc      	bne.n	8006768 <ai_platform_network_get_error+0x4c>
 800676e:	4b27      	ldr	r3, [pc, #156]	; (800680c <ai_platform_network_get_error+0xf0>)
 8006770:	4a23      	ldr	r2, [pc, #140]	; (8006800 <ai_platform_network_get_error+0xe4>)
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b23      	ldr	r3, [pc, #140]	; (8006804 <ai_platform_network_get_error+0xe8>)
 8006778:	429a      	cmp	r2, r3
 800677a:	d104      	bne.n	8006786 <ai_platform_network_get_error+0x6a>
 800677c:	f7ff ff64 	bl	8006648 <_ai_platform_release_crc>
 8006780:	f241 0010 	movw	r0, #4112	; 0x1010
 8006784:	bd10      	pop	{r4, pc}
 8006786:	e7fe      	b.n	8006786 <ai_platform_network_get_error+0x6a>
 8006788:	4a19      	ldr	r2, [pc, #100]	; (80067f0 <ai_platform_network_get_error+0xd4>)
 800678a:	6813      	ldr	r3, [r2, #0]
 800678c:	f023 0301 	bic.w	r3, r3, #1
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	f7ff ff57 	bl	8006644 <_ai_platform_acquire_crc>
 8006796:	4b17      	ldr	r3, [pc, #92]	; (80067f4 <ai_platform_network_get_error+0xd8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a2:	d00d      	beq.n	80067c0 <ai_platform_network_get_error+0xa4>
 80067a4:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <ai_platform_network_get_error+0xdc>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	2a00      	cmp	r2, #0
 80067ae:	d1fc      	bne.n	80067aa <ai_platform_network_get_error+0x8e>
 80067b0:	4b12      	ldr	r3, [pc, #72]	; (80067fc <ai_platform_network_get_error+0xe0>)
 80067b2:	4a13      	ldr	r2, [pc, #76]	; (8006800 <ai_platform_network_get_error+0xe4>)
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	4b12      	ldr	r3, [pc, #72]	; (8006804 <ai_platform_network_get_error+0xe8>)
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d00e      	beq.n	80067dc <ai_platform_network_get_error+0xc0>
 80067be:	e7fe      	b.n	80067be <ai_platform_network_get_error+0xa2>
 80067c0:	4b11      	ldr	r3, [pc, #68]	; (8006808 <ai_platform_network_get_error+0xec>)
 80067c2:	2201      	movs	r2, #1
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	2a00      	cmp	r2, #0
 80067ca:	d1fc      	bne.n	80067c6 <ai_platform_network_get_error+0xaa>
 80067cc:	4b0f      	ldr	r3, [pc, #60]	; (800680c <ai_platform_network_get_error+0xf0>)
 80067ce:	4a0c      	ldr	r2, [pc, #48]	; (8006800 <ai_platform_network_get_error+0xe4>)
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	4b0b      	ldr	r3, [pc, #44]	; (8006804 <ai_platform_network_get_error+0xe8>)
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d000      	beq.n	80067dc <ai_platform_network_get_error+0xc0>
 80067da:	e7fe      	b.n	80067da <ai_platform_network_get_error+0xbe>
 80067dc:	f7ff ff34 	bl	8006648 <_ai_platform_release_crc>
 80067e0:	f104 0010 	add.w	r0, r4, #16
 80067e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e8:	f000 be60 	b.w	80074ac <core_get_error>
 80067ec:	a1c00100 	.word	0xa1c00100
 80067f0:	e0002000 	.word	0xe0002000
 80067f4:	e0042000 	.word	0xe0042000
 80067f8:	58024c08 	.word	0x58024c08
 80067fc:	58024c00 	.word	0x58024c00
 8006800:	f407a5c2 	.word	0xf407a5c2
 8006804:	b5e8b5cd 	.word	0xb5e8b5cd
 8006808:	40023008 	.word	0x40023008
 800680c:	40023000 	.word	0x40023000

08006810 <ai_platform_network_create>:
 8006810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	4607      	mov	r7, r0
 8006818:	4616      	mov	r6, r2
 800681a:	461d      	mov	r5, r3
 800681c:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8006820:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 8006824:	f7ff ff0e 	bl	8006644 <_ai_platform_acquire_crc>
 8006828:	b178      	cbz	r0, 800684a <ai_platform_network_create+0x3a>
 800682a:	4b5a      	ldr	r3, [pc, #360]	; (8006994 <ai_platform_network_create+0x184>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006836:	4602      	mov	r2, r0
 8006838:	d00c      	beq.n	8006854 <ai_platform_network_create+0x44>
 800683a:	4b57      	ldr	r3, [pc, #348]	; (8006998 <ai_platform_network_create+0x188>)
 800683c:	2118      	movs	r1, #24
 800683e:	6019      	str	r1, [r3, #0]
 8006840:	6819      	ldr	r1, [r3, #0]
 8006842:	2918      	cmp	r1, #24
 8006844:	d034      	beq.n	80068b0 <ai_platform_network_create+0xa0>
 8006846:	f7ff feff 	bl	8006648 <_ai_platform_release_crc>
 800684a:	f241 0033 	movw	r0, #4147	; 0x1033
 800684e:	b002      	add	sp, #8
 8006850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006854:	4b51      	ldr	r3, [pc, #324]	; (800699c <ai_platform_network_create+0x18c>)
 8006856:	2101      	movs	r1, #1
 8006858:	6019      	str	r1, [r3, #0]
 800685a:	2114      	movs	r1, #20
 800685c:	e001      	b.n	8006862 <ai_platform_network_create+0x52>
 800685e:	3901      	subs	r1, #1
 8006860:	d002      	beq.n	8006868 <ai_platform_network_create+0x58>
 8006862:	6818      	ldr	r0, [r3, #0]
 8006864:	2800      	cmp	r0, #0
 8006866:	d1fa      	bne.n	800685e <ai_platform_network_create+0x4e>
 8006868:	4b4c      	ldr	r3, [pc, #304]	; (800699c <ai_platform_network_create+0x18c>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	b9f3      	cbnz	r3, 80068ac <ai_platform_network_create+0x9c>
 800686e:	4610      	mov	r0, r2
 8006870:	f7ff feea 	bl	8006648 <_ai_platform_release_crc>
 8006874:	4a4a      	ldr	r2, [pc, #296]	; (80069a0 <ai_platform_network_create+0x190>)
 8006876:	6813      	ldr	r3, [r2, #0]
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	f7ff fee1 	bl	8006644 <_ai_platform_acquire_crc>
 8006882:	4b44      	ldr	r3, [pc, #272]	; (8006994 <ai_platform_network_create+0x184>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800688a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800688e:	d015      	beq.n	80068bc <ai_platform_network_create+0xac>
 8006890:	4b41      	ldr	r3, [pc, #260]	; (8006998 <ai_platform_network_create+0x188>)
 8006892:	2201      	movs	r2, #1
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	2a00      	cmp	r2, #0
 800689a:	d1fc      	bne.n	8006896 <ai_platform_network_create+0x86>
 800689c:	4b41      	ldr	r3, [pc, #260]	; (80069a4 <ai_platform_network_create+0x194>)
 800689e:	4a42      	ldr	r2, [pc, #264]	; (80069a8 <ai_platform_network_create+0x198>)
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4b41      	ldr	r3, [pc, #260]	; (80069ac <ai_platform_network_create+0x19c>)
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d016      	beq.n	80068d8 <ai_platform_network_create+0xc8>
 80068aa:	e7fe      	b.n	80068aa <ai_platform_network_create+0x9a>
 80068ac:	4610      	mov	r0, r2
 80068ae:	e7ca      	b.n	8006846 <ai_platform_network_create+0x36>
 80068b0:	2101      	movs	r1, #1
 80068b2:	6019      	str	r1, [r3, #0]
 80068b4:	6819      	ldr	r1, [r3, #0]
 80068b6:	2900      	cmp	r1, #0
 80068b8:	d1fc      	bne.n	80068b4 <ai_platform_network_create+0xa4>
 80068ba:	e7d8      	b.n	800686e <ai_platform_network_create+0x5e>
 80068bc:	4b37      	ldr	r3, [pc, #220]	; (800699c <ai_platform_network_create+0x18c>)
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	2a00      	cmp	r2, #0
 80068c6:	d1fc      	bne.n	80068c2 <ai_platform_network_create+0xb2>
 80068c8:	4b39      	ldr	r3, [pc, #228]	; (80069b0 <ai_platform_network_create+0x1a0>)
 80068ca:	4a37      	ldr	r2, [pc, #220]	; (80069a8 <ai_platform_network_create+0x198>)
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	4b36      	ldr	r3, [pc, #216]	; (80069ac <ai_platform_network_create+0x19c>)
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d000      	beq.n	80068d8 <ai_platform_network_create+0xc8>
 80068d6:	e7fe      	b.n	80068d6 <ai_platform_network_create+0xc6>
 80068d8:	f7ff feb6 	bl	8006648 <_ai_platform_release_crc>
 80068dc:	b1af      	cbz	r7, 800690a <ai_platform_network_create+0xfa>
 80068de:	4b35      	ldr	r3, [pc, #212]	; (80069b4 <ai_platform_network_create+0x1a4>)
 80068e0:	6033      	str	r3, [r6, #0]
 80068e2:	603e      	str	r6, [r7, #0]
 80068e4:	f000 fde0 	bl	80074a8 <core_init>
 80068e8:	b990      	cbnz	r0, 8006910 <ai_platform_network_create+0x100>
 80068ea:	062d      	lsls	r5, r5, #24
 80068ec:	0424      	lsls	r4, r4, #16
 80068ee:	2230      	movs	r2, #48	; 0x30
 80068f0:	2300      	movs	r3, #0
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	2110      	movs	r1, #16
 80068f6:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 80068fa:	2000      	movs	r0, #0
 80068fc:	432b      	orrs	r3, r5
 80068fe:	f362 0007 	bfi	r0, r2, #0, #8
 8006902:	6473      	str	r3, [r6, #68]	; 0x44
 8006904:	f361 201f 	bfi	r0, r1, #8, #24
 8006908:	e7a1      	b.n	800684e <ai_platform_network_create+0x3e>
 800690a:	f241 0010 	movw	r0, #4112	; 0x1010
 800690e:	e79e      	b.n	800684e <ai_platform_network_create+0x3e>
 8006910:	4a23      	ldr	r2, [pc, #140]	; (80069a0 <ai_platform_network_create+0x190>)
 8006912:	6813      	ldr	r3, [r2, #0]
 8006914:	f023 0301 	bic.w	r3, r3, #1
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	f7ff fe93 	bl	8006644 <_ai_platform_acquire_crc>
 800691e:	4b1d      	ldr	r3, [pc, #116]	; (8006994 <ai_platform_network_create+0x184>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800692a:	d00d      	beq.n	8006948 <ai_platform_network_create+0x138>
 800692c:	4b1a      	ldr	r3, [pc, #104]	; (8006998 <ai_platform_network_create+0x188>)
 800692e:	2201      	movs	r2, #1
 8006930:	601a      	str	r2, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	2a00      	cmp	r2, #0
 8006936:	d1fc      	bne.n	8006932 <ai_platform_network_create+0x122>
 8006938:	4b1a      	ldr	r3, [pc, #104]	; (80069a4 <ai_platform_network_create+0x194>)
 800693a:	4a1b      	ldr	r2, [pc, #108]	; (80069a8 <ai_platform_network_create+0x198>)
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	4b1a      	ldr	r3, [pc, #104]	; (80069ac <ai_platform_network_create+0x19c>)
 8006942:	429a      	cmp	r2, r3
 8006944:	d00e      	beq.n	8006964 <ai_platform_network_create+0x154>
 8006946:	e7fe      	b.n	8006946 <ai_platform_network_create+0x136>
 8006948:	4b14      	ldr	r3, [pc, #80]	; (800699c <ai_platform_network_create+0x18c>)
 800694a:	2201      	movs	r2, #1
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	2a00      	cmp	r2, #0
 8006952:	d1fc      	bne.n	800694e <ai_platform_network_create+0x13e>
 8006954:	4b16      	ldr	r3, [pc, #88]	; (80069b0 <ai_platform_network_create+0x1a0>)
 8006956:	4a14      	ldr	r2, [pc, #80]	; (80069a8 <ai_platform_network_create+0x198>)
 8006958:	601a      	str	r2, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	4b13      	ldr	r3, [pc, #76]	; (80069ac <ai_platform_network_create+0x19c>)
 800695e:	429a      	cmp	r2, r3
 8006960:	d000      	beq.n	8006964 <ai_platform_network_create+0x154>
 8006962:	e7fe      	b.n	8006962 <ai_platform_network_create+0x152>
 8006964:	062d      	lsls	r5, r5, #24
 8006966:	0424      	lsls	r4, r4, #16
 8006968:	f7ff fe6e 	bl	8006648 <_ai_platform_release_crc>
 800696c:	ea45 0304 	orr.w	r3, r5, r4
 8006970:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8006974:	d001      	beq.n	800697a <ai_platform_network_create+0x16a>
 8006976:	2201      	movs	r2, #1
 8006978:	e7ba      	b.n	80068f0 <ai_platform_network_create+0xe0>
 800697a:	a802      	add	r0, sp, #8
 800697c:	4b0e      	ldr	r3, [pc, #56]	; (80069b8 <ai_platform_network_create+0x1a8>)
 800697e:	f840 3d04 	str.w	r3, [r0, #-4]!
 8006982:	f001 fdb9 	bl	80084f8 <ai_check_custom_types>
 8006986:	b110      	cbz	r0, 800698e <ai_platform_network_create+0x17e>
 8006988:	2100      	movs	r1, #0
 800698a:	460a      	mov	r2, r1
 800698c:	e7b3      	b.n	80068f6 <ai_platform_network_create+0xe6>
 800698e:	2202      	movs	r2, #2
 8006990:	e7ae      	b.n	80068f0 <ai_platform_network_create+0xe0>
 8006992:	bf00      	nop
 8006994:	e0042000 	.word	0xe0042000
 8006998:	58024c08 	.word	0x58024c08
 800699c:	40023008 	.word	0x40023008
 80069a0:	e0002000 	.word	0xe0002000
 80069a4:	58024c00 	.word	0x58024c00
 80069a8:	f407a5c2 	.word	0xf407a5c2
 80069ac:	b5e8b5cd 	.word	0xb5e8b5cd
 80069b0:	40023000 	.word	0x40023000
 80069b4:	a1c00100 	.word	0xa1c00100
 80069b8:	84048403 	.word	0x84048403

080069bc <ai_platform_network_init>:
 80069bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069c0:	2800      	cmp	r0, #0
 80069c2:	d04d      	beq.n	8006a60 <ai_platform_network_init+0xa4>
 80069c4:	4b7c      	ldr	r3, [pc, #496]	; (8006bb8 <ai_platform_network_init+0x1fc>)
 80069c6:	6802      	ldr	r2, [r0, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	4604      	mov	r4, r0
 80069cc:	d148      	bne.n	8006a60 <ai_platform_network_init+0xa4>
 80069ce:	4a7b      	ldr	r2, [pc, #492]	; (8006bbc <ai_platform_network_init+0x200>)
 80069d0:	6813      	ldr	r3, [r2, #0]
 80069d2:	f023 0301 	bic.w	r3, r3, #1
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	460d      	mov	r5, r1
 80069da:	f7ff fe33 	bl	8006644 <_ai_platform_acquire_crc>
 80069de:	4b78      	ldr	r3, [pc, #480]	; (8006bc0 <ai_platform_network_init+0x204>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ea:	d00d      	beq.n	8006a08 <ai_platform_network_init+0x4c>
 80069ec:	4b75      	ldr	r3, [pc, #468]	; (8006bc4 <ai_platform_network_init+0x208>)
 80069ee:	2201      	movs	r2, #1
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	2a00      	cmp	r2, #0
 80069f6:	d1fc      	bne.n	80069f2 <ai_platform_network_init+0x36>
 80069f8:	4b73      	ldr	r3, [pc, #460]	; (8006bc8 <ai_platform_network_init+0x20c>)
 80069fa:	4a74      	ldr	r2, [pc, #464]	; (8006bcc <ai_platform_network_init+0x210>)
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	4b73      	ldr	r3, [pc, #460]	; (8006bd0 <ai_platform_network_init+0x214>)
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d00d      	beq.n	8006a22 <ai_platform_network_init+0x66>
 8006a06:	e7fe      	b.n	8006a06 <ai_platform_network_init+0x4a>
 8006a08:	4b72      	ldr	r3, [pc, #456]	; (8006bd4 <ai_platform_network_init+0x218>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	2a00      	cmp	r2, #0
 8006a12:	d1fc      	bne.n	8006a0e <ai_platform_network_init+0x52>
 8006a14:	4b70      	ldr	r3, [pc, #448]	; (8006bd8 <ai_platform_network_init+0x21c>)
 8006a16:	4a6d      	ldr	r2, [pc, #436]	; (8006bcc <ai_platform_network_init+0x210>)
 8006a18:	601a      	str	r2, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	4b6c      	ldr	r3, [pc, #432]	; (8006bd0 <ai_platform_network_init+0x214>)
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d11d      	bne.n	8006a5e <ai_platform_network_init+0xa2>
 8006a22:	f7ff fe11 	bl	8006648 <_ai_platform_release_crc>
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	d076      	beq.n	8006b18 <ai_platform_network_init+0x15c>
 8006a2a:	4b6c      	ldr	r3, [pc, #432]	; (8006bdc <ai_platform_network_init+0x220>)
 8006a2c:	682a      	ldr	r2, [r5, #0]
 8006a2e:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d030      	beq.n	8006a98 <ai_platform_network_init+0xdc>
 8006a36:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8006a38:	46a9      	mov	r9, r5
 8006a3a:	f105 0118 	add.w	r1, r5, #24
 8006a3e:	2e00      	cmp	r6, #0
 8006a40:	f000 8095 	beq.w	8006b6e <ai_platform_network_init+0x1b2>
 8006a44:	f1bc 0f00 	cmp.w	ip, #0
 8006a48:	f000 80a4 	beq.w	8006b94 <ai_platform_network_init+0x1d8>
 8006a4c:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 8006a50:	f1b8 0f01 	cmp.w	r8, #1
 8006a54:	d16a      	bne.n	8006b2c <ai_platform_network_init+0x170>
 8006a56:	2700      	movs	r7, #0
 8006a58:	468c      	mov	ip, r1
 8006a5a:	83a7      	strh	r7, [r4, #28]
 8006a5c:	e028      	b.n	8006ab0 <ai_platform_network_init+0xf4>
 8006a5e:	e7fe      	b.n	8006a5e <ai_platform_network_init+0xa2>
 8006a60:	4a56      	ldr	r2, [pc, #344]	; (8006bbc <ai_platform_network_init+0x200>)
 8006a62:	6813      	ldr	r3, [r2, #0]
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	f7ff fdeb 	bl	8006644 <_ai_platform_acquire_crc>
 8006a6e:	4b54      	ldr	r3, [pc, #336]	; (8006bc0 <ai_platform_network_init+0x204>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7a:	d067      	beq.n	8006b4c <ai_platform_network_init+0x190>
 8006a7c:	4b51      	ldr	r3, [pc, #324]	; (8006bc4 <ai_platform_network_init+0x208>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	2a00      	cmp	r2, #0
 8006a86:	d1fc      	bne.n	8006a82 <ai_platform_network_init+0xc6>
 8006a88:	4b4f      	ldr	r3, [pc, #316]	; (8006bc8 <ai_platform_network_init+0x20c>)
 8006a8a:	4a50      	ldr	r2, [pc, #320]	; (8006bcc <ai_platform_network_init+0x210>)
 8006a8c:	601a      	str	r2, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	4b4f      	ldr	r3, [pc, #316]	; (8006bd0 <ai_platform_network_init+0x214>)
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d067      	beq.n	8006b66 <ai_platform_network_init+0x1aa>
 8006a96:	e7fe      	b.n	8006a96 <ai_platform_network_init+0xda>
 8006a98:	8be1      	ldrh	r1, [r4, #30]
 8006a9a:	88eb      	ldrh	r3, [r5, #6]
 8006a9c:	89af      	ldrh	r7, [r5, #12]
 8006a9e:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 8006aa2:	88aa      	ldrh	r2, [r5, #4]
 8006aa4:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8006aa8:	428b      	cmp	r3, r1
 8006aaa:	d13f      	bne.n	8006b2c <ai_platform_network_init+0x170>
 8006aac:	83a2      	strh	r2, [r4, #28]
 8006aae:	b19b      	cbz	r3, 8006ad8 <ai_platform_network_init+0x11c>
 8006ab0:	f04f 0e00 	mov.w	lr, #0
 8006ab4:	46f2      	mov	sl, lr
 8006ab6:	eb09 060e 	add.w	r6, r9, lr
 8006aba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006abc:	6a25      	ldr	r5, [r4, #32]
 8006abe:	4475      	add	r5, lr
 8006ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006ac2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006ac6:	e885 0003 	stmia.w	r5, {r0, r1}
 8006aca:	8be3      	ldrh	r3, [r4, #30]
 8006acc:	f10a 0a01 	add.w	sl, sl, #1
 8006ad0:	459a      	cmp	sl, r3
 8006ad2:	f10e 0e18 	add.w	lr, lr, #24
 8006ad6:	d3ee      	bcc.n	8006ab6 <ai_platform_network_init+0xfa>
 8006ad8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006ada:	4598      	cmp	r8, r3
 8006adc:	d12e      	bne.n	8006b3c <ai_platform_network_init+0x180>
 8006ade:	84a7      	strh	r7, [r4, #36]	; 0x24
 8006ae0:	f1b8 0f00 	cmp.w	r8, #0
 8006ae4:	d012      	beq.n	8006b0c <ai_platform_network_init+0x150>
 8006ae6:	2700      	movs	r7, #0
 8006ae8:	46be      	mov	lr, r7
 8006aea:	eb0c 0607 	add.w	r6, ip, r7
 8006aee:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006af0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006af2:	443d      	add	r5, r7
 8006af4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006af6:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006afa:	e885 0003 	stmia.w	r5, {r0, r1}
 8006afe:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006b00:	f10e 0e01 	add.w	lr, lr, #1
 8006b04:	459e      	cmp	lr, r3
 8006b06:	f107 0718 	add.w	r7, r7, #24
 8006b0a:	d3ee      	bcc.n	8006aea <ai_platform_network_init+0x12e>
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	60e3      	str	r3, [r4, #12]
 8006b10:	4620      	mov	r0, r4
 8006b12:	f001 fd1b 	bl	800854c <ai_layers_init_all>
 8006b16:	e006      	b.n	8006b26 <ai_platform_network_init+0x16a>
 8006b18:	f104 0010 	add.w	r0, r4, #16
 8006b1c:	2211      	movs	r2, #17
 8006b1e:	2110      	movs	r1, #16
 8006b20:	462c      	mov	r4, r5
 8006b22:	f000 fcc9 	bl	80074b8 <core_set_error>
 8006b26:	4620      	mov	r0, r4
 8006b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b2c:	f104 0010 	add.w	r0, r4, #16
 8006b30:	2212      	movs	r2, #18
 8006b32:	2116      	movs	r1, #22
 8006b34:	f000 fcc0 	bl	80074b8 <core_set_error>
 8006b38:	2400      	movs	r4, #0
 8006b3a:	e7f4      	b.n	8006b26 <ai_platform_network_init+0x16a>
 8006b3c:	f104 0010 	add.w	r0, r4, #16
 8006b40:	2213      	movs	r2, #19
 8006b42:	2116      	movs	r1, #22
 8006b44:	f000 fcb8 	bl	80074b8 <core_set_error>
 8006b48:	2400      	movs	r4, #0
 8006b4a:	e7ec      	b.n	8006b26 <ai_platform_network_init+0x16a>
 8006b4c:	4b21      	ldr	r3, [pc, #132]	; (8006bd4 <ai_platform_network_init+0x218>)
 8006b4e:	2201      	movs	r2, #1
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	d1fc      	bne.n	8006b52 <ai_platform_network_init+0x196>
 8006b58:	4b1f      	ldr	r3, [pc, #124]	; (8006bd8 <ai_platform_network_init+0x21c>)
 8006b5a:	4a1c      	ldr	r2, [pc, #112]	; (8006bcc <ai_platform_network_init+0x210>)
 8006b5c:	601a      	str	r2, [r3, #0]
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	4b1b      	ldr	r3, [pc, #108]	; (8006bd0 <ai_platform_network_init+0x214>)
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d115      	bne.n	8006b92 <ai_platform_network_init+0x1d6>
 8006b66:	f7ff fd6f 	bl	8006648 <_ai_platform_release_crc>
 8006b6a:	2400      	movs	r4, #0
 8006b6c:	e7db      	b.n	8006b26 <ai_platform_network_init+0x16a>
 8006b6e:	8c28      	ldrh	r0, [r5, #32]
 8006b70:	8bea      	ldrh	r2, [r5, #30]
 8006b72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b74:	fb02 f200 	mul.w	r2, r2, r0
 8006b78:	fb03 f302 	mul.w	r3, r3, r2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f43f af61 	beq.w	8006a44 <ai_platform_network_init+0x88>
 8006b82:	f104 0010 	add.w	r0, r4, #16
 8006b86:	2213      	movs	r2, #19
 8006b88:	2110      	movs	r1, #16
 8006b8a:	4634      	mov	r4, r6
 8006b8c:	f000 fc94 	bl	80074b8 <core_set_error>
 8006b90:	e7c9      	b.n	8006b26 <ai_platform_network_init+0x16a>
 8006b92:	e7fe      	b.n	8006b92 <ai_platform_network_init+0x1d6>
 8006b94:	8928      	ldrh	r0, [r5, #8]
 8006b96:	88ea      	ldrh	r2, [r5, #6]
 8006b98:	68eb      	ldr	r3, [r5, #12]
 8006b9a:	fb02 f200 	mul.w	r2, r2, r0
 8006b9e:	fb03 f302 	mul.w	r3, r3, r2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f43f af52 	beq.w	8006a4c <ai_platform_network_init+0x90>
 8006ba8:	f104 0010 	add.w	r0, r4, #16
 8006bac:	2212      	movs	r2, #18
 8006bae:	2110      	movs	r1, #16
 8006bb0:	4664      	mov	r4, ip
 8006bb2:	f000 fc81 	bl	80074b8 <core_set_error>
 8006bb6:	e7b6      	b.n	8006b26 <ai_platform_network_init+0x16a>
 8006bb8:	a1c00100 	.word	0xa1c00100
 8006bbc:	e0002000 	.word	0xe0002000
 8006bc0:	e0042000 	.word	0xe0042000
 8006bc4:	58024c08 	.word	0x58024c08
 8006bc8:	58024c00 	.word	0x58024c00
 8006bcc:	f407a5c2 	.word	0xf407a5c2
 8006bd0:	b5e8b5cd 	.word	0xb5e8b5cd
 8006bd4:	40023008 	.word	0x40023008
 8006bd8:	40023000 	.word	0x40023000
 8006bdc:	a1facade 	.word	0xa1facade

08006be0 <ai_platform_network_post_init>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	b120      	cbz	r0, 8006bee <ai_platform_network_post_init+0xe>
 8006be4:	4b3f      	ldr	r3, [pc, #252]	; (8006ce4 <ai_platform_network_post_init+0x104>)
 8006be6:	6802      	ldr	r2, [r0, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	4604      	mov	r4, r0
 8006bec:	d02d      	beq.n	8006c4a <ai_platform_network_post_init+0x6a>
 8006bee:	4a3e      	ldr	r2, [pc, #248]	; (8006ce8 <ai_platform_network_post_init+0x108>)
 8006bf0:	6813      	ldr	r3, [r2, #0]
 8006bf2:	f023 0301 	bic.w	r3, r3, #1
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	f7ff fd24 	bl	8006644 <_ai_platform_acquire_crc>
 8006bfc:	4b3b      	ldr	r3, [pc, #236]	; (8006cec <ai_platform_network_post_init+0x10c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c08:	d00d      	beq.n	8006c26 <ai_platform_network_post_init+0x46>
 8006c0a:	4b39      	ldr	r3, [pc, #228]	; (8006cf0 <ai_platform_network_post_init+0x110>)
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	d1fc      	bne.n	8006c10 <ai_platform_network_post_init+0x30>
 8006c16:	4b37      	ldr	r3, [pc, #220]	; (8006cf4 <ai_platform_network_post_init+0x114>)
 8006c18:	4a37      	ldr	r2, [pc, #220]	; (8006cf8 <ai_platform_network_post_init+0x118>)
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	4b37      	ldr	r3, [pc, #220]	; (8006cfc <ai_platform_network_post_init+0x11c>)
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d00d      	beq.n	8006c40 <ai_platform_network_post_init+0x60>
 8006c24:	e7fe      	b.n	8006c24 <ai_platform_network_post_init+0x44>
 8006c26:	4b36      	ldr	r3, [pc, #216]	; (8006d00 <ai_platform_network_post_init+0x120>)
 8006c28:	2201      	movs	r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	2a00      	cmp	r2, #0
 8006c30:	d1fc      	bne.n	8006c2c <ai_platform_network_post_init+0x4c>
 8006c32:	4b34      	ldr	r3, [pc, #208]	; (8006d04 <ai_platform_network_post_init+0x124>)
 8006c34:	4a30      	ldr	r2, [pc, #192]	; (8006cf8 <ai_platform_network_post_init+0x118>)
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4b30      	ldr	r3, [pc, #192]	; (8006cfc <ai_platform_network_post_init+0x11c>)
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d103      	bne.n	8006c48 <ai_platform_network_post_init+0x68>
 8006c40:	f7ff fd02 	bl	8006648 <_ai_platform_release_crc>
 8006c44:	2000      	movs	r0, #0
 8006c46:	bd38      	pop	{r3, r4, r5, pc}
 8006c48:	e7fe      	b.n	8006c48 <ai_platform_network_post_init+0x68>
 8006c4a:	4a27      	ldr	r2, [pc, #156]	; (8006ce8 <ai_platform_network_post_init+0x108>)
 8006c4c:	6813      	ldr	r3, [r2, #0]
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	f7ff fcf6 	bl	8006644 <_ai_platform_acquire_crc>
 8006c58:	4b24      	ldr	r3, [pc, #144]	; (8006cec <ai_platform_network_post_init+0x10c>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c64:	d00d      	beq.n	8006c82 <ai_platform_network_post_init+0xa2>
 8006c66:	4b22      	ldr	r3, [pc, #136]	; (8006cf0 <ai_platform_network_post_init+0x110>)
 8006c68:	2201      	movs	r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	2a00      	cmp	r2, #0
 8006c70:	d1fc      	bne.n	8006c6c <ai_platform_network_post_init+0x8c>
 8006c72:	4b20      	ldr	r3, [pc, #128]	; (8006cf4 <ai_platform_network_post_init+0x114>)
 8006c74:	4a20      	ldr	r2, [pc, #128]	; (8006cf8 <ai_platform_network_post_init+0x118>)
 8006c76:	601a      	str	r2, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	4b20      	ldr	r3, [pc, #128]	; (8006cfc <ai_platform_network_post_init+0x11c>)
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d00e      	beq.n	8006c9e <ai_platform_network_post_init+0xbe>
 8006c80:	e7fe      	b.n	8006c80 <ai_platform_network_post_init+0xa0>
 8006c82:	4b1f      	ldr	r3, [pc, #124]	; (8006d00 <ai_platform_network_post_init+0x120>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	2a00      	cmp	r2, #0
 8006c8c:	d1fc      	bne.n	8006c88 <ai_platform_network_post_init+0xa8>
 8006c8e:	4b1d      	ldr	r3, [pc, #116]	; (8006d04 <ai_platform_network_post_init+0x124>)
 8006c90:	4a19      	ldr	r2, [pc, #100]	; (8006cf8 <ai_platform_network_post_init+0x118>)
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b19      	ldr	r3, [pc, #100]	; (8006cfc <ai_platform_network_post_init+0x11c>)
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d000      	beq.n	8006c9e <ai_platform_network_post_init+0xbe>
 8006c9c:	e7fe      	b.n	8006c9c <ai_platform_network_post_init+0xbc>
 8006c9e:	f7ff fcd3 	bl	8006648 <_ai_platform_release_crc>
 8006ca2:	68e3      	ldr	r3, [r4, #12]
 8006ca4:	f013 0502 	ands.w	r5, r3, #2
 8006ca8:	d011      	beq.n	8006cce <ai_platform_network_post_init+0xee>
 8006caa:	4620      	mov	r0, r4
 8006cac:	f001 fc62 	bl	8008574 <ai_layers_post_init_all>
 8006cb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cb2:	b1a3      	cbz	r3, 8006cde <ai_platform_network_post_init+0xfe>
 8006cb4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006cb6:	b195      	cbz	r5, 8006cde <ai_platform_network_post_init+0xfe>
 8006cb8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006cba:	4629      	mov	r1, r5
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	4798      	blx	r3
 8006cc0:	692b      	ldr	r3, [r5, #16]
 8006cc2:	42ab      	cmp	r3, r5
 8006cc4:	d00b      	beq.n	8006cde <ai_platform_network_post_init+0xfe>
 8006cc6:	461d      	mov	r5, r3
 8006cc8:	b14b      	cbz	r3, 8006cde <ai_platform_network_post_init+0xfe>
 8006cca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ccc:	e7f4      	b.n	8006cb8 <ai_platform_network_post_init+0xd8>
 8006cce:	f104 0010 	add.w	r0, r4, #16
 8006cd2:	2210      	movs	r2, #16
 8006cd4:	2111      	movs	r1, #17
 8006cd6:	f000 fbef 	bl	80074b8 <core_set_error>
 8006cda:	4628      	mov	r0, r5
 8006cdc:	bd38      	pop	{r3, r4, r5, pc}
 8006cde:	2001      	movs	r0, #1
 8006ce0:	bd38      	pop	{r3, r4, r5, pc}
 8006ce2:	bf00      	nop
 8006ce4:	a1c00100 	.word	0xa1c00100
 8006ce8:	e0002000 	.word	0xe0002000
 8006cec:	e0042000 	.word	0xe0042000
 8006cf0:	58024c08 	.word	0x58024c08
 8006cf4:	58024c00 	.word	0x58024c00
 8006cf8:	f407a5c2 	.word	0xf407a5c2
 8006cfc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006d00:	40023008 	.word	0x40023008
 8006d04:	40023000 	.word	0x40023000

08006d08 <ai_platform_network_process>:
 8006d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	460d      	mov	r5, r1
 8006d10:	9202      	str	r2, [sp, #8]
 8006d12:	4604      	mov	r4, r0
 8006d14:	b120      	cbz	r0, 8006d20 <ai_platform_network_process+0x18>
 8006d16:	4b7b      	ldr	r3, [pc, #492]	; (8006f04 <ai_platform_network_process+0x1fc>)
 8006d18:	6802      	ldr	r2, [r0, #0]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	bf18      	it	ne
 8006d1e:	2400      	movne	r4, #0
 8006d20:	4a79      	ldr	r2, [pc, #484]	; (8006f08 <ai_platform_network_process+0x200>)
 8006d22:	6813      	ldr	r3, [r2, #0]
 8006d24:	f023 0301 	bic.w	r3, r3, #1
 8006d28:	6013      	str	r3, [r2, #0]
 8006d2a:	f7ff fc8b 	bl	8006644 <_ai_platform_acquire_crc>
 8006d2e:	4b77      	ldr	r3, [pc, #476]	; (8006f0c <ai_platform_network_process+0x204>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d3a:	d00d      	beq.n	8006d58 <ai_platform_network_process+0x50>
 8006d3c:	4b74      	ldr	r3, [pc, #464]	; (8006f10 <ai_platform_network_process+0x208>)
 8006d3e:	2201      	movs	r2, #1
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	2a00      	cmp	r2, #0
 8006d46:	d1fc      	bne.n	8006d42 <ai_platform_network_process+0x3a>
 8006d48:	4b72      	ldr	r3, [pc, #456]	; (8006f14 <ai_platform_network_process+0x20c>)
 8006d4a:	4a73      	ldr	r2, [pc, #460]	; (8006f18 <ai_platform_network_process+0x210>)
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	4b72      	ldr	r3, [pc, #456]	; (8006f1c <ai_platform_network_process+0x214>)
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d00e      	beq.n	8006d74 <ai_platform_network_process+0x6c>
 8006d56:	e7fe      	b.n	8006d56 <ai_platform_network_process+0x4e>
 8006d58:	4b71      	ldr	r3, [pc, #452]	; (8006f20 <ai_platform_network_process+0x218>)
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	2a00      	cmp	r2, #0
 8006d62:	d1fc      	bne.n	8006d5e <ai_platform_network_process+0x56>
 8006d64:	4b6f      	ldr	r3, [pc, #444]	; (8006f24 <ai_platform_network_process+0x21c>)
 8006d66:	4a6c      	ldr	r2, [pc, #432]	; (8006f18 <ai_platform_network_process+0x210>)
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	4b6b      	ldr	r3, [pc, #428]	; (8006f1c <ai_platform_network_process+0x214>)
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d000      	beq.n	8006d74 <ai_platform_network_process+0x6c>
 8006d72:	e7fe      	b.n	8006d72 <ai_platform_network_process+0x6a>
 8006d74:	f7ff fc68 	bl	8006648 <_ai_platform_release_crc>
 8006d78:	2c00      	cmp	r4, #0
 8006d7a:	f000 808e 	beq.w	8006e9a <ai_platform_network_process+0x192>
 8006d7e:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 8006d80:	2f00      	cmp	r7, #0
 8006d82:	f040 823c 	bne.w	80071fe <ai_platform_network_process+0x4f6>
 8006d86:	68e3      	ldr	r3, [r4, #12]
 8006d88:	f003 0303 	and.w	r3, r3, #3
 8006d8c:	f04f 0b00 	mov.w	fp, #0
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	f8c4 b014 	str.w	fp, [r4, #20]
 8006d96:	f040 822b 	bne.w	80071f0 <ai_platform_network_process+0x4e8>
 8006d9a:	2d00      	cmp	r5, #0
 8006d9c:	f000 80a8 	beq.w	8006ef0 <ai_platform_network_process+0x1e8>
 8006da0:	2f00      	cmp	r7, #0
 8006da2:	f000 80a5 	beq.w	8006ef0 <ai_platform_network_process+0x1e8>
 8006da6:	883b      	ldrh	r3, [r7, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 80a1 	beq.w	8006ef0 <ai_platform_network_process+0x1e8>
 8006dae:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 8006db2:	9401      	str	r4, [sp, #4]
 8006db4:	46d8      	mov	r8, fp
 8006db6:	4598      	cmp	r8, r3
 8006db8:	f080 80b6 	bcs.w	8006f28 <ai_platform_network_process+0x220>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	f000 80b2 	beq.w	8006f28 <ai_platform_network_process+0x220>
 8006dc4:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8006dc8:	2e00      	cmp	r6, #0
 8006dca:	f000 80ad 	beq.w	8006f28 <ai_platform_network_process+0x220>
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	9303      	str	r3, [sp, #12]
 8006dd4:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8006dd8:	eb13 0a04 	adds.w	sl, r3, r4
 8006ddc:	f000 8087 	beq.w	8006eee <ai_platform_network_process+0x1e6>
 8006de0:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8006de4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8006de8:	69b0      	ldr	r0, [r6, #24]
 8006dea:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8006dee:	6841      	ldr	r1, [r0, #4]
 8006df0:	fb0b f30e 	mul.w	r3, fp, lr
 8006df4:	fb0c f303 	mul.w	r3, ip, r3
 8006df8:	4299      	cmp	r1, r3
 8006dfa:	d36e      	bcc.n	8006eda <ai_platform_network_process+0x1d2>
 8006dfc:	68f3      	ldr	r3, [r6, #12]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	455a      	cmp	r2, fp
 8006e02:	d16a      	bne.n	8006eda <ai_platform_network_process+0x1d2>
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	4572      	cmp	r2, lr
 8006e08:	d167      	bne.n	8006eda <ai_platform_network_process+0x1d2>
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	459c      	cmp	ip, r3
 8006e0e:	d164      	bne.n	8006eda <ai_platform_network_process+0x1d2>
 8006e10:	6800      	ldr	r0, [r0, #0]
 8006e12:	f006 fed3 	bl	800dbbc <ai_array_get_byte_size>
 8006e16:	68f2      	ldr	r2, [r6, #12]
 8006e18:	6973      	ldr	r3, [r6, #20]
 8006e1a:	68d2      	ldr	r2, [r2, #12]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	fb03 f302 	mul.w	r3, r3, r2
 8006e22:	4298      	cmp	r0, r3
 8006e24:	d359      	bcc.n	8006eda <ai_platform_network_process+0x1d2>
 8006e26:	69b3      	ldr	r3, [r6, #24]
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	f006 fe6f 	bl	800db0c <ai_array_to_buffer_fmt>
 8006e2e:	682b      	ldr	r3, [r5, #0]
 8006e30:	4043      	eors	r3, r0
 8006e32:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8006e36:	d146      	bne.n	8006ec6 <ai_platform_network_process+0x1be>
 8006e38:	692b      	ldr	r3, [r5, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d03a      	beq.n	8006eb4 <ai_platform_network_process+0x1ac>
 8006e3e:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8006e42:	f1bb 0f00 	cmp.w	fp, #0
 8006e46:	d02d      	beq.n	8006ea4 <ai_platform_network_process+0x19c>
 8006e48:	68f2      	ldr	r2, [r6, #12]
 8006e4a:	6973      	ldr	r3, [r6, #20]
 8006e4c:	68d1      	ldr	r1, [r2, #12]
 8006e4e:	68da      	ldr	r2, [r3, #12]
 8006e50:	fb02 f201 	mul.w	r2, r2, r1
 8006e54:	f8ca 2008 	str.w	r2, [sl, #8]
 8006e58:	88ab      	ldrh	r3, [r5, #4]
 8006e5a:	fb02 f203 	mul.w	r2, r2, r3
 8006e5e:	f8ca 200c 	str.w	r2, [sl, #12]
 8006e62:	6929      	ldr	r1, [r5, #16]
 8006e64:	f8ca 1004 	str.w	r1, [sl, #4]
 8006e68:	692b      	ldr	r3, [r5, #16]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	9a03      	ldr	r2, [sp, #12]
 8006e6e:	5113      	str	r3, [r2, r4]
 8006e70:	69b0      	ldr	r0, [r6, #24]
 8006e72:	6803      	ldr	r3, [r0, #0]
 8006e74:	45d9      	cmp	r9, fp
 8006e76:	bf38      	it	cc
 8006e78:	46d9      	movcc	r9, fp
 8006e7a:	009a      	lsls	r2, r3, #2
 8006e7c:	d408      	bmi.n	8006e90 <ai_platform_network_process+0x188>
 8006e7e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006e82:	1a9b      	subs	r3, r3, r2
 8006e84:	4419      	add	r1, r3
 8006e86:	6081      	str	r1, [r0, #8]
 8006e88:	69b3      	ldr	r3, [r6, #24]
 8006e8a:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006e8e:	60da      	str	r2, [r3, #12]
 8006e90:	883b      	ldrh	r3, [r7, #0]
 8006e92:	f108 0801 	add.w	r8, r8, #1
 8006e96:	3518      	adds	r5, #24
 8006e98:	e78d      	b.n	8006db6 <ai_platform_network_process+0xae>
 8006e9a:	46a3      	mov	fp, r4
 8006e9c:	4658      	mov	r0, fp
 8006e9e:	b005      	add	sp, #20
 8006ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea4:	9c01      	ldr	r4, [sp, #4]
 8006ea6:	2221      	movs	r2, #33	; 0x21
 8006ea8:	f104 0010 	add.w	r0, r4, #16
 8006eac:	2112      	movs	r1, #18
 8006eae:	f000 fb03 	bl	80074b8 <core_set_error>
 8006eb2:	e7f3      	b.n	8006e9c <ai_platform_network_process+0x194>
 8006eb4:	9c01      	ldr	r4, [sp, #4]
 8006eb6:	2217      	movs	r2, #23
 8006eb8:	f104 0010 	add.w	r0, r4, #16
 8006ebc:	2112      	movs	r1, #18
 8006ebe:	469b      	mov	fp, r3
 8006ec0:	f000 fafa 	bl	80074b8 <core_set_error>
 8006ec4:	e7ea      	b.n	8006e9c <ai_platform_network_process+0x194>
 8006ec6:	9c01      	ldr	r4, [sp, #4]
 8006ec8:	2219      	movs	r2, #25
 8006eca:	f104 0010 	add.w	r0, r4, #16
 8006ece:	2112      	movs	r1, #18
 8006ed0:	f000 faf2 	bl	80074b8 <core_set_error>
 8006ed4:	f04f 0b00 	mov.w	fp, #0
 8006ed8:	e7e0      	b.n	8006e9c <ai_platform_network_process+0x194>
 8006eda:	9c01      	ldr	r4, [sp, #4]
 8006edc:	2218      	movs	r2, #24
 8006ede:	f104 0010 	add.w	r0, r4, #16
 8006ee2:	2112      	movs	r1, #18
 8006ee4:	f000 fae8 	bl	80074b8 <core_set_error>
 8006ee8:	f04f 0b00 	mov.w	fp, #0
 8006eec:	e7d6      	b.n	8006e9c <ai_platform_network_process+0x194>
 8006eee:	9c01      	ldr	r4, [sp, #4]
 8006ef0:	f104 0010 	add.w	r0, r4, #16
 8006ef4:	2217      	movs	r2, #23
 8006ef6:	2112      	movs	r1, #18
 8006ef8:	f000 fade 	bl	80074b8 <core_set_error>
 8006efc:	f04f 0b00 	mov.w	fp, #0
 8006f00:	e7cc      	b.n	8006e9c <ai_platform_network_process+0x194>
 8006f02:	bf00      	nop
 8006f04:	a1c00100 	.word	0xa1c00100
 8006f08:	e0002000 	.word	0xe0002000
 8006f0c:	e0042000 	.word	0xe0042000
 8006f10:	58024c08 	.word	0x58024c08
 8006f14:	58024c00 	.word	0x58024c00
 8006f18:	f407a5c2 	.word	0xf407a5c2
 8006f1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006f20:	40023008 	.word	0x40023008
 8006f24:	40023000 	.word	0x40023000
 8006f28:	9c01      	ldr	r4, [sp, #4]
 8006f2a:	9a02      	ldr	r2, [sp, #8]
 8006f2c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8006f2e:	2a00      	cmp	r2, #0
 8006f30:	f000 80a9 	beq.w	8007086 <ai_platform_network_process+0x37e>
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	f240 809b 	bls.w	8007070 <ai_platform_network_process+0x368>
 8006f3a:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8006f3e:	f11a 0f0c 	cmn.w	sl, #12
 8006f42:	f000 8095 	beq.w	8007070 <ai_platform_network_process+0x368>
 8006f46:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 8090 	beq.w	8007070 <ai_platform_network_process+0x368>
 8006f50:	9d02      	ldr	r5, [sp, #8]
 8006f52:	9401      	str	r4, [sp, #4]
 8006f54:	f04f 0800 	mov.w	r8, #0
 8006f58:	4598      	cmp	r8, r3
 8006f5a:	f080 8092 	bcs.w	8007082 <ai_platform_network_process+0x37a>
 8006f5e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 808d 	beq.w	8007082 <ai_platform_network_process+0x37a>
 8006f68:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8006f6c:	2e00      	cmp	r6, #0
 8006f6e:	f000 8088 	beq.w	8007082 <ai_platform_network_process+0x37a>
 8006f72:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	9302      	str	r3, [sp, #8]
 8006f7a:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8006f7e:	191f      	adds	r7, r3, r4
 8006f80:	f000 812d 	beq.w	80071de <ai_platform_network_process+0x4d6>
 8006f84:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8006f88:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8006f8c:	69b0      	ldr	r0, [r6, #24]
 8006f8e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8006f92:	6841      	ldr	r1, [r0, #4]
 8006f94:	fb0b f30e 	mul.w	r3, fp, lr
 8006f98:	fb0c f303 	mul.w	r3, ip, r3
 8006f9c:	4299      	cmp	r1, r3
 8006f9e:	d366      	bcc.n	800706e <ai_platform_network_process+0x366>
 8006fa0:	68f3      	ldr	r3, [r6, #12]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	455a      	cmp	r2, fp
 8006fa6:	d162      	bne.n	800706e <ai_platform_network_process+0x366>
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	4572      	cmp	r2, lr
 8006fac:	d15f      	bne.n	800706e <ai_platform_network_process+0x366>
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	459c      	cmp	ip, r3
 8006fb2:	d15c      	bne.n	800706e <ai_platform_network_process+0x366>
 8006fb4:	6800      	ldr	r0, [r0, #0]
 8006fb6:	f006 fe01 	bl	800dbbc <ai_array_get_byte_size>
 8006fba:	68f2      	ldr	r2, [r6, #12]
 8006fbc:	6973      	ldr	r3, [r6, #20]
 8006fbe:	68d2      	ldr	r2, [r2, #12]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	fb03 f302 	mul.w	r3, r3, r2
 8006fc6:	4298      	cmp	r0, r3
 8006fc8:	d351      	bcc.n	800706e <ai_platform_network_process+0x366>
 8006fca:	69b3      	ldr	r3, [r6, #24]
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	f006 fd9d 	bl	800db0c <ai_array_to_buffer_fmt>
 8006fd2:	682b      	ldr	r3, [r5, #0]
 8006fd4:	4043      	eors	r3, r0
 8006fd6:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8006fda:	d13e      	bne.n	800705a <ai_platform_network_process+0x352>
 8006fdc:	692b      	ldr	r3, [r5, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d032      	beq.n	8007048 <ai_platform_network_process+0x340>
 8006fe2:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8006fe6:	f1bb 0f00 	cmp.w	fp, #0
 8006fea:	d025      	beq.n	8007038 <ai_platform_network_process+0x330>
 8006fec:	68f2      	ldr	r2, [r6, #12]
 8006fee:	6973      	ldr	r3, [r6, #20]
 8006ff0:	68d1      	ldr	r1, [r2, #12]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	fb02 f201 	mul.w	r2, r2, r1
 8006ff8:	60ba      	str	r2, [r7, #8]
 8006ffa:	88ab      	ldrh	r3, [r5, #4]
 8006ffc:	fb02 f203 	mul.w	r2, r2, r3
 8007000:	60fa      	str	r2, [r7, #12]
 8007002:	6929      	ldr	r1, [r5, #16]
 8007004:	6079      	str	r1, [r7, #4]
 8007006:	692b      	ldr	r3, [r5, #16]
 8007008:	4413      	add	r3, r2
 800700a:	9a02      	ldr	r2, [sp, #8]
 800700c:	5113      	str	r3, [r2, r4]
 800700e:	69b0      	ldr	r0, [r6, #24]
 8007010:	6803      	ldr	r3, [r0, #0]
 8007012:	45d9      	cmp	r9, fp
 8007014:	bf38      	it	cc
 8007016:	46d9      	movcc	r9, fp
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	d407      	bmi.n	800702c <ai_platform_network_process+0x324>
 800701c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007020:	1a9b      	subs	r3, r3, r2
 8007022:	4419      	add	r1, r3
 8007024:	6081      	str	r1, [r0, #8]
 8007026:	69b3      	ldr	r3, [r6, #24]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	60da      	str	r2, [r3, #12]
 800702c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007030:	f108 0801 	add.w	r8, r8, #1
 8007034:	3518      	adds	r5, #24
 8007036:	e78f      	b.n	8006f58 <ai_platform_network_process+0x250>
 8007038:	9c01      	ldr	r4, [sp, #4]
 800703a:	2221      	movs	r2, #33	; 0x21
 800703c:	f104 0010 	add.w	r0, r4, #16
 8007040:	2113      	movs	r1, #19
 8007042:	f000 fa39 	bl	80074b8 <core_set_error>
 8007046:	e729      	b.n	8006e9c <ai_platform_network_process+0x194>
 8007048:	9c01      	ldr	r4, [sp, #4]
 800704a:	2217      	movs	r2, #23
 800704c:	f104 0010 	add.w	r0, r4, #16
 8007050:	2113      	movs	r1, #19
 8007052:	469b      	mov	fp, r3
 8007054:	f000 fa30 	bl	80074b8 <core_set_error>
 8007058:	e720      	b.n	8006e9c <ai_platform_network_process+0x194>
 800705a:	9c01      	ldr	r4, [sp, #4]
 800705c:	2219      	movs	r2, #25
 800705e:	f104 0010 	add.w	r0, r4, #16
 8007062:	2113      	movs	r1, #19
 8007064:	f000 fa28 	bl	80074b8 <core_set_error>
 8007068:	f04f 0b00 	mov.w	fp, #0
 800706c:	e716      	b.n	8006e9c <ai_platform_network_process+0x194>
 800706e:	9c01      	ldr	r4, [sp, #4]
 8007070:	f104 0010 	add.w	r0, r4, #16
 8007074:	2218      	movs	r2, #24
 8007076:	2113      	movs	r1, #19
 8007078:	f000 fa1e 	bl	80074b8 <core_set_error>
 800707c:	f04f 0b00 	mov.w	fp, #0
 8007080:	e70c      	b.n	8006e9c <ai_platform_network_process+0x194>
 8007082:	9c01      	ldr	r4, [sp, #4]
 8007084:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8007086:	f8a4 9014 	strh.w	r9, [r4, #20]
 800708a:	2b00      	cmp	r3, #0
 800708c:	f000 80a4 	beq.w	80071d8 <ai_platform_network_process+0x4d0>
 8007090:	2b01      	cmp	r3, #1
 8007092:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007094:	f240 809e 	bls.w	80071d4 <ai_platform_network_process+0x4cc>
 8007098:	f105 070c 	add.w	r7, r5, #12
 800709c:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 80070a0:	8aa3      	ldrh	r3, [r4, #20]
 80070a2:	455b      	cmp	r3, fp
 80070a4:	f67f aefa 	bls.w	8006e9c <ai_platform_network_process+0x194>
 80070a8:	9401      	str	r4, [sp, #4]
 80070aa:	2d00      	cmp	r5, #0
 80070ac:	d036      	beq.n	800711c <ai_platform_network_process+0x414>
 80070ae:	882b      	ldrh	r3, [r5, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d033      	beq.n	800711c <ai_platform_network_process+0x414>
 80070b4:	686b      	ldr	r3, [r5, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d030      	beq.n	800711c <ai_platform_network_process+0x414>
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f04f 0800 	mov.w	r8, #0
 80070c0:	b9db      	cbnz	r3, 80070fa <ai_platform_network_process+0x3f2>
 80070c2:	e02b      	b.n	800711c <ai_platform_network_process+0x414>
 80070c4:	68d4      	ldr	r4, [r2, #12]
 80070c6:	1b00      	subs	r0, r0, r4
 80070c8:	4401      	add	r1, r0
 80070ca:	6091      	str	r1, [r2, #8]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	6872      	ldr	r2, [r6, #4]
 80070d0:	60da      	str	r2, [r3, #12]
 80070d2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80070d6:	f85a 2009 	ldr.w	r2, [sl, r9]
 80070da:	440b      	add	r3, r1
 80070dc:	4293      	cmp	r3, r2
 80070de:	bf24      	itt	cs
 80070e0:	68f3      	ldrcs	r3, [r6, #12]
 80070e2:	1ad3      	subcs	r3, r2, r3
 80070e4:	6073      	str	r3, [r6, #4]
 80070e6:	882b      	ldrh	r3, [r5, #0]
 80070e8:	f108 0801 	add.w	r8, r8, #1
 80070ec:	4598      	cmp	r8, r3
 80070ee:	d215      	bcs.n	800711c <ai_platform_network_process+0x414>
 80070f0:	686b      	ldr	r3, [r5, #4]
 80070f2:	b19b      	cbz	r3, 800711c <ai_platform_network_process+0x414>
 80070f4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80070f8:	b183      	cbz	r3, 800711c <ai_platform_network_process+0x414>
 80070fa:	68a9      	ldr	r1, [r5, #8]
 80070fc:	699a      	ldr	r2, [r3, #24]
 80070fe:	f8d1 a000 	ldr.w	sl, [r1]
 8007102:	6814      	ldr	r4, [r2, #0]
 8007104:	6890      	ldr	r0, [r2, #8]
 8007106:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800710a:	eb0a 0609 	add.w	r6, sl, r9
 800710e:	00a4      	lsls	r4, r4, #2
 8007110:	6871      	ldr	r1, [r6, #4]
 8007112:	d5d7      	bpl.n	80070c4 <ai_platform_network_process+0x3bc>
 8007114:	68b2      	ldr	r2, [r6, #8]
 8007116:	f007 fb73 	bl	800e800 <memcpy>
 800711a:	e7da      	b.n	80070d2 <ai_platform_network_process+0x3ca>
 800711c:	9801      	ldr	r0, [sp, #4]
 800711e:	f001 fa41 	bl	80085a4 <ai_layers_forward_all>
 8007122:	2f00      	cmp	r7, #0
 8007124:	d047      	beq.n	80071b6 <ai_platform_network_process+0x4ae>
 8007126:	883b      	ldrh	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d044      	beq.n	80071b6 <ai_platform_network_process+0x4ae>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d041      	beq.n	80071b6 <ai_platform_network_process+0x4ae>
 8007132:	6818      	ldr	r0, [r3, #0]
 8007134:	2800      	cmp	r0, #0
 8007136:	d03e      	beq.n	80071b6 <ai_platform_network_process+0x4ae>
 8007138:	f04f 0800 	mov.w	r8, #0
 800713c:	e019      	b.n	8007172 <ai_platform_network_process+0x46a>
 800713e:	f85a 2009 	ldr.w	r2, [sl, r9]
 8007142:	4293      	cmp	r3, r2
 8007144:	bf24      	itt	cs
 8007146:	68f3      	ldrcs	r3, [r6, #12]
 8007148:	1ad3      	subcs	r3, r2, r3
 800714a:	6073      	str	r3, [r6, #4]
 800714c:	6981      	ldr	r1, [r0, #24]
 800714e:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8007152:	1b12      	subs	r2, r2, r4
 8007154:	4413      	add	r3, r2
 8007156:	608b      	str	r3, [r1, #8]
 8007158:	6983      	ldr	r3, [r0, #24]
 800715a:	6872      	ldr	r2, [r6, #4]
 800715c:	60da      	str	r2, [r3, #12]
 800715e:	883b      	ldrh	r3, [r7, #0]
 8007160:	f108 0801 	add.w	r8, r8, #1
 8007164:	4598      	cmp	r8, r3
 8007166:	d226      	bcs.n	80071b6 <ai_platform_network_process+0x4ae>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	b323      	cbz	r3, 80071b6 <ai_platform_network_process+0x4ae>
 800716c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007170:	b308      	cbz	r0, 80071b6 <ai_platform_network_process+0x4ae>
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6981      	ldr	r1, [r0, #24]
 8007176:	f8d3 a000 	ldr.w	sl, [r3]
 800717a:	680c      	ldr	r4, [r1, #0]
 800717c:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8007180:	eb0a 0609 	add.w	r6, sl, r9
 8007184:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8007188:	00a4      	lsls	r4, r4, #2
 800718a:	eb0c 0302 	add.w	r3, ip, r2
 800718e:	d5d6      	bpl.n	800713e <ai_platform_network_process+0x436>
 8007190:	6889      	ldr	r1, [r1, #8]
 8007192:	4660      	mov	r0, ip
 8007194:	f007 fb34 	bl	800e800 <memcpy>
 8007198:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800719c:	f85a 2009 	ldr.w	r2, [sl, r9]
 80071a0:	440b      	add	r3, r1
 80071a2:	4293      	cmp	r3, r2
 80071a4:	bf24      	itt	cs
 80071a6:	68f3      	ldrcs	r3, [r6, #12]
 80071a8:	1ad3      	subcs	r3, r2, r3
 80071aa:	6073      	str	r3, [r6, #4]
 80071ac:	883b      	ldrh	r3, [r7, #0]
 80071ae:	f108 0801 	add.w	r8, r8, #1
 80071b2:	4598      	cmp	r8, r3
 80071b4:	d3d8      	bcc.n	8007168 <ai_platform_network_process+0x460>
 80071b6:	9b01      	ldr	r3, [sp, #4]
 80071b8:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 80071bc:	461a      	mov	r2, r3
 80071be:	f10b 0b01 	add.w	fp, fp, #1
 80071c2:	8a9b      	ldrh	r3, [r3, #20]
 80071c4:	fa1f fb8b 	uxth.w	fp, fp
 80071c8:	455b      	cmp	r3, fp
 80071ca:	f8a2 b016 	strh.w	fp, [r2, #22]
 80071ce:	f63f af6c 	bhi.w	80070aa <ai_platform_network_process+0x3a2>
 80071d2:	e663      	b.n	8006e9c <ai_platform_network_process+0x194>
 80071d4:	2700      	movs	r7, #0
 80071d6:	e761      	b.n	800709c <ai_platform_network_process+0x394>
 80071d8:	461d      	mov	r5, r3
 80071da:	461f      	mov	r7, r3
 80071dc:	e75e      	b.n	800709c <ai_platform_network_process+0x394>
 80071de:	9c01      	ldr	r4, [sp, #4]
 80071e0:	2217      	movs	r2, #23
 80071e2:	f104 0010 	add.w	r0, r4, #16
 80071e6:	2113      	movs	r1, #19
 80071e8:	f000 f966 	bl	80074b8 <core_set_error>
 80071ec:	46bb      	mov	fp, r7
 80071ee:	e655      	b.n	8006e9c <ai_platform_network_process+0x194>
 80071f0:	f104 0010 	add.w	r0, r4, #16
 80071f4:	2230      	movs	r2, #48	; 0x30
 80071f6:	2111      	movs	r1, #17
 80071f8:	f000 f95e 	bl	80074b8 <core_set_error>
 80071fc:	e64e      	b.n	8006e9c <ai_platform_network_process+0x194>
 80071fe:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8007200:	e5c1      	b.n	8006d86 <ai_platform_network_process+0x7e>
 8007202:	bf00      	nop

08007204 <node_convert>:
 8007204:	6982      	ldr	r2, [r0, #24]
 8007206:	8813      	ldrh	r3, [r2, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d04b      	beq.n	80072a4 <node_convert+0xa0>
 800720c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800720e:	6852      	ldr	r2, [r2, #4]
 8007210:	6855      	ldr	r5, [r2, #4]
 8007212:	b083      	sub	sp, #12
 8007214:	b105      	cbz	r5, 8007218 <node_convert+0x14>
 8007216:	682d      	ldr	r5, [r5, #0]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d940      	bls.n	800729e <node_convert+0x9a>
 800721c:	6916      	ldr	r6, [r2, #16]
 800721e:	b106      	cbz	r6, 8007222 <node_convert+0x1e>
 8007220:	6836      	ldr	r6, [r6, #0]
 8007222:	68ab      	ldr	r3, [r5, #8]
 8007224:	0a1b      	lsrs	r3, r3, #8
 8007226:	f000 80e2 	beq.w	80073ee <node_convert+0x1ea>
 800722a:	68e9      	ldr	r1, [r5, #12]
 800722c:	2401      	movs	r4, #1
 800722e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007232:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007236:	428b      	cmp	r3, r1
 8007238:	fb02 f404 	mul.w	r4, r2, r4
 800723c:	d1f9      	bne.n	8007232 <node_convert+0x2e>
 800723e:	69aa      	ldr	r2, [r5, #24]
 8007240:	69b7      	ldr	r7, [r6, #24]
 8007242:	6813      	ldr	r3, [r2, #0]
 8007244:	6890      	ldr	r0, [r2, #8]
 8007246:	f3c3 4243 	ubfx	r2, r3, #17, #4
 800724a:	2a01      	cmp	r2, #1
 800724c:	d054      	beq.n	80072f8 <node_convert+0xf4>
 800724e:	6829      	ldr	r1, [r5, #0]
 8007250:	68bd      	ldr	r5, [r7, #8]
 8007252:	15da      	asrs	r2, r3, #23
 8007254:	b341      	cbz	r1, 80072a8 <node_convert+0xa4>
 8007256:	684e      	ldr	r6, [r1, #4]
 8007258:	f002 0201 	and.w	r2, r2, #1
 800725c:	2e00      	cmp	r6, #0
 800725e:	f000 80c8 	beq.w	80073f2 <node_convert+0x1ee>
 8007262:	884b      	ldrh	r3, [r1, #2]
 8007264:	2b00      	cmp	r3, #0
 8007266:	f000 8086 	beq.w	8007376 <node_convert+0x172>
 800726a:	6833      	ldr	r3, [r6, #0]
 800726c:	ed93 7a00 	vldr	s14, [r3]
 8007270:	6873      	ldr	r3, [r6, #4]
 8007272:	2a00      	cmp	r2, #0
 8007274:	f000 80d4 	beq.w	8007420 <node_convert+0x21c>
 8007278:	f993 2000 	ldrsb.w	r2, [r3]
 800727c:	b16c      	cbz	r4, 800729a <node_convert+0x96>
 800727e:	4404      	add	r4, r0
 8007280:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8007284:	1a9b      	subs	r3, r3, r2
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800728e:	42a0      	cmp	r0, r4
 8007290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007294:	ece5 7a01 	vstmia	r5!, {s15}
 8007298:	d1f2      	bne.n	8007280 <node_convert+0x7c>
 800729a:	b003      	add	sp, #12
 800729c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800729e:	2300      	movs	r3, #0
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	deff      	udf	#255	; 0xff
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	deff      	udf	#255	; 0xff
 80072a8:	f3c3 11c6 	ubfx	r1, r3, #7, #7
 80072ac:	f003 067f 	and.w	r6, r3, #127	; 0x7f
 80072b0:	1b8e      	subs	r6, r1, r6
 80072b2:	f002 0201 	and.w	r2, r2, #1
 80072b6:	3640      	adds	r6, #64	; 0x40
 80072b8:	2908      	cmp	r1, #8
 80072ba:	eba6 0602 	sub.w	r6, r6, r2
 80072be:	4629      	mov	r1, r5
 80072c0:	4622      	mov	r2, r4
 80072c2:	d05e      	beq.n	8007382 <node_convert+0x17e>
 80072c4:	f001 fc0e 	bl	8008ae4 <st_dsp_arm_q15_to_float>
 80072c8:	2e00      	cmp	r6, #0
 80072ca:	d0e6      	beq.n	800729a <node_convert+0x96>
 80072cc:	ee07 6a90 	vmov	s15, r6
 80072d0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80072d4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80072d8:	f006 fd50 	bl	800dd7c <powf>
 80072dc:	2c00      	cmp	r4, #0
 80072de:	d0dc      	beq.n	800729a <node_convert+0x96>
 80072e0:	2300      	movs	r3, #0
 80072e2:	ecf5 7a01 	vldmia	r5!, {s15}
 80072e6:	3301      	adds	r3, #1
 80072e8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80072ec:	429c      	cmp	r4, r3
 80072ee:	ed45 7a01 	vstr	s15, [r5, #-4]
 80072f2:	d1f6      	bne.n	80072e2 <node_convert+0xde>
 80072f4:	b003      	add	sp, #12
 80072f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	6835      	ldr	r5, [r6, #0]
 80072fc:	15d9      	asrs	r1, r3, #23
 80072fe:	2d00      	cmp	r5, #0
 8007300:	f000 8090 	beq.w	8007424 <node_convert+0x220>
 8007304:	686b      	ldr	r3, [r5, #4]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	f001 0101 	and.w	r1, r1, #1
 800730c:	2b00      	cmp	r3, #0
 800730e:	d03b      	beq.n	8007388 <node_convert+0x184>
 8007310:	886d      	ldrh	r5, [r5, #2]
 8007312:	2d00      	cmp	r5, #0
 8007314:	d03e      	beq.n	8007394 <node_convert+0x190>
 8007316:	681d      	ldr	r5, [r3, #0]
 8007318:	edd5 7a00 	vldr	s15, [r5]
 800731c:	2900      	cmp	r1, #0
 800731e:	f000 80b3 	beq.w	8007488 <node_convert+0x284>
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	f993 3000 	ldrsb.w	r3, [r3]
 8007328:	ee07 3a10 	vmov	s14, r3
 800732c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007330:	2c00      	cmp	r4, #0
 8007332:	d0b2      	beq.n	800729a <node_convert+0x96>
 8007334:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007338:	eddf 5a59 	vldr	s11, [pc, #356]	; 80074a0 <node_convert+0x29c>
 800733c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8007340:	4414      	add	r4, r2
 8007342:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007346:	ecf0 7a01 	vldmia	r0!, {s15}
 800734a:	eeb0 5a47 	vmov.f32	s10, s14
 800734e:	eea7 5aa6 	vfma.f32	s10, s15, s13
 8007352:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8007356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800735a:	db3b      	blt.n	80073d4 <node_convert+0x1d0>
 800735c:	ee75 7a06 	vadd.f32	s15, s10, s12
 8007360:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007364:	ee17 3a90 	vmov	r3, s15
 8007368:	f303 0307 	ssat	r3, #8, r3
 800736c:	f802 3b01 	strb.w	r3, [r2], #1
 8007370:	42a2      	cmp	r2, r4
 8007372:	d1e8      	bne.n	8007346 <node_convert+0x142>
 8007374:	e791      	b.n	800729a <node_convert+0x96>
 8007376:	2a00      	cmp	r2, #0
 8007378:	d03d      	beq.n	80073f6 <node_convert+0x1f2>
 800737a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80074a4 <node_convert+0x2a0>
 800737e:	461a      	mov	r2, r3
 8007380:	e77c      	b.n	800727c <node_convert+0x78>
 8007382:	f001 fc17 	bl	8008bb4 <st_dsp_arm_q7_to_float>
 8007386:	e79f      	b.n	80072c8 <node_convert+0xc4>
 8007388:	b131      	cbz	r1, 8007398 <node_convert+0x194>
 800738a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80074a4 <node_convert+0x2a0>
 800738e:	eef0 7a47 	vmov.f32	s15, s14
 8007392:	e7cd      	b.n	8007330 <node_convert+0x12c>
 8007394:	2900      	cmp	r1, #0
 8007396:	d1f8      	bne.n	800738a <node_convert+0x186>
 8007398:	eddf 7a42 	vldr	s15, [pc, #264]	; 80074a4 <node_convert+0x2a0>
 800739c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80073a0:	2c00      	cmp	r4, #0
 80073a2:	f43f af7a 	beq.w	800729a <node_convert+0x96>
 80073a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80073aa:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80073ae:	4414      	add	r4, r2
 80073b0:	ecf0 7a01 	vldmia	r0!, {s15}
 80073b4:	eeb0 6a47 	vmov.f32	s12, s14
 80073b8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80073bc:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 80073c0:	ee17 3a90 	vmov	r3, s15
 80073c4:	f383 0308 	usat	r3, #8, r3
 80073c8:	f802 3b01 	strb.w	r3, [r2], #1
 80073cc:	42a2      	cmp	r2, r4
 80073ce:	d1ef      	bne.n	80073b0 <node_convert+0x1ac>
 80073d0:	b003      	add	sp, #12
 80073d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073d4:	ee75 7a65 	vsub.f32	s15, s10, s11
 80073d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80073dc:	ee17 3a90 	vmov	r3, s15
 80073e0:	f303 0307 	ssat	r3, #8, r3
 80073e4:	f802 3b01 	strb.w	r3, [r2], #1
 80073e8:	4294      	cmp	r4, r2
 80073ea:	d1ac      	bne.n	8007346 <node_convert+0x142>
 80073ec:	e755      	b.n	800729a <node_convert+0x96>
 80073ee:	2401      	movs	r4, #1
 80073f0:	e725      	b.n	800723e <node_convert+0x3a>
 80073f2:	2a00      	cmp	r2, #0
 80073f4:	d13f      	bne.n	8007476 <node_convert+0x272>
 80073f6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80074a4 <node_convert+0x2a0>
 80073fa:	2c00      	cmp	r4, #0
 80073fc:	f43f af4d 	beq.w	800729a <node_convert+0x96>
 8007400:	4404      	add	r4, r0
 8007402:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007406:	1a9b      	subs	r3, r3, r2
 8007408:	ee07 3a90 	vmov	s15, r3
 800740c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007410:	42a0      	cmp	r0, r4
 8007412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007416:	ece5 7a01 	vstmia	r5!, {s15}
 800741a:	d1f2      	bne.n	8007402 <node_convert+0x1fe>
 800741c:	b003      	add	sp, #12
 800741e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007420:	781a      	ldrb	r2, [r3, #0]
 8007422:	e7ea      	b.n	80073fa <node_convert+0x1f6>
 8007424:	f3c3 16c6 	ubfx	r6, r3, #7, #7
 8007428:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800742c:	1af3      	subs	r3, r6, r3
 800742e:	f001 0101 	and.w	r1, r1, #1
 8007432:	3340      	adds	r3, #64	; 0x40
 8007434:	1a5b      	subs	r3, r3, r1
 8007436:	d015      	beq.n	8007464 <node_convert+0x260>
 8007438:	425b      	negs	r3, r3
 800743a:	ee00 3a90 	vmov	s1, r3
 800743e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8007442:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8007446:	9001      	str	r0, [sp, #4]
 8007448:	f006 fc98 	bl	800dd7c <powf>
 800744c:	9801      	ldr	r0, [sp, #4]
 800744e:	b14c      	cbz	r4, 8007464 <node_convert+0x260>
 8007450:	4603      	mov	r3, r0
 8007452:	ecf3 7a01 	vldmia	r3!, {s15}
 8007456:	3501      	adds	r5, #1
 8007458:	ee67 7a80 	vmul.f32	s15, s15, s0
 800745c:	42ac      	cmp	r4, r5
 800745e:	ed43 7a01 	vstr	s15, [r3, #-4]
 8007462:	d1f6      	bne.n	8007452 <node_convert+0x24e>
 8007464:	2e08      	cmp	r6, #8
 8007466:	68b9      	ldr	r1, [r7, #8]
 8007468:	4622      	mov	r2, r4
 800746a:	d008      	beq.n	800747e <node_convert+0x27a>
 800746c:	b003      	add	sp, #12
 800746e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007472:	f001 b993 	b.w	800879c <st_dsp_arm_float_to_q15>
 8007476:	4632      	mov	r2, r6
 8007478:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80074a4 <node_convert+0x2a0>
 800747c:	e6fe      	b.n	800727c <node_convert+0x78>
 800747e:	b003      	add	sp, #12
 8007480:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8007484:	f001 ba52 	b.w	800892c <st_dsp_arm_float_to_q7>
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	ee07 3a10 	vmov	s14, r3
 8007490:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007494:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007498:	ee37 7a26 	vadd.f32	s14, s14, s13
 800749c:	e780      	b.n	80073a0 <node_convert+0x19c>
 800749e:	bf00      	nop
 80074a0:	3efffffc 	.word	0x3efffffc
 80074a4:	00000000 	.word	0x00000000

080074a8 <core_init>:
 80074a8:	2001      	movs	r0, #1
 80074aa:	4770      	bx	lr

080074ac <core_get_error>:
 80074ac:	4603      	mov	r3, r0
 80074ae:	2200      	movs	r2, #0
 80074b0:	6800      	ldr	r0, [r0, #0]
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop

080074b8 <core_set_error>:
 80074b8:	7803      	ldrb	r3, [r0, #0]
 80074ba:	b933      	cbnz	r3, 80074ca <core_set_error+0x12>
 80074bc:	7001      	strb	r1, [r0, #0]
 80074be:	6803      	ldr	r3, [r0, #0]
 80074c0:	f362 231f 	bfi	r3, r2, #8, #24
 80074c4:	6003      	str	r3, [r0, #0]
 80074c6:	2001      	movs	r0, #1
 80074c8:	4770      	bx	lr
 80074ca:	2000      	movs	r0, #0
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop

080074d0 <func_dummy>:
 80074d0:	4770      	bx	lr
 80074d2:	bf00      	nop

080074d4 <forward_conv2d_integer_SSSA_ch>:
 80074d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	6983      	ldr	r3, [r0, #24]
 80074da:	881d      	ldrh	r5, [r3, #0]
 80074dc:	b0ab      	sub	sp, #172	; 0xac
 80074de:	2d00      	cmp	r5, #0
 80074e0:	f000 813f 	beq.w	8007762 <forward_conv2d_integer_SSSA_ch+0x28e>
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	6854      	ldr	r4, [r2, #4]
 80074e8:	b104      	cbz	r4, 80074ec <forward_conv2d_integer_SSSA_ch+0x18>
 80074ea:	6824      	ldr	r4, [r4, #0]
 80074ec:	2d01      	cmp	r5, #1
 80074ee:	f240 8112 	bls.w	8007716 <forward_conv2d_integer_SSSA_ch+0x242>
 80074f2:	6913      	ldr	r3, [r2, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 815d 	beq.w	80077b4 <forward_conv2d_integer_SSSA_ch+0x2e0>
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	9325      	str	r3, [sp, #148]	; 0x94
 80074fe:	2d02      	cmp	r5, #2
 8007500:	f000 8109 	beq.w	8007716 <forward_conv2d_integer_SSSA_ch+0x242>
 8007504:	69d3      	ldr	r3, [r2, #28]
 8007506:	2b00      	cmp	r3, #0
 8007508:	f040 8123 	bne.w	8007752 <forward_conv2d_integer_SSSA_ch+0x27e>
 800750c:	4619      	mov	r1, r3
 800750e:	f112 0618 	adds.w	r6, r2, #24
 8007512:	d007      	beq.n	8007524 <forward_conv2d_integer_SSSA_ch+0x50>
 8007514:	8b16      	ldrh	r6, [r2, #24]
 8007516:	2e01      	cmp	r6, #1
 8007518:	f240 8154 	bls.w	80077c4 <forward_conv2d_integer_SSSA_ch+0x2f0>
 800751c:	2b00      	cmp	r3, #0
 800751e:	f000 827a 	beq.w	8007a16 <forward_conv2d_integer_SSSA_ch+0x542>
 8007522:	685e      	ldr	r6, [r3, #4]
 8007524:	2d03      	cmp	r5, #3
 8007526:	f000 80f6 	beq.w	8007716 <forward_conv2d_integer_SSSA_ch+0x242>
 800752a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800752c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800752e:	9522      	str	r5, [sp, #136]	; 0x88
 8007530:	2a00      	cmp	r2, #0
 8007532:	f000 8118 	beq.w	8007766 <forward_conv2d_integer_SSSA_ch+0x292>
 8007536:	6817      	ldr	r7, [r2, #0]
 8007538:	2d00      	cmp	r5, #0
 800753a:	f000 825d 	beq.w	80079f8 <forward_conv2d_integer_SSSA_ch+0x524>
 800753e:	f8d2 b004 	ldr.w	fp, [r2, #4]
 8007542:	68e2      	ldr	r2, [r4, #12]
 8007544:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8007548:	f8db 500c 	ldr.w	r5, [fp, #12]
 800754c:	f8d7 8018 	ldr.w	r8, [r7, #24]
 8007550:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8007554:	6857      	ldr	r7, [r2, #4]
 8007556:	971c      	str	r7, [sp, #112]	; 0x70
 8007558:	9623      	str	r6, [sp, #140]	; 0x8c
 800755a:	686f      	ldr	r7, [r5, #4]
 800755c:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8007560:	971e      	str	r7, [sp, #120]	; 0x78
 8007562:	e9d2 2802 	ldrd	r2, r8, [r2, #8]
 8007566:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8007568:	9220      	str	r2, [sp, #128]	; 0x80
 800756a:	883a      	ldrh	r2, [r7, #0]
 800756c:	921b      	str	r2, [sp, #108]	; 0x6c
 800756e:	88ba      	ldrh	r2, [r7, #4]
 8007570:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8007574:	9215      	str	r2, [sp, #84]	; 0x54
 8007576:	8d02      	ldrh	r2, [r0, #40]	; 0x28
 8007578:	9612      	str	r6, [sp, #72]	; 0x48
 800757a:	921a      	str	r2, [sp, #104]	; 0x68
 800757c:	68ee      	ldr	r6, [r5, #12]
 800757e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8007580:	68ad      	ldr	r5, [r5, #8]
 8007582:	9619      	str	r6, [sp, #100]	; 0x64
 8007584:	e9de 9c01 	ldrd	r9, ip, [lr, #4]
 8007588:	951f      	str	r5, [sp, #124]	; 0x7c
 800758a:	9221      	str	r2, [sp, #132]	; 0x84
 800758c:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 8007590:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8007594:	9214      	str	r2, [sp, #80]	; 0x50
 8007596:	f8bd a078 	ldrh.w	sl, [sp, #120]	; 0x78
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80db 	beq.w	8007756 <forward_conv2d_integer_SSSA_ch+0x282>
 80075a0:	689f      	ldr	r7, [r3, #8]
 80075a2:	2f00      	cmp	r7, #0
 80075a4:	f000 80d7 	beq.w	8007756 <forward_conv2d_integer_SSSA_ch+0x282>
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	bf08      	it	eq
 80075ae:	2700      	moveq	r7, #0
 80075b0:	6825      	ldr	r5, [r4, #0]
 80075b2:	680b      	ldr	r3, [r1, #0]
 80075b4:	f8db 0000 	ldr.w	r0, [fp]
 80075b8:	9324      	str	r3, [sp, #144]	; 0x90
 80075ba:	2d00      	cmp	r5, #0
 80075bc:	f000 80a8 	beq.w	8007710 <forward_conv2d_integer_SSSA_ch+0x23c>
 80075c0:	686b      	ldr	r3, [r5, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f000 80a4 	beq.w	8007710 <forward_conv2d_integer_SSSA_ch+0x23c>
 80075c8:	886a      	ldrh	r2, [r5, #2]
 80075ca:	2a00      	cmp	r2, #0
 80075cc:	f000 80a0 	beq.w	8007710 <forward_conv2d_integer_SSSA_ch+0x23c>
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	ed93 0a00 	vldr	s0, [r3]
 80075d6:	b128      	cbz	r0, 80075e4 <forward_conv2d_integer_SSSA_ch+0x110>
 80075d8:	6843      	ldr	r3, [r0, #4]
 80075da:	b11b      	cbz	r3, 80075e4 <forward_conv2d_integer_SSSA_ch+0x110>
 80075dc:	8842      	ldrh	r2, [r0, #2]
 80075de:	2a00      	cmp	r2, #0
 80075e0:	f040 8204 	bne.w	80079ec <forward_conv2d_integer_SSSA_ch+0x518>
 80075e4:	eddf 0a9e 	vldr	s1, [pc, #632]	; 8007860 <forward_conv2d_integer_SSSA_ch+0x38c>
 80075e8:	45cc      	cmp	ip, r9
 80075ea:	f000 8097 	beq.w	800771c <forward_conv2d_integer_SSSA_ch+0x248>
 80075ee:	f1b9 0f01 	cmp.w	r9, #1
 80075f2:	f04f 0300 	mov.w	r3, #0
 80075f6:	f000 80a4 	beq.w	8007742 <forward_conv2d_integer_SSSA_ch+0x26e>
 80075fa:	461a      	mov	r2, r3
 80075fc:	69a6      	ldr	r6, [r4, #24]
 80075fe:	698c      	ldr	r4, [r1, #24]
 8007600:	f8db 1018 	ldr.w	r1, [fp, #24]
 8007604:	68b6      	ldr	r6, [r6, #8]
 8007606:	68a4      	ldr	r4, [r4, #8]
 8007608:	6889      	ldr	r1, [r1, #8]
 800760a:	9618      	str	r6, [sp, #96]	; 0x60
 800760c:	9416      	str	r4, [sp, #88]	; 0x58
 800760e:	9117      	str	r1, [sp, #92]	; 0x5c
 8007610:	b13d      	cbz	r5, 8007622 <forward_conv2d_integer_SSSA_ch+0x14e>
 8007612:	6869      	ldr	r1, [r5, #4]
 8007614:	2900      	cmp	r1, #0
 8007616:	f000 81ed 	beq.w	80079f4 <forward_conv2d_integer_SSSA_ch+0x520>
 800761a:	886d      	ldrh	r5, [r5, #2]
 800761c:	2d00      	cmp	r5, #0
 800761e:	f040 81e1 	bne.w	80079e4 <forward_conv2d_integer_SSSA_ch+0x510>
 8007622:	b138      	cbz	r0, 8007634 <forward_conv2d_integer_SSSA_ch+0x160>
 8007624:	6841      	ldr	r1, [r0, #4]
 8007626:	2900      	cmp	r1, #0
 8007628:	f000 81eb 	beq.w	8007a02 <forward_conv2d_integer_SSSA_ch+0x52e>
 800762c:	8840      	ldrh	r0, [r0, #2]
 800762e:	2800      	cmp	r0, #0
 8007630:	f040 81d3 	bne.w	80079da <forward_conv2d_integer_SSSA_ch+0x506>
 8007634:	9013      	str	r0, [sp, #76]	; 0x4c
 8007636:	9924      	ldr	r1, [sp, #144]	; 0x90
 8007638:	2900      	cmp	r1, #0
 800763a:	f000 80b9 	beq.w	80077b0 <forward_conv2d_integer_SSSA_ch+0x2dc>
 800763e:	6848      	ldr	r0, [r1, #4]
 8007640:	b100      	cbz	r0, 8007644 <forward_conv2d_integer_SSSA_ch+0x170>
 8007642:	6800      	ldr	r0, [r0, #0]
 8007644:	f8bd 1070 	ldrh.w	r1, [sp, #112]	; 0x70
 8007648:	911d      	str	r1, [sp, #116]	; 0x74
 800764a:	f1be 0f01 	cmp.w	lr, #1
 800764e:	f000 80a4 	beq.w	800779a <forward_conv2d_integer_SSSA_ch+0x2c6>
 8007652:	4571      	cmp	r1, lr
 8007654:	bf0c      	ite	eq
 8007656:	2117      	moveq	r1, #23
 8007658:	2100      	movne	r1, #0
 800765a:	9126      	str	r1, [sp, #152]	; 0x98
 800765c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800765e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8007660:	f8bd 4078 	ldrh.w	r4, [sp, #120]	; 0x78
 8007664:	941e      	str	r4, [sp, #120]	; 0x78
 8007666:	fb01 f106 	mul.w	r1, r1, r6
 800766a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800766c:	fb04 6101 	mla	r1, r4, r1, r6
 8007670:	9e18      	ldr	r6, [sp, #96]	; 0x60
 8007672:	428e      	cmp	r6, r1
 8007674:	d26a      	bcs.n	800774c <forward_conv2d_integer_SSSA_ch+0x278>
 8007676:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007678:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800767a:	fb01 f108 	mul.w	r1, r1, r8
 800767e:	fb04 6101 	mla	r1, r4, r1, r6
 8007682:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8007684:	428c      	cmp	r4, r1
 8007686:	bf2c      	ite	cs
 8007688:	2100      	movcs	r1, #0
 800768a:	2101      	movcc	r1, #1
 800768c:	460e      	mov	r6, r1
 800768e:	fa1f f18c 	uxth.w	r1, ip
 8007692:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8007694:	911c      	str	r1, [sp, #112]	; 0x70
 8007696:	fa1f f989 	uxth.w	r9, r9
 800769a:	fb19 f101 	smulbb	r1, r9, r1
 800769e:	f1be 0f01 	cmp.w	lr, #1
 80076a2:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 80076a6:	b28c      	uxth	r4, r1
 80076a8:	d002      	beq.n	80076b0 <forward_conv2d_integer_SSSA_ch+0x1dc>
 80076aa:	991d      	ldr	r1, [sp, #116]	; 0x74
 80076ac:	4571      	cmp	r1, lr
 80076ae:	d078      	beq.n	80077a2 <forward_conv2d_integer_SSSA_ch+0x2ce>
 80076b0:	991d      	ldr	r1, [sp, #116]	; 0x74
 80076b2:	fb04 f401 	mul.w	r4, r4, r1
 80076b6:	b112      	cbz	r2, 80076be <forward_conv2d_integer_SSSA_ch+0x1ea>
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 818c 	beq.w	80079d6 <forward_conv2d_integer_SSSA_ch+0x502>
 80076be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80076c0:	4613      	mov	r3, r2
 80076c2:	fb04 f303 	mul.w	r3, r4, r3
 80076c6:	4414      	add	r4, r2
 80076c8:	005b      	lsls	r3, r3, #1
 80076ca:	00a4      	lsls	r4, r4, #2
 80076cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80076d0:	bfd4      	ite	le
 80076d2:	18e4      	addle	r4, r4, r3
 80076d4:	f504 54a0 	addgt.w	r4, r4, #5120	; 0x1400
 80076d8:	f1bc 0f01 	cmp.w	ip, #1
 80076dc:	d949      	bls.n	8007772 <forward_conv2d_integer_SSSA_ch+0x29e>
 80076de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80076e0:	0093      	lsls	r3, r2, #2
 80076e2:	189a      	adds	r2, r3, r2
 80076e4:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 80076e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076ea:	4651      	mov	r1, sl
 80076ec:	4413      	add	r3, r2
 80076ee:	9324      	str	r3, [sp, #144]	; 0x90
 80076f0:	f001 fac6 	bl	8008c80 <align_factor_ch>
 80076f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80076f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076f8:	3b15      	subs	r3, #21
 80076fa:	e9cd 2428 	strd	r2, r4, [sp, #160]	; 0xa0
 80076fe:	2b03      	cmp	r3, #3
 8007700:	f200 8181 	bhi.w	8007a06 <forward_conv2d_integer_SSSA_ch+0x532>
 8007704:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007708:	00e5013d 	.word	0x00e5013d
 800770c:	006000ae 	.word	0x006000ae
 8007710:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8007860 <forward_conv2d_integer_SSSA_ch+0x38c>
 8007714:	e75f      	b.n	80075d6 <forward_conv2d_integer_SSSA_ch+0x102>
 8007716:	2300      	movs	r3, #0
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	deff      	udf	#255	; 0xff
 800771c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800771e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007720:	4293      	cmp	r3, r2
 8007722:	d129      	bne.n	8007778 <forward_conv2d_integer_SSSA_ch+0x2a4>
 8007724:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007726:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007728:	4293      	cmp	r3, r2
 800772a:	d125      	bne.n	8007778 <forward_conv2d_integer_SSSA_ch+0x2a4>
 800772c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800772e:	4598      	cmp	r8, r3
 8007730:	d122      	bne.n	8007778 <forward_conv2d_integer_SSSA_ch+0x2a4>
 8007732:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007734:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8007736:	4293      	cmp	r3, r2
 8007738:	d11e      	bne.n	8007778 <forward_conv2d_integer_SSSA_ch+0x2a4>
 800773a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800773c:	1eda      	subs	r2, r3, #3
 800773e:	4253      	negs	r3, r2
 8007740:	4153      	adcs	r3, r2
 8007742:	f1bc 0f01 	cmp.w	ip, #1
 8007746:	d01c      	beq.n	8007782 <forward_conv2d_integer_SSSA_ch+0x2ae>
 8007748:	2200      	movs	r2, #0
 800774a:	e757      	b.n	80075fc <forward_conv2d_integer_SSSA_ch+0x128>
 800774c:	2100      	movs	r1, #0
 800774e:	460e      	mov	r6, r1
 8007750:	e79d      	b.n	800768e <forward_conv2d_integer_SSSA_ch+0x1ba>
 8007752:	6819      	ldr	r1, [r3, #0]
 8007754:	e6db      	b.n	800750e <forward_conv2d_integer_SSSA_ch+0x3a>
 8007756:	6a07      	ldr	r7, [r0, #32]
 8007758:	2f00      	cmp	r7, #0
 800775a:	f43f af29 	beq.w	80075b0 <forward_conv2d_integer_SSSA_ch+0xdc>
 800775e:	68bf      	ldr	r7, [r7, #8]
 8007760:	e726      	b.n	80075b0 <forward_conv2d_integer_SSSA_ch+0xdc>
 8007762:	686b      	ldr	r3, [r5, #4]
 8007764:	deff      	udf	#255	; 0xff
 8007766:	462b      	mov	r3, r5
 8007768:	b90d      	cbnz	r5, 800776e <forward_conv2d_integer_SSSA_ch+0x29a>
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	deff      	udf	#255	; 0xff
 800776e:	68d3      	ldr	r3, [r2, #12]
 8007770:	deff      	udf	#255	; 0xff
 8007772:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	e7b7      	b.n	80076e8 <forward_conv2d_integer_SSSA_ch+0x214>
 8007778:	f1bc 0f01 	cmp.w	ip, #1
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	d1e2      	bne.n	8007748 <forward_conv2d_integer_SSSA_ch+0x274>
 8007782:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007784:	2a00      	cmp	r2, #0
 8007786:	d1df      	bne.n	8007748 <forward_conv2d_integer_SSSA_ch+0x274>
 8007788:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800778a:	2a00      	cmp	r2, #0
 800778c:	d1dc      	bne.n	8007748 <forward_conv2d_integer_SSSA_ch+0x274>
 800778e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007790:	2a01      	cmp	r2, #1
 8007792:	f000 8142 	beq.w	8007a1a <forward_conv2d_integer_SSSA_ch+0x546>
 8007796:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007798:	e730      	b.n	80075fc <forward_conv2d_integer_SSSA_ch+0x128>
 800779a:	b16b      	cbz	r3, 80077b8 <forward_conv2d_integer_SSSA_ch+0x2e4>
 800779c:	2115      	movs	r1, #21
 800779e:	9126      	str	r1, [sp, #152]	; 0x98
 80077a0:	e75c      	b.n	800765c <forward_conv2d_integer_SSSA_ch+0x188>
 80077a2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80077a4:	fb04 f403 	mul.w	r4, r4, r3
 80077a8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80077ac:	3401      	adds	r4, #1
 80077ae:	e793      	b.n	80076d8 <forward_conv2d_integer_SSSA_ch+0x204>
 80077b0:	4608      	mov	r0, r1
 80077b2:	e747      	b.n	8007644 <forward_conv2d_integer_SSSA_ch+0x170>
 80077b4:	9325      	str	r3, [sp, #148]	; 0x94
 80077b6:	e6a2      	b.n	80074fe <forward_conv2d_integer_SSSA_ch+0x2a>
 80077b8:	2a00      	cmp	r2, #0
 80077ba:	bf14      	ite	ne
 80077bc:	2116      	movne	r1, #22
 80077be:	2118      	moveq	r1, #24
 80077c0:	9126      	str	r1, [sp, #152]	; 0x98
 80077c2:	e74b      	b.n	800765c <forward_conv2d_integer_SSSA_ch+0x188>
 80077c4:	2600      	movs	r6, #0
 80077c6:	e6ad      	b.n	8007524 <forward_conv2d_integer_SSSA_ch+0x50>
 80077c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077ca:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80077cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80077ce:	9814      	ldr	r0, [sp, #80]	; 0x50
 80077d0:	9601      	str	r6, [sp, #4]
 80077d2:	e9cd 5302 	strd	r5, r3, [sp, #8]
 80077d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	4652      	mov	r2, sl
 80077dc:	464b      	mov	r3, r9
 80077de:	f002 f8dd 	bl	800999c <st_sssa8_ch_convolve_rank1upd>
 80077e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80077e4:	920d      	str	r2, [sp, #52]	; 0x34
 80077e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80077e8:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 80077ec:	930e      	str	r3, [sp, #56]	; 0x38
 80077ee:	e9cd 520b 	strd	r5, r2, [sp, #44]	; 0x2c
 80077f2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80077f4:	920a      	str	r2, [sp, #40]	; 0x28
 80077f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077f8:	9207      	str	r2, [sp, #28]
 80077fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077fc:	9206      	str	r2, [sp, #24]
 80077fe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007800:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007802:	9205      	str	r2, [sp, #20]
 8007804:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007806:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8007808:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 800780c:	9204      	str	r2, [sp, #16]
 800780e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007810:	9200      	str	r2, [sp, #0]
 8007812:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8007816:	fa1f f288 	uxth.w	r2, r8
 800781a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800781c:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 8007820:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007822:	f8cd a004 	str.w	sl, [sp, #4]
 8007826:	e9cd 6508 	strd	r6, r5, [sp, #32]
 800782a:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 800782e:	f002 f93d 	bl	8009aac <st_sssa8_ch_convolve>
 8007832:	f8db 3008 	ldr.w	r3, [fp, #8]
 8007836:	0a1b      	lsrs	r3, r3, #8
 8007838:	d049      	beq.n	80078ce <forward_conv2d_integer_SSSA_ch+0x3fa>
 800783a:	f8db 100c 	ldr.w	r1, [fp, #12]
 800783e:	2201      	movs	r2, #1
 8007840:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007844:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8007848:	4299      	cmp	r1, r3
 800784a:	fb00 f202 	mul.w	r2, r0, r2
 800784e:	d1f9      	bne.n	8007844 <forward_conv2d_integer_SSSA_ch+0x370>
 8007850:	463b      	mov	r3, r7
 8007852:	4659      	mov	r1, fp
 8007854:	9825      	ldr	r0, [sp, #148]	; 0x94
 8007856:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8007858:	47a0      	blx	r4
 800785a:	b02b      	add	sp, #172	; 0xac
 800785c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007860:	00000000 	.word	0x00000000
 8007864:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8007866:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	464a      	mov	r2, r9
 800786c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800786e:	4651      	mov	r1, sl
 8007870:	4630      	mov	r0, r6
 8007872:	f001 fa79 	bl	8008d68 <st_sssa8_ch_conv_dw_Wadapt>
 8007876:	f8bd 307c 	ldrh.w	r3, [sp, #124]	; 0x7c
 800787a:	930e      	str	r3, [sp, #56]	; 0x38
 800787c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800787e:	930d      	str	r3, [sp, #52]	; 0x34
 8007880:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007882:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 8007886:	f8bd 1080 	ldrh.w	r1, [sp, #128]	; 0x80
 800788a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800788c:	f8cd a004 	str.w	sl, [sp, #4]
 8007890:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
 8007894:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007896:	930a      	str	r3, [sp, #40]	; 0x28
 8007898:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800789a:	9308      	str	r3, [sp, #32]
 800789c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800789e:	9307      	str	r3, [sp, #28]
 80078a0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80078a2:	9306      	str	r3, [sp, #24]
 80078a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078a6:	9305      	str	r3, [sp, #20]
 80078a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80078aa:	9304      	str	r3, [sp, #16]
 80078ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80078ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80078b0:	9509      	str	r5, [sp, #36]	; 0x24
 80078b2:	e9cd 9302 	strd	r9, r3, [sp, #8]
 80078b6:	fa1f f288 	uxth.w	r2, r8
 80078ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078bc:	9600      	str	r6, [sp, #0]
 80078be:	e9cd 450f 	strd	r4, r5, [sp, #60]	; 0x3c
 80078c2:	f001 fb0b 	bl	8008edc <st_sssa8_ch_convolve_dw>
 80078c6:	f8db 3008 	ldr.w	r3, [fp, #8]
 80078ca:	0a1b      	lsrs	r3, r3, #8
 80078cc:	d1b5      	bne.n	800783a <forward_conv2d_integer_SSSA_ch+0x366>
 80078ce:	2201      	movs	r2, #1
 80078d0:	e7be      	b.n	8007850 <forward_conv2d_integer_SSSA_ch+0x37c>
 80078d2:	ab28      	add	r3, sp, #160	; 0xa0
 80078d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80078d6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80078d8:	4651      	mov	r1, sl
 80078da:	f003 fa97 	bl	800ae0c <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 80078de:	2e00      	cmp	r6, #0
 80078e0:	f040 8092 	bne.w	8007a08 <forward_conv2d_integer_SSSA_ch+0x534>
 80078e4:	fa1f f388 	uxth.w	r3, r8
 80078e8:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 80078ec:	9326      	str	r3, [sp, #152]	; 0x98
 80078ee:	f04f 0801 	mov.w	r8, #1
 80078f2:	e9dd 321e 	ldrd	r3, r2, [sp, #120]	; 0x78
 80078f6:	fb02 f303 	mul.w	r3, r2, r3
 80078fa:	9920      	ldr	r1, [sp, #128]	; 0x80
 80078fc:	931e      	str	r3, [sp, #120]	; 0x78
 80078fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007900:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8007902:	9527      	str	r5, [sp, #156]	; 0x9c
 8007904:	fb01 f303 	mul.w	r3, r1, r3
 8007908:	931d      	str	r3, [sp, #116]	; 0x74
 800790a:	b28b      	uxth	r3, r1
 800790c:	9320      	str	r3, [sp, #128]	; 0x80
 800790e:	b293      	uxth	r3, r2
 8007910:	931f      	str	r3, [sp, #124]	; 0x7c
 8007912:	2300      	movs	r3, #0
 8007914:	9319      	str	r3, [sp, #100]	; 0x64
 8007916:	9412      	str	r4, [sp, #72]	; 0x48
 8007918:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800791a:	920c      	str	r2, [sp, #48]	; 0x30
 800791c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800791e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007920:	930e      	str	r3, [sp, #56]	; 0x38
 8007922:	e9cd 6209 	strd	r6, r2, [sp, #36]	; 0x24
 8007926:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007928:	9208      	str	r2, [sp, #32]
 800792a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800792c:	9207      	str	r2, [sp, #28]
 800792e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007930:	9206      	str	r2, [sp, #24]
 8007932:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007934:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007936:	9205      	str	r2, [sp, #20]
 8007938:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800793a:	930b      	str	r3, [sp, #44]	; 0x2c
 800793c:	9204      	str	r2, [sp, #16]
 800793e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007940:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007942:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8007944:	9920      	ldr	r1, [sp, #128]	; 0x80
 8007946:	950d      	str	r5, [sp, #52]	; 0x34
 8007948:	e9cd 9202 	strd	r9, r2, [sp, #8]
 800794c:	3301      	adds	r3, #1
 800794e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007950:	9200      	str	r2, [sp, #0]
 8007952:	ac28      	add	r4, sp, #160	; 0xa0
 8007954:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007956:	9319      	str	r3, [sp, #100]	; 0x64
 8007958:	f8cd a004 	str.w	sl, [sp, #4]
 800795c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800795e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007960:	9410      	str	r4, [sp, #64]	; 0x40
 8007962:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8007964:	940f      	str	r4, [sp, #60]	; 0x3c
 8007966:	462c      	mov	r4, r5
 8007968:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800796a:	442c      	add	r4, r5
 800796c:	9417      	str	r4, [sp, #92]	; 0x5c
 800796e:	f003 fa61 	bl	800ae34 <st_sssa8_ch_convolve_1x1>
 8007972:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007974:	991d      	ldr	r1, [sp, #116]	; 0x74
 8007976:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007978:	440a      	add	r2, r1
 800797a:	4543      	cmp	r3, r8
 800797c:	9218      	str	r2, [sp, #96]	; 0x60
 800797e:	d3cb      	bcc.n	8007918 <forward_conv2d_integer_SSSA_ch+0x444>
 8007980:	e757      	b.n	8007832 <forward_conv2d_integer_SSSA_ch+0x35e>
 8007982:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007984:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8007986:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007988:	9916      	ldr	r1, [sp, #88]	; 0x58
 800798a:	e9cd 5202 	strd	r5, r2, [sp, #8]
 800798e:	464b      	mov	r3, r9
 8007990:	4652      	mov	r2, sl
 8007992:	4630      	mov	r0, r6
 8007994:	e9cd 9400 	strd	r9, r4, [sp]
 8007998:	f002 f800 	bl	800999c <st_sssa8_ch_convolve_rank1upd>
 800799c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800799e:	9109      	str	r1, [sp, #36]	; 0x24
 80079a0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80079a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079a4:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80079a8:	930a      	str	r3, [sp, #40]	; 0x28
 80079aa:	e9cd 5107 	strd	r5, r1, [sp, #28]
 80079ae:	9924      	ldr	r1, [sp, #144]	; 0x90
 80079b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80079b2:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80079b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80079b8:	9103      	str	r1, [sp, #12]
 80079ba:	9915      	ldr	r1, [sp, #84]	; 0x54
 80079bc:	9404      	str	r4, [sp, #16]
 80079be:	e9cd 9101 	strd	r9, r1, [sp, #4]
 80079c2:	f8cd a000 	str.w	sl, [sp]
 80079c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80079c8:	9818      	ldr	r0, [sp, #96]	; 0x60
 80079ca:	4632      	mov	r2, r6
 80079cc:	fa1f f188 	uxth.w	r1, r8
 80079d0:	f002 fdfa 	bl	800a5c8 <st_sssa8_ch_convolve_rgb>
 80079d4:	e72d      	b.n	8007832 <forward_conv2d_integer_SSSA_ch+0x35e>
 80079d6:	00a4      	lsls	r4, r4, #2
 80079d8:	e67e      	b.n	80076d8 <forward_conv2d_integer_SSSA_ch+0x204>
 80079da:	6849      	ldr	r1, [r1, #4]
 80079dc:	f991 1000 	ldrsb.w	r1, [r1]
 80079e0:	9113      	str	r1, [sp, #76]	; 0x4c
 80079e2:	e628      	b.n	8007636 <forward_conv2d_integer_SSSA_ch+0x162>
 80079e4:	6849      	ldr	r1, [r1, #4]
 80079e6:	f991 5000 	ldrsb.w	r5, [r1]
 80079ea:	e61a      	b.n	8007622 <forward_conv2d_integer_SSSA_ch+0x14e>
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	edd3 0a00 	vldr	s1, [r3]
 80079f2:	e5f9      	b.n	80075e8 <forward_conv2d_integer_SSSA_ch+0x114>
 80079f4:	460d      	mov	r5, r1
 80079f6:	e614      	b.n	8007622 <forward_conv2d_integer_SSSA_ch+0x14e>
 80079f8:	4a0a      	ldr	r2, [pc, #40]	; (8007a24 <forward_conv2d_integer_SSSA_ch+0x550>)
 80079fa:	9222      	str	r2, [sp, #136]	; 0x88
 80079fc:	f8dd b094 	ldr.w	fp, [sp, #148]	; 0x94
 8007a00:	e59f      	b.n	8007542 <forward_conv2d_integer_SSSA_ch+0x6e>
 8007a02:	9113      	str	r1, [sp, #76]	; 0x4c
 8007a04:	e617      	b.n	8007636 <forward_conv2d_integer_SSSA_ch+0x162>
 8007a06:	e7fe      	b.n	8007a06 <forward_conv2d_integer_SSSA_ch+0x532>
 8007a08:	f1b8 0f00 	cmp.w	r8, #0
 8007a0c:	f43f af11 	beq.w	8007832 <forward_conv2d_integer_SSSA_ch+0x35e>
 8007a10:	4634      	mov	r4, r6
 8007a12:	9626      	str	r6, [sp, #152]	; 0x98
 8007a14:	e76d      	b.n	80078f2 <forward_conv2d_integer_SSSA_ch+0x41e>
 8007a16:	461e      	mov	r6, r3
 8007a18:	e584      	b.n	8007524 <forward_conv2d_integer_SSSA_ch+0x50>
 8007a1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a1c:	1e56      	subs	r6, r2, #1
 8007a1e:	4272      	negs	r2, r6
 8007a20:	4172      	adcs	r2, r6
 8007a22:	e5eb      	b.n	80075fc <forward_conv2d_integer_SSSA_ch+0x128>
 8007a24:	080074d1 	.word	0x080074d1

08007a28 <forward_conv2d_nl_pool_integer_SSSA_ch>:
 8007a28:	6983      	ldr	r3, [r0, #24]
 8007a2a:	8819      	ldrh	r1, [r3, #0]
 8007a2c:	b321      	cbz	r1, 8007a78 <forward_conv2d_nl_pool_integer_SSSA_ch+0x50>
 8007a2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	685d      	ldr	r5, [r3, #4]
 8007a36:	b0d5      	sub	sp, #340	; 0x154
 8007a38:	b105      	cbz	r5, 8007a3c <forward_conv2d_nl_pool_integer_SSSA_ch+0x14>
 8007a3a:	682d      	ldr	r5, [r5, #0]
 8007a3c:	2901      	cmp	r1, #1
 8007a3e:	d918      	bls.n	8007a72 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4a>
 8007a40:	691a      	ldr	r2, [r3, #16]
 8007a42:	2a00      	cmp	r2, #0
 8007a44:	f000 8198 	beq.w	8007d78 <forward_conv2d_nl_pool_integer_SSSA_ch+0x350>
 8007a48:	6812      	ldr	r2, [r2, #0]
 8007a4a:	921c      	str	r2, [sp, #112]	; 0x70
 8007a4c:	2902      	cmp	r1, #2
 8007a4e:	f000 8190 	beq.w	8007d72 <forward_conv2d_nl_pool_integer_SSSA_ch+0x34a>
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	b992      	cbnz	r2, 8007a7c <forward_conv2d_nl_pool_integer_SSSA_ch+0x54>
 8007a56:	f113 0418 	adds.w	r4, r3, #24
 8007a5a:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a5c:	d013      	beq.n	8007a86 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e>
 8007a5e:	8b1c      	ldrh	r4, [r3, #24]
 8007a60:	2c01      	cmp	r4, #1
 8007a62:	f240 8379 	bls.w	8008158 <forward_conv2d_nl_pool_integer_SSSA_ch+0x730>
 8007a66:	2a00      	cmp	r2, #0
 8007a68:	f000 8378 	beq.w	800815c <forward_conv2d_nl_pool_integer_SSSA_ch+0x734>
 8007a6c:	6854      	ldr	r4, [r2, #4]
 8007a6e:	9416      	str	r4, [sp, #88]	; 0x58
 8007a70:	e00a      	b.n	8007a88 <forward_conv2d_nl_pool_integer_SSSA_ch+0x60>
 8007a72:	2300      	movs	r3, #0
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	deff      	udf	#255	; 0xff
 8007a78:	684b      	ldr	r3, [r1, #4]
 8007a7a:	deff      	udf	#255	; 0xff
 8007a7c:	6814      	ldr	r4, [r2, #0]
 8007a7e:	9417      	str	r4, [sp, #92]	; 0x5c
 8007a80:	f113 0418 	adds.w	r4, r3, #24
 8007a84:	d1eb      	bne.n	8007a5e <forward_conv2d_nl_pool_integer_SSSA_ch+0x36>
 8007a86:	9416      	str	r4, [sp, #88]	; 0x58
 8007a88:	2903      	cmp	r1, #3
 8007a8a:	f000 8177 	beq.w	8007d7c <forward_conv2d_nl_pool_integer_SSSA_ch+0x354>
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8193 	beq.w	8007dbc <forward_conv2d_nl_pool_integer_SSSA_ch+0x394>
 8007a96:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007a98:	912f      	str	r1, [sp, #188]	; 0xbc
 8007a9a:	e9d3 9b00 	ldrd	r9, fp, [r3]
 8007a9e:	2900      	cmp	r1, #0
 8007aa0:	f000 835e 	beq.w	8008160 <forward_conv2d_nl_pool_integer_SSSA_ch+0x738>
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	931b      	str	r3, [sp, #108]	; 0x6c
 8007aa8:	f8db 300c 	ldr.w	r3, [fp, #12]
 8007aac:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	68ee      	ldr	r6, [r5, #12]
 8007ab2:	932b      	str	r3, [sp, #172]	; 0xac
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8007ab8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007aba:	6871      	ldr	r1, [r6, #4]
 8007abc:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8007ac0:	68f7      	ldr	r7, [r6, #12]
 8007ac2:	68b6      	ldr	r6, [r6, #8]
 8007ac4:	962d      	str	r6, [sp, #180]	; 0xb4
 8007ac6:	88a6      	ldrh	r6, [r4, #4]
 8007ac8:	961e      	str	r6, [sp, #120]	; 0x78
 8007aca:	68de      	ldr	r6, [r3, #12]
 8007acc:	f8d0 8054 	ldr.w	r8, [r0, #84]	; 0x54
 8007ad0:	9631      	str	r6, [sp, #196]	; 0xc4
 8007ad2:	689e      	ldr	r6, [r3, #8]
 8007ad4:	9638      	str	r6, [sp, #224]	; 0xe0
 8007ad6:	f8de 6004 	ldr.w	r6, [lr, #4]
 8007ada:	961f      	str	r6, [sp, #124]	; 0x7c
 8007adc:	f8d8 6000 	ldr.w	r6, [r8]
 8007ae0:	f8de 3008 	ldr.w	r3, [lr, #8]
 8007ae4:	9624      	str	r6, [sp, #144]	; 0x90
 8007ae6:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8007aea:	9118      	str	r1, [sp, #96]	; 0x60
 8007aec:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
 8007af0:	6821      	ldr	r1, [r4, #0]
 8007af2:	9313      	str	r3, [sp, #76]	; 0x4c
 8007af4:	9719      	str	r7, [sp, #100]	; 0x64
 8007af6:	68a4      	ldr	r4, [r4, #8]
 8007af8:	963b      	str	r6, [sp, #236]	; 0xec
 8007afa:	8d06      	ldrh	r6, [r0, #40]	; 0x28
 8007afc:	9622      	str	r6, [sp, #136]	; 0x88
 8007afe:	69c6      	ldr	r6, [r0, #28]
 8007b00:	962c      	str	r6, [sp, #176]	; 0xb0
 8007b02:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8007b04:	f8bd 30ac 	ldrh.w	r3, [sp, #172]	; 0xac
 8007b08:	9639      	str	r6, [sp, #228]	; 0xe4
 8007b0a:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8007b0c:	963a      	str	r6, [sp, #232]	; 0xe8
 8007b0e:	9315      	str	r3, [sp, #84]	; 0x54
 8007b10:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 8007b12:	9628      	str	r6, [sp, #160]	; 0xa0
 8007b14:	b28b      	uxth	r3, r1
 8007b16:	f8bd 6060 	ldrh.w	r6, [sp, #96]	; 0x60
 8007b1a:	9314      	str	r3, [sp, #80]	; 0x50
 8007b1c:	fa1f f38c 	uxth.w	r3, ip
 8007b20:	961d      	str	r6, [sp, #116]	; 0x74
 8007b22:	9323      	str	r3, [sp, #140]	; 0x8c
 8007b24:	2a00      	cmp	r2, #0
 8007b26:	f000 82b7 	beq.w	8008098 <forward_conv2d_nl_pool_integer_SSSA_ch+0x670>
 8007b2a:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8007b2e:	f1ba 0f00 	cmp.w	sl, #0
 8007b32:	f000 82b1 	beq.w	8008098 <forward_conv2d_nl_pool_integer_SSSA_ch+0x670>
 8007b36:	f8da 3018 	ldr.w	r3, [sl, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	bf08      	it	eq
 8007b3e:	f04f 0a00 	moveq.w	sl, #0
 8007b42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b44:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8007b46:	9034      	str	r0, [sp, #208]	; 0xd0
 8007b48:	4602      	mov	r2, r0
 8007b4a:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8007b4c:	699e      	ldr	r6, [r3, #24]
 8007b4e:	69bf      	ldr	r7, [r7, #24]
 8007b50:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007b52:	9029      	str	r0, [sp, #164]	; 0xa4
 8007b54:	b28b      	uxth	r3, r1
 8007b56:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007b58:	9732      	str	r7, [sp, #200]	; 0xc8
 8007b5a:	923c      	str	r2, [sp, #240]	; 0xf0
 8007b5c:	af4d      	add	r7, sp, #308	; 0x134
 8007b5e:	fa13 f284 	uxtah	r2, r3, r4
 8007b62:	4402      	add	r2, r0
 8007b64:	4638      	mov	r0, r7
 8007b66:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007b68:	931a      	str	r3, [sp, #104]	; 0x68
 8007b6a:	ac41      	add	r4, sp, #260	; 0x104
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	a945      	add	r1, sp, #276	; 0x114
 8007b70:	1bd2      	subs	r2, r2, r7
 8007b72:	fa1f f78c 	uxth.w	r7, ip
 8007b76:	f8db 8018 	ldr.w	r8, [fp, #24]
 8007b7a:	9721      	str	r7, [sp, #132]	; 0x84
 8007b7c:	f04f 7e80 	mov.w	lr, #16777216	; 0x1000000
 8007b80:	9450      	str	r4, [sp, #320]	; 0x140
 8007b82:	fbb2 f2f7 	udiv	r2, r2, r7
 8007b86:	ac49      	add	r4, sp, #292	; 0x124
 8007b88:	9342      	str	r3, [sp, #264]	; 0x108
 8007b8a:	1c57      	adds	r7, r2, #1
 8007b8c:	934d      	str	r3, [sp, #308]	; 0x134
 8007b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b92:	9341      	str	r3, [sp, #260]	; 0x104
 8007b94:	9343      	str	r3, [sp, #268]	; 0x10c
 8007b96:	9345      	str	r3, [sp, #276]	; 0x114
 8007b98:	9344      	str	r3, [sp, #272]	; 0x110
 8007b9a:	9353      	str	r3, [sp, #332]	; 0x14c
 8007b9c:	9346      	str	r3, [sp, #280]	; 0x118
 8007b9e:	9347      	str	r3, [sp, #284]	; 0x11c
 8007ba0:	9348      	str	r3, [sp, #288]	; 0x120
 8007ba2:	9152      	str	r1, [sp, #328]	; 0x148
 8007ba4:	f240 4301 	movw	r3, #1025	; 0x401
 8007ba8:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007baa:	f8cd e138 	str.w	lr, [sp, #312]	; 0x138
 8007bae:	924f      	str	r2, [sp, #316]	; 0x13c
 8007bb0:	9351      	str	r3, [sp, #324]	; 0x144
 8007bb2:	972a      	str	r7, [sp, #168]	; 0xa8
 8007bb4:	f006 f824 	bl	800dc00 <core_tensor_clone>
 8007bb8:	4620      	mov	r0, r4
 8007bba:	4631      	mov	r1, r6
 8007bbc:	f006 f852 	bl	800dc64 <core_array_clone>
 8007bc0:	9453      	str	r4, [sp, #332]	; 0x14c
 8007bc2:	f8db 300c 	ldr.w	r3, [fp, #12]
 8007bc6:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8007bca:	689c      	ldr	r4, [r3, #8]
 8007bcc:	942e      	str	r4, [sp, #184]	; 0xb8
 8007bce:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
 8007bd2:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8007bd4:	6829      	ldr	r1, [r5, #0]
 8007bd6:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8007bda:	f8d4 e000 	ldr.w	lr, [r4]
 8007bde:	f8db 2000 	ldr.w	r2, [fp]
 8007be2:	f9bd 4090 	ldrsh.w	r4, [sp, #144]	; 0x90
 8007be6:	4403      	add	r3, r0
 8007be8:	9327      	str	r3, [sp, #156]	; 0x9c
 8007bea:	2900      	cmp	r1, #0
 8007bec:	f000 80c9 	beq.w	8007d82 <forward_conv2d_nl_pool_integer_SSSA_ch+0x35a>
 8007bf0:	684b      	ldr	r3, [r1, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 80c5 	beq.w	8007d82 <forward_conv2d_nl_pool_integer_SSSA_ch+0x35a>
 8007bf8:	8848      	ldrh	r0, [r1, #2]
 8007bfa:	2800      	cmp	r0, #0
 8007bfc:	f000 80c1 	beq.w	8007d82 <forward_conv2d_nl_pool_integer_SSSA_ch+0x35a>
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	ed93 0a00 	vldr	s0, [r3]
 8007c06:	2a00      	cmp	r2, #0
 8007c08:	f000 80c0 	beq.w	8007d8c <forward_conv2d_nl_pool_integer_SSSA_ch+0x364>
 8007c0c:	6853      	ldr	r3, [r2, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 80bc 	beq.w	8007d8c <forward_conv2d_nl_pool_integer_SSSA_ch+0x364>
 8007c14:	8850      	ldrh	r0, [r2, #2]
 8007c16:	2800      	cmp	r0, #0
 8007c18:	f000 80b8 	beq.w	8007d8c <forward_conv2d_nl_pool_integer_SSSA_ch+0x364>
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	edd3 0a00 	vldr	s1, [r3]
 8007c22:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	f000 80b7 	beq.w	8007d98 <forward_conv2d_nl_pool_integer_SSSA_ch+0x370>
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	69a8      	ldr	r0, [r5, #24]
 8007c2e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8007c30:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8007c32:	69ad      	ldr	r5, [r5, #24]
 8007c34:	6880      	ldr	r0, [r0, #8]
 8007c36:	f8d7 c018 	ldr.w	ip, [r7, #24]
 8007c3a:	9035      	str	r0, [sp, #212]	; 0xd4
 8007c3c:	68a8      	ldr	r0, [r5, #8]
 8007c3e:	901a      	str	r0, [sp, #104]	; 0x68
 8007c40:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8007c44:	9025      	str	r0, [sp, #148]	; 0x94
 8007c46:	2900      	cmp	r1, #0
 8007c48:	f000 80ba 	beq.w	8007dc0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x398>
 8007c4c:	6848      	ldr	r0, [r1, #4]
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f000 824e 	beq.w	80080f0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6c8>
 8007c54:	8849      	ldrh	r1, [r1, #2]
 8007c56:	2900      	cmp	r1, #0
 8007c58:	f000 80b2 	beq.w	8007dc0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x398>
 8007c5c:	6841      	ldr	r1, [r0, #4]
 8007c5e:	f991 1000 	ldrsb.w	r1, [r1]
 8007c62:	9116      	str	r1, [sp, #88]	; 0x58
 8007c64:	2a00      	cmp	r2, #0
 8007c66:	f000 80af 	beq.w	8007dc8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 8007c6a:	6851      	ldr	r1, [r2, #4]
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	f000 8271 	beq.w	8008154 <forward_conv2d_nl_pool_integer_SSSA_ch+0x72c>
 8007c72:	8852      	ldrh	r2, [r2, #2]
 8007c74:	2a00      	cmp	r2, #0
 8007c76:	f000 80a7 	beq.w	8007dc8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3a0>
 8007c7a:	684a      	ldr	r2, [r1, #4]
 8007c7c:	f992 2000 	ldrsb.w	r2, [r2]
 8007c80:	9219      	str	r2, [sp, #100]	; 0x64
 8007c82:	f1be 0f00 	cmp.w	lr, #0
 8007c86:	f000 80a4 	beq.w	8007dd2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3aa>
 8007c8a:	f8de 0004 	ldr.w	r0, [lr, #4]
 8007c8e:	b100      	cbz	r0, 8007c92 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26a>
 8007c90:	6800      	ldr	r0, [r0, #0]
 8007c92:	f8bd 50ac 	ldrh.w	r5, [sp, #172]	; 0xac
 8007c96:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 8007c9a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8007c9e:	9517      	str	r5, [sp, #92]	; 0x5c
 8007ca0:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 8007ca2:	9220      	str	r2, [sp, #128]	; 0x80
 8007ca4:	911f      	str	r1, [sp, #124]	; 0x7c
 8007ca6:	fb11 f202 	smulbb	r2, r1, r2
 8007caa:	2d01      	cmp	r5, #1
 8007cac:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 8007cb0:	9126      	str	r1, [sp, #152]	; 0x98
 8007cb2:	b292      	uxth	r2, r2
 8007cb4:	f8be 1002 	ldrh.w	r1, [lr, #2]
 8007cb8:	f000 8200 	beq.w	80080bc <forward_conv2d_nl_pool_integer_SSSA_ch+0x694>
 8007cbc:	9f26      	ldr	r7, [sp, #152]	; 0x98
 8007cbe:	42bd      	cmp	r5, r7
 8007cc0:	f000 81f3 	beq.w	80080aa <forward_conv2d_nl_pool_integer_SSSA_ch+0x682>
 8007cc4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8007cc6:	fb02 f207 	mul.w	r2, r2, r7
 8007cca:	fb02 f505 	mul.w	r5, r2, r5
 8007cce:	006d      	lsls	r5, r5, #1
 8007cd0:	f5b5 5fa0 	cmp.w	r5, #5120	; 0x1400
 8007cd4:	f04f 0700 	mov.w	r7, #0
 8007cd8:	bfa8      	it	ge
 8007cda:	f44f 55a0 	movge.w	r5, #5120	; 0x1400
 8007cde:	972c      	str	r7, [sp, #176]	; 0xb0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 8200 	beq.w	80080e6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6be>
 8007ce6:	0095      	lsls	r5, r2, #2
 8007ce8:	2901      	cmp	r1, #1
 8007cea:	f240 81d2 	bls.w	8008092 <forward_conv2d_nl_pool_integer_SSSA_ch+0x66a>
 8007cee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cf0:	0093      	lsls	r3, r2, #2
 8007cf2:	189a      	adds	r2, r3, r2
 8007cf4:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 8007cf8:	444b      	add	r3, r9
 8007cfa:	464a      	mov	r2, r9
 8007cfc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8007cfe:	932b      	str	r3, [sp, #172]	; 0xac
 8007d00:	f000 ffbe 	bl	8008c80 <align_factor_ch>
 8007d04:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8007d06:	f8cd 90fc 	str.w	r9, [sp, #252]	; 0xfc
 8007d0a:	9540      	str	r5, [sp, #256]	; 0x100
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8117 	beq.w	8007f40 <forward_conv2d_nl_pool_integer_SSSA_ch+0x518>
 8007d12:	9d2e      	ldr	r5, [sp, #184]	; 0xb8
 8007d14:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007d16:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8007d18:	9921      	ldr	r1, [sp, #132]	; 0x84
 8007d1a:	f8cd a0f4 	str.w	sl, [sp, #244]	; 0xf4
 8007d1e:	fb00 f005 	mul.w	r0, r0, r5
 8007d22:	902e      	str	r0, [sp, #184]	; 0xb8
 8007d24:	b2a8      	uxth	r0, r5
 8007d26:	4613      	mov	r3, r2
 8007d28:	9017      	str	r0, [sp, #92]	; 0x5c
 8007d2a:	9826      	ldr	r0, [sp, #152]	; 0x98
 8007d2c:	f8dd a0d4 	ldr.w	sl, [sp, #212]	; 0xd4
 8007d30:	9430      	str	r4, [sp, #192]	; 0xc0
 8007d32:	fb03 f301 	mul.w	r3, r3, r1
 8007d36:	fb00 f303 	mul.w	r3, r0, r3
 8007d3a:	9336      	str	r3, [sp, #216]	; 0xd8
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2100      	movs	r1, #0
 8007d42:	fb00 f202 	mul.w	r2, r0, r2
 8007d46:	932d      	str	r3, [sp, #180]	; 0xb4
 8007d48:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 8007d4c:	9118      	str	r1, [sp, #96]	; 0x60
 8007d4e:	9237      	str	r2, [sp, #220]	; 0xdc
 8007d50:	9126      	str	r1, [sp, #152]	; 0x98
 8007d52:	9333      	str	r3, [sp, #204]	; 0xcc
 8007d54:	464d      	mov	r5, r9
 8007d56:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f340 8086 	ble.w	8007e6a <forward_conv2d_nl_pool_integer_SSSA_ch+0x442>
 8007d5e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8007d60:	2b17      	cmp	r3, #23
 8007d62:	f000 816a 	beq.w	800803a <forward_conv2d_nl_pool_integer_SSSA_ch+0x612>
 8007d66:	2b18      	cmp	r3, #24
 8007d68:	f000 8122 	beq.w	8007fb0 <forward_conv2d_nl_pool_integer_SSSA_ch+0x588>
 8007d6c:	2b16      	cmp	r3, #22
 8007d6e:	d032      	beq.n	8007dd6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ae>
 8007d70:	e7fe      	b.n	8007d70 <forward_conv2d_nl_pool_integer_SSSA_ch+0x348>
 8007d72:	2300      	movs	r3, #0
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	deff      	udf	#255	; 0xff
 8007d78:	921c      	str	r2, [sp, #112]	; 0x70
 8007d7a:	e667      	b.n	8007a4c <forward_conv2d_nl_pool_integer_SSSA_ch+0x24>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	deff      	udf	#255	; 0xff
 8007d82:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8007fac <forward_conv2d_nl_pool_integer_SSSA_ch+0x584>
 8007d86:	2a00      	cmp	r2, #0
 8007d88:	f47f af40 	bne.w	8007c0c <forward_conv2d_nl_pool_integer_SSSA_ch+0x1e4>
 8007d8c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007d8e:	eddf 0a87 	vldr	s1, [pc, #540]	; 8007fac <forward_conv2d_nl_pool_integer_SSSA_ch+0x584>
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	f47f af49 	bne.w	8007c2a <forward_conv2d_nl_pool_integer_SSSA_ch+0x202>
 8007d98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	f47f af45 	bne.w	8007c2a <forward_conv2d_nl_pool_integer_SSSA_ch+0x202>
 8007da0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	f47f af41 	bne.w	8007c2a <forward_conv2d_nl_pool_integer_SSSA_ch+0x202>
 8007da8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f47f af3d 	bne.w	8007c2a <forward_conv2d_nl_pool_integer_SSSA_ch+0x202>
 8007db0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	f000 819e 	beq.w	80080f4 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6cc>
 8007db8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007dba:	e737      	b.n	8007c2c <forward_conv2d_nl_pool_integer_SSSA_ch+0x204>
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	deff      	udf	#255	; 0xff
 8007dc0:	9116      	str	r1, [sp, #88]	; 0x58
 8007dc2:	2a00      	cmp	r2, #0
 8007dc4:	f47f af51 	bne.w	8007c6a <forward_conv2d_nl_pool_integer_SSSA_ch+0x242>
 8007dc8:	9219      	str	r2, [sp, #100]	; 0x64
 8007dca:	f1be 0f00 	cmp.w	lr, #0
 8007dce:	f47f af5c 	bne.w	8007c8a <forward_conv2d_nl_pool_integer_SSSA_ch+0x262>
 8007dd2:	4670      	mov	r0, lr
 8007dd4:	e75d      	b.n	8007c92 <forward_conv2d_nl_pool_integer_SSSA_ch+0x26a>
 8007dd6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007dd8:	429c      	cmp	r4, r3
 8007dda:	f000 81a2 	beq.w	8008122 <forward_conv2d_nl_pool_integer_SSSA_ch+0x6fa>
 8007dde:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 8007de2:	2301      	movs	r3, #1
 8007de4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007de6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007de8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 8007dec:	930e      	str	r3, [sp, #56]	; 0x38
 8007dee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007df2:	930d      	str	r3, [sp, #52]	; 0x34
 8007df4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007df6:	930c      	str	r3, [sp, #48]	; 0x30
 8007df8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007dfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dfc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007dfe:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
 8007e02:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007e04:	9308      	str	r3, [sp, #32]
 8007e06:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007e08:	9307      	str	r3, [sp, #28]
 8007e0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e0c:	9306      	str	r3, [sp, #24]
 8007e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e10:	9305      	str	r3, [sp, #20]
 8007e12:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007e14:	9304      	str	r3, [sp, #16]
 8007e16:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007e18:	9303      	str	r3, [sp, #12]
 8007e1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e1c:	9302      	str	r3, [sp, #8]
 8007e1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	4650      	mov	r0, sl
 8007e28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e2a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8007e2e:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8007e30:	f003 f800 	bl	800ae34 <st_sssa8_ch_convolve_1x1>
 8007e34:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e36:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8007e38:	428b      	cmp	r3, r1
 8007e3a:	f000 80ea 	beq.w	8008012 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5ea>
 8007e3e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e40:	1acb      	subs	r3, r1, r3
 8007e42:	429a      	cmp	r2, r3
 8007e44:	bf28      	it	cs
 8007e46:	461a      	movcs	r2, r3
 8007e48:	9327      	str	r3, [sp, #156]	; 0x9c
 8007e4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e4c:	9213      	str	r2, [sp, #76]	; 0x4c
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f040 80e6 	bne.w	8008020 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5f8>
 8007e54:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8007e56:	449a      	add	sl, r3
 8007e58:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8007e5a:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8007e5c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007e5e:	9f2f      	ldr	r7, [sp, #188]	; 0xbc
 8007e60:	4659      	mov	r1, fp
 8007e62:	47b8      	blx	r7
 8007e64:	3401      	adds	r4, #1
 8007e66:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8007e68:	b224      	sxth	r4, r4
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	932a      	str	r3, [sp, #168]	; 0xa8
 8007e6e:	d473      	bmi.n	8007f58 <forward_conv2d_nl_pool_integer_SSSA_ch+0x530>
 8007e70:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8007e72:	429c      	cmp	r4, r3
 8007e74:	db39      	blt.n	8007eea <forward_conv2d_nl_pool_integer_SSSA_ch+0x4c2>
 8007e76:	f8bd 10a4 	ldrh.w	r1, [sp, #164]	; 0xa4
 8007e7a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007e7c:	f8dd 90c0 	ldr.w	r9, [sp, #192]	; 0xc0
 8007e80:	f8bd c0e0 	ldrh.w	ip, [sp, #224]	; 0xe0
 8007e84:	f8bd e0e8 	ldrh.w	lr, [sp, #232]	; 0xe8
 8007e88:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007e8a:	9101      	str	r1, [sp, #4]
 8007e8c:	1aca      	subs	r2, r1, r3
 8007e8e:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 8007e92:	9305      	str	r3, [sp, #20]
 8007e94:	2701      	movs	r7, #1
 8007e96:	9707      	str	r7, [sp, #28]
 8007e98:	fa1f f189 	uxth.w	r1, r9
 8007e9c:	1ae4      	subs	r4, r4, r3
 8007e9e:	f8cd c018 	str.w	ip, [sp, #24]
 8007ea2:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	; 0xec
 8007ea6:	f8bd c0e4 	ldrh.w	ip, [sp, #228]	; 0xe4
 8007eaa:	9008      	str	r0, [sp, #32]
 8007eac:	af4d      	add	r7, sp, #308	; 0x134
 8007eae:	4638      	mov	r0, r7
 8007eb0:	b292      	uxth	r2, r2
 8007eb2:	e9cd 1e03 	strd	r1, lr, [sp, #12]
 8007eb6:	9302      	str	r3, [sp, #8]
 8007eb8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8007eba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ebc:	9f3c      	ldr	r7, [sp, #240]	; 0xf0
 8007ebe:	f8cd c000 	str.w	ip, [sp]
 8007ec2:	47b8      	blx	r7
 8007ec4:	981c      	ldr	r0, [sp, #112]	; 0x70
 8007ec6:	6943      	ldr	r3, [r0, #20]
 8007ec8:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8007eca:	68d9      	ldr	r1, [r3, #12]
 8007ecc:	6882      	ldr	r2, [r0, #8]
 8007ece:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 8007ed2:	464f      	mov	r7, r9
 8007ed4:	440a      	add	r2, r1
 8007ed6:	1afb      	subs	r3, r7, r3
 8007ed8:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007eda:	6082      	str	r2, [r0, #8]
 8007edc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007ee0:	3101      	adds	r1, #1
 8007ee2:	b21b      	sxth	r3, r3
 8007ee4:	b224      	sxth	r4, r4
 8007ee6:	9118      	str	r1, [sp, #96]	; 0x60
 8007ee8:	9330      	str	r3, [sp, #192]	; 0xc0
 8007eea:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007eee:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 8007ef8:	f8c8 3008 	str.w	r3, [r8, #8]
 8007efc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007efe:	b13a      	cbz	r2, 8007f10 <forward_conv2d_nl_pool_integer_SSSA_ch+0x4e8>
 8007f00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f02:	695a      	ldr	r2, [r3, #20]
 8007f04:	68b3      	ldr	r3, [r6, #8]
 8007f06:	68d2      	ldr	r2, [r2, #12]
 8007f08:	4413      	add	r3, r2
 8007f0a:	60b3      	str	r3, [r6, #8]
 8007f0c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f10:	f8db 1014 	ldr.w	r1, [fp, #20]
 8007f14:	f8db 200c 	ldr.w	r2, [fp, #12]
 8007f18:	68c8      	ldr	r0, [r1, #12]
 8007f1a:	68d2      	ldr	r2, [r2, #12]
 8007f1c:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007f20:	fb00 1202 	mla	r2, r0, r2, r1
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d306      	bcc.n	8007f36 <forward_conv2d_nl_pool_integer_SSSA_ch+0x50e>
 8007f28:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 8007f2a:	f8c8 1008 	str.w	r1, [r8, #8]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	b10b      	cbz	r3, 8007f36 <forward_conv2d_nl_pool_integer_SSSA_ch+0x50e>
 8007f32:	68f3      	ldr	r3, [r6, #12]
 8007f34:	60b3      	str	r3, [r6, #8]
 8007f36:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007f38:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	f4ff af0b 	bcc.w	8007d56 <forward_conv2d_nl_pool_integer_SSSA_ch+0x32e>
 8007f40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f44:	f8c8 3008 	str.w	r3, [r8, #8]
 8007f48:	68f3      	ldr	r3, [r6, #12]
 8007f4a:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8007f4c:	60b3      	str	r3, [r6, #8]
 8007f4e:	68d3      	ldr	r3, [r2, #12]
 8007f50:	6093      	str	r3, [r2, #8]
 8007f52:	b055      	add	sp, #340	; 0x154
 8007f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f58:	e9d6 2102 	ldrd	r2, r1, [r6, #8]
 8007f5c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8007f5e:	fb03 2314 	mls	r3, r3, r4, r2
 8007f62:	4299      	cmp	r1, r3
 8007f64:	bf84      	itt	hi
 8007f66:	6870      	ldrhi	r0, [r6, #4]
 8007f68:	181b      	addhi	r3, r3, r0
 8007f6a:	4299      	cmp	r1, r3
 8007f6c:	d212      	bcs.n	8007f94 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56c>
 8007f6e:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8007f70:	4284      	cmp	r4, r0
 8007f72:	d00f      	beq.n	8007f94 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56c>
 8007f74:	6870      	ldr	r0, [r6, #4]
 8007f76:	4401      	add	r1, r0
 8007f78:	428b      	cmp	r3, r1
 8007f7a:	d20b      	bcs.n	8007f94 <forward_conv2d_nl_pool_integer_SSSA_ch+0x56c>
 8007f7c:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 8007f7e:	3a01      	subs	r2, #1
 8007f80:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007f84:	f802 1f01 	strb.w	r1, [r2, #1]!
 8007f88:	68f1      	ldr	r1, [r6, #12]
 8007f8a:	6870      	ldr	r0, [r6, #4]
 8007f8c:	4401      	add	r1, r0
 8007f8e:	428b      	cmp	r3, r1
 8007f90:	d3f6      	bcc.n	8007f80 <forward_conv2d_nl_pool_integer_SSSA_ch+0x558>
 8007f92:	9713      	str	r7, [sp, #76]	; 0x4c
 8007f94:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f96:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8007f98:	b2a4      	uxth	r4, r4
 8007f9a:	4413      	add	r3, r2
 8007f9c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8007f9e:	1b1b      	subs	r3, r3, r4
 8007fa0:	b21b      	sxth	r3, r3
 8007fa2:	4414      	add	r4, r2
 8007fa4:	9326      	str	r3, [sp, #152]	; 0x98
 8007fa6:	b224      	sxth	r4, r4
 8007fa8:	e762      	b.n	8007e70 <forward_conv2d_nl_pool_integer_SSSA_ch+0x448>
 8007faa:	bf00      	nop
 8007fac:	00000000 	.word	0x00000000
 8007fb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007fb2:	429c      	cmp	r4, r3
 8007fb4:	f000 80a3 	beq.w	80080fe <forward_conv2d_nl_pool_integer_SSSA_ch+0x6d6>
 8007fb8:	2301      	movs	r3, #1
 8007fba:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fbe:	9510      	str	r5, [sp, #64]	; 0x40
 8007fc0:	930e      	str	r3, [sp, #56]	; 0x38
 8007fc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007fc6:	930d      	str	r3, [sp, #52]	; 0x34
 8007fc8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007fca:	930c      	str	r3, [sp, #48]	; 0x30
 8007fcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007fce:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fd0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8007fd2:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
 8007fd6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007fd8:	9308      	str	r3, [sp, #32]
 8007fda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007fdc:	9307      	str	r3, [sp, #28]
 8007fde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007fe0:	9306      	str	r3, [sp, #24]
 8007fe2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fe4:	9305      	str	r3, [sp, #20]
 8007fe6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007fe8:	9304      	str	r3, [sp, #16]
 8007fea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007fec:	9303      	str	r3, [sp, #12]
 8007fee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ff0:	9302      	str	r3, [sp, #8]
 8007ff2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ff4:	9301      	str	r3, [sp, #4]
 8007ff6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	4650      	mov	r0, sl
 8007ffc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ffe:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8008002:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8008004:	f001 fd52 	bl	8009aac <st_sssa8_ch_convolve>
 8008008:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800800a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800800c:	428b      	cmp	r3, r1
 800800e:	f47f af16 	bne.w	8007e3e <forward_conv2d_nl_pool_integer_SSSA_ch+0x416>
 8008012:	2300      	movs	r3, #0
 8008014:	9313      	str	r3, [sp, #76]	; 0x4c
 8008016:	9327      	str	r3, [sp, #156]	; 0x9c
 8008018:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800801a:	2b00      	cmp	r3, #0
 800801c:	f43f af1a 	beq.w	8007e54 <forward_conv2d_nl_pool_integer_SSSA_ch+0x42c>
 8008020:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008022:	1a9b      	subs	r3, r3, r2
 8008024:	d504      	bpl.n	8008030 <forward_conv2d_nl_pool_integer_SSSA_ch+0x608>
 8008026:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008028:	1a52      	subs	r2, r2, r1
 800802a:	9937      	ldr	r1, [sp, #220]	; 0xdc
 800802c:	fb01 aa02 	mla	sl, r1, r2, sl
 8008030:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008034:	b29b      	uxth	r3, r3
 8008036:	9314      	str	r3, [sp, #80]	; 0x50
 8008038:	e70e      	b.n	8007e58 <forward_conv2d_nl_pool_integer_SSSA_ch+0x430>
 800803a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800803c:	429c      	cmp	r4, r3
 800803e:	d07d      	beq.n	800813c <forward_conv2d_nl_pool_integer_SSSA_ch+0x714>
 8008040:	2301      	movs	r3, #1
 8008042:	930f      	str	r3, [sp, #60]	; 0x3c
 8008044:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008046:	9510      	str	r5, [sp, #64]	; 0x40
 8008048:	930e      	str	r3, [sp, #56]	; 0x38
 800804a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800804e:	930d      	str	r3, [sp, #52]	; 0x34
 8008050:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008052:	930c      	str	r3, [sp, #48]	; 0x30
 8008054:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008056:	930b      	str	r3, [sp, #44]	; 0x2c
 8008058:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800805a:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
 800805e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8008060:	9308      	str	r3, [sp, #32]
 8008062:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008064:	9307      	str	r3, [sp, #28]
 8008066:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008068:	9306      	str	r3, [sp, #24]
 800806a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800806c:	9305      	str	r3, [sp, #20]
 800806e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008070:	9304      	str	r3, [sp, #16]
 8008072:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008074:	9303      	str	r3, [sp, #12]
 8008076:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008078:	9302      	str	r3, [sp, #8]
 800807a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800807c:	9301      	str	r3, [sp, #4]
 800807e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008080:	9300      	str	r3, [sp, #0]
 8008082:	4650      	mov	r0, sl
 8008084:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008086:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 800808a:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800808c:	f000 ff26 	bl	8008edc <st_sssa8_ch_convolve_dw>
 8008090:	e6d0      	b.n	8007e34 <forward_conv2d_nl_pool_integer_SSSA_ch+0x40c>
 8008092:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	e62f      	b.n	8007cf8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2d0>
 8008098:	f8d0 a020 	ldr.w	sl, [r0, #32]
 800809c:	f1ba 0f00 	cmp.w	sl, #0
 80080a0:	f43f ad4f 	beq.w	8007b42 <forward_conv2d_nl_pool_integer_SSSA_ch+0x11a>
 80080a4:	f8da a008 	ldr.w	sl, [sl, #8]
 80080a8:	e54b      	b.n	8007b42 <forward_conv2d_nl_pool_integer_SSSA_ch+0x11a>
 80080aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080ac:	fb03 f202 	mul.w	r2, r3, r2
 80080b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80080b4:	2317      	movs	r3, #23
 80080b6:	1c55      	adds	r5, r2, #1
 80080b8:	932c      	str	r3, [sp, #176]	; 0xb0
 80080ba:	e615      	b.n	8007ce8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2c0>
 80080bc:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80080be:	fb02 f205 	mul.w	r2, r2, r5
 80080c2:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80080c4:	fb05 f502 	mul.w	r5, r5, r2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	ea4f 0545 	mov.w	r5, r5, lsl #1
 80080ce:	bf14      	ite	ne
 80080d0:	2716      	movne	r7, #22
 80080d2:	2718      	moveq	r7, #24
 80080d4:	f5b5 5fa0 	cmp.w	r5, #5120	; 0x1400
 80080d8:	972c      	str	r7, [sp, #176]	; 0xb0
 80080da:	bfa8      	it	ge
 80080dc:	f44f 55a0 	movge.w	r5, #5120	; 0x1400
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f47f ae00 	bne.w	8007ce6 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2be>
 80080e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080e8:	441a      	add	r2, r3
 80080ea:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80080ee:	e5fb      	b.n	8007ce8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x2c0>
 80080f0:	9016      	str	r0, [sp, #88]	; 0x58
 80080f2:	e5b7      	b.n	8007c64 <forward_conv2d_nl_pool_integer_SSSA_ch+0x23c>
 80080f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080f6:	1e58      	subs	r0, r3, #1
 80080f8:	4243      	negs	r3, r0
 80080fa:	4143      	adcs	r3, r0
 80080fc:	e596      	b.n	8007c2c <forward_conv2d_nl_pool_integer_SSSA_ch+0x204>
 80080fe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008100:	2b00      	cmp	r3, #0
 8008102:	f47f af59 	bne.w	8007fb8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x590>
 8008106:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008108:	9302      	str	r3, [sp, #8]
 800810a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800810c:	9301      	str	r3, [sp, #4]
 800810e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	9503      	str	r5, [sp, #12]
 8008114:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008116:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008118:	991a      	ldr	r1, [sp, #104]	; 0x68
 800811a:	981d      	ldr	r0, [sp, #116]	; 0x74
 800811c:	f001 fc3e 	bl	800999c <st_sssa8_ch_convolve_rank1upd>
 8008120:	e74a      	b.n	8007fb8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x590>
 8008122:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8008124:	f10d 09fc 	add.w	r9, sp, #252	; 0xfc
 8008128:	2b00      	cmp	r3, #0
 800812a:	f47f ae5a 	bne.w	8007de2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ba>
 800812e:	464b      	mov	r3, r9
 8008130:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008132:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008134:	981a      	ldr	r0, [sp, #104]	; 0x68
 8008136:	f002 fe69 	bl	800ae0c <st_sssa8_ch_convolve_1x1_WeightsPrefetch>
 800813a:	e652      	b.n	8007de2 <forward_conv2d_nl_pool_integer_SSSA_ch+0x3ba>
 800813c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800813e:	2b00      	cmp	r3, #0
 8008140:	f47f af7e 	bne.w	8008040 <forward_conv2d_nl_pool_integer_SSSA_ch+0x618>
 8008144:	9500      	str	r5, [sp, #0]
 8008146:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	; 0x7c
 800814a:	9915      	ldr	r1, [sp, #84]	; 0x54
 800814c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800814e:	f000 fe0b 	bl	8008d68 <st_sssa8_ch_conv_dw_Wadapt>
 8008152:	e775      	b.n	8008040 <forward_conv2d_nl_pool_integer_SSSA_ch+0x618>
 8008154:	9119      	str	r1, [sp, #100]	; 0x64
 8008156:	e594      	b.n	8007c82 <forward_conv2d_nl_pool_integer_SSSA_ch+0x25a>
 8008158:	2400      	movs	r4, #0
 800815a:	e494      	b.n	8007a86 <forward_conv2d_nl_pool_integer_SSSA_ch+0x5e>
 800815c:	9216      	str	r2, [sp, #88]	; 0x58
 800815e:	e493      	b.n	8007a88 <forward_conv2d_nl_pool_integer_SSSA_ch+0x60>
 8008160:	4b02      	ldr	r3, [pc, #8]	; (800816c <forward_conv2d_nl_pool_integer_SSSA_ch+0x744>)
 8008162:	932f      	str	r3, [sp, #188]	; 0xbc
 8008164:	f8cd b06c 	str.w	fp, [sp, #108]	; 0x6c
 8008168:	e49e      	b.n	8007aa8 <forward_conv2d_nl_pool_integer_SSSA_ch+0x80>
 800816a:	bf00      	nop
 800816c:	080074d1 	.word	0x080074d1

08008170 <forward_dense_integer_SSSA_ch>:
 8008170:	6983      	ldr	r3, [r0, #24]
 8008172:	881a      	ldrh	r2, [r3, #0]
 8008174:	2a00      	cmp	r2, #0
 8008176:	f000 80a0 	beq.w	80082ba <forward_dense_integer_SSSA_ch+0x14a>
 800817a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817e:	685c      	ldr	r4, [r3, #4]
 8008180:	6863      	ldr	r3, [r4, #4]
 8008182:	b08f      	sub	sp, #60	; 0x3c
 8008184:	b103      	cbz	r3, 8008188 <forward_dense_integer_SSSA_ch+0x18>
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2a01      	cmp	r2, #1
 800818a:	f240 808d 	bls.w	80082a8 <forward_dense_integer_SSSA_ch+0x138>
 800818e:	6921      	ldr	r1, [r4, #16]
 8008190:	b101      	cbz	r1, 8008194 <forward_dense_integer_SSSA_ch+0x24>
 8008192:	6809      	ldr	r1, [r1, #0]
 8008194:	2a02      	cmp	r2, #2
 8008196:	f000 808d 	beq.w	80082b4 <forward_dense_integer_SSSA_ch+0x144>
 800819a:	69e5      	ldr	r5, [r4, #28]
 800819c:	2d00      	cmp	r5, #0
 800819e:	f000 80e4 	beq.w	800836a <forward_dense_integer_SSSA_ch+0x1fa>
 80081a2:	6828      	ldr	r0, [r5, #0]
 80081a4:	f114 0618 	adds.w	r6, r4, #24
 80081a8:	d007      	beq.n	80081ba <forward_dense_integer_SSSA_ch+0x4a>
 80081aa:	8b26      	ldrh	r6, [r4, #24]
 80081ac:	2e01      	cmp	r6, #1
 80081ae:	f240 80ca 	bls.w	8008346 <forward_dense_integer_SSSA_ch+0x1d6>
 80081b2:	2d00      	cmp	r5, #0
 80081b4:	f000 80be 	beq.w	8008334 <forward_dense_integer_SSSA_ch+0x1c4>
 80081b8:	686e      	ldr	r6, [r5, #4]
 80081ba:	2a03      	cmp	r2, #3
 80081bc:	d077      	beq.n	80082ae <forward_dense_integer_SSSA_ch+0x13e>
 80081be:	68ca      	ldr	r2, [r1, #12]
 80081c0:	69b5      	ldr	r5, [r6, #24]
 80081c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081c4:	68dc      	ldr	r4, [r3, #12]
 80081c6:	e9d2 9701 	ldrd	r9, r7, [r2, #4]
 80081ca:	68d2      	ldr	r2, [r2, #12]
 80081cc:	f8d4 b004 	ldr.w	fp, [r4, #4]
 80081d0:	68ac      	ldr	r4, [r5, #8]
 80081d2:	940c      	str	r4, [sp, #48]	; 0x30
 80081d4:	fb02 f207 	mul.w	r2, r2, r7
 80081d8:	9208      	str	r2, [sp, #32]
 80081da:	fa1f f28b 	uxth.w	r2, fp
 80081de:	699c      	ldr	r4, [r3, #24]
 80081e0:	698d      	ldr	r5, [r1, #24]
 80081e2:	920d      	str	r2, [sp, #52]	; 0x34
 80081e4:	fa1f fa89 	uxth.w	sl, r9
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	f000 80bc 	beq.w	8008366 <forward_dense_integer_SSSA_ch+0x1f6>
 80081ee:	6832      	ldr	r2, [r6, #0]
 80081f0:	2a00      	cmp	r2, #0
 80081f2:	f000 808d 	beq.w	8008310 <forward_dense_integer_SSSA_ch+0x1a0>
 80081f6:	6992      	ldr	r2, [r2, #24]
 80081f8:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	6983      	ldr	r3, [r0, #24]
 8008200:	680e      	ldr	r6, [r1, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	68a4      	ldr	r4, [r4, #8]
 8008206:	68ad      	ldr	r5, [r5, #8]
 8008208:	9309      	str	r3, [sp, #36]	; 0x24
 800820a:	6800      	ldr	r0, [r0, #0]
 800820c:	2a00      	cmp	r2, #0
 800820e:	d05d      	beq.n	80082cc <forward_dense_integer_SSSA_ch+0x15c>
 8008210:	6857      	ldr	r7, [r2, #4]
 8008212:	46bc      	mov	ip, r7
 8008214:	2f00      	cmp	r7, #0
 8008216:	d052      	beq.n	80082be <forward_dense_integer_SSSA_ch+0x14e>
 8008218:	8853      	ldrh	r3, [r2, #2]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d07f      	beq.n	800831e <forward_dense_integer_SSSA_ch+0x1ae>
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	ed91 0a00 	vldr	s0, [r1]
 8008224:	2e00      	cmp	r6, #0
 8008226:	f000 80a9 	beq.w	800837c <forward_dense_integer_SSSA_ch+0x20c>
 800822a:	6871      	ldr	r1, [r6, #4]
 800822c:	2900      	cmp	r1, #0
 800822e:	d079      	beq.n	8008324 <forward_dense_integer_SSSA_ch+0x1b4>
 8008230:	8877      	ldrh	r7, [r6, #2]
 8008232:	2f00      	cmp	r7, #0
 8008234:	d054      	beq.n	80082e0 <forward_dense_integer_SSSA_ch+0x170>
 8008236:	680b      	ldr	r3, [r1, #0]
 8008238:	edd3 0a00 	vldr	s1, [r3]
 800823c:	2a00      	cmp	r2, #0
 800823e:	f040 8084 	bne.w	800834a <forward_dense_integer_SSSA_ch+0x1da>
 8008242:	920a      	str	r2, [sp, #40]	; 0x28
 8008244:	684b      	ldr	r3, [r1, #4]
 8008246:	f993 3000 	ldrsb.w	r3, [r3]
 800824a:	930b      	str	r3, [sp, #44]	; 0x2c
 800824c:	b110      	cbz	r0, 8008254 <forward_dense_integer_SSSA_ch+0xe4>
 800824e:	6840      	ldr	r0, [r0, #4]
 8008250:	b100      	cbz	r0, 8008254 <forward_dense_integer_SSSA_ch+0xe4>
 8008252:	6800      	ldr	r0, [r0, #0]
 8008254:	fa1f f989 	uxth.w	r9, r9
 8008258:	eb08 0789 	add.w	r7, r8, r9, lsl #2
 800825c:	463b      	mov	r3, r7
 800825e:	4642      	mov	r2, r8
 8008260:	4651      	mov	r1, sl
 8008262:	f000 fd0d 	bl	8008c80 <align_factor_ch>
 8008266:	9b08      	ldr	r3, [sp, #32]
 8008268:	b1db      	cbz	r3, 80082a2 <forward_dense_integer_SSSA_ch+0x132>
 800826a:	463b      	mov	r3, r7
 800826c:	fa1f fb8b 	uxth.w	fp, fp
 8008270:	4647      	mov	r7, r8
 8008272:	2600      	movs	r6, #0
 8008274:	4698      	mov	r8, r3
 8008276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800827c:	9303      	str	r3, [sp, #12]
 800827e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008280:	9700      	str	r7, [sp, #0]
 8008282:	e9cd 5705 	strd	r5, r7, [sp, #20]
 8008286:	e9cd 8301 	strd	r8, r3, [sp, #4]
 800828a:	4620      	mov	r0, r4
 800828c:	4653      	mov	r3, sl
 800828e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008290:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008292:	f002 fe59 	bl	800af48 <st_sssa8_ch_fully_connected>
 8008296:	9b08      	ldr	r3, [sp, #32]
 8008298:	3601      	adds	r6, #1
 800829a:	429e      	cmp	r6, r3
 800829c:	444d      	add	r5, r9
 800829e:	445c      	add	r4, fp
 80082a0:	d1e9      	bne.n	8008276 <forward_dense_integer_SSSA_ch+0x106>
 80082a2:	b00f      	add	sp, #60	; 0x3c
 80082a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a8:	2300      	movs	r3, #0
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	deff      	udf	#255	; 0xff
 80082ae:	2300      	movs	r3, #0
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	deff      	udf	#255	; 0xff
 80082b4:	2300      	movs	r3, #0
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	deff      	udf	#255	; 0xff
 80082ba:	6853      	ldr	r3, [r2, #4]
 80082bc:	deff      	udf	#255	; 0xff
 80082be:	2e00      	cmp	r6, #0
 80082c0:	d03a      	beq.n	8008338 <forward_dense_integer_SSSA_ch+0x1c8>
 80082c2:	6871      	ldr	r1, [r6, #4]
 80082c4:	b939      	cbnz	r1, 80082d6 <forward_dense_integer_SSSA_ch+0x166>
 80082c6:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8008390 <forward_dense_integer_SSSA_ch+0x220>
 80082ca:	e00c      	b.n	80082e6 <forward_dense_integer_SSSA_ch+0x176>
 80082cc:	2e00      	cmp	r6, #0
 80082ce:	d033      	beq.n	8008338 <forward_dense_integer_SSSA_ch+0x1c8>
 80082d0:	6871      	ldr	r1, [r6, #4]
 80082d2:	2900      	cmp	r1, #0
 80082d4:	d04b      	beq.n	800836e <forward_dense_integer_SSSA_ch+0x1fe>
 80082d6:	8877      	ldrh	r7, [r6, #2]
 80082d8:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8008390 <forward_dense_integer_SSSA_ch+0x220>
 80082dc:	2f00      	cmp	r7, #0
 80082de:	d1aa      	bne.n	8008236 <forward_dense_integer_SSSA_ch+0xc6>
 80082e0:	2a00      	cmp	r2, #0
 80082e2:	d047      	beq.n	8008374 <forward_dense_integer_SSSA_ch+0x204>
 80082e4:	6857      	ldr	r7, [r2, #4]
 80082e6:	46bc      	mov	ip, r7
 80082e8:	2f00      	cmp	r7, #0
 80082ea:	d036      	beq.n	800835a <forward_dense_integer_SSSA_ch+0x1ea>
 80082ec:	eddf 0a28 	vldr	s1, [pc, #160]	; 8008390 <forward_dense_integer_SSSA_ch+0x220>
 80082f0:	8853      	ldrh	r3, [r2, #2]
 80082f2:	b17b      	cbz	r3, 8008314 <forward_dense_integer_SSSA_ch+0x1a4>
 80082f4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80082f8:	f993 3000 	ldrsb.w	r3, [r3]
 80082fc:	930a      	str	r3, [sp, #40]	; 0x28
 80082fe:	b386      	cbz	r6, 8008362 <forward_dense_integer_SSSA_ch+0x1f2>
 8008300:	6871      	ldr	r1, [r6, #4]
 8008302:	b151      	cbz	r1, 800831a <forward_dense_integer_SSSA_ch+0x1aa>
 8008304:	8877      	ldrh	r7, [r6, #2]
 8008306:	2f00      	cmp	r7, #0
 8008308:	d19c      	bne.n	8008244 <forward_dense_integer_SSSA_ch+0xd4>
 800830a:	2300      	movs	r3, #0
 800830c:	930b      	str	r3, [sp, #44]	; 0x2c
 800830e:	e79d      	b.n	800824c <forward_dense_integer_SSSA_ch+0xdc>
 8008310:	4690      	mov	r8, r2
 8008312:	e773      	b.n	80081fc <forward_dense_integer_SSSA_ch+0x8c>
 8008314:	930a      	str	r3, [sp, #40]	; 0x28
 8008316:	2900      	cmp	r1, #0
 8008318:	d1f4      	bne.n	8008304 <forward_dense_integer_SSSA_ch+0x194>
 800831a:	910b      	str	r1, [sp, #44]	; 0x2c
 800831c:	e796      	b.n	800824c <forward_dense_integer_SSSA_ch+0xdc>
 800831e:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8008390 <forward_dense_integer_SSSA_ch+0x220>
 8008322:	e77f      	b.n	8008224 <forward_dense_integer_SSSA_ch+0xb4>
 8008324:	2a00      	cmp	r2, #0
 8008326:	d1de      	bne.n	80082e6 <forward_dense_integer_SSSA_ch+0x176>
 8008328:	2300      	movs	r3, #0
 800832a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800832e:	eddf 0a18 	vldr	s1, [pc, #96]	; 8008390 <forward_dense_integer_SSSA_ch+0x220>
 8008332:	e78b      	b.n	800824c <forward_dense_integer_SSSA_ch+0xdc>
 8008334:	462e      	mov	r6, r5
 8008336:	e740      	b.n	80081ba <forward_dense_integer_SSSA_ch+0x4a>
 8008338:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8008390 <forward_dense_integer_SSSA_ch+0x220>
 800833c:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
 8008340:	eef0 0a40 	vmov.f32	s1, s0
 8008344:	e782      	b.n	800824c <forward_dense_integer_SSSA_ch+0xdc>
 8008346:	2600      	movs	r6, #0
 8008348:	e737      	b.n	80081ba <forward_dense_integer_SSSA_ch+0x4a>
 800834a:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800834e:	f1bc 0f00 	cmp.w	ip, #0
 8008352:	d1cd      	bne.n	80082f0 <forward_dense_integer_SSSA_ch+0x180>
 8008354:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8008358:	e7d5      	b.n	8008306 <forward_dense_integer_SSSA_ch+0x196>
 800835a:	970a      	str	r7, [sp, #40]	; 0x28
 800835c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8008390 <forward_dense_integer_SSSA_ch+0x220>
 8008360:	e7cf      	b.n	8008302 <forward_dense_integer_SSSA_ch+0x192>
 8008362:	960b      	str	r6, [sp, #44]	; 0x2c
 8008364:	e772      	b.n	800824c <forward_dense_integer_SSSA_ch+0xdc>
 8008366:	46b0      	mov	r8, r6
 8008368:	e748      	b.n	80081fc <forward_dense_integer_SSSA_ch+0x8c>
 800836a:	4628      	mov	r0, r5
 800836c:	e71a      	b.n	80081a4 <forward_dense_integer_SSSA_ch+0x34>
 800836e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008390 <forward_dense_integer_SSSA_ch+0x220>
 8008372:	e7d9      	b.n	8008328 <forward_dense_integer_SSSA_ch+0x1b8>
 8008374:	920a      	str	r2, [sp, #40]	; 0x28
 8008376:	eddf 0a06 	vldr	s1, [pc, #24]	; 8008390 <forward_dense_integer_SSSA_ch+0x220>
 800837a:	e7c6      	b.n	800830a <forward_dense_integer_SSSA_ch+0x19a>
 800837c:	b923      	cbnz	r3, 8008388 <forward_dense_integer_SSSA_ch+0x218>
 800837e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8008382:	eddf 0a03 	vldr	s1, [pc, #12]	; 8008390 <forward_dense_integer_SSSA_ch+0x220>
 8008386:	e761      	b.n	800824c <forward_dense_integer_SSSA_ch+0xdc>
 8008388:	eddf 0a01 	vldr	s1, [pc, #4]	; 8008390 <forward_dense_integer_SSSA_ch+0x220>
 800838c:	e7b2      	b.n	80082f4 <forward_dense_integer_SSSA_ch+0x184>
 800838e:	bf00      	nop
 8008390:	00000000 	.word	0x00000000

08008394 <nl_func_sm_array_f32>:
 8008394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008398:	ed2d 8b04 	vpush	{d8-d9}
 800839c:	b089      	sub	sp, #36	; 0x24
 800839e:	698f      	ldr	r7, [r1, #24]
 80083a0:	6984      	ldr	r4, [r0, #24]
 80083a2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80083a6:	68bd      	ldr	r5, [r7, #8]
 80083a8:	9402      	str	r4, [sp, #8]
 80083aa:	4626      	mov	r6, r4
 80083ac:	4696      	mov	lr, r2
 80083ae:	eba2 020c 	sub.w	r2, r2, ip
 80083b2:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80083b6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	68b6      	ldr	r6, [r6, #8]
 80083bc:	ebae 0e04 	sub.w	lr, lr, r4
 80083c0:	4295      	cmp	r5, r2
 80083c2:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 80083c6:	d354      	bcc.n	8008472 <nl_func_sm_array_f32+0xde>
 80083c8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80083cc:	f1cc 0200 	rsb	r2, ip, #0
 80083d0:	00a4      	lsls	r4, r4, #2
 80083d2:	e9cd 1006 	strd	r1, r0, [sp, #24]
 80083d6:	9303      	str	r3, [sp, #12]
 80083d8:	9204      	str	r2, [sp, #16]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4262      	negs	r2, r4
 80083de:	9205      	str	r2, [sp, #20]
 80083e0:	9301      	str	r3, [sp, #4]
 80083e2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80083e6:	9b02      	ldr	r3, [sp, #8]
 80083e8:	9a07      	ldr	r2, [sp, #28]
 80083ea:	60bd      	str	r5, [r7, #8]
 80083ec:	609e      	str	r6, [r3, #8]
 80083ee:	9b06      	ldr	r3, [sp, #24]
 80083f0:	6992      	ldr	r2, [r2, #24]
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	6894      	ldr	r4, [r2, #8]
 80083f6:	9a03      	ldr	r2, [sp, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	2a01      	cmp	r2, #1
 80083fc:	ed93 8a00 	vldr	s16, [r3]
 8008400:	d940      	bls.n	8008484 <nl_func_sm_array_f32+0xf0>
 8008402:	9901      	ldr	r1, [sp, #4]
 8008404:	1d1a      	adds	r2, r3, #4
 8008406:	eb03 0b01 	add.w	fp, r3, r1
 800840a:	ecf2 7a01 	vldmia	r2!, {s15}
 800840e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008416:	bfb8      	it	lt
 8008418:	eeb0 8a67 	vmovlt.f32	s16, s15
 800841c:	4593      	cmp	fp, r2
 800841e:	d1f4      	bne.n	800840a <nl_func_sm_array_f32+0x76>
 8008420:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8008490 <nl_func_sm_array_f32+0xfc>
 8008424:	469a      	mov	sl, r3
 8008426:	46a1      	mov	r9, r4
 8008428:	46a0      	mov	r8, r4
 800842a:	ecba 0a01 	vldmia	sl!, {s0}
 800842e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008432:	f005 fc65 	bl	800dd00 <expf>
 8008436:	45d3      	cmp	fp, sl
 8008438:	eca8 0a01 	vstmia	r8!, {s0}
 800843c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008440:	d1f3      	bne.n	800842a <nl_func_sm_array_f32+0x96>
 8008442:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800844a:	d00b      	beq.n	8008464 <nl_func_sm_array_f32+0xd0>
 800844c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8008450:	9b01      	ldr	r3, [sp, #4]
 8008452:	441c      	add	r4, r3
 8008454:	edd9 7a00 	vldr	s15, [r9]
 8008458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800845c:	ece9 7a01 	vstmia	r9!, {s15}
 8008460:	454c      	cmp	r4, r9
 8008462:	d1f7      	bne.n	8008454 <nl_func_sm_array_f32+0xc0>
 8008464:	9b04      	ldr	r3, [sp, #16]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	441d      	add	r5, r3
 800846a:	9b05      	ldr	r3, [sp, #20]
 800846c:	42aa      	cmp	r2, r5
 800846e:	441e      	add	r6, r3
 8008470:	d9b9      	bls.n	80083e6 <nl_func_sm_array_f32+0x52>
 8008472:	60ba      	str	r2, [r7, #8]
 8008474:	9a02      	ldr	r2, [sp, #8]
 8008476:	68d3      	ldr	r3, [r2, #12]
 8008478:	6093      	str	r3, [r2, #8]
 800847a:	b009      	add	sp, #36	; 0x24
 800847c:	ecbd 8b04 	vpop	{d8-d9}
 8008480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008484:	2a00      	cmp	r2, #0
 8008486:	d0ed      	beq.n	8008464 <nl_func_sm_array_f32+0xd0>
 8008488:	9a01      	ldr	r2, [sp, #4]
 800848a:	eb03 0b02 	add.w	fp, r3, r2
 800848e:	e7c7      	b.n	8008420 <nl_func_sm_array_f32+0x8c>
 8008490:	00000000 	.word	0x00000000

08008494 <forward_sm>:
 8008494:	6982      	ldr	r2, [r0, #24]
 8008496:	8813      	ldrh	r3, [r2, #0]
 8008498:	b32b      	cbz	r3, 80084e6 <forward_sm+0x52>
 800849a:	6852      	ldr	r2, [r2, #4]
 800849c:	6851      	ldr	r1, [r2, #4]
 800849e:	b101      	cbz	r1, 80084a2 <forward_sm+0xe>
 80084a0:	6809      	ldr	r1, [r1, #0]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d91c      	bls.n	80084e0 <forward_sm+0x4c>
 80084a6:	6913      	ldr	r3, [r2, #16]
 80084a8:	b1c3      	cbz	r3, 80084dc <forward_sm+0x48>
 80084aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ac:	6818      	ldr	r0, [r3, #0]
 80084ae:	688c      	ldr	r4, [r1, #8]
 80084b0:	68c3      	ldr	r3, [r0, #12]
 80084b2:	68ce      	ldr	r6, [r1, #12]
 80084b4:	685f      	ldr	r7, [r3, #4]
 80084b6:	6873      	ldr	r3, [r6, #4]
 80084b8:	0a24      	lsrs	r4, r4, #8
 80084ba:	b083      	sub	sp, #12
 80084bc:	d015      	beq.n	80084ea <forward_sm+0x56>
 80084be:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80084c2:	2201      	movs	r2, #1
 80084c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084c8:	42a6      	cmp	r6, r4
 80084ca:	fb05 f202 	mul.w	r2, r5, r2
 80084ce:	d1f9      	bne.n	80084c4 <forward_sm+0x30>
 80084d0:	e9cd 3700 	strd	r3, r7, [sp]
 80084d4:	f7ff ff5e 	bl	8008394 <nl_func_sm_array_f32>
 80084d8:	b003      	add	sp, #12
 80084da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	deff      	udf	#255	; 0xff
 80084e0:	2300      	movs	r3, #0
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	deff      	udf	#255	; 0xff
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	deff      	udf	#255	; 0xff
 80084ea:	2201      	movs	r2, #1
 80084ec:	e9cd 3700 	strd	r3, r7, [sp]
 80084f0:	f7ff ff50 	bl	8008394 <nl_func_sm_array_f32>
 80084f4:	b003      	add	sp, #12
 80084f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084f8 <ai_check_custom_types>:
 80084f8:	4b13      	ldr	r3, [pc, #76]	; (8008548 <ai_check_custom_types+0x50>)
 80084fa:	b082      	sub	sp, #8
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	9301      	str	r3, [sp, #4]
 8008500:	b118      	cbz	r0, 800850a <ai_check_custom_types+0x12>
 8008502:	7803      	ldrb	r3, [r0, #0]
 8008504:	2b03      	cmp	r3, #3
 8008506:	d002      	beq.n	800850e <ai_check_custom_types+0x16>
 8008508:	2000      	movs	r0, #0
 800850a:	b002      	add	sp, #8
 800850c:	4770      	bx	lr
 800850e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8008512:	4293      	cmp	r3, r2
 8008514:	d004      	beq.n	8008520 <ai_check_custom_types+0x28>
 8008516:	2001      	movs	r0, #1
 8008518:	f080 0001 	eor.w	r0, r0, #1
 800851c:	b002      	add	sp, #8
 800851e:	4770      	bx	lr
 8008520:	7842      	ldrb	r2, [r0, #1]
 8008522:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8008526:	429a      	cmp	r2, r3
 8008528:	f100 0001 	add.w	r0, r0, #1
 800852c:	d1f3      	bne.n	8008516 <ai_check_custom_types+0x1e>
 800852e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8008532:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8008536:	429a      	cmp	r2, r3
 8008538:	d1ed      	bne.n	8008516 <ai_check_custom_types+0x1e>
 800853a:	7842      	ldrb	r2, [r0, #1]
 800853c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8008540:	429a      	cmp	r2, r3
 8008542:	d1e8      	bne.n	8008516 <ai_check_custom_types+0x1e>
 8008544:	2000      	movs	r0, #0
 8008546:	e7e7      	b.n	8008518 <ai_check_custom_types+0x20>
 8008548:	0813cd20 	.word	0x0813cd20

0800854c <ai_layers_init_all>:
 800854c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800854e:	b17a      	cbz	r2, 8008570 <ai_layers_init_all+0x24>
 8008550:	6913      	ldr	r3, [r2, #16]
 8008552:	60d0      	str	r0, [r2, #12]
 8008554:	429a      	cmp	r2, r3
 8008556:	f04f 0201 	mov.w	r2, #1
 800855a:	d009      	beq.n	8008570 <ai_layers_init_all+0x24>
 800855c:	b143      	cbz	r3, 8008570 <ai_layers_init_all+0x24>
 800855e:	6919      	ldr	r1, [r3, #16]
 8008560:	60d8      	str	r0, [r3, #12]
 8008562:	4299      	cmp	r1, r3
 8008564:	f102 0201 	add.w	r2, r2, #1
 8008568:	d002      	beq.n	8008570 <ai_layers_init_all+0x24>
 800856a:	460b      	mov	r3, r1
 800856c:	2b00      	cmp	r3, #0
 800856e:	d1f6      	bne.n	800855e <ai_layers_init_all+0x12>
 8008570:	4610      	mov	r0, r2
 8008572:	4770      	bx	lr

08008574 <ai_layers_post_init_all>:
 8008574:	b538      	push	{r3, r4, r5, lr}
 8008576:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008578:	b18c      	cbz	r4, 800859e <ai_layers_post_init_all+0x2a>
 800857a:	2500      	movs	r5, #0
 800857c:	6863      	ldr	r3, [r4, #4]
 800857e:	f013 0f01 	tst.w	r3, #1
 8008582:	4620      	mov	r0, r4
 8008584:	d003      	beq.n	800858e <ai_layers_post_init_all+0x1a>
 8008586:	6a23      	ldr	r3, [r4, #32]
 8008588:	b10b      	cbz	r3, 800858e <ai_layers_post_init_all+0x1a>
 800858a:	4798      	blx	r3
 800858c:	3501      	adds	r5, #1
 800858e:	6923      	ldr	r3, [r4, #16]
 8008590:	42a3      	cmp	r3, r4
 8008592:	d002      	beq.n	800859a <ai_layers_post_init_all+0x26>
 8008594:	461c      	mov	r4, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1f0      	bne.n	800857c <ai_layers_post_init_all+0x8>
 800859a:	4628      	mov	r0, r5
 800859c:	bd38      	pop	{r3, r4, r5, pc}
 800859e:	4625      	mov	r5, r4
 80085a0:	e7fb      	b.n	800859a <ai_layers_post_init_all+0x26>
 80085a2:	bf00      	nop

080085a4 <ai_layers_forward_all>:
 80085a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085a8:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 80085aa:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80085ac:	4604      	mov	r4, r0
 80085ae:	2f00      	cmp	r7, #0
 80085b0:	d02c      	beq.n	800860c <ai_layers_forward_all+0x68>
 80085b2:	2d00      	cmp	r5, #0
 80085b4:	d03f      	beq.n	8008636 <ai_layers_forward_all+0x92>
 80085b6:	6385      	str	r5, [r0, #56]	; 0x38
 80085b8:	4629      	mov	r1, r5
 80085ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80085bc:	2001      	movs	r0, #1
 80085be:	47b8      	blx	r7
 80085c0:	2600      	movs	r6, #0
 80085c2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80085c4:	46b0      	mov	r8, r6
 80085c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80085c8:	2002      	movs	r0, #2
 80085ca:	47b8      	blx	r7
 80085cc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80085ce:	696b      	ldr	r3, [r5, #20]
 80085d0:	4628      	mov	r0, r5
 80085d2:	4798      	blx	r3
 80085d4:	692b      	ldr	r3, [r5, #16]
 80085d6:	429d      	cmp	r5, r3
 80085d8:	f04f 0003 	mov.w	r0, #3
 80085dc:	4619      	mov	r1, r3
 80085de:	d009      	beq.n	80085f4 <ai_layers_forward_all+0x50>
 80085e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80085e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80085e4:	47b8      	blx	r7
 80085e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80085e8:	3601      	adds	r6, #1
 80085ea:	2900      	cmp	r1, #0
 80085ec:	d1eb      	bne.n	80085c6 <ai_layers_forward_all+0x22>
 80085ee:	4630      	mov	r0, r6
 80085f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f4:	2100      	movs	r1, #0
 80085f6:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 80085fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80085fc:	47b8      	blx	r7
 80085fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008600:	3601      	adds	r6, #1
 8008602:	2900      	cmp	r1, #0
 8008604:	d1df      	bne.n	80085c6 <ai_layers_forward_all+0x22>
 8008606:	4630      	mov	r0, r6
 8008608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800860c:	b19d      	cbz	r5, 8008636 <ai_layers_forward_all+0x92>
 800860e:	6385      	str	r5, [r0, #56]	; 0x38
 8008610:	463e      	mov	r6, r7
 8008612:	696b      	ldr	r3, [r5, #20]
 8008614:	4628      	mov	r0, r5
 8008616:	4798      	blx	r3
 8008618:	692b      	ldr	r3, [r5, #16]
 800861a:	42ab      	cmp	r3, r5
 800861c:	f106 0601 	add.w	r6, r6, #1
 8008620:	d004      	beq.n	800862c <ai_layers_forward_all+0x88>
 8008622:	63a3      	str	r3, [r4, #56]	; 0x38
 8008624:	461d      	mov	r5, r3
 8008626:	2b00      	cmp	r3, #0
 8008628:	d1f3      	bne.n	8008612 <ai_layers_forward_all+0x6e>
 800862a:	e7e0      	b.n	80085ee <ai_layers_forward_all+0x4a>
 800862c:	2300      	movs	r3, #0
 800862e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008630:	4630      	mov	r0, r6
 8008632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008636:	462e      	mov	r6, r5
 8008638:	4630      	mov	r0, r6
 800863a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800863e:	bf00      	nop

08008640 <pool_func_mp_array_integer_INT8>:
 8008640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008644:	b093      	sub	sp, #76	; 0x4c
 8008646:	6987      	ldr	r7, [r0, #24]
 8008648:	9d24      	ldr	r5, [sp, #144]	; 0x90
 800864a:	6804      	ldr	r4, [r0, #0]
 800864c:	69ae      	ldr	r6, [r5, #24]
 800864e:	68b8      	ldr	r0, [r7, #8]
 8008650:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8008654:	682e      	ldr	r6, [r5, #0]
 8008656:	f8bd 5074 	ldrh.w	r5, [sp, #116]	; 0x74
 800865a:	950d      	str	r5, [sp, #52]	; 0x34
 800865c:	f8bd 5078 	ldrh.w	r5, [sp, #120]	; 0x78
 8008660:	950e      	str	r5, [sp, #56]	; 0x38
 8008662:	f8bd 507c 	ldrh.w	r5, [sp, #124]	; 0x7c
 8008666:	950f      	str	r5, [sp, #60]	; 0x3c
 8008668:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800866c:	f8bd a070 	ldrh.w	sl, [sp, #112]	; 0x70
 8008670:	9510      	str	r5, [sp, #64]	; 0x40
 8008672:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 8008676:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 800867a:	f8bd 908c 	ldrh.w	r9, [sp, #140]	; 0x8c
 800867e:	2c00      	cmp	r4, #0
 8008680:	d03a      	beq.n	80086f8 <pool_func_mp_array_integer_INT8+0xb8>
 8008682:	6867      	ldr	r7, [r4, #4]
 8008684:	46bb      	mov	fp, r7
 8008686:	2f00      	cmp	r7, #0
 8008688:	d02f      	beq.n	80086ea <pool_func_mp_array_integer_INT8+0xaa>
 800868a:	8865      	ldrh	r5, [r4, #2]
 800868c:	9511      	str	r5, [sp, #68]	; 0x44
 800868e:	2d00      	cmp	r5, #0
 8008690:	d04e      	beq.n	8008730 <pool_func_mp_array_integer_INT8+0xf0>
 8008692:	683d      	ldr	r5, [r7, #0]
 8008694:	ed95 0a00 	vldr	s0, [r5]
 8008698:	2e00      	cmp	r6, #0
 800869a:	d04c      	beq.n	8008736 <pool_func_mp_array_integer_INT8+0xf6>
 800869c:	6875      	ldr	r5, [r6, #4]
 800869e:	2d00      	cmp	r5, #0
 80086a0:	d055      	beq.n	800874e <pool_func_mp_array_integer_INT8+0x10e>
 80086a2:	8877      	ldrh	r7, [r6, #2]
 80086a4:	9711      	str	r7, [sp, #68]	; 0x44
 80086a6:	2f00      	cmp	r7, #0
 80086a8:	d031      	beq.n	800870e <pool_func_mp_array_integer_INT8+0xce>
 80086aa:	682f      	ldr	r7, [r5, #0]
 80086ac:	edd7 0a00 	vldr	s1, [r7]
 80086b0:	2c00      	cmp	r4, #0
 80086b2:	d15a      	bne.n	800876a <pool_func_mp_array_integer_INT8+0x12a>
 80086b4:	686d      	ldr	r5, [r5, #4]
 80086b6:	f995 5000 	ldrsb.w	r5, [r5]
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 80086c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80086c2:	9405      	str	r4, [sp, #20]
 80086c4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80086c6:	9404      	str	r4, [sp, #16]
 80086c8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80086ca:	9403      	str	r4, [sp, #12]
 80086cc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80086ce:	f8cd e018 	str.w	lr, [sp, #24]
 80086d2:	4613      	mov	r3, r2
 80086d4:	e9cd 8907 	strd	r8, r9, [sp, #28]
 80086d8:	460a      	mov	r2, r1
 80086da:	e9cd a401 	strd	sl, r4, [sp, #4]
 80086de:	4661      	mov	r1, ip
 80086e0:	f005 f856 	bl	800d790 <st_int8_maxpool>
 80086e4:	b013      	add	sp, #76	; 0x4c
 80086e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ea:	2e00      	cmp	r6, #0
 80086ec:	d036      	beq.n	800875c <pool_func_mp_array_integer_INT8+0x11c>
 80086ee:	6875      	ldr	r5, [r6, #4]
 80086f0:	b93d      	cbnz	r5, 8008702 <pool_func_mp_array_integer_INT8+0xc2>
 80086f2:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8008798 <pool_func_mp_array_integer_INT8+0x158>
 80086f6:	e00d      	b.n	8008714 <pool_func_mp_array_integer_INT8+0xd4>
 80086f8:	2e00      	cmp	r6, #0
 80086fa:	d02f      	beq.n	800875c <pool_func_mp_array_integer_INT8+0x11c>
 80086fc:	6875      	ldr	r5, [r6, #4]
 80086fe:	2d00      	cmp	r5, #0
 8008700:	d042      	beq.n	8008788 <pool_func_mp_array_integer_INT8+0x148>
 8008702:	8877      	ldrh	r7, [r6, #2]
 8008704:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8008798 <pool_func_mp_array_integer_INT8+0x158>
 8008708:	9711      	str	r7, [sp, #68]	; 0x44
 800870a:	2f00      	cmp	r7, #0
 800870c:	d1cd      	bne.n	80086aa <pool_func_mp_array_integer_INT8+0x6a>
 800870e:	2c00      	cmp	r4, #0
 8008710:	d037      	beq.n	8008782 <pool_func_mp_array_integer_INT8+0x142>
 8008712:	6867      	ldr	r7, [r4, #4]
 8008714:	46bb      	mov	fp, r7
 8008716:	b387      	cbz	r7, 800877a <pool_func_mp_array_integer_INT8+0x13a>
 8008718:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8008798 <pool_func_mp_array_integer_INT8+0x158>
 800871c:	8864      	ldrh	r4, [r4, #2]
 800871e:	b974      	cbnz	r4, 800873e <pool_func_mp_array_integer_INT8+0xfe>
 8008720:	2d00      	cmp	r5, #0
 8008722:	d0ca      	beq.n	80086ba <pool_func_mp_array_integer_INT8+0x7a>
 8008724:	8876      	ldrh	r6, [r6, #2]
 8008726:	9611      	str	r6, [sp, #68]	; 0x44
 8008728:	2e00      	cmp	r6, #0
 800872a:	d1c3      	bne.n	80086b4 <pool_func_mp_array_integer_INT8+0x74>
 800872c:	2500      	movs	r5, #0
 800872e:	e7c4      	b.n	80086ba <pool_func_mp_array_integer_INT8+0x7a>
 8008730:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8008798 <pool_func_mp_array_integer_INT8+0x158>
 8008734:	e7b0      	b.n	8008698 <pool_func_mp_array_integer_INT8+0x58>
 8008736:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8008738:	b34c      	cbz	r4, 800878e <pool_func_mp_array_integer_INT8+0x14e>
 800873a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8008798 <pool_func_mp_array_integer_INT8+0x158>
 800873e:	f8db 4004 	ldr.w	r4, [fp, #4]
 8008742:	f994 4000 	ldrsb.w	r4, [r4]
 8008746:	2e00      	cmp	r6, #0
 8008748:	d0f0      	beq.n	800872c <pool_func_mp_array_integer_INT8+0xec>
 800874a:	6875      	ldr	r5, [r6, #4]
 800874c:	e7e8      	b.n	8008720 <pool_func_mp_array_integer_INT8+0xe0>
 800874e:	2c00      	cmp	r4, #0
 8008750:	d1e0      	bne.n	8008714 <pool_func_mp_array_integer_INT8+0xd4>
 8008752:	2400      	movs	r4, #0
 8008754:	4625      	mov	r5, r4
 8008756:	eddf 0a10 	vldr	s1, [pc, #64]	; 8008798 <pool_func_mp_array_integer_INT8+0x158>
 800875a:	e7ae      	b.n	80086ba <pool_func_mp_array_integer_INT8+0x7a>
 800875c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8008798 <pool_func_mp_array_integer_INT8+0x158>
 8008760:	4634      	mov	r4, r6
 8008762:	4635      	mov	r5, r6
 8008764:	eef0 0a40 	vmov.f32	s1, s0
 8008768:	e7a7      	b.n	80086ba <pool_func_mp_array_integer_INT8+0x7a>
 800876a:	f8d4 b004 	ldr.w	fp, [r4, #4]
 800876e:	f1bb 0f00 	cmp.w	fp, #0
 8008772:	d1d3      	bne.n	800871c <pool_func_mp_array_integer_INT8+0xdc>
 8008774:	465c      	mov	r4, fp
 8008776:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008778:	e7d6      	b.n	8008728 <pool_func_mp_array_integer_INT8+0xe8>
 800877a:	463c      	mov	r4, r7
 800877c:	eddf 0a06 	vldr	s1, [pc, #24]	; 8008798 <pool_func_mp_array_integer_INT8+0x158>
 8008780:	e7ce      	b.n	8008720 <pool_func_mp_array_integer_INT8+0xe0>
 8008782:	eddf 0a05 	vldr	s1, [pc, #20]	; 8008798 <pool_func_mp_array_integer_INT8+0x158>
 8008786:	e7d1      	b.n	800872c <pool_func_mp_array_integer_INT8+0xec>
 8008788:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8008798 <pool_func_mp_array_integer_INT8+0x158>
 800878c:	e7e1      	b.n	8008752 <pool_func_mp_array_integer_INT8+0x112>
 800878e:	4625      	mov	r5, r4
 8008790:	eddf 0a01 	vldr	s1, [pc, #4]	; 8008798 <pool_func_mp_array_integer_INT8+0x158>
 8008794:	e791      	b.n	80086ba <pool_func_mp_array_integer_INT8+0x7a>
 8008796:	bf00      	nop
 8008798:	00000000 	.word	0x00000000

0800879c <st_dsp_arm_float_to_q15>:
 800879c:	b4f0      	push	{r4, r5, r6, r7}
 800879e:	0897      	lsrs	r7, r2, #2
 80087a0:	d073      	beq.n	800888a <st_dsp_arm_float_to_q15+0xee>
 80087a2:	ed9f 6a61 	vldr	s12, [pc, #388]	; 8008928 <st_dsp_arm_float_to_q15+0x18c>
 80087a6:	f100 0510 	add.w	r5, r0, #16
 80087aa:	f101 0408 	add.w	r4, r1, #8
 80087ae:	463e      	mov	r6, r7
 80087b0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80087b4:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 80087b8:	ed55 7a04 	vldr	s15, [r5, #-16]
 80087bc:	ee27 7a86 	vmul.f32	s14, s15, s12
 80087c0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80087c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c8:	bfd4      	ite	le
 80087ca:	eef0 7a65 	vmovle.f32	s15, s11
 80087ce:	eef0 7a66 	vmovgt.f32	s15, s13
 80087d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80087d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80087da:	ee17 3a90 	vmov	r3, s15
 80087de:	f303 030f 	ssat	r3, #16, r3
 80087e2:	f824 3c08 	strh.w	r3, [r4, #-8]
 80087e6:	ed55 7a03 	vldr	s15, [r5, #-12]
 80087ea:	ee27 7a86 	vmul.f32	s14, s15, s12
 80087ee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80087f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f6:	bfd4      	ite	le
 80087f8:	eef0 7a65 	vmovle.f32	s15, s11
 80087fc:	eef0 7a66 	vmovgt.f32	s15, s13
 8008800:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008808:	ee17 3a90 	vmov	r3, s15
 800880c:	f303 030f 	ssat	r3, #16, r3
 8008810:	f824 3c06 	strh.w	r3, [r4, #-6]
 8008814:	ed55 7a02 	vldr	s15, [r5, #-8]
 8008818:	ee27 7a86 	vmul.f32	s14, s15, s12
 800881c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008824:	bfd4      	ite	le
 8008826:	eef0 7a65 	vmovle.f32	s15, s11
 800882a:	eef0 7a66 	vmovgt.f32	s15, s13
 800882e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008836:	ee17 3a90 	vmov	r3, s15
 800883a:	f303 030f 	ssat	r3, #16, r3
 800883e:	f824 3c04 	strh.w	r3, [r4, #-4]
 8008842:	ed55 7a01 	vldr	s15, [r5, #-4]
 8008846:	ee67 7a86 	vmul.f32	s15, s15, s12
 800884a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800884e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008852:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008856:	bfd8      	it	le
 8008858:	ee77 7ae6 	vsuble.f32	s15, s15, s13
 800885c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8008860:	bfd6      	itet	le
 8008862:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8008866:	ee17 3a10 	vmovgt	r3, s14
 800886a:	ee17 3a90 	vmovle	r3, s15
 800886e:	f303 030f 	ssat	r3, #16, r3
 8008872:	3e01      	subs	r6, #1
 8008874:	f824 3c02 	strh.w	r3, [r4, #-2]
 8008878:	f105 0510 	add.w	r5, r5, #16
 800887c:	f104 0408 	add.w	r4, r4, #8
 8008880:	d19a      	bne.n	80087b8 <st_dsp_arm_float_to_q15+0x1c>
 8008882:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8008886:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800888a:	f012 0203 	ands.w	r2, r2, #3
 800888e:	d049      	beq.n	8008924 <st_dsp_arm_float_to_q15+0x188>
 8008890:	edd0 7a00 	vldr	s15, [r0]
 8008894:	eddf 5a24 	vldr	s11, [pc, #144]	; 8008928 <st_dsp_arm_float_to_q15+0x18c>
 8008898:	ee67 6aa5 	vmul.f32	s13, s15, s11
 800889c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80088a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80088a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a8:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 80088ac:	bfd4      	ite	le
 80088ae:	eef0 7a46 	vmovle.f32	s15, s12
 80088b2:	eef0 7a47 	vmovgt.f32	s15, s14
 80088b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088be:	ee17 3a90 	vmov	r3, s15
 80088c2:	f303 030f 	ssat	r3, #16, r3
 80088c6:	2a01      	cmp	r2, #1
 80088c8:	800b      	strh	r3, [r1, #0]
 80088ca:	d02b      	beq.n	8008924 <st_dsp_arm_float_to_q15+0x188>
 80088cc:	edd0 7a01 	vldr	s15, [r0, #4]
 80088d0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80088d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088dc:	bfd4      	ite	le
 80088de:	eef0 6a46 	vmovle.f32	s13, s12
 80088e2:	eef0 6a47 	vmovgt.f32	s13, s14
 80088e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088ee:	ee17 3a90 	vmov	r3, s15
 80088f2:	f303 030f 	ssat	r3, #16, r3
 80088f6:	2a02      	cmp	r2, #2
 80088f8:	804b      	strh	r3, [r1, #2]
 80088fa:	d013      	beq.n	8008924 <st_dsp_arm_float_to_q15+0x188>
 80088fc:	edd0 7a02 	vldr	s15, [r0, #8]
 8008900:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8008904:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8008908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800890c:	bfd8      	it	le
 800890e:	eeb0 7a46 	vmovle.f32	s14, s12
 8008912:	ee37 7a25 	vadd.f32	s14, s14, s11
 8008916:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800891a:	ee17 3a10 	vmov	r3, s14
 800891e:	f303 030f 	ssat	r3, #16, r3
 8008922:	808b      	strh	r3, [r1, #4]
 8008924:	bcf0      	pop	{r4, r5, r6, r7}
 8008926:	4770      	bx	lr
 8008928:	47000000 	.word	0x47000000

0800892c <st_dsp_arm_float_to_q7>:
 800892c:	b4f0      	push	{r4, r5, r6, r7}
 800892e:	0897      	lsrs	r7, r2, #2
 8008930:	d070      	beq.n	8008a14 <st_dsp_arm_float_to_q7+0xe8>
 8008932:	1d0c      	adds	r4, r1, #4
 8008934:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8008938:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8008ae0 <st_dsp_arm_float_to_q7+0x1b4>
 800893c:	eb04 060c 	add.w	r6, r4, ip
 8008940:	f100 0510 	add.w	r5, r0, #16
 8008944:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008948:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 800894c:	ed55 7a04 	vldr	s15, [r5, #-16]
 8008950:	ee27 7a86 	vmul.f32	s14, s15, s12
 8008954:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800895c:	bfd4      	ite	le
 800895e:	eef0 7a65 	vmovle.f32	s15, s11
 8008962:	eef0 7a66 	vmovgt.f32	s15, s13
 8008966:	ee77 7a87 	vadd.f32	s15, s15, s14
 800896a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800896e:	ee17 3a90 	vmov	r3, s15
 8008972:	b21b      	sxth	r3, r3
 8008974:	f303 0307 	ssat	r3, #8, r3
 8008978:	f804 3c04 	strb.w	r3, [r4, #-4]
 800897c:	ed55 7a03 	vldr	s15, [r5, #-12]
 8008980:	ee27 7a86 	vmul.f32	s14, s15, s12
 8008984:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800898c:	bfd4      	ite	le
 800898e:	eef0 7a65 	vmovle.f32	s15, s11
 8008992:	eef0 7a66 	vmovgt.f32	s15, s13
 8008996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800899a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800899e:	ee17 3a90 	vmov	r3, s15
 80089a2:	b21b      	sxth	r3, r3
 80089a4:	f303 0307 	ssat	r3, #8, r3
 80089a8:	f804 3c03 	strb.w	r3, [r4, #-3]
 80089ac:	ed55 7a02 	vldr	s15, [r5, #-8]
 80089b0:	ee27 7a86 	vmul.f32	s14, s15, s12
 80089b4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80089b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089bc:	bfd4      	ite	le
 80089be:	eef0 7a65 	vmovle.f32	s15, s11
 80089c2:	eef0 7a66 	vmovgt.f32	s15, s13
 80089c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80089ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089ce:	ee17 3a90 	vmov	r3, s15
 80089d2:	b21b      	sxth	r3, r3
 80089d4:	f303 0307 	ssat	r3, #8, r3
 80089d8:	f804 3c02 	strb.w	r3, [r4, #-2]
 80089dc:	ed55 7a01 	vldr	s15, [r5, #-4]
 80089e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80089e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80089e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089ec:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80089f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f4:	ee17 3a10 	vmov	r3, s14
 80089f8:	b21b      	sxth	r3, r3
 80089fa:	dd5f      	ble.n	8008abc <st_dsp_arm_float_to_q7+0x190>
 80089fc:	f303 0307 	ssat	r3, #8, r3
 8008a00:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008a04:	3404      	adds	r4, #4
 8008a06:	42a6      	cmp	r6, r4
 8008a08:	f105 0510 	add.w	r5, r5, #16
 8008a0c:	d19e      	bne.n	800894c <st_dsp_arm_float_to_q7+0x20>
 8008a0e:	4461      	add	r1, ip
 8008a10:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8008a14:	f012 0203 	ands.w	r2, r2, #3
 8008a18:	d04e      	beq.n	8008ab8 <st_dsp_arm_float_to_q7+0x18c>
 8008a1a:	edd0 7a00 	vldr	s15, [r0]
 8008a1e:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8008ae0 <st_dsp_arm_float_to_q7+0x1b4>
 8008a22:	ee67 6a85 	vmul.f32	s13, s15, s10
 8008a26:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008a2a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8008a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a32:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
 8008a36:	bfd4      	ite	le
 8008a38:	eef0 7a65 	vmovle.f32	s15, s11
 8008a3c:	eef0 7a47 	vmovgt.f32	s15, s14
 8008a40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008a48:	ee17 3a90 	vmov	r3, s15
 8008a4c:	b21b      	sxth	r3, r3
 8008a4e:	f303 0307 	ssat	r3, #8, r3
 8008a52:	2a01      	cmp	r2, #1
 8008a54:	700b      	strb	r3, [r1, #0]
 8008a56:	d02f      	beq.n	8008ab8 <st_dsp_arm_float_to_q7+0x18c>
 8008a58:	edd0 6a01 	vldr	s13, [r0, #4]
 8008a5c:	ee26 6a85 	vmul.f32	s12, s13, s10
 8008a60:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8008a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a68:	bfd4      	ite	le
 8008a6a:	eef0 6a65 	vmovle.f32	s13, s11
 8008a6e:	eef0 6a47 	vmovgt.f32	s13, s14
 8008a72:	ee76 6a86 	vadd.f32	s13, s13, s12
 8008a76:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8008a7a:	ee16 3a90 	vmov	r3, s13
 8008a7e:	b21b      	sxth	r3, r3
 8008a80:	f303 0307 	ssat	r3, #8, r3
 8008a84:	2a02      	cmp	r2, #2
 8008a86:	704b      	strb	r3, [r1, #1]
 8008a88:	d016      	beq.n	8008ab8 <st_dsp_arm_float_to_q7+0x18c>
 8008a8a:	edd0 7a02 	vldr	s15, [r0, #8]
 8008a8e:	ee27 5a85 	vmul.f32	s10, s15, s10
 8008a92:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8008a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a9a:	bfd4      	ite	le
 8008a9c:	eef0 7a65 	vmovle.f32	s15, s11
 8008aa0:	eef0 7a47 	vmovgt.f32	s15, s14
 8008aa4:	ee77 7a85 	vadd.f32	s15, s15, s10
 8008aa8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008aac:	ee17 3a90 	vmov	r3, s15
 8008ab0:	b21b      	sxth	r3, r3
 8008ab2:	f303 0307 	ssat	r3, #8, r3
 8008ab6:	708b      	strb	r3, [r1, #2]
 8008ab8:	bcf0      	pop	{r4, r5, r6, r7}
 8008aba:	4770      	bx	lr
 8008abc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008ac0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ac4:	ee17 3a90 	vmov	r3, s15
 8008ac8:	b21b      	sxth	r3, r3
 8008aca:	f303 0307 	ssat	r3, #8, r3
 8008ace:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008ad2:	3404      	adds	r4, #4
 8008ad4:	42b4      	cmp	r4, r6
 8008ad6:	f105 0510 	add.w	r5, r5, #16
 8008ada:	f47f af37 	bne.w	800894c <st_dsp_arm_float_to_q7+0x20>
 8008ade:	e796      	b.n	8008a0e <st_dsp_arm_float_to_q7+0xe2>
 8008ae0:	43000000 	.word	0x43000000

08008ae4 <st_dsp_arm_q15_to_float>:
 8008ae4:	b470      	push	{r4, r5, r6}
 8008ae6:	0896      	lsrs	r6, r2, #2
 8008ae8:	d038      	beq.n	8008b5c <st_dsp_arm_q15_to_float+0x78>
 8008aea:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008bb0 <st_dsp_arm_q15_to_float+0xcc>
 8008aee:	f100 0408 	add.w	r4, r0, #8
 8008af2:	f101 0310 	add.w	r3, r1, #16
 8008af6:	4635      	mov	r5, r6
 8008af8:	f934 cc08 	ldrsh.w	ip, [r4, #-8]
 8008afc:	ee07 ca90 	vmov	s15, ip
 8008b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b04:	3d01      	subs	r5, #1
 8008b06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b0a:	f104 0408 	add.w	r4, r4, #8
 8008b0e:	ed43 7a04 	vstr	s15, [r3, #-16]
 8008b12:	f934 cc0e 	ldrsh.w	ip, [r4, #-14]
 8008b16:	ee07 ca90 	vmov	s15, ip
 8008b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b1e:	f103 0310 	add.w	r3, r3, #16
 8008b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b26:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8008b2a:	f934 cc0c 	ldrsh.w	ip, [r4, #-12]
 8008b2e:	ee07 ca90 	vmov	s15, ip
 8008b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b3a:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8008b3e:	f934 cc0a 	ldrsh.w	ip, [r4, #-10]
 8008b42:	ee07 ca90 	vmov	s15, ip
 8008b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b4e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8008b52:	d1d1      	bne.n	8008af8 <st_dsp_arm_q15_to_float+0x14>
 8008b54:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 8008b58:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8008b5c:	f012 0203 	ands.w	r2, r2, #3
 8008b60:	d023      	beq.n	8008baa <st_dsp_arm_q15_to_float+0xc6>
 8008b62:	f9b0 3000 	ldrsh.w	r3, [r0]
 8008b66:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8008bb0 <st_dsp_arm_q15_to_float+0xcc>
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b72:	2a01      	cmp	r2, #1
 8008b74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b78:	edc1 7a00 	vstr	s15, [r1]
 8008b7c:	d015      	beq.n	8008baa <st_dsp_arm_q15_to_float+0xc6>
 8008b7e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8008b82:	ee07 3a90 	vmov	s15, r3
 8008b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b8a:	2a02      	cmp	r2, #2
 8008b8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b90:	edc1 7a01 	vstr	s15, [r1, #4]
 8008b94:	d009      	beq.n	8008baa <st_dsp_arm_q15_to_float+0xc6>
 8008b96:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ba6:	edc1 7a02 	vstr	s15, [r1, #8]
 8008baa:	bc70      	pop	{r4, r5, r6}
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	38000000 	.word	0x38000000

08008bb4 <st_dsp_arm_q7_to_float>:
 8008bb4:	b470      	push	{r4, r5, r6}
 8008bb6:	0895      	lsrs	r5, r2, #2
 8008bb8:	d036      	beq.n	8008c28 <st_dsp_arm_q7_to_float+0x74>
 8008bba:	eb00 0685 	add.w	r6, r0, r5, lsl #2
 8008bbe:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8008c7c <st_dsp_arm_q7_to_float+0xc8>
 8008bc2:	3004      	adds	r0, #4
 8008bc4:	1d34      	adds	r4, r6, #4
 8008bc6:	f101 0310 	add.w	r3, r1, #16
 8008bca:	f910 cc04 	ldrsb.w	ip, [r0, #-4]
 8008bce:	ee07 ca90 	vmov	s15, ip
 8008bd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bd6:	3004      	adds	r0, #4
 8008bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bdc:	3310      	adds	r3, #16
 8008bde:	ed43 7a08 	vstr	s15, [r3, #-32]	; 0xffffffe0
 8008be2:	f910 cc07 	ldrsb.w	ip, [r0, #-7]
 8008be6:	ee07 ca90 	vmov	s15, ip
 8008bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bf2:	ed43 7a07 	vstr	s15, [r3, #-28]	; 0xffffffe4
 8008bf6:	f910 cc06 	ldrsb.w	ip, [r0, #-6]
 8008bfa:	ee07 ca90 	vmov	s15, ip
 8008bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c06:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8008c0a:	f910 cc05 	ldrsb.w	ip, [r0, #-5]
 8008c0e:	ee07 ca90 	vmov	s15, ip
 8008c12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c16:	42a0      	cmp	r0, r4
 8008c18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c1c:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8008c20:	d1d3      	bne.n	8008bca <st_dsp_arm_q7_to_float+0x16>
 8008c22:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8008c26:	4630      	mov	r0, r6
 8008c28:	f012 0203 	ands.w	r2, r2, #3
 8008c2c:	d023      	beq.n	8008c76 <st_dsp_arm_q7_to_float+0xc2>
 8008c2e:	f990 3000 	ldrsb.w	r3, [r0]
 8008c32:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8008c7c <st_dsp_arm_q7_to_float+0xc8>
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c3e:	2a01      	cmp	r2, #1
 8008c40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c44:	edc1 7a00 	vstr	s15, [r1]
 8008c48:	d015      	beq.n	8008c76 <st_dsp_arm_q7_to_float+0xc2>
 8008c4a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8008c4e:	ee07 3a90 	vmov	s15, r3
 8008c52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c56:	2a02      	cmp	r2, #2
 8008c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c5c:	edc1 7a01 	vstr	s15, [r1, #4]
 8008c60:	d009      	beq.n	8008c76 <st_dsp_arm_q7_to_float+0xc2>
 8008c62:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8008c66:	ee07 3a90 	vmov	s15, r3
 8008c6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c72:	edc1 7a02 	vstr	s15, [r1, #8]
 8008c76:	bc70      	pop	{r4, r5, r6}
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	3c000000 	.word	0x3c000000

08008c80 <align_factor_ch>:
 8008c80:	2900      	cmp	r1, #0
 8008c82:	d06d      	beq.n	8008d60 <align_factor_ch+0xe0>
 8008c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c88:	ed2d 8b04 	vpush	{d8-d9}
 8008c8c:	ee80 9a20 	vdiv.f32	s18, s0, s1
 8008c90:	461c      	mov	r4, r3
 8008c92:	eb03 0541 	add.w	r5, r3, r1, lsl #1
 8008c96:	4681      	mov	r9, r0
 8008c98:	4690      	mov	r8, r2
 8008c9a:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
 8008c9e:	2700      	movs	r7, #0
 8008ca0:	eddf 9a30 	vldr	s19, [pc, #192]	; 8008d64 <align_factor_ch+0xe4>
 8008ca4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8008ca8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008cac:	ecf9 7a01 	vldmia	r9!, {s15}
 8008cb0:	ee69 7a27 	vmul.f32	s15, s18, s15
 8008cb4:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cbc:	d52e      	bpl.n	8008d1c <align_factor_ch+0x9c>
 8008cbe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cc6:	dd29      	ble.n	8008d1c <align_factor_ch+0x9c>
 8008cc8:	eef4 7ac8 	vcmpe.f32	s15, s16
 8008ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cd0:	d544      	bpl.n	8008d5c <align_factor_ch+0xdc>
 8008cd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e004      	b.n	8008ce4 <align_factor_ch+0x64>
 8008cda:	2a20      	cmp	r2, #32
 8008cdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008ce0:	b213      	sxth	r3, r2
 8008ce2:	d038      	beq.n	8008d56 <align_factor_ch+0xd6>
 8008ce4:	eef4 7ac8 	vcmpe.f32	s15, s16
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cee:	b292      	uxth	r2, r2
 8008cf0:	d4f3      	bmi.n	8008cda <align_factor_ch+0x5a>
 8008cf2:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008cf6:	8023      	strh	r3, [r4, #0]
 8008cf8:	ee17 0a90 	vmov	r0, s15
 8008cfc:	f7f7 ffec 	bl	8000cd8 <__aeabi_f2lz>
 8008d00:	ebb1 7fe0 	cmp.w	r1, r0, asr #31
 8008d04:	bf18      	it	ne
 8008d06:	ea86 70e1 	eorne.w	r0, r6, r1, asr #31
 8008d0a:	3402      	adds	r4, #2
 8008d0c:	42a5      	cmp	r5, r4
 8008d0e:	f848 0b04 	str.w	r0, [r8], #4
 8008d12:	d1cb      	bne.n	8008cac <align_factor_ch+0x2c>
 8008d14:	ecbd 8b04 	vpop	{d8-d9}
 8008d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d1c:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d24:	dd1a      	ble.n	8008d5c <align_factor_ch+0xdc>
 8008d26:	ee67 7a88 	vmul.f32	s15, s15, s16
 8008d2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d2e:	e005      	b.n	8008d3c <align_factor_ch+0xbc>
 8008d30:	b213      	sxth	r3, r2
 8008d32:	f113 0f1f 	cmn.w	r3, #31
 8008d36:	ee67 7a88 	vmul.f32	s15, s15, s16
 8008d3a:	d007      	beq.n	8008d4c <align_factor_ch+0xcc>
 8008d3c:	eef4 7ae8 	vcmpe.f32	s15, s17
 8008d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d44:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8008d48:	dcf2      	bgt.n	8008d30 <align_factor_ch+0xb0>
 8008d4a:	e7d2      	b.n	8008cf2 <align_factor_ch+0x72>
 8008d4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008d50:	f06f 031d 	mvn.w	r3, #29
 8008d54:	e7cd      	b.n	8008cf2 <align_factor_ch+0x72>
 8008d56:	8027      	strh	r7, [r4, #0]
 8008d58:	2000      	movs	r0, #0
 8008d5a:	e7d6      	b.n	8008d0a <align_factor_ch+0x8a>
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	e7c8      	b.n	8008cf2 <align_factor_ch+0x72>
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	4f000000 	.word	0x4f000000

08008d68 <st_sssa8_ch_conv_dw_Wadapt>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	b08b      	sub	sp, #44	; 0x2c
 8008d6e:	468e      	mov	lr, r1
 8008d70:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008d72:	9007      	str	r0, [sp, #28]
 8008d74:	eb0e 048e 	add.w	r4, lr, lr, lsl #2
 8008d78:	ea5f 0b9e 	movs.w	fp, lr, lsr #2
 8008d7c:	4615      	mov	r5, r2
 8008d7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008d82:	eb01 0244 	add.w	r2, r1, r4, lsl #1
 8008d86:	d07f      	beq.n	8008e88 <st_sssa8_ch_conv_dw_Wadapt+0x120>
 8008d88:	4619      	mov	r1, r3
 8008d8a:	fb03 f305 	mul.w	r3, r3, r5
 8008d8e:	f3c3 064f 	ubfx	r6, r3, #1, #16
 8008d92:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8008d96:	4607      	mov	r7, r0
 8008d98:	1e74      	subs	r4, r6, #1
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	3004      	adds	r0, #4
 8008d9e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008da2:	b2a4      	uxth	r4, r4
 8008da4:	ea4f 094e 	mov.w	r9, lr, lsl #1
 8008da8:	fb15 f101 	smulbb	r1, r5, r1
 8008dac:	fb04 9409 	mla	r4, r4, r9, r9
 8008db0:	9301      	str	r3, [sp, #4]
 8008db2:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8008ed8 <st_sssa8_ch_conv_dw_Wadapt+0x170>
 8008db6:	f8cd b018 	str.w	fp, [sp, #24]
 8008dba:	f001 0301 	and.w	r3, r1, #1
 8008dbe:	9403      	str	r4, [sp, #12]
 8008dc0:	9302      	str	r3, [sp, #8]
 8008dc2:	46ba      	mov	sl, r7
 8008dc4:	46b3      	mov	fp, r6
 8008dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8008dc8:	4650      	mov	r0, sl
 8008dca:	f1bb 0f00 	cmp.w	fp, #0
 8008dce:	d02f      	beq.n	8008e30 <st_sssa8_ch_conv_dw_Wadapt+0xc8>
 8008dd0:	4659      	mov	r1, fp
 8008dd2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008dd4:	6804      	ldr	r4, [r0, #0]
 8008dd6:	f850 300e 	ldr.w	r3, [r0, lr]
 8008dda:	1d3a      	adds	r2, r7, #4
 8008ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dde:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008de0:	1d32      	adds	r2, r6, #4
 8008de2:	9209      	str	r2, [sp, #36]	; 0x24
 8008de4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008de6:	1d2a      	adds	r2, r5, #4
 8008de8:	9209      	str	r2, [sp, #36]	; 0x24
 8008dea:	b2a2      	uxth	r2, r4
 8008dec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008df0:	ea03 0308 	and.w	r3, r3, r8
 8008df4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8008df8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008dfa:	fa2f fc82 	sxtb16	ip, r2
 8008dfe:	3901      	subs	r1, #1
 8008e00:	f8c7 c000 	str.w	ip, [r7]
 8008e04:	ea4f 2232 	mov.w	r2, r2, ror #8
 8008e08:	b289      	uxth	r1, r1
 8008e0a:	fa2f f282 	sxtb16	r2, r2
 8008e0e:	6032      	str	r2, [r6, #0]
 8008e10:	1d22      	adds	r2, r4, #4
 8008e12:	fa2f f683 	sxtb16	r6, r3
 8008e16:	4448      	add	r0, r9
 8008e18:	ea4f 2333 	mov.w	r3, r3, ror #8
 8008e1c:	602e      	str	r6, [r5, #0]
 8008e1e:	fa2f f383 	sxtb16	r3, r3
 8008e22:	9209      	str	r2, [sp, #36]	; 0x24
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	2900      	cmp	r1, #0
 8008e28:	d1d3      	bne.n	8008dd2 <st_sssa8_ch_conv_dw_Wadapt+0x6a>
 8008e2a:	9b03      	ldr	r3, [sp, #12]
 8008e2c:	eb03 000a 	add.w	r0, r3, sl
 8008e30:	9b02      	ldr	r3, [sp, #8]
 8008e32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e34:	b1eb      	cbz	r3, 8008e72 <st_sssa8_ch_conv_dw_Wadapt+0x10a>
 8008e36:	6801      	ldr	r1, [r0, #0]
 8008e38:	ea01 0308 	and.w	r3, r1, r8
 8008e3c:	ea08 2401 	and.w	r4, r8, r1, lsl #8
 8008e40:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8008e44:	2000      	movs	r0, #0
 8008e46:	b289      	uxth	r1, r1
 8008e48:	4321      	orrs	r1, r4
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	fa2f f181 	sxtb16	r1, r1
 8008e50:	ea4f 4333 	mov.w	r3, r3, ror #16
 8008e54:	f361 040f 	bfi	r4, r1, #0, #16
 8008e58:	fa2f f383 	sxtb16	r3, r3
 8008e5c:	0c09      	lsrs	r1, r1, #16
 8008e5e:	f363 000f 	bfi	r0, r3, #0, #16
 8008e62:	0c1b      	lsrs	r3, r3, #16
 8008e64:	f363 401f 	bfi	r0, r3, #16, #16
 8008e68:	f361 441f 	bfi	r4, r1, #16, #16
 8008e6c:	6050      	str	r0, [r2, #4]
 8008e6e:	6014      	str	r4, [r2, #0]
 8008e70:	3208      	adds	r2, #8
 8008e72:	9b01      	ldr	r3, [sp, #4]
 8008e74:	f10a 0a04 	add.w	sl, sl, #4
 8008e78:	4553      	cmp	r3, sl
 8008e7a:	d1a4      	bne.n	8008dc6 <st_sssa8_ch_conv_dw_Wadapt+0x5e>
 8008e7c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8008e80:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8008e84:	fa1f fb8b 	uxth.w	fp, fp
 8008e88:	f01e 0603 	ands.w	r6, lr, #3
 8008e8c:	d021      	beq.n	8008ed2 <st_sssa8_ch_conv_dw_Wadapt+0x16a>
 8008e8e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8008e92:	fb13 f301 	smulbb	r3, r3, r1
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	b1db      	cbz	r3, 8008ed2 <st_sssa8_ch_conv_dw_Wadapt+0x16a>
 8008e9a:	3b01      	subs	r3, #1
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	1c5f      	adds	r7, r3, #1
 8008ea0:	445e      	add	r6, fp
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008ea8:	b2b6      	uxth	r6, r6
 8008eaa:	007f      	lsls	r7, r7, #1
 8008eac:	1c9d      	adds	r5, r3, #2
 8008eae:	f10b 0301 	add.w	r3, fp, #1
 8008eb2:	eb0c 010b 	add.w	r1, ip, fp
 8008eb6:	1954      	adds	r4, r2, r5
 8008eb8:	fa1f fb83 	uxth.w	fp, r3
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	f991 0000 	ldrsb.w	r0, [r1]
 8008ec2:	f823 0b02 	strh.w	r0, [r3], #2
 8008ec6:	42a3      	cmp	r3, r4
 8008ec8:	4471      	add	r1, lr
 8008eca:	d1f8      	bne.n	8008ebe <st_sssa8_ch_conv_dw_Wadapt+0x156>
 8008ecc:	45b3      	cmp	fp, r6
 8008ece:	443a      	add	r2, r7
 8008ed0:	d1ed      	bne.n	8008eae <st_sssa8_ch_conv_dw_Wadapt+0x146>
 8008ed2:	b00b      	add	sp, #44	; 0x2c
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	ffff0000 	.word	0xffff0000

08008edc <st_sssa8_ch_convolve_dw>:
 8008edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee0:	b0dd      	sub	sp, #372	; 0x174
 8008ee2:	e9cd 210c 	strd	r2, r1, [sp, #48]	; 0x30
 8008ee6:	f8bd 51a4 	ldrh.w	r5, [sp, #420]	; 0x1a4
 8008eea:	9538      	str	r5, [sp, #224]	; 0xe0
 8008eec:	f8bd 51a8 	ldrh.w	r5, [sp, #424]	; 0x1a8
 8008ef0:	9531      	str	r5, [sp, #196]	; 0xc4
 8008ef2:	f8bd 51ac 	ldrh.w	r5, [sp, #428]	; 0x1ac
 8008ef6:	9539      	str	r5, [sp, #228]	; 0xe4
 8008ef8:	f8bd 51b0 	ldrh.w	r5, [sp, #432]	; 0x1b0
 8008efc:	9521      	str	r5, [sp, #132]	; 0x84
 8008efe:	f8bd 51b4 	ldrh.w	r5, [sp, #436]	; 0x1b4
 8008f02:	f8bd 419c 	ldrh.w	r4, [sp, #412]	; 0x19c
 8008f06:	9537      	str	r5, [sp, #220]	; 0xdc
 8008f08:	f99d 51c4 	ldrsb.w	r5, [sp, #452]	; 0x1c4
 8008f0c:	f8bd 71a0 	ldrh.w	r7, [sp, #416]	; 0x1a0
 8008f10:	9e38      	ldr	r6, [sp, #224]	; 0xe0
 8008f12:	9508      	str	r5, [sp, #32]
 8008f14:	f8bd 51d0 	ldrh.w	r5, [sp, #464]	; 0x1d0
 8008f18:	9524      	str	r5, [sp, #144]	; 0x90
 8008f1a:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8008f1e:	f8bd 51d4 	ldrh.w	r5, [sp, #468]	; 0x1d4
 8008f22:	9403      	str	r4, [sp, #12]
 8008f24:	fb06 f907 	mul.w	r9, r6, r7
 8008f28:	953a      	str	r5, [sp, #232]	; 0xe8
 8008f2a:	931d      	str	r3, [sp, #116]	; 0x74
 8008f2c:	4625      	mov	r5, r4
 8008f2e:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 8008f30:	9733      	str	r7, [sp, #204]	; 0xcc
 8008f32:	4444      	add	r4, r8
 8008f34:	fb05 4409 	mla	r4, r5, r9, r4
 8008f38:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8008f3c:	006f      	lsls	r7, r5, #1
 8008f3e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008f40:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 8008f42:	f99d c1c8 	ldrsb.w	ip, [sp, #456]	; 0x1c8
 8008f46:	9713      	str	r7, [sp, #76]	; 0x4c
 8008f48:	462e      	mov	r6, r5
 8008f4a:	197d      	adds	r5, r7, r5
 8008f4c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8008f50:	901f      	str	r0, [sp, #124]	; 0x7c
 8008f52:	9325      	str	r3, [sp, #148]	; 0x94
 8008f54:	b1ae      	cbz	r6, 8008f82 <st_sssa8_ch_convolve_dw+0xa6>
 8008f56:	9970      	ldr	r1, [sp, #448]	; 0x1c0
 8008f58:	1f1c      	subs	r4, r3, #4
 8008f5a:	19ce      	adds	r6, r1, r7
 8008f5c:	2501      	movs	r5, #1
 8008f5e:	4667      	mov	r7, ip
 8008f60:	f931 3b02 	ldrsh.w	r3, [r1], #2
 8008f64:	1e5a      	subs	r2, r3, #1
 8008f66:	b292      	uxth	r2, r2
 8008f68:	fa05 f003 	lsl.w	r0, r5, r3
 8008f6c:	2a14      	cmp	r2, #20
 8008f6e:	fa07 f303 	lsl.w	r3, r7, r3
 8008f72:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 8008f76:	f200 850a 	bhi.w	800998e <st_sssa8_ch_convolve_dw+0xab2>
 8008f7a:	428e      	cmp	r6, r1
 8008f7c:	f844 3f04 	str.w	r3, [r4, #4]!
 8008f80:	d1ee      	bne.n	8008f60 <st_sssa8_ch_convolve_dw+0x84>
 8008f82:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8008f84:	943e      	str	r4, [sp, #248]	; 0xf8
 8008f86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008f88:	943d      	str	r4, [sp, #244]	; 0xf4
 8008f8a:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8008f8c:	9442      	str	r4, [sp, #264]	; 0x108
 8008f8e:	9c3a      	ldr	r4, [sp, #232]	; 0xe8
 8008f90:	9441      	str	r4, [sp, #260]	; 0x104
 8008f92:	9c33      	ldr	r4, [sp, #204]	; 0xcc
 8008f94:	9446      	str	r4, [sp, #280]	; 0x118
 8008f96:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8008f98:	9445      	str	r4, [sp, #276]	; 0x114
 8008f9a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8008f9c:	9454      	str	r4, [sp, #336]	; 0x150
 8008f9e:	9c37      	ldr	r4, [sp, #220]	; 0xdc
 8008fa0:	9455      	str	r4, [sp, #340]	; 0x154
 8008fa2:	ab44      	add	r3, sp, #272	; 0x110
 8008fa4:	9c31      	ldr	r4, [sp, #196]	; 0xc4
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	aa3c      	add	r2, sp, #240	; 0xf0
 8008faa:	ab40      	add	r3, sp, #256	; 0x100
 8008fac:	9456      	str	r4, [sp, #344]	; 0x158
 8008fae:	a848      	add	r0, sp, #288	; 0x120
 8008fb0:	9c39      	ldr	r4, [sp, #228]	; 0xe4
 8008fb2:	9457      	str	r4, [sp, #348]	; 0x15c
 8008fb4:	a952      	add	r1, sp, #328	; 0x148
 8008fb6:	f002 fa53 	bl	800b460 <ai_padding_opt_init>
 8008fba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008fbc:	9b03      	ldr	r3, [sp, #12]
 8008fbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fc2:	079a      	lsls	r2, r3, #30
 8008fc4:	9319      	str	r3, [sp, #100]	; 0x64
 8008fc6:	bf02      	ittt	eq
 8008fc8:	109c      	asreq	r4, r3, #2
 8008fca:	2304      	moveq	r3, #4
 8008fcc:	9319      	streq	r3, [sp, #100]	; 0x64
 8008fce:	9b08      	ldr	r3, [sp, #32]
 8008fd0:	f1c3 0300 	rsb	r3, r3, #0
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	ea42 4a03 	orr.w	sl, r2, r3, lsl #16
 8008fda:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8008fdc:	bf18      	it	ne
 8008fde:	2401      	movne	r4, #1
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 824d 	beq.w	8009480 <st_sssa8_ch_convolve_dw+0x5a4>
 8008fe6:	9803      	ldr	r0, [sp, #12]
 8008fe8:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8008fea:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8008fec:	9f6e      	ldr	r7, [sp, #440]	; 0x1b8
 8008fee:	0882      	lsrs	r2, r0, #2
 8008ff0:	f3c9 064f 	ubfx	r6, r9, #1, #16
 8008ff4:	fb13 f301 	smulbb	r3, r3, r1
 8008ff8:	960f      	str	r6, [sp, #60]	; 0x3c
 8008ffa:	9223      	str	r2, [sp, #140]	; 0x8c
 8008ffc:	1e55      	subs	r5, r2, #1
 8008ffe:	1e72      	subs	r2, r6, #1
 8009000:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8009002:	b29b      	uxth	r3, r3
 8009004:	4446      	add	r6, r8
 8009006:	1e59      	subs	r1, r3, #1
 8009008:	eba0 0808 	sub.w	r8, r0, r8
 800900c:	f107 0020 	add.w	r0, r7, #32
 8009010:	9f39      	ldr	r7, [sp, #228]	; 0xe4
 8009012:	9627      	str	r6, [sp, #156]	; 0x9c
 8009014:	b289      	uxth	r1, r1
 8009016:	f101 0e01 	add.w	lr, r1, #1
 800901a:	f1c7 0c00 	rsb	ip, r7, #0
 800901e:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8009020:	931a      	str	r3, [sp, #104]	; 0x68
 8009022:	2700      	movs	r7, #0
 8009024:	9736      	str	r7, [sp, #216]	; 0xd8
 8009026:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8009028:	eb01 0148 	add.w	r1, r1, r8, lsl #1
 800902c:	9128      	str	r1, [sp, #160]	; 0xa0
 800902e:	4639      	mov	r1, r7
 8009030:	b2ad      	uxth	r5, r5
 8009032:	fb01 f104 	mul.w	r1, r1, r4
 8009036:	9135      	str	r1, [sp, #212]	; 0xd4
 8009038:	eb00 1105 	add.w	r1, r0, r5, lsl #4
 800903c:	1c6b      	adds	r3, r5, #1
 800903e:	9111      	str	r1, [sp, #68]	; 0x44
 8009040:	9976      	ldr	r1, [sp, #472]	; 0x1d8
 8009042:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8009044:	b296      	uxth	r6, r2
 8009046:	011a      	lsls	r2, r3, #4
 8009048:	4411      	add	r1, r2
 800904a:	912f      	str	r1, [sp, #188]	; 0xbc
 800904c:	18a9      	adds	r1, r5, r2
 800904e:	912c      	str	r1, [sp, #176]	; 0xb0
 8009050:	996e      	ldr	r1, [sp, #440]	; 0x1b8
 8009052:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 8009054:	4411      	add	r1, r2
 8009056:	912b      	str	r1, [sp, #172]	; 0xac
 8009058:	ea4f 014e 	mov.w	r1, lr, lsl #1
 800905c:	911c      	str	r1, [sp, #112]	; 0x70
 800905e:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8009062:	912e      	str	r1, [sp, #184]	; 0xb8
 8009064:	0099      	lsls	r1, r3, #2
 8009066:	f106 0801 	add.w	r8, r6, #1
 800906a:	912a      	str	r1, [sp, #168]	; 0xa8
 800906c:	0131      	lsls	r1, r6, #4
 800906e:	9129      	str	r1, [sp, #164]	; 0xa4
 8009070:	ea4f 1108 	mov.w	r1, r8, lsl #4
 8009074:	9115      	str	r1, [sp, #84]	; 0x54
 8009076:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009078:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800907a:	fb08 f101 	mul.w	r1, r8, r1
 800907e:	9114      	str	r1, [sp, #80]	; 0x50
 8009080:	f003 0101 	and.w	r1, r3, #1
 8009084:	9110      	str	r1, [sp, #64]	; 0x40
 8009086:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009088:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 800908a:	f8cd a0c0 	str.w	sl, [sp, #192]	; 0xc0
 800908e:	0092      	lsls	r2, r2, #2
 8009090:	922d      	str	r2, [sp, #180]	; 0xb4
 8009092:	fa1f f28c 	uxth.w	r2, ip
 8009096:	9234      	str	r2, [sp, #208]	; 0xd0
 8009098:	fb07 f203 	mul.w	r2, r7, r3
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	923b      	str	r2, [sp, #236]	; 0xec
 80090a0:	f003 0203 	and.w	r2, r3, #3
 80090a4:	2400      	movs	r4, #0
 80090a6:	9220      	str	r2, [sp, #128]	; 0x80
 80090a8:	4698      	mov	r8, r3
 80090aa:	a848      	add	r0, sp, #288	; 0x120
 80090ac:	f002 fa32 	bl	800b514 <ai_padding_opt_phase1>
 80090b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f000 81d6 	beq.w	8009464 <st_sssa8_ch_convolve_dw+0x588>
 80090b8:	e9dd 3238 	ldrd	r3, r2, [sp, #224]	; 0xe0
 80090bc:	1a9a      	subs	r2, r3, r2
 80090be:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80090c0:	9837      	ldr	r0, [sp, #220]	; 0xdc
 80090c2:	425b      	negs	r3, r3
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	931b      	str	r3, [sp, #108]	; 0x6c
 80090c8:	f9bd 30d0 	ldrsh.w	r3, [sp, #208]	; 0xd0
 80090cc:	9326      	str	r3, [sp, #152]	; 0x98
 80090ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090d0:	2100      	movs	r1, #0
 80090d2:	fb04 2200 	mla	r2, r4, r0, r2
 80090d6:	3b01      	subs	r3, #1
 80090d8:	9216      	str	r2, [sp, #88]	; 0x58
 80090da:	911e      	str	r1, [sp, #120]	; 0x78
 80090dc:	460a      	mov	r2, r1
 80090de:	9332      	str	r3, [sp, #200]	; 0xc8
 80090e0:	9b48      	ldr	r3, [sp, #288]	; 0x120
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 8307 	beq.w	80096f6 <st_sssa8_ch_convolve_dw+0x81a>
 80090e8:	3b01      	subs	r3, #1
 80090ea:	9348      	str	r3, [sp, #288]	; 0x120
 80090ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80090ee:	2101      	movs	r1, #1
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 80090f6:	f000 834b 	beq.w	8009790 <st_sssa8_ch_convolve_dw+0x8b4>
 80090fa:	2b04      	cmp	r3, #4
 80090fc:	f000 83d1 	beq.w	80098a2 <st_sssa8_ch_convolve_dw+0x9c6>
 8009100:	2b02      	cmp	r3, #2
 8009102:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009104:	4618      	mov	r0, r3
 8009106:	f000 837d 	beq.w	8009804 <st_sssa8_ch_convolve_dw+0x928>
 800910a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800910c:	4298      	cmp	r0, r3
 800910e:	dd41      	ble.n	8009194 <st_sssa8_ch_convolve_dw+0x2b8>
 8009110:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009112:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8009114:	fb02 0201 	mla	r2, r2, r1, r0
 8009118:	9931      	ldr	r1, [sp, #196]	; 0xc4
 800911a:	1a52      	subs	r2, r2, r1
 800911c:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 8009120:	9205      	str	r2, [sp, #20]
 8009122:	4291      	cmp	r1, r2
 8009124:	910a      	str	r1, [sp, #40]	; 0x28
 8009126:	da35      	bge.n	8009194 <st_sssa8_ch_convolve_dw+0x2b8>
 8009128:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800912c:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 8009130:	4647      	mov	r7, r8
 8009132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009134:	9a04      	ldr	r2, [sp, #16]
 8009136:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009138:	fb03 f302 	mul.w	r3, r3, r2
 800913c:	9307      	str	r3, [sp, #28]
 800913e:	f1c9 0800 	rsb	r8, r9, #0
 8009142:	4682      	mov	sl, r0
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	db0a      	blt.n	8009160 <st_sssa8_ch_convolve_dw+0x284>
 800914a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800914c:	9a04      	ldr	r2, [sp, #16]
 800914e:	4293      	cmp	r3, r2
 8009150:	dd06      	ble.n	8009160 <st_sssa8_ch_convolve_dw+0x284>
 8009152:	f1ba 0f00 	cmp.w	sl, #0
 8009156:	db03      	blt.n	8009160 <st_sssa8_ch_convolve_dw+0x284>
 8009158:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800915a:	4283      	cmp	r3, r0
 800915c:	f300 822c 	bgt.w	80095b8 <st_sssa8_ch_convolve_dw+0x6dc>
 8009160:	463a      	mov	r2, r7
 8009162:	4649      	mov	r1, r9
 8009164:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8009168:	f002 f9f0 	bl	800b54c <st_uint8_fill>
 800916c:	f10a 0a01 	add.w	sl, sl, #1
 8009170:	9b05      	ldr	r3, [sp, #20]
 8009172:	fa0f fa8a 	sxth.w	sl, sl
 8009176:	459a      	cmp	sl, r3
 8009178:	44b9      	add	r9, r7
 800917a:	eba8 0807 	sub.w	r8, r8, r7
 800917e:	4650      	mov	r0, sl
 8009180:	dbe0      	blt.n	8009144 <st_sssa8_ch_convolve_dw+0x268>
 8009182:	9b03      	ldr	r3, [sp, #12]
 8009184:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009186:	3301      	adds	r3, #1
 8009188:	b21b      	sxth	r3, r3
 800918a:	4293      	cmp	r3, r2
 800918c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8009190:	dbcf      	blt.n	8009132 <st_sssa8_ch_convolve_dw+0x256>
 8009192:	46b8      	mov	r8, r7
 8009194:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 82e4 	beq.w	8009764 <st_sssa8_ch_convolve_dw+0x888>
 800919c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800919e:	9b6e      	ldr	r3, [sp, #440]	; 0x1b8
 80091a0:	f8dd c09c 	ldr.w	ip, [sp, #156]	; 0x9c
 80091a4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80091a8:	3310      	adds	r3, #16
 80091aa:	f102 0e10 	add.w	lr, r2, #16
 80091ae:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 80091b0:	9307      	str	r3, [sp, #28]
 80091b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80091b4:	f8dd b0c0 	ldr.w	fp, [sp, #192]	; 0xc0
 80091b8:	3204      	adds	r2, #4
 80091ba:	3308      	adds	r3, #8
 80091bc:	9204      	str	r2, [sp, #16]
 80091be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80091c0:	9305      	str	r3, [sp, #20]
 80091c2:	9206      	str	r2, [sp, #24]
 80091c4:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 80091c6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80091c8:	3310      	adds	r3, #16
 80091ca:	3220      	adds	r2, #32
 80091cc:	9212      	str	r2, [sp, #72]	; 0x48
 80091ce:	4698      	mov	r8, r3
 80091d0:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80091d4:	9b07      	ldr	r3, [sp, #28]
 80091d6:	9218      	str	r2, [sp, #96]	; 0x60
 80091d8:	4666      	mov	r6, ip
 80091da:	e953 c504 	ldrd	ip, r5, [r3, #-16]
 80091de:	f853 4c08 	ldr.w	r4, [r3, #-8]
 80091e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80091e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091e8:	9906      	ldr	r1, [sp, #24]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d043      	beq.n	8009276 <st_sssa8_ch_convolve_dw+0x39a>
 80091ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091f0:	9609      	str	r6, [sp, #36]	; 0x24
 80091f2:	18f3      	adds	r3, r6, r3
 80091f4:	e9cd e80a 	strd	lr, r8, [sp, #40]	; 0x28
 80091f8:	469e      	mov	lr, r3
 80091fa:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 80091fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009200:	9303      	str	r3, [sp, #12]
 8009202:	f106 0210 	add.w	r2, r6, #16
 8009206:	465f      	mov	r7, fp
 8009208:	9b03      	ldr	r3, [sp, #12]
 800920a:	f8d1 a000 	ldr.w	sl, [r1]
 800920e:	f851 b003 	ldr.w	fp, [r1, r3]
 8009212:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8009216:	ea4f 431b 	mov.w	r3, fp, lsr #16
 800921a:	fa1f f98a 	uxth.w	r9, sl
 800921e:	041b      	lsls	r3, r3, #16
 8009220:	ea49 490b 	orr.w	r9, r9, fp, lsl #16
 8009224:	ea43 431a 	orr.w	r3, r3, sl, lsr #16
 8009228:	fa27 fa89 	sxtab16	sl, r7, r9
 800922c:	fb26 cc0a 	smlad	ip, r6, sl, ip
 8009230:	ea4f 2939 	mov.w	r9, r9, ror #8
 8009234:	f852 6c0c 	ldr.w	r6, [r2, #-12]
 8009238:	fa27 f989 	sxtab16	r9, r7, r9
 800923c:	fb26 5509 	smlad	r5, r6, r9, r5
 8009240:	fa27 f983 	sxtab16	r9, r7, r3
 8009244:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8009248:	fb26 4409 	smlad	r4, r6, r9, r4
 800924c:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009250:	f852 6c04 	ldr.w	r6, [r2, #-4]
 8009254:	fa27 f383 	sxtab16	r3, r7, r3
 8009258:	fb26 0003 	smlad	r0, r6, r3, r0
 800925c:	3210      	adds	r2, #16
 800925e:	4596      	cmp	lr, r2
 8009260:	4441      	add	r1, r8
 8009262:	d1d1      	bne.n	8009208 <st_sssa8_ch_convolve_dw+0x32c>
 8009264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009266:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009268:	9a06      	ldr	r2, [sp, #24]
 800926a:	441e      	add	r6, r3
 800926c:	e9dd e80a 	ldrd	lr, r8, [sp, #40]	; 0x28
 8009270:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009272:	46bb      	mov	fp, r7
 8009274:	1899      	adds	r1, r3, r2
 8009276:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009278:	b1d3      	cbz	r3, 80092b0 <st_sssa8_ch_convolve_dw+0x3d4>
 800927a:	680b      	ldr	r3, [r1, #0]
 800927c:	9f18      	ldr	r7, [sp, #96]	; 0x60
 800927e:	8831      	ldrh	r1, [r6, #0]
 8009280:	f8b6 a002 	ldrh.w	sl, [r6, #2]
 8009284:	f8b6 9004 	ldrh.w	r9, [r6, #4]
 8009288:	b25a      	sxtb	r2, r3
 800928a:	1bd2      	subs	r2, r2, r7
 800928c:	fb11 cc02 	smlabb	ip, r1, r2, ip
 8009290:	f343 2207 	sbfx	r2, r3, #8, #8
 8009294:	1bd2      	subs	r2, r2, r7
 8009296:	88f1      	ldrh	r1, [r6, #6]
 8009298:	fb1a 5502 	smlabb	r5, sl, r2, r5
 800929c:	f343 4207 	sbfx	r2, r3, #16, #8
 80092a0:	1bd2      	subs	r2, r2, r7
 80092a2:	ebc7 6323 	rsb	r3, r7, r3, asr #24
 80092a6:	fb19 4402 	smlabb	r4, r9, r2, r4
 80092aa:	fb11 0003 	smlabb	r0, r1, r3, r0
 80092ae:	3608      	adds	r6, #8
 80092b0:	9b05      	ldr	r3, [sp, #20]
 80092b2:	f858 9c10 	ldr.w	r9, [r8, #-16]
 80092b6:	f933 2c08 	ldrsh.w	r2, [r3, #-8]
 80092ba:	f85e 1c10 	ldr.w	r1, [lr, #-16]
 80092be:	2a15      	cmp	r2, #21
 80092c0:	f340 8102 	ble.w	80094c8 <st_sssa8_ch_convolve_dw+0x5ec>
 80092c4:	1e93      	subs	r3, r2, #2
 80092c6:	2701      	movs	r7, #1
 80092c8:	3a01      	subs	r2, #1
 80092ca:	fa07 f303 	lsl.w	r3, r7, r3
 80092ce:	fb5c 3c09 	smmla	ip, ip, r9, r3
 80092d2:	fa4c fc02 	asr.w	ip, ip, r2
 80092d6:	448c      	add	ip, r1
 80092d8:	f30c 0c07 	ssat	ip, #8, ip
 80092dc:	9b04      	ldr	r3, [sp, #16]
 80092de:	f803 cc04 	strb.w	ip, [r3, #-4]
 80092e2:	9b05      	ldr	r3, [sp, #20]
 80092e4:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 80092e8:	2915      	cmp	r1, #21
 80092ea:	f340 8100 	ble.w	80094ee <st_sssa8_ch_convolve_dw+0x612>
 80092ee:	1e8b      	subs	r3, r1, #2
 80092f0:	f85e 2c0c 	ldr.w	r2, [lr, #-12]
 80092f4:	2701      	movs	r7, #1
 80092f6:	3901      	subs	r1, #1
 80092f8:	fa07 f303 	lsl.w	r3, r7, r3
 80092fc:	f858 7c0c 	ldr.w	r7, [r8, #-12]
 8009300:	fb55 3307 	smmla	r3, r5, r7, r3
 8009304:	fa43 f101 	asr.w	r1, r3, r1
 8009308:	4411      	add	r1, r2
 800930a:	f301 0107 	ssat	r1, #8, r1
 800930e:	9b04      	ldr	r3, [sp, #16]
 8009310:	f803 1c03 	strb.w	r1, [r3, #-3]
 8009314:	9b05      	ldr	r3, [sp, #20]
 8009316:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 800931a:	2915      	cmp	r1, #21
 800931c:	f340 80c4 	ble.w	80094a8 <st_sssa8_ch_convolve_dw+0x5cc>
 8009320:	1e8d      	subs	r5, r1, #2
 8009322:	f85e 2c08 	ldr.w	r2, [lr, #-8]
 8009326:	f858 3c08 	ldr.w	r3, [r8, #-8]
 800932a:	2701      	movs	r7, #1
 800932c:	3901      	subs	r1, #1
 800932e:	fa07 f505 	lsl.w	r5, r7, r5
 8009332:	fb54 5503 	smmla	r5, r4, r3, r5
 8009336:	fa45 f101 	asr.w	r1, r5, r1
 800933a:	4411      	add	r1, r2
 800933c:	f301 0107 	ssat	r1, #8, r1
 8009340:	9b04      	ldr	r3, [sp, #16]
 8009342:	f803 1c02 	strb.w	r1, [r3, #-2]
 8009346:	9b05      	ldr	r3, [sp, #20]
 8009348:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 800934c:	2915      	cmp	r1, #21
 800934e:	f340 809b 	ble.w	8009488 <st_sssa8_ch_convolve_dw+0x5ac>
 8009352:	1e8c      	subs	r4, r1, #2
 8009354:	f85e 2c04 	ldr.w	r2, [lr, #-4]
 8009358:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800935c:	2501      	movs	r5, #1
 800935e:	3901      	subs	r1, #1
 8009360:	fa05 f404 	lsl.w	r4, r5, r4
 8009364:	fb50 4403 	smmla	r4, r0, r3, r4
 8009368:	fa44 f101 	asr.w	r1, r4, r1
 800936c:	4411      	add	r1, r2
 800936e:	f301 0107 	ssat	r1, #8, r1
 8009372:	9b04      	ldr	r3, [sp, #16]
 8009374:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009378:	9a05      	ldr	r2, [sp, #20]
 800937a:	9b07      	ldr	r3, [sp, #28]
 800937c:	3208      	adds	r2, #8
 800937e:	9205      	str	r2, [sp, #20]
 8009380:	9a04      	ldr	r2, [sp, #16]
 8009382:	3204      	adds	r2, #4
 8009384:	9204      	str	r2, [sp, #16]
 8009386:	9a06      	ldr	r2, [sp, #24]
 8009388:	3204      	adds	r2, #4
 800938a:	9206      	str	r2, [sp, #24]
 800938c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800938e:	3310      	adds	r3, #16
 8009390:	429a      	cmp	r2, r3
 8009392:	9307      	str	r3, [sp, #28]
 8009394:	f108 0810 	add.w	r8, r8, #16
 8009398:	f10e 0e10 	add.w	lr, lr, #16
 800939c:	f47f af1d 	bne.w	80091da <st_sssa8_ch_convolve_dw+0x2fe>
 80093a0:	9b73      	ldr	r3, [sp, #460]	; 0x1cc
 80093a2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 80093a4:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 80093a8:	4413      	add	r3, r2
 80093aa:	46b4      	mov	ip, r6
 80093ac:	e9dd ae2b 	ldrd	sl, lr, [sp, #172]	; 0xac
 80093b0:	e9dd 692d 	ldrd	r6, r9, [sp, #180]	; 0xb4
 80093b4:	9373      	str	r3, [sp, #460]	; 0x1cc
 80093b6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 80093b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093ba:	2a00      	cmp	r2, #0
 80093bc:	d045      	beq.n	800944a <st_sssa8_ch_convolve_dw+0x56e>
 80093be:	eb02 0b06 	add.w	fp, r2, r6
 80093c2:	1f1f      	subs	r7, r3, #4
 80093c4:	f9bd 5020 	ldrsh.w	r5, [sp, #32]
 80093c8:	fa1f f38b 	uxth.w	r3, fp
 80093cc:	f8dd b1cc 	ldr.w	fp, [sp, #460]	; 0x1cc
 80093d0:	9303      	str	r3, [sp, #12]
 80093d2:	f1a9 0902 	sub.w	r9, r9, #2
 80093d6:	f1ae 0e04 	sub.w	lr, lr, #4
 80093da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80093dc:	f85a 1b04 	ldr.w	r1, [sl], #4
 80093e0:	1c73      	adds	r3, r6, #1
 80093e2:	4432      	add	r2, r6
 80093e4:	b29e      	uxth	r6, r3
 80093e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80093e8:	b163      	cbz	r3, 8009404 <st_sssa8_ch_convolve_dw+0x528>
 80093ea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80093ec:	eb0c 0403 	add.w	r4, ip, r3
 80093f0:	f992 3000 	ldrsb.w	r3, [r2]
 80093f4:	f83c 0b02 	ldrh.w	r0, [ip], #2
 80093f8:	1b5b      	subs	r3, r3, r5
 80093fa:	45a4      	cmp	ip, r4
 80093fc:	4442      	add	r2, r8
 80093fe:	fb10 1103 	smlabb	r1, r0, r3, r1
 8009402:	d1f5      	bne.n	80093f0 <st_sssa8_ch_convolve_dw+0x514>
 8009404:	f939 2f02 	ldrsh.w	r2, [r9, #2]!
 8009408:	f857 4f04 	ldr.w	r4, [r7, #4]!
 800940c:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8009410:	2a15      	cmp	r2, #21
 8009412:	dd7c      	ble.n	800950e <st_sssa8_ch_convolve_dw+0x632>
 8009414:	1e93      	subs	r3, r2, #2
 8009416:	3a01      	subs	r2, #1
 8009418:	9204      	str	r2, [sp, #16]
 800941a:	2201      	movs	r2, #1
 800941c:	fa02 f303 	lsl.w	r3, r2, r3
 8009420:	fb51 3104 	smmla	r1, r1, r4, r3
 8009424:	9b04      	ldr	r3, [sp, #16]
 8009426:	4119      	asrs	r1, r3
 8009428:	4401      	add	r1, r0
 800942a:	f301 0107 	ssat	r1, #8, r1
 800942e:	f88b 1000 	strb.w	r1, [fp]
 8009432:	9b03      	ldr	r3, [sp, #12]
 8009434:	429e      	cmp	r6, r3
 8009436:	f10b 0b01 	add.w	fp, fp, #1
 800943a:	d1ce      	bne.n	80093da <st_sssa8_ch_convolve_dw+0x4fe>
 800943c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800943e:	9a73      	ldr	r2, [sp, #460]	; 0x1cc
 8009440:	3b01      	subs	r3, #1
 8009442:	b29b      	uxth	r3, r3
 8009444:	3301      	adds	r3, #1
 8009446:	441a      	add	r2, r3
 8009448:	9273      	str	r2, [sp, #460]	; 0x1cc
 800944a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800944c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800944e:	3301      	adds	r3, #1
 8009450:	b21a      	sxth	r2, r3
 8009452:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009454:	921e      	str	r2, [sp, #120]	; 0x78
 8009456:	440b      	add	r3, r1
 8009458:	b29b      	uxth	r3, r3
 800945a:	931b      	str	r3, [sp, #108]	; 0x6c
 800945c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800945e:	4293      	cmp	r3, r2
 8009460:	f73f ae3e 	bgt.w	80090e0 <st_sssa8_ch_convolve_dw+0x204>
 8009464:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 8009466:	9937      	ldr	r1, [sp, #220]	; 0xdc
 8009468:	3301      	adds	r3, #1
 800946a:	b21a      	sxth	r2, r3
 800946c:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800946e:	9236      	str	r2, [sp, #216]	; 0xd8
 8009470:	440b      	add	r3, r1
 8009472:	b29b      	uxth	r3, r3
 8009474:	9334      	str	r3, [sp, #208]	; 0xd0
 8009476:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 8009478:	4293      	cmp	r3, r2
 800947a:	4614      	mov	r4, r2
 800947c:	f73f ae15 	bgt.w	80090aa <st_sssa8_ch_convolve_dw+0x1ce>
 8009480:	2000      	movs	r0, #0
 8009482:	b05d      	add	sp, #372	; 0x174
 8009484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009488:	2900      	cmp	r1, #0
 800948a:	dd73      	ble.n	8009574 <st_sssa8_ch_convolve_dw+0x698>
 800948c:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8009490:	f85e 2c04 	ldr.w	r2, [lr, #-4]
 8009494:	0040      	lsls	r0, r0, #1
 8009496:	fb50 2003 	smmla	r0, r0, r3, r2
 800949a:	4108      	asrs	r0, r1
 800949c:	f300 0007 	ssat	r0, #8, r0
 80094a0:	9b04      	ldr	r3, [sp, #16]
 80094a2:	f803 0c01 	strb.w	r0, [r3, #-1]
 80094a6:	e767      	b.n	8009378 <st_sssa8_ch_convolve_dw+0x49c>
 80094a8:	2900      	cmp	r1, #0
 80094aa:	dd50      	ble.n	800954e <st_sssa8_ch_convolve_dw+0x672>
 80094ac:	f858 3c08 	ldr.w	r3, [r8, #-8]
 80094b0:	f85e 2c08 	ldr.w	r2, [lr, #-8]
 80094b4:	0064      	lsls	r4, r4, #1
 80094b6:	fb54 2403 	smmla	r4, r4, r3, r2
 80094ba:	410c      	asrs	r4, r1
 80094bc:	f304 0407 	ssat	r4, #8, r4
 80094c0:	9b04      	ldr	r3, [sp, #16]
 80094c2:	f803 4c02 	strb.w	r4, [r3, #-2]
 80094c6:	e73e      	b.n	8009346 <st_sssa8_ch_convolve_dw+0x46a>
 80094c8:	2a00      	cmp	r2, #0
 80094ca:	dd66      	ble.n	800959a <st_sssa8_ch_convolve_dw+0x6be>
 80094cc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80094d0:	fb5c 1c09 	smmla	ip, ip, r9, r1
 80094d4:	fa4c f202 	asr.w	r2, ip, r2
 80094d8:	f302 0207 	ssat	r2, #8, r2
 80094dc:	9b04      	ldr	r3, [sp, #16]
 80094de:	f803 2c04 	strb.w	r2, [r3, #-4]
 80094e2:	9b05      	ldr	r3, [sp, #20]
 80094e4:	f933 1c06 	ldrsh.w	r1, [r3, #-6]
 80094e8:	2915      	cmp	r1, #21
 80094ea:	f73f af00 	bgt.w	80092ee <st_sssa8_ch_convolve_dw+0x412>
 80094ee:	2900      	cmp	r1, #0
 80094f0:	dd1a      	ble.n	8009528 <st_sssa8_ch_convolve_dw+0x64c>
 80094f2:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 80094f6:	f85e 2c0c 	ldr.w	r2, [lr, #-12]
 80094fa:	006d      	lsls	r5, r5, #1
 80094fc:	fb55 2503 	smmla	r5, r5, r3, r2
 8009500:	410d      	asrs	r5, r1
 8009502:	f305 0507 	ssat	r5, #8, r5
 8009506:	9b04      	ldr	r3, [sp, #16]
 8009508:	f803 5c03 	strb.w	r5, [r3, #-3]
 800950c:	e702      	b.n	8009314 <st_sssa8_ch_convolve_dw+0x438>
 800950e:	2a00      	cmp	r2, #0
 8009510:	f340 80e3 	ble.w	80096da <st_sssa8_ch_convolve_dw+0x7fe>
 8009514:	0049      	lsls	r1, r1, #1
 8009516:	fb51 0104 	smmla	r1, r1, r4, r0
 800951a:	fa41 f202 	asr.w	r2, r1, r2
 800951e:	f302 0207 	ssat	r2, #8, r2
 8009522:	f88b 2000 	strb.w	r2, [fp]
 8009526:	e784      	b.n	8009432 <st_sssa8_ch_convolve_dw+0x556>
 8009528:	f1c1 0101 	rsb	r1, r1, #1
 800952c:	fa05 f201 	lsl.w	r2, r5, r1
 8009530:	f302 021f 	ssat	r2, #32, r2
 8009534:	f858 3c0c 	ldr.w	r3, [r8, #-12]
 8009538:	fb52 f213 	smmulr	r2, r2, r3
 800953c:	f85e 3c0c 	ldr.w	r3, [lr, #-12]
 8009540:	4413      	add	r3, r2
 8009542:	f303 0307 	ssat	r3, #8, r3
 8009546:	9a04      	ldr	r2, [sp, #16]
 8009548:	f802 3c03 	strb.w	r3, [r2, #-3]
 800954c:	e6e2      	b.n	8009314 <st_sssa8_ch_convolve_dw+0x438>
 800954e:	f1c1 0101 	rsb	r1, r1, #1
 8009552:	fa04 f201 	lsl.w	r2, r4, r1
 8009556:	f302 021f 	ssat	r2, #32, r2
 800955a:	f858 3c08 	ldr.w	r3, [r8, #-8]
 800955e:	fb52 f213 	smmulr	r2, r2, r3
 8009562:	f85e 3c08 	ldr.w	r3, [lr, #-8]
 8009566:	4413      	add	r3, r2
 8009568:	f303 0307 	ssat	r3, #8, r3
 800956c:	9a04      	ldr	r2, [sp, #16]
 800956e:	f802 3c02 	strb.w	r3, [r2, #-2]
 8009572:	e6e8      	b.n	8009346 <st_sssa8_ch_convolve_dw+0x46a>
 8009574:	f1c1 0101 	rsb	r1, r1, #1
 8009578:	fa00 f201 	lsl.w	r2, r0, r1
 800957c:	f302 021f 	ssat	r2, #32, r2
 8009580:	f858 3c04 	ldr.w	r3, [r8, #-4]
 8009584:	fb52 f213 	smmulr	r2, r2, r3
 8009588:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 800958c:	4413      	add	r3, r2
 800958e:	f303 0307 	ssat	r3, #8, r3
 8009592:	9a04      	ldr	r2, [sp, #16]
 8009594:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009598:	e6ee      	b.n	8009378 <st_sssa8_ch_convolve_dw+0x49c>
 800959a:	f1c2 0201 	rsb	r2, r2, #1
 800959e:	fa0c f202 	lsl.w	r2, ip, r2
 80095a2:	f302 021f 	ssat	r2, #32, r2
 80095a6:	fb52 f219 	smmulr	r2, r2, r9
 80095aa:	440a      	add	r2, r1
 80095ac:	f302 0207 	ssat	r2, #8, r2
 80095b0:	9b04      	ldr	r3, [sp, #16]
 80095b2:	f803 2c04 	strb.w	r2, [r3, #-4]
 80095b6:	e694      	b.n	80092e2 <st_sssa8_ch_convolve_dw+0x406>
 80095b8:	9b07      	ldr	r3, [sp, #28]
 80095ba:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80095bc:	4418      	add	r0, r3
 80095be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095c0:	461a      	mov	r2, r3
 80095c2:	fb03 1000 	mla	r0, r3, r0, r1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f43f add0 	beq.w	800916c <st_sssa8_ch_convolve_dw+0x290>
 80095cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f43f adcc 	beq.w	800916c <st_sssa8_ch_convolve_dw+0x290>
 80095d4:	1e99      	subs	r1, r3, #2
 80095d6:	9106      	str	r1, [sp, #24]
 80095d8:	1ed9      	subs	r1, r3, #3
 80095da:	1884      	adds	r4, r0, r2
 80095dc:	9109      	str	r1, [sp, #36]	; 0x24
 80095de:	9722      	str	r7, [sp, #136]	; 0x88
 80095e0:	1f19      	subs	r1, r3, #4
 80095e2:	9f32      	ldr	r7, [sp, #200]	; 0xc8
 80095e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80095e6:	46c6      	mov	lr, r8
 80095e8:	464a      	mov	r2, r9
 80095ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80095ee:	469c      	mov	ip, r3
 80095f0:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80095f4:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 80095f8:	46a3      	mov	fp, r4
 80095fa:	eb02 060c 	add.w	r6, r2, ip
 80095fe:	f100 0801 	add.w	r8, r0, #1
 8009602:	42b0      	cmp	r0, r6
 8009604:	bf38      	it	cc
 8009606:	4542      	cmpcc	r2, r8
 8009608:	d35d      	bcc.n	80096c6 <st_sssa8_ch_convolve_dw+0x7ea>
 800960a:	f1bc 0f0b 	cmp.w	ip, #11
 800960e:	d95a      	bls.n	80096c6 <st_sssa8_ch_convolve_dw+0x7ea>
 8009610:	f00e 0303 	and.w	r3, lr, #3
 8009614:	1cd9      	adds	r1, r3, #3
 8009616:	42b9      	cmp	r1, r7
 8009618:	f200 80ad 	bhi.w	8009776 <st_sssa8_ch_convolve_dw+0x89a>
 800961c:	2b00      	cmp	r3, #0
 800961e:	d059      	beq.n	80096d4 <st_sssa8_ch_convolve_dw+0x7f8>
 8009620:	7801      	ldrb	r1, [r0, #0]
 8009622:	7011      	strb	r1, [r2, #0]
 8009624:	2b01      	cmp	r3, #1
 8009626:	f102 0a01 	add.w	sl, r2, #1
 800962a:	9d06      	ldr	r5, [sp, #24]
 800962c:	d00b      	beq.n	8009646 <st_sssa8_ch_convolve_dw+0x76a>
 800962e:	7801      	ldrb	r1, [r0, #0]
 8009630:	7051      	strb	r1, [r2, #1]
 8009632:	2b03      	cmp	r3, #3
 8009634:	f102 0a02 	add.w	sl, r2, #2
 8009638:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800963a:	d104      	bne.n	8009646 <st_sssa8_ch_convolve_dw+0x76a>
 800963c:	7801      	ldrb	r1, [r0, #0]
 800963e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009640:	7091      	strb	r1, [r2, #2]
 8009642:	f102 0a03 	add.w	sl, r2, #3
 8009646:	7801      	ldrb	r1, [r0, #0]
 8009648:	2400      	movs	r4, #0
 800964a:	f361 0407 	bfi	r4, r1, #0, #8
 800964e:	f361 240f 	bfi	r4, r1, #8, #8
 8009652:	ebac 0903 	sub.w	r9, ip, r3
 8009656:	f361 4417 	bfi	r4, r1, #16, #8
 800965a:	4413      	add	r3, r2
 800965c:	f361 641f 	bfi	r4, r1, #24, #8
 8009660:	ea4f 0299 	mov.w	r2, r9, lsr #2
 8009664:	2100      	movs	r1, #0
 8009666:	3101      	adds	r1, #1
 8009668:	4291      	cmp	r1, r2
 800966a:	f843 4b04 	str.w	r4, [r3], #4
 800966e:	d3fa      	bcc.n	8009666 <st_sssa8_ch_convolve_dw+0x78a>
 8009670:	f029 0103 	bic.w	r1, r9, #3
 8009674:	4549      	cmp	r1, r9
 8009676:	eb0a 0301 	add.w	r3, sl, r1
 800967a:	eba5 0501 	sub.w	r5, r5, r1
 800967e:	d014      	beq.n	80096aa <st_sssa8_ch_convolve_dw+0x7ce>
 8009680:	7802      	ldrb	r2, [r0, #0]
 8009682:	701a      	strb	r2, [r3, #0]
 8009684:	b18d      	cbz	r5, 80096aa <st_sssa8_ch_convolve_dw+0x7ce>
 8009686:	7802      	ldrb	r2, [r0, #0]
 8009688:	705a      	strb	r2, [r3, #1]
 800968a:	2d01      	cmp	r5, #1
 800968c:	d00d      	beq.n	80096aa <st_sssa8_ch_convolve_dw+0x7ce>
 800968e:	7802      	ldrb	r2, [r0, #0]
 8009690:	709a      	strb	r2, [r3, #2]
 8009692:	2d02      	cmp	r5, #2
 8009694:	d009      	beq.n	80096aa <st_sssa8_ch_convolve_dw+0x7ce>
 8009696:	7802      	ldrb	r2, [r0, #0]
 8009698:	70da      	strb	r2, [r3, #3]
 800969a:	2d03      	cmp	r5, #3
 800969c:	d005      	beq.n	80096aa <st_sssa8_ch_convolve_dw+0x7ce>
 800969e:	7802      	ldrb	r2, [r0, #0]
 80096a0:	711a      	strb	r2, [r3, #4]
 80096a2:	2d04      	cmp	r5, #4
 80096a4:	d001      	beq.n	80096aa <st_sssa8_ch_convolve_dw+0x7ce>
 80096a6:	7802      	ldrb	r2, [r0, #0]
 80096a8:	715a      	strb	r2, [r3, #5]
 80096aa:	45d8      	cmp	r8, fp
 80096ac:	4640      	mov	r0, r8
 80096ae:	4632      	mov	r2, r6
 80096b0:	ebae 0e0c 	sub.w	lr, lr, ip
 80096b4:	d1a1      	bne.n	80095fa <st_sssa8_ch_convolve_dw+0x71e>
 80096b6:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 80096ba:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 80096be:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80096c2:	9f22      	ldr	r7, [sp, #136]	; 0x88
 80096c4:	e552      	b.n	800916c <st_sssa8_ch_convolve_dw+0x290>
 80096c6:	4613      	mov	r3, r2
 80096c8:	7802      	ldrb	r2, [r0, #0]
 80096ca:	f803 2b01 	strb.w	r2, [r3], #1
 80096ce:	429e      	cmp	r6, r3
 80096d0:	d1fa      	bne.n	80096c8 <st_sssa8_ch_convolve_dw+0x7ec>
 80096d2:	e7ea      	b.n	80096aa <st_sssa8_ch_convolve_dw+0x7ce>
 80096d4:	463d      	mov	r5, r7
 80096d6:	4692      	mov	sl, r2
 80096d8:	e7b5      	b.n	8009646 <st_sssa8_ch_convolve_dw+0x76a>
 80096da:	f1c2 0201 	rsb	r2, r2, #1
 80096de:	fa01 f202 	lsl.w	r2, r1, r2
 80096e2:	f302 031f 	ssat	r3, #32, r2
 80096e6:	fb53 f314 	smmulr	r3, r3, r4
 80096ea:	4403      	add	r3, r0
 80096ec:	f303 0307 	ssat	r3, #8, r3
 80096f0:	f88b 3000 	strb.w	r3, [fp]
 80096f4:	e69d      	b.n	8009432 <st_sssa8_ch_convolve_dw+0x556>
 80096f6:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d03f      	beq.n	800977c <st_sssa8_ch_convolve_dw+0x8a0>
 80096fc:	3b01      	subs	r3, #1
 80096fe:	9349      	str	r3, [sp, #292]	; 0x124
 8009700:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009702:	f8bd 1144 	ldrh.w	r1, [sp, #324]	; 0x144
 8009706:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 800970a:	2b01      	cmp	r3, #1
 800970c:	f47f acf5 	bne.w	80090fa <st_sssa8_ch_convolve_dw+0x21e>
 8009710:	2901      	cmp	r1, #1
 8009712:	d03d      	beq.n	8009790 <st_sssa8_ch_convolve_dw+0x8b4>
 8009714:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8009716:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009718:	f9bd 506c 	ldrsh.w	r5, [sp, #108]	; 0x6c
 800971c:	4297      	cmp	r7, r2
 800971e:	f77f ad39 	ble.w	8009194 <st_sssa8_ch_convolve_dw+0x2b8>
 8009722:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009724:	f8cd 800c 	str.w	r8, [sp, #12]
 8009728:	f8dd 90ec 	ldr.w	r9, [sp, #236]	; 0xec
 800972c:	f8dd a07c 	ldr.w	sl, [sp, #124]	; 0x7c
 8009730:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8009734:	46b0      	mov	r8, r6
 8009736:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009738:	4614      	mov	r4, r2
 800973a:	4610      	mov	r0, r2
 800973c:	fb00 500b 	mla	r0, r0, fp, r5
 8009740:	3401      	adds	r4, #1
 8009742:	fb06 a000 	mla	r0, r6, r0, sl
 8009746:	4641      	mov	r1, r8
 8009748:	b224      	sxth	r4, r4
 800974a:	464a      	mov	r2, r9
 800974c:	f004 fa92 	bl	800dc74 <st_dsp_arm_copy_q7>
 8009750:	42bc      	cmp	r4, r7
 8009752:	44c8      	add	r8, r9
 8009754:	4620      	mov	r0, r4
 8009756:	dbf1      	blt.n	800973c <st_sssa8_ch_convolve_dw+0x860>
 8009758:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800975a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	f47f ad1c 	bne.w	800919c <st_sssa8_ch_convolve_dw+0x2c0>
 8009764:	461e      	mov	r6, r3
 8009766:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 800976a:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
 800976e:	9b76      	ldr	r3, [sp, #472]	; 0x1d8
 8009770:	e9dd c927 	ldrd	ip, r9, [sp, #156]	; 0x9c
 8009774:	e620      	b.n	80093b8 <st_sssa8_ch_convolve_dw+0x4dc>
 8009776:	4613      	mov	r3, r2
 8009778:	463d      	mov	r5, r7
 800977a:	e781      	b.n	8009680 <st_sssa8_ch_convolve_dw+0x7a4>
 800977c:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800977e:	3b01      	subs	r3, #1
 8009780:	934a      	str	r3, [sp, #296]	; 0x128
 8009782:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009784:	2101      	movs	r1, #1
 8009786:	2b01      	cmp	r3, #1
 8009788:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
 800978c:	f47f acb5 	bne.w	80090fa <st_sssa8_ch_convolve_dw+0x21e>
 8009790:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009792:	4618      	mov	r0, r3
 8009794:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009796:	4298      	cmp	r0, r3
 8009798:	f77f acfc 	ble.w	8009194 <st_sssa8_ch_convolve_dw+0x2b8>
 800979c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800979e:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80097a0:	f9bd a06c 	ldrsh.w	sl, [sp, #108]	; 0x6c
 80097a4:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80097a6:	f89d b020 	ldrb.w	fp, [sp, #32]
 80097aa:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
 80097ae:	fb02 0201 	mla	r2, r2, r1, r0
 80097b2:	9931      	ldr	r1, [sp, #196]	; 0xc4
 80097b4:	461e      	mov	r6, r3
 80097b6:	1a55      	subs	r5, r2, r1
 80097b8:	461a      	mov	r2, r3
 80097ba:	4555      	cmp	r5, sl
 80097bc:	dd1b      	ble.n	80097f6 <st_sssa8_ch_convolve_dw+0x91a>
 80097be:	fb09 f302 	mul.w	r3, r9, r2
 80097c2:	2e00      	cmp	r6, #0
 80097c4:	9303      	str	r3, [sp, #12]
 80097c6:	f2c0 80cb 	blt.w	8009960 <st_sssa8_ch_convolve_dw+0xa84>
 80097ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097cc:	4293      	cmp	r3, r2
 80097ce:	4657      	mov	r7, sl
 80097d0:	f340 80bb 	ble.w	800994a <st_sssa8_ch_convolve_dw+0xa6e>
 80097d4:	46d4      	mov	ip, sl
 80097d6:	2f00      	cmp	r7, #0
 80097d8:	4621      	mov	r1, r4
 80097da:	4642      	mov	r2, r8
 80097dc:	4658      	mov	r0, fp
 80097de:	db02      	blt.n	80097e6 <st_sssa8_ch_convolve_dw+0x90a>
 80097e0:	45e1      	cmp	r9, ip
 80097e2:	f300 80c9 	bgt.w	8009978 <st_sssa8_ch_convolve_dw+0xa9c>
 80097e6:	f001 feb1 	bl	800b54c <st_uint8_fill>
 80097ea:	3701      	adds	r7, #1
 80097ec:	b23f      	sxth	r7, r7
 80097ee:	42bd      	cmp	r5, r7
 80097f0:	4444      	add	r4, r8
 80097f2:	46bc      	mov	ip, r7
 80097f4:	dcef      	bgt.n	80097d6 <st_sssa8_ch_convolve_dw+0x8fa>
 80097f6:	3601      	adds	r6, #1
 80097f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80097fa:	b236      	sxth	r6, r6
 80097fc:	429e      	cmp	r6, r3
 80097fe:	4632      	mov	r2, r6
 8009800:	dbdb      	blt.n	80097ba <st_sssa8_ch_convolve_dw+0x8de>
 8009802:	e4c7      	b.n	8009194 <st_sssa8_ch_convolve_dw+0x2b8>
 8009804:	9926      	ldr	r1, [sp, #152]	; 0x98
 8009806:	4288      	cmp	r0, r1
 8009808:	f77f acc4 	ble.w	8009194 <st_sssa8_ch_convolve_dw+0x2b8>
 800980c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800980e:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8009810:	fb02 0203 	mla	r2, r2, r3, r0
 8009814:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8009816:	1ad5      	subs	r5, r2, r3
 8009818:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800981c:	9304      	str	r3, [sp, #16]
 800981e:	429d      	cmp	r5, r3
 8009820:	f77f acb8 	ble.w	8009194 <st_sssa8_ch_convolve_dw+0x2b8>
 8009824:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8009828:	f89d 9020 	ldrb.w	r9, [sp, #32]
 800982c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800982e:	460e      	mov	r6, r1
 8009830:	468b      	mov	fp, r1
 8009832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009834:	9a04      	ldr	r2, [sp, #16]
 8009836:	fb0b f303 	mul.w	r3, fp, r3
 800983a:	9303      	str	r3, [sp, #12]
 800983c:	4614      	mov	r4, r2
 800983e:	2e00      	cmp	r6, #0
 8009840:	db06      	blt.n	8009850 <st_sssa8_ch_convolve_dw+0x974>
 8009842:	455f      	cmp	r7, fp
 8009844:	dd04      	ble.n	8009850 <st_sssa8_ch_convolve_dw+0x974>
 8009846:	2c00      	cmp	r4, #0
 8009848:	db02      	blt.n	8009850 <st_sssa8_ch_convolve_dw+0x974>
 800984a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800984c:	4293      	cmp	r3, r2
 800984e:	dc11      	bgt.n	8009874 <st_sssa8_ch_convolve_dw+0x998>
 8009850:	4642      	mov	r2, r8
 8009852:	4651      	mov	r1, sl
 8009854:	4648      	mov	r0, r9
 8009856:	f001 fe79 	bl	800b54c <st_uint8_fill>
 800985a:	3401      	adds	r4, #1
 800985c:	b224      	sxth	r4, r4
 800985e:	42ac      	cmp	r4, r5
 8009860:	44c2      	add	sl, r8
 8009862:	4622      	mov	r2, r4
 8009864:	dbeb      	blt.n	800983e <st_sssa8_ch_convolve_dw+0x962>
 8009866:	3601      	adds	r6, #1
 8009868:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800986a:	b236      	sxth	r6, r6
 800986c:	429e      	cmp	r6, r3
 800986e:	46b3      	mov	fp, r6
 8009870:	dbdf      	blt.n	8009832 <st_sssa8_ch_convolve_dw+0x956>
 8009872:	e48f      	b.n	8009194 <st_sssa8_ch_convolve_dw+0x2b8>
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8009878:	441a      	add	r2, r3
 800987a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800987c:	fb03 0102 	mla	r1, r3, r2, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d0ea      	beq.n	800985a <st_sssa8_ch_convolve_dw+0x97e>
 8009884:	eb01 0c03 	add.w	ip, r1, r3
 8009888:	4650      	mov	r0, sl
 800988a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800988e:	021b      	lsls	r3, r3, #8
 8009890:	4561      	cmp	r1, ip
 8009892:	ea4f 2233 	mov.w	r2, r3, ror #8
 8009896:	fa33 f382 	uxtab16	r3, r3, r2
 800989a:	f820 3b02 	strh.w	r3, [r0], #2
 800989e:	d1f4      	bne.n	800988a <st_sssa8_ch_convolve_dw+0x9ae>
 80098a0:	e7db      	b.n	800985a <st_sssa8_ch_convolve_dw+0x97e>
 80098a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80098a4:	9926      	ldr	r1, [sp, #152]	; 0x98
 80098a6:	4618      	mov	r0, r3
 80098a8:	4288      	cmp	r0, r1
 80098aa:	f77f ac73 	ble.w	8009194 <st_sssa8_ch_convolve_dw+0x2b8>
 80098ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80098b0:	9833      	ldr	r0, [sp, #204]	; 0xcc
 80098b2:	fb02 0203 	mla	r2, r2, r3, r0
 80098b6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80098b8:	1ad5      	subs	r5, r2, r3
 80098ba:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 80098be:	9304      	str	r3, [sp, #16]
 80098c0:	429d      	cmp	r5, r3
 80098c2:	f77f ac67 	ble.w	8009194 <st_sssa8_ch_convolve_dw+0x2b8>
 80098c6:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80098ca:	f89d 9020 	ldrb.w	r9, [sp, #32]
 80098ce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80098d0:	460e      	mov	r6, r1
 80098d2:	468b      	mov	fp, r1
 80098d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098d6:	9a04      	ldr	r2, [sp, #16]
 80098d8:	fb03 f30b 	mul.w	r3, r3, fp
 80098dc:	9303      	str	r3, [sp, #12]
 80098de:	4614      	mov	r4, r2
 80098e0:	2e00      	cmp	r6, #0
 80098e2:	db06      	blt.n	80098f2 <st_sssa8_ch_convolve_dw+0xa16>
 80098e4:	455f      	cmp	r7, fp
 80098e6:	dd04      	ble.n	80098f2 <st_sssa8_ch_convolve_dw+0xa16>
 80098e8:	2c00      	cmp	r4, #0
 80098ea:	db02      	blt.n	80098f2 <st_sssa8_ch_convolve_dw+0xa16>
 80098ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098ee:	4293      	cmp	r3, r2
 80098f0:	dc11      	bgt.n	8009916 <st_sssa8_ch_convolve_dw+0xa3a>
 80098f2:	4642      	mov	r2, r8
 80098f4:	4651      	mov	r1, sl
 80098f6:	4648      	mov	r0, r9
 80098f8:	f001 fe28 	bl	800b54c <st_uint8_fill>
 80098fc:	3401      	adds	r4, #1
 80098fe:	b224      	sxth	r4, r4
 8009900:	42ac      	cmp	r4, r5
 8009902:	44c2      	add	sl, r8
 8009904:	4622      	mov	r2, r4
 8009906:	dbeb      	blt.n	80098e0 <st_sssa8_ch_convolve_dw+0xa04>
 8009908:	3601      	adds	r6, #1
 800990a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800990c:	b236      	sxth	r6, r6
 800990e:	429e      	cmp	r6, r3
 8009910:	46b3      	mov	fp, r6
 8009912:	dbdf      	blt.n	80098d4 <st_sssa8_ch_convolve_dw+0x9f8>
 8009914:	e43e      	b.n	8009194 <st_sssa8_ch_convolve_dw+0x2b8>
 8009916:	9b03      	ldr	r3, [sp, #12]
 8009918:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800991a:	441a      	add	r2, r3
 800991c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800991e:	fb03 1202 	mla	r2, r3, r2, r1
 8009922:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8009924:	2b00      	cmp	r3, #0
 8009926:	d0e9      	beq.n	80098fc <st_sssa8_ch_convolve_dw+0xa20>
 8009928:	18d0      	adds	r0, r2, r3
 800992a:	4651      	mov	r1, sl
 800992c:	f812 cb01 	ldrb.w	ip, [r2], #1
 8009930:	ea4f 630c 	mov.w	r3, ip, lsl #24
 8009934:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8009938:	4282      	cmp	r2, r0
 800993a:	ea4f 2c33 	mov.w	ip, r3, ror #8
 800993e:	fa33 f38c 	uxtab16	r3, r3, ip
 8009942:	f841 3b04 	str.w	r3, [r1], #4
 8009946:	d1f1      	bne.n	800992c <st_sssa8_ch_convolve_dw+0xa50>
 8009948:	e7d8      	b.n	80098fc <st_sssa8_ch_convolve_dw+0xa20>
 800994a:	3701      	adds	r7, #1
 800994c:	4621      	mov	r1, r4
 800994e:	4642      	mov	r2, r8
 8009950:	4658      	mov	r0, fp
 8009952:	b23f      	sxth	r7, r7
 8009954:	f001 fdfa 	bl	800b54c <st_uint8_fill>
 8009958:	42bd      	cmp	r5, r7
 800995a:	4444      	add	r4, r8
 800995c:	dcf5      	bgt.n	800994a <st_sssa8_ch_convolve_dw+0xa6e>
 800995e:	e74a      	b.n	80097f6 <st_sssa8_ch_convolve_dw+0x91a>
 8009960:	4657      	mov	r7, sl
 8009962:	3701      	adds	r7, #1
 8009964:	4621      	mov	r1, r4
 8009966:	4642      	mov	r2, r8
 8009968:	4658      	mov	r0, fp
 800996a:	b23f      	sxth	r7, r7
 800996c:	f001 fdee 	bl	800b54c <st_uint8_fill>
 8009970:	42af      	cmp	r7, r5
 8009972:	4444      	add	r4, r8
 8009974:	dbf5      	blt.n	8009962 <st_sssa8_ch_convolve_dw+0xa86>
 8009976:	e73e      	b.n	80097f6 <st_sssa8_ch_convolve_dw+0x91a>
 8009978:	9b03      	ldr	r3, [sp, #12]
 800997a:	991f      	ldr	r1, [sp, #124]	; 0x7c
 800997c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800997e:	eb03 000c 	add.w	r0, r3, ip
 8009982:	fb02 1000 	mla	r0, r2, r0, r1
 8009986:	4621      	mov	r1, r4
 8009988:	f004 f974 	bl	800dc74 <st_dsp_arm_copy_q7>
 800998c:	e72d      	b.n	80097ea <st_sssa8_ch_convolve_dw+0x90e>
 800998e:	428e      	cmp	r6, r1
 8009990:	f844 7f04 	str.w	r7, [r4, #4]!
 8009994:	f47f aae4 	bne.w	8008f60 <st_sssa8_ch_convolve_dw+0x84>
 8009998:	f7ff baf3 	b.w	8008f82 <st_sssa8_ch_convolve_dw+0xa6>

0800999c <st_sssa8_ch_convolve_rank1upd>:
 800999c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a0:	b083      	sub	sp, #12
 80099a2:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80099a6:	f99d e038 	ldrsb.w	lr, [sp, #56]	; 0x38
 80099aa:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80099ac:	fb13 f305 	smulbb	r3, r3, r5
 80099b0:	fb13 f600 	smulbb	r6, r3, r0
 80099b4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80099b8:	2a00      	cmp	r2, #0
 80099ba:	d06f      	beq.n	8009a9c <st_sssa8_ch_convolve_rank1upd+0x100>
 80099bc:	b2b6      	uxth	r6, r6
 80099be:	ea4f 0b96 	mov.w	fp, r6, lsr #2
 80099c2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 80099c6:	f1ab 0381 	sub.w	r3, fp, #129	; 0x81
 80099ca:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 80099ce:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80099d2:	ebc3 2043 	rsb	r0, r3, r3, lsl #9
 80099d6:	f1ab 0980 	sub.w	r9, fp, #128	; 0x80
 80099da:	3301      	adds	r3, #1
 80099dc:	f1aa 0a04 	sub.w	sl, sl, #4
 80099e0:	eb09 19c0 	add.w	r9, r9, r0, lsl #7
 80099e4:	ea4f 2c43 	mov.w	ip, r3, lsl #9
 80099e8:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80099ec:	44a2      	add	sl, r4
 80099ee:	f006 0603 	and.w	r6, r6, #3
 80099f2:	fa1f f989 	uxth.w	r9, r9
 80099f6:	9301      	str	r3, [sp, #4]
 80099f8:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 80099fc:	d951      	bls.n	8009aa2 <st_sssa8_ch_convolve_rank1upd+0x106>
 80099fe:	eb01 050c 	add.w	r5, r1, ip
 8009a02:	2400      	movs	r4, #0
 8009a04:	2300      	movs	r3, #0
 8009a06:	f501 7000 	add.w	r0, r1, #512	; 0x200
 8009a0a:	461f      	mov	r7, r3
 8009a0c:	f851 2b04 	ldr.w	r2, [r1], #4
 8009a10:	fa2f f382 	sxtb16	r3, r2
 8009a14:	4288      	cmp	r0, r1
 8009a16:	ea4f 2232 	mov.w	r2, r2, ror #8
 8009a1a:	fa97 f313 	qadd16	r3, r7, r3
 8009a1e:	fa2f f282 	sxtb16	r2, r2
 8009a22:	fa93 f712 	qadd16	r7, r3, r2
 8009a26:	d1f1      	bne.n	8009a0c <st_sssa8_ch_convolve_rank1upd+0x70>
 8009a28:	b23a      	sxth	r2, r7
 8009a2a:	eb02 4327 	add.w	r3, r2, r7, asr #16
 8009a2e:	4285      	cmp	r5, r0
 8009a30:	4601      	mov	r1, r0
 8009a32:	441c      	add	r4, r3
 8009a34:	d1e6      	bne.n	8009a04 <st_sssa8_ch_convolve_rank1upd+0x68>
 8009a36:	4648      	mov	r0, r9
 8009a38:	b1b8      	cbz	r0, 8009a6a <st_sssa8_ch_convolve_rank1upd+0xce>
 8009a3a:	3801      	subs	r0, #1
 8009a3c:	b280      	uxth	r0, r0
 8009a3e:	3001      	adds	r0, #1
 8009a40:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8009a44:	2200      	movs	r2, #0
 8009a46:	f851 3b04 	ldr.w	r3, [r1], #4
 8009a4a:	fa2f f583 	sxtb16	r5, r3
 8009a4e:	4281      	cmp	r1, r0
 8009a50:	ea4f 2333 	mov.w	r3, r3, ror #8
 8009a54:	fa92 f215 	qadd16	r2, r2, r5
 8009a58:	fa2f f383 	sxtb16	r3, r3
 8009a5c:	fa92 f213 	qadd16	r2, r2, r3
 8009a60:	d1f1      	bne.n	8009a46 <st_sssa8_ch_convolve_rank1upd+0xaa>
 8009a62:	b213      	sxth	r3, r2
 8009a64:	eb03 4222 	add.w	r2, r3, r2, asr #16
 8009a68:	4414      	add	r4, r2
 8009a6a:	b176      	cbz	r6, 8009a8a <st_sssa8_ch_convolve_rank1upd+0xee>
 8009a6c:	f991 3000 	ldrsb.w	r3, [r1]
 8009a70:	2e01      	cmp	r6, #1
 8009a72:	441c      	add	r4, r3
 8009a74:	d018      	beq.n	8009aa8 <st_sssa8_ch_convolve_rank1upd+0x10c>
 8009a76:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8009a7a:	2e02      	cmp	r6, #2
 8009a7c:	441c      	add	r4, r3
 8009a7e:	bf17      	itett	ne
 8009a80:	f991 3002 	ldrsbne.w	r3, [r1, #2]
 8009a84:	3102      	addeq	r1, #2
 8009a86:	3103      	addne	r1, #3
 8009a88:	18e4      	addne	r4, r4, r3
 8009a8a:	f858 3b04 	ldr.w	r3, [r8], #4
 8009a8e:	fb0e 3414 	mls	r4, lr, r4, r3
 8009a92:	9b01      	ldr	r3, [sp, #4]
 8009a94:	f84a 4f04 	str.w	r4, [sl, #4]!
 8009a98:	4543      	cmp	r3, r8
 8009a9a:	d1ad      	bne.n	80099f8 <st_sssa8_ch_convolve_rank1upd+0x5c>
 8009a9c:	b003      	add	sp, #12
 8009a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa2:	4658      	mov	r0, fp
 8009aa4:	2400      	movs	r4, #0
 8009aa6:	e7c7      	b.n	8009a38 <st_sssa8_ch_convolve_rank1upd+0x9c>
 8009aa8:	3101      	adds	r1, #1
 8009aaa:	e7ee      	b.n	8009a8a <st_sssa8_ch_convolve_rank1upd+0xee>

08009aac <st_sssa8_ch_convolve>:
 8009aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab0:	b0d1      	sub	sp, #324	; 0x144
 8009ab2:	469b      	mov	fp, r3
 8009ab4:	f8bd 5170 	ldrh.w	r5, [sp, #368]	; 0x170
 8009ab8:	9515      	str	r5, [sp, #84]	; 0x54
 8009aba:	f8bd 5178 	ldrh.w	r5, [sp, #376]	; 0x178
 8009abe:	9512      	str	r5, [sp, #72]	; 0x48
 8009ac0:	f8bd 517c 	ldrh.w	r5, [sp, #380]	; 0x17c
 8009ac4:	9523      	str	r5, [sp, #140]	; 0x8c
 8009ac6:	f8bd 5180 	ldrh.w	r5, [sp, #384]	; 0x180
 8009aca:	950a      	str	r5, [sp, #40]	; 0x28
 8009acc:	f8bd 5184 	ldrh.w	r5, [sp, #388]	; 0x184
 8009ad0:	f8bd 616c 	ldrh.w	r6, [sp, #364]	; 0x16c
 8009ad4:	9519      	str	r5, [sp, #100]	; 0x64
 8009ad6:	f8bd 51a0 	ldrh.w	r5, [sp, #416]	; 0x1a0
 8009ada:	9c6a      	ldr	r4, [sp, #424]	; 0x1a8
 8009adc:	950e      	str	r5, [sp, #56]	; 0x38
 8009ade:	f8bd 51a4 	ldrh.w	r5, [sp, #420]	; 0x1a4
 8009ae2:	f8bd 7174 	ldrh.w	r7, [sp, #372]	; 0x174
 8009ae6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ae8:	9617      	str	r6, [sp, #92]	; 0x5c
 8009aea:	951e      	str	r5, [sp, #120]	; 0x78
 8009aec:	4635      	mov	r5, r6
 8009aee:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 8009af2:	9722      	str	r7, [sp, #136]	; 0x88
 8009af4:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8009af8:	9411      	str	r4, [sp, #68]	; 0x44
 8009afa:	462e      	mov	r6, r5
 8009afc:	ebc5 7445 	rsb	r4, r5, r5, lsl #29
 8009b00:	461d      	mov	r5, r3
 8009b02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009b04:	9209      	str	r2, [sp, #36]	; 0x24
 8009b06:	fb15 f303 	smulbb	r3, r5, r3
 8009b0a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009b0c:	9f64      	ldr	r7, [sp, #400]	; 0x190
 8009b0e:	f99d a194 	ldrsb.w	sl, [sp, #404]	; 0x194
 8009b12:	f99d e198 	ldrsb.w	lr, [sp, #408]	; 0x198
 8009b16:	900c      	str	r0, [sp, #48]	; 0x30
 8009b18:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009b1c:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8009b20:	fb13 f30b 	smulbb	r3, r3, fp
 8009b24:	eb05 0208 	add.w	r2, r5, r8
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	951f      	str	r5, [sp, #124]	; 0x7c
 8009b2c:	9106      	str	r1, [sp, #24]
 8009b2e:	9221      	str	r2, [sp, #132]	; 0x84
 8009b30:	9318      	str	r3, [sp, #96]	; 0x60
 8009b32:	2e00      	cmp	r6, #0
 8009b34:	f000 853f 	beq.w	800a5b6 <st_sssa8_ch_convolve+0xb0a>
 8009b38:	ea4f 0c46 	mov.w	ip, r6, lsl #1
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	eb07 060c 	add.w	r6, r7, ip
 8009b42:	1f14      	subs	r4, r2, #4
 8009b44:	2701      	movs	r7, #1
 8009b46:	4675      	mov	r5, lr
 8009b48:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8009b4c:	1e5a      	subs	r2, r3, #1
 8009b4e:	b292      	uxth	r2, r2
 8009b50:	fa07 f103 	lsl.w	r1, r7, r3
 8009b54:	2a14      	cmp	r2, #20
 8009b56:	fa05 f303 	lsl.w	r3, r5, r3
 8009b5a:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8009b5e:	f200 8159 	bhi.w	8009e14 <st_sssa8_ch_convolve+0x368>
 8009b62:	4286      	cmp	r6, r0
 8009b64:	f844 3f04 	str.w	r3, [r4, #4]!
 8009b68:	d1ee      	bne.n	8009b48 <st_sssa8_ch_convolve+0x9c>
 8009b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b6c:	4637      	mov	r7, r6
 8009b6e:	eb03 0408 	add.w	r4, r3, r8
 8009b72:	eba7 050c 	sub.w	r5, r7, ip
 8009b76:	9520      	str	r5, [sp, #128]	; 0x80
 8009b78:	9d06      	ldr	r5, [sp, #24]
 8009b7a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009b7c:	9532      	str	r5, [sp, #200]	; 0xc8
 8009b7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009b80:	9531      	str	r5, [sp, #196]	; 0xc4
 8009b82:	9748      	str	r7, [sp, #288]	; 0x120
 8009b84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009b86:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8009b88:	9536      	str	r5, [sp, #216]	; 0xd8
 8009b8a:	ab38      	add	r3, sp, #224	; 0xe0
 8009b8c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8009b8e:	9749      	str	r7, [sp, #292]	; 0x124
 8009b90:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8009b92:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	aa30      	add	r2, sp, #192	; 0xc0
 8009b98:	ab34      	add	r3, sp, #208	; 0xd0
 8009b9a:	a946      	add	r1, sp, #280	; 0x118
 8009b9c:	9535      	str	r5, [sp, #212]	; 0xd4
 8009b9e:	974a      	str	r7, [sp, #296]	; 0x128
 8009ba0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8009ba2:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8009ba4:	953a      	str	r5, [sp, #232]	; 0xe8
 8009ba6:	a83c      	add	r0, sp, #240	; 0xf0
 8009ba8:	9639      	str	r6, [sp, #228]	; 0xe4
 8009baa:	974b      	str	r7, [sp, #300]	; 0x12c
 8009bac:	f001 fc58 	bl	800b460 <ai_padding_opt_init>
 8009bb0:	e9dd 3117 	ldrd	r3, r1, [sp, #92]	; 0x5c
 8009bb4:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8009bb8:	fb03 f301 	mul.w	r3, r3, r1
 8009bbc:	fb09 f205 	mul.w	r2, r9, r5
 8009bc0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009bc2:	fb06 f202 	mul.w	r2, r6, r2
 8009bc6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8009bca:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009bce:	921a      	str	r2, [sp, #104]	; 0x68
 8009bd0:	f340 84d8 	ble.w	800a584 <st_sssa8_ch_convolve+0xad8>
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	932b      	str	r3, [sp, #172]	; 0xac
 8009bd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009bdc:	9967      	ldr	r1, [sp, #412]	; 0x19c
 8009bde:	fb03 f302 	mul.w	r3, r3, r2
 8009be2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009be4:	fb02 1303 	mla	r3, r2, r3, r1
 8009be8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bea:	429a      	cmp	r2, r3
 8009bec:	f080 8118 	bcs.w	8009e20 <st_sssa8_ch_convolve+0x374>
 8009bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf2:	9906      	ldr	r1, [sp, #24]
 8009bf4:	fb03 f301 	mul.w	r3, r3, r1
 8009bf8:	fb0b 2303 	mla	r3, fp, r3, r2
 8009bfc:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	bf2c      	ite	cs
 8009c02:	2300      	movcs	r3, #0
 8009c04:	2301      	movcc	r3, #1
 8009c06:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c08:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8009c0c:	fb92 f2f1 	sdiv	r2, r2, r1
 8009c10:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8009c12:	f022 0201 	bic.w	r2, r2, #1
 8009c16:	428a      	cmp	r2, r1
 8009c18:	bf28      	it	cs
 8009c1a:	460a      	movcs	r2, r1
 8009c1c:	2a01      	cmp	r2, #1
 8009c1e:	921d      	str	r2, [sp, #116]	; 0x74
 8009c20:	f240 8308 	bls.w	800a234 <st_sssa8_ch_convolve+0x788>
 8009c24:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009c26:	460a      	mov	r2, r1
 8009c28:	fbb1 f1f0 	udiv	r1, r1, r0
 8009c2c:	fb00 2211 	mls	r2, r0, r1, r2
 8009c30:	b292      	uxth	r2, r2
 8009c32:	b289      	uxth	r1, r1
 8009c34:	912a      	str	r1, [sp, #168]	; 0xa8
 8009c36:	b11a      	cbz	r2, 8009c40 <st_sssa8_ch_convolve+0x194>
 8009c38:	460a      	mov	r2, r1
 8009c3a:	3201      	adds	r2, #1
 8009c3c:	b292      	uxth	r2, r2
 8009c3e:	922a      	str	r2, [sp, #168]	; 0xa8
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f040 80fc 	bne.w	8009e3e <st_sssa8_ch_convolve+0x392>
 8009c46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c48:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009c4a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009c4c:	005b      	lsls	r3, r3, #1
 8009c4e:	fb02 f303 	mul.w	r3, r2, r3
 8009c52:	fb09 1303 	mla	r3, r9, r3, r1
 8009c56:	fb0b f202 	mul.w	r2, fp, r2
 8009c5a:	9310      	str	r3, [sp, #64]	; 0x40
 8009c5c:	0053      	lsls	r3, r2, #1
 8009c5e:	fa0f fa8a 	sxth.w	sl, sl
 8009c62:	9314      	str	r3, [sp, #80]	; 0x50
 8009c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c66:	9213      	str	r2, [sp, #76]	; 0x4c
 8009c68:	46c8      	mov	r8, r9
 8009c6a:	9324      	str	r3, [sp, #144]	; 0x90
 8009c6c:	46d9      	mov	r9, fp
 8009c6e:	4657      	mov	r7, sl
 8009c70:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009c72:	3b01      	subs	r3, #1
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	461a      	mov	r2, r3
 8009c78:	932a      	str	r3, [sp, #168]	; 0xa8
 8009c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	f000 82d4 	beq.w	800a22c <st_sssa8_ch_convolve+0x780>
 8009c84:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009c86:	b92b      	cbnz	r3, 8009c94 <st_sssa8_ch_convolve+0x1e8>
 8009c88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009c8c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009c8e:	985a      	ldr	r0, [sp, #360]	; 0x168
 8009c90:	f002 f8fc 	bl	800be8c <st_int8_to16_dual>
 8009c94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f000 8098 	beq.w	8009dcc <st_sssa8_ch_convolve+0x320>
 8009c9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c9e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8009ca2:	425b      	negs	r3, r3
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	2400      	movs	r4, #0
 8009ca8:	9316      	str	r3, [sp, #88]	; 0x58
 8009caa:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8009cac:	941c      	str	r4, [sp, #112]	; 0x70
 8009cae:	931b      	str	r3, [sp, #108]	; 0x6c
 8009cb0:	a83c      	add	r0, sp, #240	; 0xf0
 8009cb2:	f001 fc2f 	bl	800b514 <ai_padding_opt_phase1>
 8009cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d066      	beq.n	8009d8a <st_sssa8_ch_convolve+0x2de>
 8009cbc:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	; 0x88
 8009cc0:	1a9a      	subs	r2, r3, r2
 8009cc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009cc4:	9819      	ldr	r0, [sp, #100]	; 0x64
 8009cc6:	425b      	negs	r3, r3
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	2100      	movs	r1, #0
 8009ccc:	9307      	str	r3, [sp, #28]
 8009cce:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 8009cd2:	910b      	str	r1, [sp, #44]	; 0x2c
 8009cd4:	fb04 2600 	mla	r6, r4, r0, r2
 8009cd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cda:	460c      	mov	r4, r1
 8009cdc:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f040 8183 	bne.w	8009fea <st_sssa8_ch_convolve+0x53e>
 8009ce4:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	f040 819c 	bne.w	800a024 <st_sssa8_ch_convolve+0x578>
 8009cec:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8009cee:	2201      	movs	r2, #1
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	933e      	str	r3, [sp, #248]	; 0xf8
 8009cf4:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 8009cf8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009cfa:	429e      	cmp	r6, r3
 8009cfc:	dd34      	ble.n	8009d68 <st_sssa8_ch_convolve+0x2bc>
 8009cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009d02:	9608      	str	r6, [sp, #32]
 8009d04:	fb04 2403 	mla	r4, r4, r3, r2
 8009d08:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d0a:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8009d0e:	1ae4      	subs	r4, r4, r3
 8009d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d12:	4616      	mov	r6, r2
 8009d14:	461d      	mov	r5, r3
 8009d16:	42b4      	cmp	r4, r6
 8009d18:	dd1f      	ble.n	8009d5a <st_sssa8_ch_convolve+0x2ae>
 8009d1a:	9a06      	ldr	r2, [sp, #24]
 8009d1c:	2d00      	cmp	r5, #0
 8009d1e:	fb03 f202 	mul.w	r2, r3, r2
 8009d22:	920d      	str	r2, [sp, #52]	; 0x34
 8009d24:	f2c0 8167 	blt.w	8009ff6 <st_sssa8_ch_convolve+0x54a>
 8009d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	46b3      	mov	fp, r6
 8009d2e:	dd79      	ble.n	8009e24 <st_sssa8_ch_convolve+0x378>
 8009d30:	46b4      	mov	ip, r6
 8009d32:	f1bb 0f00 	cmp.w	fp, #0
 8009d36:	4651      	mov	r1, sl
 8009d38:	464a      	mov	r2, r9
 8009d3a:	4638      	mov	r0, r7
 8009d3c:	db03      	blt.n	8009d46 <st_sssa8_ch_convolve+0x29a>
 8009d3e:	9b06      	ldr	r3, [sp, #24]
 8009d40:	4563      	cmp	r3, ip
 8009d42:	f300 8166 	bgt.w	800a012 <st_sssa8_ch_convolve+0x566>
 8009d46:	f003 ffb7 	bl	800dcb8 <st_dsp_arm_fill_q15>
 8009d4a:	f10b 0b01 	add.w	fp, fp, #1
 8009d4e:	fa0f fb8b 	sxth.w	fp, fp
 8009d52:	455c      	cmp	r4, fp
 8009d54:	44c2      	add	sl, r8
 8009d56:	46dc      	mov	ip, fp
 8009d58:	dceb      	bgt.n	8009d32 <st_sssa8_ch_convolve+0x286>
 8009d5a:	3501      	adds	r5, #1
 8009d5c:	9a08      	ldr	r2, [sp, #32]
 8009d5e:	b22d      	sxth	r5, r5
 8009d60:	4295      	cmp	r5, r2
 8009d62:	462b      	mov	r3, r5
 8009d64:	dbd7      	blt.n	8009d16 <st_sssa8_ch_convolve+0x26a>
 8009d66:	4616      	mov	r6, r2
 8009d68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d6a:	4553      	cmp	r3, sl
 8009d6c:	f000 818c 	beq.w	800a088 <st_sssa8_ch_convolve+0x5dc>
 8009d70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d72:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009d74:	3301      	adds	r3, #1
 8009d76:	b21a      	sxth	r2, r3
 8009d78:	9b07      	ldr	r3, [sp, #28]
 8009d7a:	920b      	str	r2, [sp, #44]	; 0x2c
 8009d7c:	440b      	add	r3, r1
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	9307      	str	r3, [sp, #28]
 8009d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d84:	4293      	cmp	r3, r2
 8009d86:	4614      	mov	r4, r2
 8009d88:	dca8      	bgt.n	8009cdc <st_sssa8_ch_convolve+0x230>
 8009d8a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009d8c:	9919      	ldr	r1, [sp, #100]	; 0x64
 8009d8e:	3301      	adds	r3, #1
 8009d90:	b21a      	sxth	r2, r3
 8009d92:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009d94:	921c      	str	r2, [sp, #112]	; 0x70
 8009d96:	440b      	add	r3, r1
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	9316      	str	r3, [sp, #88]	; 0x58
 8009d9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	4614      	mov	r4, r2
 8009da2:	dc85      	bgt.n	8009cb0 <st_sssa8_ch_convolve+0x204>
 8009da4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009da6:	4551      	cmp	r1, sl
 8009da8:	d010      	beq.n	8009dcc <st_sssa8_ch_convolve+0x320>
 8009daa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009dac:	9305      	str	r3, [sp, #20]
 8009dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009db0:	9304      	str	r3, [sp, #16]
 8009db2:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8009db4:	9303      	str	r3, [sp, #12]
 8009db6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009db8:	9302      	str	r3, [sp, #8]
 8009dba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009dc0:	9300      	str	r3, [sp, #0]
 8009dc2:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009dc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dc6:	981a      	ldr	r0, [sp, #104]	; 0x68
 8009dc8:	f003 fb00 	bl	800d3cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 8009dcc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009dce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009dd0:	1a9b      	subs	r3, r3, r2
 8009dd2:	b298      	uxth	r0, r3
 8009dd4:	4282      	cmp	r2, r0
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	bf28      	it	cs
 8009dda:	4601      	movcs	r1, r0
 8009ddc:	9024      	str	r0, [sp, #144]	; 0x90
 8009dde:	460b      	mov	r3, r1
 8009de0:	b1b1      	cbz	r1, 8009e10 <st_sssa8_ch_convolve+0x364>
 8009de2:	9d5a      	ldr	r5, [sp, #360]	; 0x168
 8009de4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8009de6:	4611      	mov	r1, r2
 8009de8:	fb04 5001 	mla	r0, r4, r1, r5
 8009dec:	905a      	str	r0, [sp, #360]	; 0x168
 8009dee:	9820      	ldr	r0, [sp, #128]	; 0x80
 8009df0:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8009df4:	9020      	str	r0, [sp, #128]	; 0x80
 8009df6:	9867      	ldr	r0, [sp, #412]	; 0x19c
 8009df8:	4408      	add	r0, r1
 8009dfa:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8009dfc:	9067      	str	r0, [sp, #412]	; 0x19c
 8009dfe:	0092      	lsls	r2, r2, #2
 8009e00:	4411      	add	r1, r2
 8009e02:	911f      	str	r1, [sp, #124]	; 0x7c
 8009e04:	9963      	ldr	r1, [sp, #396]	; 0x18c
 8009e06:	4411      	add	r1, r2
 8009e08:	9163      	str	r1, [sp, #396]	; 0x18c
 8009e0a:	9921      	ldr	r1, [sp, #132]	; 0x84
 8009e0c:	4411      	add	r1, r2
 8009e0e:	9121      	str	r1, [sp, #132]	; 0x84
 8009e10:	931d      	str	r3, [sp, #116]	; 0x74
 8009e12:	e72d      	b.n	8009c70 <st_sssa8_ch_convolve+0x1c4>
 8009e14:	4286      	cmp	r6, r0
 8009e16:	f844 5f04 	str.w	r5, [r4, #4]!
 8009e1a:	f47f ae95 	bne.w	8009b48 <st_sssa8_ch_convolve+0x9c>
 8009e1e:	e6a4      	b.n	8009b6a <st_sssa8_ch_convolve+0xbe>
 8009e20:	2300      	movs	r3, #0
 8009e22:	e6f0      	b.n	8009c06 <st_sssa8_ch_convolve+0x15a>
 8009e24:	f10b 0b01 	add.w	fp, fp, #1
 8009e28:	4651      	mov	r1, sl
 8009e2a:	464a      	mov	r2, r9
 8009e2c:	4638      	mov	r0, r7
 8009e2e:	fa0f fb8b 	sxth.w	fp, fp
 8009e32:	f003 ff41 	bl	800dcb8 <st_dsp_arm_fill_q15>
 8009e36:	455c      	cmp	r4, fp
 8009e38:	44c2      	add	sl, r8
 8009e3a:	dcf3      	bgt.n	8009e24 <st_sssa8_ch_convolve+0x378>
 8009e3c:	e78d      	b.n	8009d5a <st_sssa8_ch_convolve+0x2ae>
 8009e3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 81f3 	beq.w	800a22c <st_sssa8_ch_convolve+0x780>
 8009e46:	9922      	ldr	r1, [sp, #136]	; 0x88
 8009e48:	9815      	ldr	r0, [sp, #84]	; 0x54
 8009e4a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8009e4c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8009e4e:	f8cd 90a0 	str.w	r9, [sp, #160]	; 0xa0
 8009e52:	004b      	lsls	r3, r1, #1
 8009e54:	fb00 f303 	mul.w	r3, r0, r3
 8009e58:	fb09 5303 	mla	r3, r9, r3, r5
 8009e5c:	4262      	negs	r2, r4
 8009e5e:	9310      	str	r3, [sp, #64]	; 0x40
 8009e60:	1b0b      	subs	r3, r1, r4
 8009e62:	fb0b f000 	mul.w	r0, fp, r0
 8009e66:	932f      	str	r3, [sp, #188]	; 0xbc
 8009e68:	b293      	uxth	r3, r2
 8009e6a:	2700      	movs	r7, #0
 8009e6c:	fa0f fa8a 	sxth.w	sl, sl
 8009e70:	932d      	str	r3, [sp, #180]	; 0xb4
 8009e72:	0043      	lsls	r3, r0, #1
 8009e74:	901b      	str	r0, [sp, #108]	; 0x6c
 8009e76:	972e      	str	r7, [sp, #184]	; 0xb8
 8009e78:	9314      	str	r3, [sp, #80]	; 0x50
 8009e7a:	46d9      	mov	r9, fp
 8009e7c:	f8cd a0a4 	str.w	sl, [sp, #164]	; 0xa4
 8009e80:	a83c      	add	r0, sp, #240	; 0xf0
 8009e82:	f001 fb47 	bl	800b514 <ai_padding_opt_phase1>
 8009e86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e8a:	9967      	ldr	r1, [sp, #412]	; 0x19c
 8009e8c:	fb07 f303 	mul.w	r3, r7, r3
 8009e90:	fb02 1303 	mla	r3, r2, r3, r1
 8009e94:	931c      	str	r3, [sp, #112]	; 0x70
 8009e96:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8009e98:	b92b      	cbnz	r3, 8009ea6 <st_sssa8_ch_convolve+0x3fa>
 8009e9a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e9c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e9e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009ea0:	985a      	ldr	r0, [sp, #360]	; 0x168
 8009ea2:	f001 fff3 	bl	800be8c <st_int8_to16_dual>
 8009ea6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ea8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8009eaa:	fb03 2707 	mla	r7, r3, r7, r2
 8009eae:	f9bd 30b4 	ldrsh.w	r3, [sp, #180]	; 0xb4
 8009eb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8009eb4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8009eb6:	9322      	str	r3, [sp, #136]	; 0x88
 8009eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009eba:	9327      	str	r3, [sp, #156]	; 0x9c
 8009ebc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ebe:	9313      	str	r3, [sp, #76]	; 0x4c
 8009ec0:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 8009ec2:	932c      	str	r3, [sp, #176]	; 0xb0
 8009ec4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ec6:	9326      	str	r3, [sp, #152]	; 0x98
 8009ec8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009eca:	9325      	str	r3, [sp, #148]	; 0x94
 8009ecc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009ece:	9324      	str	r3, [sp, #144]	; 0x90
 8009ed0:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 8009ed2:	9323      	str	r3, [sp, #140]	; 0x8c
 8009ed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	461a      	mov	r2, r3
 8009edc:	9322      	str	r3, [sp, #136]	; 0x88
 8009ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	f000 8194 	beq.w	800a210 <st_sssa8_ch_convolve+0x764>
 8009ee8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009eea:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 8009eec:	9940      	ldr	r1, [sp, #256]	; 0x100
 8009eee:	923e      	str	r2, [sp, #248]	; 0xf8
 8009ef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ef2:	e9cd 313c 	strd	r3, r1, [sp, #240]	; 0xf0
 8009ef6:	2a00      	cmp	r2, #0
 8009ef8:	f000 8160 	beq.w	800a1bc <st_sssa8_ch_convolve+0x710>
 8009efc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009efe:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009f00:	4252      	negs	r2, r2
 8009f02:	2100      	movs	r1, #0
 8009f04:	b292      	uxth	r2, r2
 8009f06:	910b      	str	r1, [sp, #44]	; 0x2c
 8009f08:	9207      	str	r2, [sp, #28]
 8009f0a:	460a      	mov	r2, r1
 8009f0c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009f0e:	9116      	str	r1, [sp, #88]	; 0x58
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d157      	bne.n	8009fc4 <st_sssa8_ch_convolve+0x518>
 8009f14:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f040 80f1 	bne.w	800a0fe <st_sssa8_ch_convolve+0x652>
 8009f1c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 8009f1e:	2101      	movs	r1, #1
 8009f20:	3b01      	subs	r3, #1
 8009f22:	933e      	str	r3, [sp, #248]	; 0xf8
 8009f24:	f8ad 1116 	strh.w	r1, [sp, #278]	; 0x116
 8009f28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f2a:	429f      	cmp	r7, r3
 8009f2c:	dd36      	ble.n	8009f9c <st_sssa8_ch_convolve+0x4f0>
 8009f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f30:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009f32:	9708      	str	r7, [sp, #32]
 8009f34:	fb02 1203 	mla	r2, r2, r3, r1
 8009f38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009f3a:	e9dd 8b28 	ldrd	r8, fp, [sp, #160]	; 0xa0
 8009f3e:	1ad5      	subs	r5, r2, r3
 8009f40:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 8009f44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009f46:	4617      	mov	r7, r2
 8009f48:	461e      	mov	r6, r3
 8009f4a:	42af      	cmp	r7, r5
 8009f4c:	da1f      	bge.n	8009f8e <st_sssa8_ch_convolve+0x4e2>
 8009f4e:	9a06      	ldr	r2, [sp, #24]
 8009f50:	2e00      	cmp	r6, #0
 8009f52:	fb02 f203 	mul.w	r2, r2, r3
 8009f56:	920d      	str	r2, [sp, #52]	; 0x34
 8009f58:	f2c0 80ba 	blt.w	800a0d0 <st_sssa8_ch_convolve+0x624>
 8009f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	46ba      	mov	sl, r7
 8009f62:	dd35      	ble.n	8009fd0 <st_sssa8_ch_convolve+0x524>
 8009f64:	46bc      	mov	ip, r7
 8009f66:	f1ba 0f00 	cmp.w	sl, #0
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	464a      	mov	r2, r9
 8009f6e:	4658      	mov	r0, fp
 8009f70:	db03      	blt.n	8009f7a <st_sssa8_ch_convolve+0x4ce>
 8009f72:	9b06      	ldr	r3, [sp, #24]
 8009f74:	4563      	cmp	r3, ip
 8009f76:	f300 80b9 	bgt.w	800a0ec <st_sssa8_ch_convolve+0x640>
 8009f7a:	f003 fe9d 	bl	800dcb8 <st_dsp_arm_fill_q15>
 8009f7e:	f10a 0a01 	add.w	sl, sl, #1
 8009f82:	fa0f fa8a 	sxth.w	sl, sl
 8009f86:	4555      	cmp	r5, sl
 8009f88:	4444      	add	r4, r8
 8009f8a:	46d4      	mov	ip, sl
 8009f8c:	dceb      	bgt.n	8009f66 <st_sssa8_ch_convolve+0x4ba>
 8009f8e:	3601      	adds	r6, #1
 8009f90:	9a08      	ldr	r2, [sp, #32]
 8009f92:	b236      	sxth	r6, r6
 8009f94:	4296      	cmp	r6, r2
 8009f96:	4633      	mov	r3, r6
 8009f98:	dbd7      	blt.n	8009f4a <st_sssa8_ch_convolve+0x49e>
 8009f9a:	4617      	mov	r7, r2
 8009f9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f9e:	42a3      	cmp	r3, r4
 8009fa0:	f000 80d7 	beq.w	800a152 <st_sssa8_ch_convolve+0x6a6>
 8009fa4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fa6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009fa8:	3301      	adds	r3, #1
 8009faa:	b21a      	sxth	r2, r3
 8009fac:	9b07      	ldr	r3, [sp, #28]
 8009fae:	920b      	str	r2, [sp, #44]	; 0x2c
 8009fb0:	440b      	add	r3, r1
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	9307      	str	r3, [sp, #28]
 8009fb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	f340 80eb 	ble.w	800a194 <st_sssa8_ch_convolve+0x6e8>
 8009fbe:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0a7      	beq.n	8009f14 <st_sssa8_ch_convolve+0x468>
 8009fc4:	3b01      	subs	r3, #1
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	933c      	str	r3, [sp, #240]	; 0xf0
 8009fca:	f8ad 1116 	strh.w	r1, [sp, #278]	; 0x116
 8009fce:	e7ab      	b.n	8009f28 <st_sssa8_ch_convolve+0x47c>
 8009fd0:	f10a 0a01 	add.w	sl, sl, #1
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	464a      	mov	r2, r9
 8009fd8:	4658      	mov	r0, fp
 8009fda:	fa0f fa8a 	sxth.w	sl, sl
 8009fde:	f003 fe6b 	bl	800dcb8 <st_dsp_arm_fill_q15>
 8009fe2:	4555      	cmp	r5, sl
 8009fe4:	4444      	add	r4, r8
 8009fe6:	dcf3      	bgt.n	8009fd0 <st_sssa8_ch_convolve+0x524>
 8009fe8:	e7d1      	b.n	8009f8e <st_sssa8_ch_convolve+0x4e2>
 8009fea:	3b01      	subs	r3, #1
 8009fec:	2201      	movs	r2, #1
 8009fee:	933c      	str	r3, [sp, #240]	; 0xf0
 8009ff0:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 8009ff4:	e680      	b.n	8009cf8 <st_sssa8_ch_convolve+0x24c>
 8009ff6:	46b3      	mov	fp, r6
 8009ff8:	f10b 0b01 	add.w	fp, fp, #1
 8009ffc:	4651      	mov	r1, sl
 8009ffe:	464a      	mov	r2, r9
 800a000:	4638      	mov	r0, r7
 800a002:	fa0f fb8b 	sxth.w	fp, fp
 800a006:	f003 fe57 	bl	800dcb8 <st_dsp_arm_fill_q15>
 800a00a:	45a3      	cmp	fp, r4
 800a00c:	44c2      	add	sl, r8
 800a00e:	dbf3      	blt.n	8009ff8 <st_sssa8_ch_convolve+0x54c>
 800a010:	e6a3      	b.n	8009d5a <st_sssa8_ch_convolve+0x2ae>
 800a012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a014:	eb03 000c 	add.w	r0, r3, ip
 800a018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a01a:	fb09 3000 	mla	r0, r9, r0, r3
 800a01e:	f001 fe97 	bl	800bd50 <st_int8_to16_no_shift>
 800a022:	e692      	b.n	8009d4a <st_sssa8_ch_convolve+0x29e>
 800a024:	f8bd 2114 	ldrh.w	r2, [sp, #276]	; 0x114
 800a028:	f8ad 2116 	strh.w	r2, [sp, #278]	; 0x116
 800a02c:	3b01      	subs	r3, #1
 800a02e:	2a01      	cmp	r2, #1
 800a030:	933d      	str	r3, [sp, #244]	; 0xf4
 800a032:	f43f ae61 	beq.w	8009cf8 <st_sssa8_ch_convolve+0x24c>
 800a036:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a038:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800a03c:	429e      	cmp	r6, r3
 800a03e:	f77f ae93 	ble.w	8009d68 <st_sssa8_ch_convolve+0x2bc>
 800a042:	f8cd 8020 	str.w	r8, [sp, #32]
 800a046:	970d      	str	r7, [sp, #52]	; 0x34
 800a048:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800a04c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800a050:	4657      	mov	r7, sl
 800a052:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 800a056:	461d      	mov	r5, r3
 800a058:	4618      	mov	r0, r3
 800a05a:	9b06      	ldr	r3, [sp, #24]
 800a05c:	3501      	adds	r5, #1
 800a05e:	fb00 4003 	mla	r0, r0, r3, r4
 800a062:	fb09 b000 	mla	r0, r9, r0, fp
 800a066:	4639      	mov	r1, r7
 800a068:	b22d      	sxth	r5, r5
 800a06a:	4642      	mov	r2, r8
 800a06c:	f001 fe70 	bl	800bd50 <st_int8_to16_no_shift>
 800a070:	42b5      	cmp	r5, r6
 800a072:	4457      	add	r7, sl
 800a074:	4628      	mov	r0, r5
 800a076:	dbf0      	blt.n	800a05a <st_sssa8_ch_convolve+0x5ae>
 800a078:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a07a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a07e:	46ba      	mov	sl, r7
 800a080:	4553      	cmp	r3, sl
 800a082:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a084:	f47f ae74 	bne.w	8009d70 <st_sssa8_ch_convolve+0x2c4>
 800a088:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a08a:	9305      	str	r3, [sp, #20]
 800a08c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a08e:	9304      	str	r3, [sp, #16]
 800a090:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800a092:	9303      	str	r3, [sp, #12]
 800a094:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a096:	9302      	str	r3, [sp, #8]
 800a098:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a09a:	9301      	str	r3, [sp, #4]
 800a09c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a09e:	9300      	str	r3, [sp, #0]
 800a0a0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a0a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a0a4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a0a6:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a0a8:	f002 fe7c 	bl	800cda4 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800a0ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a0b0:	901b      	str	r0, [sp, #108]	; 0x6c
 800a0b2:	3301      	adds	r3, #1
 800a0b4:	b21a      	sxth	r2, r3
 800a0b6:	9b07      	ldr	r3, [sp, #28]
 800a0b8:	920b      	str	r2, [sp, #44]	; 0x2c
 800a0ba:	440b      	add	r3, r1
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	9307      	str	r3, [sp, #28]
 800a0c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0c2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	4614      	mov	r4, r2
 800a0ca:	f73f ae07 	bgt.w	8009cdc <st_sssa8_ch_convolve+0x230>
 800a0ce:	e65c      	b.n	8009d8a <st_sssa8_ch_convolve+0x2de>
 800a0d0:	46ba      	mov	sl, r7
 800a0d2:	f10a 0a01 	add.w	sl, sl, #1
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	464a      	mov	r2, r9
 800a0da:	4658      	mov	r0, fp
 800a0dc:	fa0f fa8a 	sxth.w	sl, sl
 800a0e0:	f003 fdea 	bl	800dcb8 <st_dsp_arm_fill_q15>
 800a0e4:	45aa      	cmp	sl, r5
 800a0e6:	4444      	add	r4, r8
 800a0e8:	dbf3      	blt.n	800a0d2 <st_sssa8_ch_convolve+0x626>
 800a0ea:	e750      	b.n	8009f8e <st_sssa8_ch_convolve+0x4e2>
 800a0ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0ee:	eb03 000c 	add.w	r0, r3, ip
 800a0f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0f4:	fb09 3000 	mla	r0, r9, r0, r3
 800a0f8:	f001 fe2a 	bl	800bd50 <st_int8_to16_no_shift>
 800a0fc:	e73f      	b.n	8009f7e <st_sssa8_ch_convolve+0x4d2>
 800a0fe:	f8bd 1114 	ldrh.w	r1, [sp, #276]	; 0x114
 800a102:	f8ad 1116 	strh.w	r1, [sp, #278]	; 0x116
 800a106:	3b01      	subs	r3, #1
 800a108:	2901      	cmp	r1, #1
 800a10a:	933d      	str	r3, [sp, #244]	; 0xf4
 800a10c:	f43f af0c 	beq.w	8009f28 <st_sssa8_ch_convolve+0x47c>
 800a110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a112:	f9bd 501c 	ldrsh.w	r5, [sp, #28]
 800a116:	429f      	cmp	r7, r3
 800a118:	f77f af40 	ble.w	8009f9c <st_sssa8_ch_convolve+0x4f0>
 800a11c:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a120:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 800a124:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a128:	461e      	mov	r6, r3
 800a12a:	4618      	mov	r0, r3
 800a12c:	9b06      	ldr	r3, [sp, #24]
 800a12e:	3601      	adds	r6, #1
 800a130:	fb00 5003 	mla	r0, r0, r3, r5
 800a134:	fb09 a000 	mla	r0, r9, r0, sl
 800a138:	4621      	mov	r1, r4
 800a13a:	b236      	sxth	r6, r6
 800a13c:	465a      	mov	r2, fp
 800a13e:	f001 fe07 	bl	800bd50 <st_int8_to16_no_shift>
 800a142:	42be      	cmp	r6, r7
 800a144:	4444      	add	r4, r8
 800a146:	4630      	mov	r0, r6
 800a148:	dbf0      	blt.n	800a12c <st_sssa8_ch_convolve+0x680>
 800a14a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a14c:	42a3      	cmp	r3, r4
 800a14e:	f47f af29 	bne.w	8009fa4 <st_sssa8_ch_convolve+0x4f8>
 800a152:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a154:	9305      	str	r3, [sp, #20]
 800a156:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a15c:	9303      	str	r3, [sp, #12]
 800a15e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a160:	9302      	str	r3, [sp, #8]
 800a162:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a16c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a16e:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a170:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a172:	f002 fe17 	bl	800cda4 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800a176:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a178:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a17a:	9016      	str	r0, [sp, #88]	; 0x58
 800a17c:	3301      	adds	r3, #1
 800a17e:	b21a      	sxth	r2, r3
 800a180:	9b07      	ldr	r3, [sp, #28]
 800a182:	920b      	str	r2, [sp, #44]	; 0x2c
 800a184:	440b      	add	r3, r1
 800a186:	b29b      	uxth	r3, r3
 800a188:	9307      	str	r3, [sp, #28]
 800a18a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a18c:	4293      	cmp	r3, r2
 800a18e:	dd15      	ble.n	800a1bc <st_sssa8_ch_convolve+0x710>
 800a190:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a192:	e714      	b.n	8009fbe <st_sssa8_ch_convolve+0x512>
 800a194:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a196:	428c      	cmp	r4, r1
 800a198:	d010      	beq.n	800a1bc <st_sssa8_ch_convolve+0x710>
 800a19a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a19c:	9305      	str	r3, [sp, #20]
 800a19e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a1a0:	9304      	str	r3, [sp, #16]
 800a1a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a1a4:	9303      	str	r3, [sp, #12]
 800a1a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a1a8:	9302      	str	r3, [sp, #8]
 800a1aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a1ac:	9301      	str	r3, [sp, #4]
 800a1ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a1b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1b6:	981a      	ldr	r0, [sp, #104]	; 0x68
 800a1b8:	f003 f908 	bl	800d3cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800a1bc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a1be:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a1c0:	1a9b      	subs	r3, r3, r2
 800a1c2:	b299      	uxth	r1, r3
 800a1c4:	428a      	cmp	r2, r1
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	bf28      	it	cs
 800a1ca:	460a      	movcs	r2, r1
 800a1cc:	b294      	uxth	r4, r2
 800a1ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a1d0:	9127      	str	r1, [sp, #156]	; 0x9c
 800a1d2:	441a      	add	r2, r3
 800a1d4:	921c      	str	r2, [sp, #112]	; 0x70
 800a1d6:	b90c      	cbnz	r4, 800a1dc <st_sssa8_ch_convolve+0x730>
 800a1d8:	9413      	str	r4, [sp, #76]	; 0x4c
 800a1da:	e67b      	b.n	8009ed4 <st_sssa8_ch_convolve+0x428>
 800a1dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a1de:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800a1e0:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800a1e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	eb06 0141 	add.w	r1, r6, r1, lsl #1
 800a1ea:	9e25      	ldr	r6, [sp, #148]	; 0x94
 800a1ec:	9124      	str	r1, [sp, #144]	; 0x90
 800a1ee:	009d      	lsls	r5, r3, #2
 800a1f0:	442e      	add	r6, r5
 800a1f2:	9625      	str	r6, [sp, #148]	; 0x94
 800a1f4:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800a1f6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a1f8:	442e      	add	r6, r5
 800a1fa:	9623      	str	r6, [sp, #140]	; 0x8c
 800a1fc:	9e26      	ldr	r6, [sp, #152]	; 0x98
 800a1fe:	fb02 0003 	mla	r0, r2, r3, r0
 800a202:	442e      	add	r6, r5
 800a204:	4623      	mov	r3, r4
 800a206:	902c      	str	r0, [sp, #176]	; 0xb0
 800a208:	9626      	str	r6, [sp, #152]	; 0x98
 800a20a:	f001 fe3f 	bl	800be8c <st_int8_to16_dual>
 800a20e:	e7e3      	b.n	800a1d8 <st_sssa8_ch_convolve+0x72c>
 800a210:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 800a212:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a214:	3301      	adds	r3, #1
 800a216:	b21a      	sxth	r2, r3
 800a218:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800a21a:	922e      	str	r2, [sp, #184]	; 0xb8
 800a21c:	440b      	add	r3, r1
 800a21e:	b29b      	uxth	r3, r3
 800a220:	932d      	str	r3, [sp, #180]	; 0xb4
 800a222:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a224:	4293      	cmp	r3, r2
 800a226:	4617      	mov	r7, r2
 800a228:	f73f ae2a 	bgt.w	8009e80 <st_sssa8_ch_convolve+0x3d4>
 800a22c:	2000      	movs	r0, #0
 800a22e:	b051      	add	sp, #324	; 0x144
 800a230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a234:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a236:	2b00      	cmp	r3, #0
 800a238:	d0f8      	beq.n	800a22c <st_sssa8_ch_convolve+0x780>
 800a23a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a23c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800a23e:	005a      	lsls	r2, r3, #1
 800a240:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a242:	fb03 f10b 	mul.w	r1, r3, fp
 800a246:	fb03 f202 	mul.w	r2, r3, r2
 800a24a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a24c:	9114      	str	r1, [sp, #80]	; 0x50
 800a24e:	fb09 5202 	mla	r2, r9, r2, r5
 800a252:	425b      	negs	r3, r3
 800a254:	eba4 0408 	sub.w	r4, r4, r8
 800a258:	2000      	movs	r0, #0
 800a25a:	9210      	str	r2, [sp, #64]	; 0x40
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	004a      	lsls	r2, r1, #1
 800a260:	941b      	str	r4, [sp, #108]	; 0x6c
 800a262:	fa0f f88a 	sxth.w	r8, sl
 800a266:	901a      	str	r0, [sp, #104]	; 0x68
 800a268:	9213      	str	r2, [sp, #76]	; 0x4c
 800a26a:	9316      	str	r3, [sp, #88]	; 0x58
 800a26c:	4604      	mov	r4, r0
 800a26e:	46aa      	mov	sl, r5
 800a270:	a83c      	add	r0, sp, #240	; 0xf0
 800a272:	f001 f94f 	bl	800b514 <ai_padding_opt_phase1>
 800a276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d063      	beq.n	800a344 <st_sssa8_ch_convolve+0x898>
 800a27c:	e9dd 3222 	ldrd	r3, r2, [sp, #136]	; 0x88
 800a280:	1a9a      	subs	r2, r3, r2
 800a282:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a284:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a286:	425b      	negs	r3, r3
 800a288:	b29b      	uxth	r3, r3
 800a28a:	2100      	movs	r1, #0
 800a28c:	9307      	str	r3, [sp, #28]
 800a28e:	f9bd 3058 	ldrsh.w	r3, [sp, #88]	; 0x58
 800a292:	910b      	str	r1, [sp, #44]	; 0x2c
 800a294:	fb00 2604 	mla	r6, r0, r4, r2
 800a298:	930f      	str	r3, [sp, #60]	; 0x3c
 800a29a:	460a      	mov	r2, r1
 800a29c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f040 80f4 	bne.w	800a48c <st_sssa8_ch_convolve+0x9e0>
 800a2a4:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f040 810b 	bne.w	800a4c2 <st_sssa8_ch_convolve+0xa16>
 800a2ac:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800a2ae:	2101      	movs	r1, #1
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	933e      	str	r3, [sp, #248]	; 0xf8
 800a2b4:	f8ad 1116 	strh.w	r1, [sp, #278]	; 0x116
 800a2b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2ba:	42b3      	cmp	r3, r6
 800a2bc:	da32      	bge.n	800a324 <st_sssa8_ch_convolve+0x878>
 800a2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a2c2:	9608      	str	r6, [sp, #32]
 800a2c4:	fb02 1203 	mla	r2, r2, r3, r1
 800a2c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2ca:	1ad4      	subs	r4, r2, r3
 800a2cc:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 800a2d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2d2:	4616      	mov	r6, r2
 800a2d4:	461d      	mov	r5, r3
 800a2d6:	42b4      	cmp	r4, r6
 800a2d8:	dd1d      	ble.n	800a316 <st_sssa8_ch_convolve+0x86a>
 800a2da:	9a06      	ldr	r2, [sp, #24]
 800a2dc:	2d00      	cmp	r5, #0
 800a2de:	fb03 f202 	mul.w	r2, r3, r2
 800a2e2:	920d      	str	r2, [sp, #52]	; 0x34
 800a2e4:	f2c0 80d8 	blt.w	800a498 <st_sssa8_ch_convolve+0x9ec>
 800a2e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	4637      	mov	r7, r6
 800a2ee:	f340 80c2 	ble.w	800a476 <st_sssa8_ch_convolve+0x9ca>
 800a2f2:	46b4      	mov	ip, r6
 800a2f4:	2f00      	cmp	r7, #0
 800a2f6:	4651      	mov	r1, sl
 800a2f8:	465a      	mov	r2, fp
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	db03      	blt.n	800a306 <st_sssa8_ch_convolve+0x85a>
 800a2fe:	9b06      	ldr	r3, [sp, #24]
 800a300:	4563      	cmp	r3, ip
 800a302:	f300 80d5 	bgt.w	800a4b0 <st_sssa8_ch_convolve+0xa04>
 800a306:	f003 fcd7 	bl	800dcb8 <st_dsp_arm_fill_q15>
 800a30a:	3701      	adds	r7, #1
 800a30c:	b23f      	sxth	r7, r7
 800a30e:	42bc      	cmp	r4, r7
 800a310:	44ca      	add	sl, r9
 800a312:	46bc      	mov	ip, r7
 800a314:	dcee      	bgt.n	800a2f4 <st_sssa8_ch_convolve+0x848>
 800a316:	3501      	adds	r5, #1
 800a318:	9a08      	ldr	r2, [sp, #32]
 800a31a:	b22d      	sxth	r5, r5
 800a31c:	4295      	cmp	r5, r2
 800a31e:	462b      	mov	r3, r5
 800a320:	dbd9      	blt.n	800a2d6 <st_sssa8_ch_convolve+0x82a>
 800a322:	4616      	mov	r6, r2
 800a324:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a326:	4553      	cmp	r3, sl
 800a328:	f000 80ff 	beq.w	800a52a <st_sssa8_ch_convolve+0xa7e>
 800a32c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a32e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a330:	3301      	adds	r3, #1
 800a332:	b21a      	sxth	r2, r3
 800a334:	9b07      	ldr	r3, [sp, #28]
 800a336:	920b      	str	r2, [sp, #44]	; 0x2c
 800a338:	440b      	add	r3, r1
 800a33a:	b29b      	uxth	r3, r3
 800a33c:	9307      	str	r3, [sp, #28]
 800a33e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a340:	4293      	cmp	r3, r2
 800a342:	dcab      	bgt.n	800a29c <st_sssa8_ch_convolve+0x7f0>
 800a344:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a346:	9919      	ldr	r1, [sp, #100]	; 0x64
 800a348:	3301      	adds	r3, #1
 800a34a:	b21a      	sxth	r2, r3
 800a34c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a34e:	921a      	str	r2, [sp, #104]	; 0x68
 800a350:	440b      	add	r3, r1
 800a352:	b29b      	uxth	r3, r3
 800a354:	9316      	str	r3, [sp, #88]	; 0x58
 800a356:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a358:	4293      	cmp	r3, r2
 800a35a:	4614      	mov	r4, r2
 800a35c:	dc88      	bgt.n	800a270 <st_sssa8_ch_convolve+0x7c4>
 800a35e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a360:	4552      	cmp	r2, sl
 800a362:	f43f af63 	beq.w	800a22c <st_sssa8_ch_convolve+0x780>
 800a366:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800a368:	2900      	cmp	r1, #0
 800a36a:	f43f af5f 	beq.w	800a22c <st_sssa8_ch_convolve+0x780>
 800a36e:	9f20      	ldr	r7, [sp, #128]	; 0x80
 800a370:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800a372:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800a374:	4893      	ldr	r0, [pc, #588]	; (800a5c4 <st_sssa8_ch_convolve+0xb18>)
 800a376:	f1a7 0902 	sub.w	r9, r7, #2
 800a37a:	9f63      	ldr	r7, [sp, #396]	; 0x18c
 800a37c:	f1a7 0a04 	sub.w	sl, r7, #4
 800a380:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800a382:	08b5      	lsrs	r5, r6, #2
 800a384:	1e6b      	subs	r3, r5, #1
 800a386:	f1a7 0b04 	sub.w	fp, r7, #4
 800a38a:	9f67      	ldr	r7, [sp, #412]	; 0x19c
 800a38c:	9509      	str	r5, [sp, #36]	; 0x24
 800a38e:	b29b      	uxth	r3, r3
 800a390:	4439      	add	r1, r7
 800a392:	3301      	adds	r3, #1
 800a394:	3c04      	subs	r4, #4
 800a396:	9107      	str	r1, [sp, #28]
 800a398:	0099      	lsls	r1, r3, #2
 800a39a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a39e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3a0:	9306      	str	r3, [sp, #24]
 800a3a2:	f006 0803 	and.w	r8, r6, #3
 800a3a6:	9108      	str	r1, [sp, #32]
 800a3a8:	9f5a      	ldr	r7, [sp, #360]	; 0x168
 800a3aa:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800a3ae:	2a00      	cmp	r2, #0
 800a3b0:	d05f      	beq.n	800a472 <st_sssa8_ch_convolve+0x9c6>
 800a3b2:	9a08      	ldr	r2, [sp, #32]
 800a3b4:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 800a3b8:	eb07 0e02 	add.w	lr, r7, r2
 800a3bc:	f857 2b04 	ldr.w	r2, [r7], #4
 800a3c0:	fa2f f582 	sxtb16	r5, r2
 800a3c4:	b2ae      	uxth	r6, r5
 800a3c6:	ea4f 2232 	mov.w	r2, r2, ror #8
 800a3ca:	f8dc 1000 	ldr.w	r1, [ip]
 800a3ce:	fa2f f282 	sxtb16	r2, r2
 800a3d2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800a3d6:	fb26 3101 	smlad	r1, r6, r1, r3
 800a3da:	ea02 0300 	and.w	r3, r2, r0
 800a3de:	ea43 4315 	orr.w	r3, r3, r5, lsr #16
 800a3e2:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800a3e6:	f10c 0c08 	add.w	ip, ip, #8
 800a3ea:	fb23 1302 	smlad	r3, r3, r2, r1
 800a3ee:	4577      	cmp	r7, lr
 800a3f0:	d1e4      	bne.n	800a3bc <st_sssa8_ch_convolve+0x910>
 800a3f2:	9a06      	ldr	r2, [sp, #24]
 800a3f4:	f1b8 0f00 	cmp.w	r8, #0
 800a3f8:	d017      	beq.n	800a42a <st_sssa8_ch_convolve+0x97e>
 800a3fa:	f997 1000 	ldrsb.w	r1, [r7]
 800a3fe:	8815      	ldrh	r5, [r2, #0]
 800a400:	f1b8 0f01 	cmp.w	r8, #1
 800a404:	fb15 3301 	smlabb	r3, r5, r1, r3
 800a408:	f000 80c6 	beq.w	800a598 <st_sssa8_ch_convolve+0xaec>
 800a40c:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800a410:	8855      	ldrh	r5, [r2, #2]
 800a412:	f1b8 0f02 	cmp.w	r8, #2
 800a416:	fb15 3301 	smlabb	r3, r5, r1, r3
 800a41a:	f000 80d1 	beq.w	800a5c0 <st_sssa8_ch_convolve+0xb14>
 800a41e:	8891      	ldrh	r1, [r2, #4]
 800a420:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800a424:	3703      	adds	r7, #3
 800a426:	fb11 3302 	smlabb	r3, r1, r2, r3
 800a42a:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800a42c:	f939 1f02 	ldrsh.w	r1, [r9, #2]!
 800a430:	f85a 6f04 	ldr.w	r6, [sl, #4]!
 800a434:	f85b 5f04 	ldr.w	r5, [fp, #4]!
 800a438:	3201      	adds	r2, #1
 800a43a:	2915      	cmp	r1, #21
 800a43c:	9267      	str	r2, [sp, #412]	; 0x19c
 800a43e:	f340 8095 	ble.w	800a56c <st_sssa8_ch_convolve+0xac0>
 800a442:	1e8a      	subs	r2, r1, #2
 800a444:	f04f 0c01 	mov.w	ip, #1
 800a448:	3901      	subs	r1, #1
 800a44a:	fa0c f202 	lsl.w	r2, ip, r2
 800a44e:	fb53 2306 	smmla	r3, r3, r6, r2
 800a452:	410b      	asrs	r3, r1
 800a454:	442b      	add	r3, r5
 800a456:	f303 0307 	ssat	r3, #8, r3
 800a45a:	9a67      	ldr	r2, [sp, #412]	; 0x19c
 800a45c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a460:	9b07      	ldr	r3, [sp, #28]
 800a462:	4293      	cmp	r3, r2
 800a464:	f43f aee2 	beq.w	800a22c <st_sssa8_ch_convolve+0x780>
 800a468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a46a:	f854 3f04 	ldr.w	r3, [r4, #4]!
 800a46e:	2a00      	cmp	r2, #0
 800a470:	d19f      	bne.n	800a3b2 <st_sssa8_ch_convolve+0x906>
 800a472:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a474:	e7be      	b.n	800a3f4 <st_sssa8_ch_convolve+0x948>
 800a476:	3701      	adds	r7, #1
 800a478:	4651      	mov	r1, sl
 800a47a:	465a      	mov	r2, fp
 800a47c:	4640      	mov	r0, r8
 800a47e:	b23f      	sxth	r7, r7
 800a480:	f003 fc1a 	bl	800dcb8 <st_dsp_arm_fill_q15>
 800a484:	42bc      	cmp	r4, r7
 800a486:	44ca      	add	sl, r9
 800a488:	dcf5      	bgt.n	800a476 <st_sssa8_ch_convolve+0x9ca>
 800a48a:	e744      	b.n	800a316 <st_sssa8_ch_convolve+0x86a>
 800a48c:	3b01      	subs	r3, #1
 800a48e:	2101      	movs	r1, #1
 800a490:	933c      	str	r3, [sp, #240]	; 0xf0
 800a492:	f8ad 1116 	strh.w	r1, [sp, #278]	; 0x116
 800a496:	e70f      	b.n	800a2b8 <st_sssa8_ch_convolve+0x80c>
 800a498:	4637      	mov	r7, r6
 800a49a:	3701      	adds	r7, #1
 800a49c:	4651      	mov	r1, sl
 800a49e:	465a      	mov	r2, fp
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	b23f      	sxth	r7, r7
 800a4a4:	f003 fc08 	bl	800dcb8 <st_dsp_arm_fill_q15>
 800a4a8:	42bc      	cmp	r4, r7
 800a4aa:	44ca      	add	sl, r9
 800a4ac:	dcf5      	bgt.n	800a49a <st_sssa8_ch_convolve+0x9ee>
 800a4ae:	e732      	b.n	800a316 <st_sssa8_ch_convolve+0x86a>
 800a4b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a4b2:	eb03 000c 	add.w	r0, r3, ip
 800a4b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4b8:	fb0b 3000 	mla	r0, fp, r0, r3
 800a4bc:	f001 fc48 	bl	800bd50 <st_int8_to16_no_shift>
 800a4c0:	e723      	b.n	800a30a <st_sssa8_ch_convolve+0x85e>
 800a4c2:	f8bd 1114 	ldrh.w	r1, [sp, #276]	; 0x114
 800a4c6:	f8ad 1116 	strh.w	r1, [sp, #278]	; 0x116
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	2901      	cmp	r1, #1
 800a4ce:	933d      	str	r3, [sp, #244]	; 0xf4
 800a4d0:	f43f aef2 	beq.w	800a2b8 <st_sssa8_ch_convolve+0x80c>
 800a4d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4d6:	f9bd 401c 	ldrsh.w	r4, [sp, #28]
 800a4da:	42b3      	cmp	r3, r6
 800a4dc:	f6bf af22 	bge.w	800a324 <st_sssa8_ch_convolve+0x878>
 800a4e0:	4657      	mov	r7, sl
 800a4e2:	f8cd 9020 	str.w	r9, [sp, #32]
 800a4e6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800a4ea:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 800a4ee:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 800a4f2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a4f6:	461d      	mov	r5, r3
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4fc:	fb00 4008 	mla	r0, r0, r8, r4
 800a500:	3501      	adds	r5, #1
 800a502:	fb0b 3000 	mla	r0, fp, r0, r3
 800a506:	4639      	mov	r1, r7
 800a508:	b22d      	sxth	r5, r5
 800a50a:	4652      	mov	r2, sl
 800a50c:	f001 fc20 	bl	800bd50 <st_int8_to16_no_shift>
 800a510:	42b5      	cmp	r5, r6
 800a512:	444f      	add	r7, r9
 800a514:	4628      	mov	r0, r5
 800a516:	dbf0      	blt.n	800a4fa <st_sssa8_ch_convolve+0xa4e>
 800a518:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a51a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a51e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 800a522:	46ba      	mov	sl, r7
 800a524:	4553      	cmp	r3, sl
 800a526:	f47f af01 	bne.w	800a32c <st_sssa8_ch_convolve+0x880>
 800a52a:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 800a52c:	9304      	str	r3, [sp, #16]
 800a52e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a530:	9303      	str	r3, [sp, #12]
 800a532:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800a534:	9302      	str	r3, [sp, #8]
 800a536:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a538:	9301      	str	r3, [sp, #4]
 800a53a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a542:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a544:	985a      	ldr	r0, [sp, #360]	; 0x168
 800a546:	f001 f82d 	bl	800b5a4 <st_sssa8_ch_nn_mat_mult_kernel>
 800a54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a54c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a54e:	9067      	str	r0, [sp, #412]	; 0x19c
 800a550:	3301      	adds	r3, #1
 800a552:	b21a      	sxth	r2, r3
 800a554:	9b07      	ldr	r3, [sp, #28]
 800a556:	920b      	str	r2, [sp, #44]	; 0x2c
 800a558:	440b      	add	r3, r1
 800a55a:	b29b      	uxth	r3, r3
 800a55c:	9307      	str	r3, [sp, #28]
 800a55e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a560:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800a564:	4293      	cmp	r3, r2
 800a566:	f73f ae99 	bgt.w	800a29c <st_sssa8_ch_convolve+0x7f0>
 800a56a:	e6eb      	b.n	800a344 <st_sssa8_ch_convolve+0x898>
 800a56c:	2900      	cmp	r1, #0
 800a56e:	dd15      	ble.n	800a59c <st_sssa8_ch_convolve+0xaf0>
 800a570:	005b      	lsls	r3, r3, #1
 800a572:	fb53 5306 	smmla	r3, r3, r6, r5
 800a576:	fa43 f101 	asr.w	r1, r3, r1
 800a57a:	f301 0307 	ssat	r3, #8, r1
 800a57e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a582:	e76d      	b.n	800a460 <st_sssa8_ch_convolve+0x9b4>
 800a584:	4611      	mov	r1, r2
 800a586:	985a      	ldr	r0, [sp, #360]	; 0x168
 800a588:	e9dd 3217 	ldrd	r3, r2, [sp, #92]	; 0x5c
 800a58c:	f001 fc7e 	bl	800be8c <st_int8_to16_dual>
 800a590:	2301      	movs	r3, #1
 800a592:	932b      	str	r3, [sp, #172]	; 0xac
 800a594:	f7ff bb20 	b.w	8009bd8 <st_sssa8_ch_convolve+0x12c>
 800a598:	3701      	adds	r7, #1
 800a59a:	e746      	b.n	800a42a <st_sssa8_ch_convolve+0x97e>
 800a59c:	f1c1 0101 	rsb	r1, r1, #1
 800a5a0:	408b      	lsls	r3, r1
 800a5a2:	f303 031f 	ssat	r3, #32, r3
 800a5a6:	fb53 f316 	smmulr	r3, r3, r6
 800a5aa:	442b      	add	r3, r5
 800a5ac:	f303 0307 	ssat	r3, #8, r3
 800a5b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a5b4:	e754      	b.n	800a460 <st_sssa8_ch_convolve+0x9b4>
 800a5b6:	4614      	mov	r4, r2
 800a5b8:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 800a5bc:	f7ff bad9 	b.w	8009b72 <st_sssa8_ch_convolve+0xc6>
 800a5c0:	3702      	adds	r7, #2
 800a5c2:	e732      	b.n	800a42a <st_sssa8_ch_convolve+0x97e>
 800a5c4:	ffff0000 	.word	0xffff0000

0800a5c8 <st_sssa8_ch_convolve_rgb>:
 800a5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5cc:	b0c9      	sub	sp, #292	; 0x124
 800a5ce:	4607      	mov	r7, r0
 800a5d0:	931d      	str	r3, [sp, #116]	; 0x74
 800a5d2:	f8bd 3150 	ldrh.w	r3, [sp, #336]	; 0x150
 800a5d6:	930e      	str	r3, [sp, #56]	; 0x38
 800a5d8:	f8bd 3154 	ldrh.w	r3, [sp, #340]	; 0x154
 800a5dc:	9308      	str	r3, [sp, #32]
 800a5de:	f99d 3164 	ldrsb.w	r3, [sp, #356]	; 0x164
 800a5e2:	f8bd 014c 	ldrh.w	r0, [sp, #332]	; 0x14c
 800a5e6:	931b      	str	r3, [sp, #108]	; 0x6c
 800a5e8:	468b      	mov	fp, r1
 800a5ea:	f8bd 3170 	ldrh.w	r3, [sp, #368]	; 0x170
 800a5ee:	f8bd 1148 	ldrh.w	r1, [sp, #328]	; 0x148
 800a5f2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5f4:	2a03      	cmp	r2, #3
 800a5f6:	9113      	str	r1, [sp, #76]	; 0x4c
 800a5f8:	900d      	str	r0, [sp, #52]	; 0x34
 800a5fa:	9e58      	ldr	r6, [sp, #352]	; 0x160
 800a5fc:	f99d 4168 	ldrsb.w	r4, [sp, #360]	; 0x168
 800a600:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 800a602:	f040 83fe 	bne.w	800ae02 <st_sssa8_ch_convolve_rgb+0x83a>
 800a606:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
 800a60a:	eb03 0542 	add.w	r5, r3, r2, lsl #1
 800a60e:	ebc1 7241 	rsb	r2, r1, r1, lsl #29
 800a612:	fb10 f300 	smulbb	r3, r0, r0
 800a616:	ea4f 0881 	mov.w	r8, r1, lsl #2
 800a61a:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 800a61e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a622:	9020      	str	r0, [sp, #128]	; 0x80
 800a624:	b29b      	uxth	r3, r3
 800a626:	4440      	add	r0, r8
 800a628:	950f      	str	r5, [sp, #60]	; 0x3c
 800a62a:	460a      	mov	r2, r1
 800a62c:	9021      	str	r0, [sp, #132]	; 0x84
 800a62e:	9314      	str	r3, [sp, #80]	; 0x50
 800a630:	2900      	cmp	r1, #0
 800a632:	f000 83e2 	beq.w	800adfa <st_sssa8_ch_convolve_rgb+0x832>
 800a636:	ea4f 0e42 	mov.w	lr, r2, lsl #1
 800a63a:	4631      	mov	r1, r6
 800a63c:	1f05      	subs	r5, r0, #4
 800a63e:	4476      	add	r6, lr
 800a640:	f04f 0c01 	mov.w	ip, #1
 800a644:	f931 3b02 	ldrsh.w	r3, [r1], #2
 800a648:	1e5a      	subs	r2, r3, #1
 800a64a:	b292      	uxth	r2, r2
 800a64c:	fa0c f003 	lsl.w	r0, ip, r3
 800a650:	2a14      	cmp	r2, #20
 800a652:	fa04 f303 	lsl.w	r3, r4, r3
 800a656:	eb03 0350 	add.w	r3, r3, r0, lsr #1
 800a65a:	f200 81ec 	bhi.w	800aa36 <st_sssa8_ch_convolve_rgb+0x46e>
 800a65e:	428e      	cmp	r6, r1
 800a660:	f845 3f04 	str.w	r3, [r5, #4]!
 800a664:	d1ee      	bne.n	800a644 <st_sssa8_ch_convolve_rgb+0x7c>
 800a666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a668:	eb03 0408 	add.w	r4, r3, r8
 800a66c:	eba6 050e 	sub.w	r5, r6, lr
 800a670:	9522      	str	r5, [sp, #136]	; 0x88
 800a672:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a674:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800a676:	9642      	str	r6, [sp, #264]	; 0x108
 800a678:	ab30      	add	r3, sp, #192	; 0xc0
 800a67a:	e9cd 552d 	strd	r5, r5, [sp, #180]	; 0xb4
 800a67e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	aa28      	add	r2, sp, #160	; 0xa0
 800a684:	ab2c      	add	r3, sp, #176	; 0xb0
 800a686:	a93e      	add	r1, sp, #248	; 0xf8
 800a688:	9643      	str	r6, [sp, #268]	; 0x10c
 800a68a:	a834      	add	r0, sp, #208	; 0xd0
 800a68c:	9e08      	ldr	r6, [sp, #32]
 800a68e:	9640      	str	r6, [sp, #256]	; 0x100
 800a690:	e9cd bb29 	strd	fp, fp, [sp, #164]	; 0xa4
 800a694:	e9cd 5531 	strd	r5, r5, [sp, #196]	; 0xc4
 800a698:	9641      	str	r6, [sp, #260]	; 0x104
 800a69a:	f000 fee1 	bl	800b460 <ai_padding_opt_init>
 800a69e:	e9dd 2113 	ldrd	r2, r1, [sp, #76]	; 0x4c
 800a6a2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800a6a6:	fb02 f201 	mul.w	r2, r2, r1
 800a6aa:	005b      	lsls	r3, r3, #1
 800a6ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a6ae:	fb05 f303 	mul.w	r3, r5, r3
 800a6b2:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a6b6:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 800a6ba:	930a      	str	r3, [sp, #40]	; 0x28
 800a6bc:	f340 8394 	ble.w	800ade8 <st_sssa8_ch_convolve_rgb+0x820>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	9326      	str	r3, [sp, #152]	; 0x98
 800a6c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6c6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800a6ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800a6ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6d0:	f023 0301 	bic.w	r3, r3, #1
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	bf28      	it	cs
 800a6d8:	4613      	movcs	r3, r2
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	9323      	str	r3, [sp, #140]	; 0x8c
 800a6de:	f240 81b5 	bls.w	800aa4c <st_sssa8_ch_convolve_rgb+0x484>
 800a6e2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800a6e4:	4613      	mov	r3, r2
 800a6e6:	fbb2 f2f1 	udiv	r2, r2, r1
 800a6ea:	fb01 3312 	mls	r3, r1, r2, r3
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	b292      	uxth	r2, r2
 800a6f2:	9227      	str	r2, [sp, #156]	; 0x9c
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f040 81a4 	bne.w	800aa42 <st_sssa8_ch_convolve_rgb+0x47a>
 800a6fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f000 8196 	beq.w	800aa2e <st_sssa8_ch_convolve_rgb+0x466>
 800a702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a704:	4ea2      	ldr	r6, [pc, #648]	; (800a990 <st_sssa8_ch_convolve_rgb+0x3c8>)
 800a706:	4253      	negs	r3, r2
 800a708:	b29b      	uxth	r3, r3
 800a70a:	931c      	str	r3, [sp, #112]	; 0x70
 800a70c:	931f      	str	r3, [sp, #124]	; 0x7c
 800a70e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a710:	2400      	movs	r4, #0
 800a712:	1a9b      	subs	r3, r3, r2
 800a714:	46da      	mov	sl, fp
 800a716:	9425      	str	r4, [sp, #148]	; 0x94
 800a718:	9324      	str	r3, [sp, #144]	; 0x90
 800a71a:	46bb      	mov	fp, r7
 800a71c:	a834      	add	r0, sp, #208	; 0xd0
 800a71e:	f000 fef9 	bl	800b514 <ai_padding_opt_phase1>
 800a722:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a726:	995b      	ldr	r1, [sp, #364]	; 0x16c
 800a728:	fb04 f303 	mul.w	r3, r4, r3
 800a72c:	fb02 1303 	mla	r3, r2, r3, r1
 800a730:	9312      	str	r3, [sp, #72]	; 0x48
 800a732:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a734:	b92b      	cbnz	r3, 800a742 <st_sssa8_ch_convolve_rgb+0x17a>
 800a736:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a738:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a73a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a73c:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a73e:	f001 fba5 	bl	800be8c <st_int8_to16_dual>
 800a742:	9b08      	ldr	r3, [sp, #32]
 800a744:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a746:	fb03 2704 	mla	r7, r3, r4, r2
 800a74a:	f9bd 307c 	ldrsh.w	r3, [sp, #124]	; 0x7c
 800a74e:	9309      	str	r3, [sp, #36]	; 0x24
 800a750:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800a752:	9315      	str	r3, [sp, #84]	; 0x54
 800a754:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a756:	931a      	str	r3, [sp, #104]	; 0x68
 800a758:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a75a:	9310      	str	r3, [sp, #64]	; 0x40
 800a75c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a75e:	931e      	str	r3, [sp, #120]	; 0x78
 800a760:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a762:	9319      	str	r3, [sp, #100]	; 0x64
 800a764:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a766:	9318      	str	r3, [sp, #96]	; 0x60
 800a768:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a76a:	9316      	str	r3, [sp, #88]	; 0x58
 800a76c:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 800a76e:	9317      	str	r3, [sp, #92]	; 0x5c
 800a770:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a772:	3b01      	subs	r3, #1
 800a774:	b29b      	uxth	r3, r3
 800a776:	461a      	mov	r2, r3
 800a778:	9315      	str	r3, [sp, #84]	; 0x54
 800a77a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a77e:	429a      	cmp	r2, r3
 800a780:	f000 8147 	beq.w	800aa12 <st_sssa8_ch_convolve_rgb+0x44a>
 800a784:	e9dd 2137 	ldrd	r2, r1, [sp, #220]	; 0xdc
 800a788:	9b39      	ldr	r3, [sp, #228]	; 0xe4
 800a78a:	9234      	str	r2, [sp, #208]	; 0xd0
 800a78c:	2000      	movs	r0, #0
 800a78e:	e9cd 1335 	strd	r1, r3, [sp, #212]	; 0xd4
 800a792:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a794:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a796:	9306      	str	r3, [sp, #24]
 800a798:	9007      	str	r0, [sp, #28]
 800a79a:	4684      	mov	ip, r0
 800a79c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a79e:	9111      	str	r1, [sp, #68]	; 0x44
 800a7a0:	2a00      	cmp	r2, #0
 800a7a2:	d174      	bne.n	800a88e <st_sssa8_ch_convolve_rgb+0x2c6>
 800a7a4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800a7a6:	2a00      	cmp	r2, #0
 800a7a8:	f040 8090 	bne.w	800a8cc <st_sssa8_ch_convolve_rgb+0x304>
 800a7ac:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800a7ae:	2101      	movs	r1, #1
 800a7b0:	3a01      	subs	r2, #1
 800a7b2:	9236      	str	r2, [sp, #216]	; 0xd8
 800a7b4:	f8ad 10f6 	strh.w	r1, [sp, #246]	; 0xf6
 800a7b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ba:	4297      	cmp	r7, r2
 800a7bc:	dd53      	ble.n	800a866 <st_sssa8_ch_convolve_rgb+0x29e>
 800a7be:	4610      	mov	r0, r2
 800a7c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a7c2:	9a08      	ldr	r2, [sp, #32]
 800a7c4:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 800a7c8:	fb0c 1202 	mla	r2, ip, r2, r1
 800a7cc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a7ce:	1a52      	subs	r2, r2, r1
 800a7d0:	f9bd 106c 	ldrsh.w	r1, [sp, #108]	; 0x6c
 800a7d4:	4605      	mov	r5, r0
 800a7d6:	46d8      	mov	r8, fp
 800a7d8:	454a      	cmp	r2, r9
 800a7da:	dd3e      	ble.n	800a85a <st_sssa8_ch_convolve_rgb+0x292>
 800a7dc:	2d00      	cmp	r5, #0
 800a7de:	fb00 fb0a 	mul.w	fp, r0, sl
 800a7e2:	db5a      	blt.n	800a89a <st_sssa8_ch_convolve_rgb+0x2d2>
 800a7e4:	4582      	cmp	sl, r0
 800a7e6:	4648      	mov	r0, r9
 800a7e8:	dd2c      	ble.n	800a844 <st_sssa8_ch_convolve_rgb+0x27c>
 800a7ea:	46cc      	mov	ip, r9
 800a7ec:	950c      	str	r5, [sp, #48]	; 0x30
 800a7ee:	e01f      	b.n	800a830 <st_sssa8_ch_convolve_rgb+0x268>
 800a7f0:	eb0b 0e0c 	add.w	lr, fp, ip
 800a7f4:	45e2      	cmp	sl, ip
 800a7f6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 800a7fa:	dd1d      	ble.n	800a838 <st_sssa8_ch_convolve_rgb+0x270>
 800a7fc:	f858 e00e 	ldr.w	lr, [r8, lr]
 800a800:	fa2f fc8e 	sxtb16	ip, lr
 800a804:	ea4f 2e3e 	mov.w	lr, lr, ror #8
 800a808:	ea0c 0506 	and.w	r5, ip, r6
 800a80c:	fa2f fe8e 	sxtb16	lr, lr
 800a810:	fa1f fe8e 	uxth.w	lr, lr
 800a814:	ea45 0e0e 	orr.w	lr, r5, lr
 800a818:	f8c3 e002 	str.w	lr, [r3, #2]
 800a81c:	fa0f fc8c 	sxth.w	ip, ip
 800a820:	3001      	adds	r0, #1
 800a822:	b200      	sxth	r0, r0
 800a824:	4282      	cmp	r2, r0
 800a826:	f824 cc06 	strh.w	ip, [r4, #-6]
 800a82a:	4623      	mov	r3, r4
 800a82c:	4684      	mov	ip, r0
 800a82e:	dd46      	ble.n	800a8be <st_sssa8_ch_convolve_rgb+0x2f6>
 800a830:	2800      	cmp	r0, #0
 800a832:	f103 0406 	add.w	r4, r3, #6
 800a836:	dadb      	bge.n	800a7f0 <st_sssa8_ch_convolve_rgb+0x228>
 800a838:	f824 1c04 	strh.w	r1, [r4, #-4]
 800a83c:	f824 1c02 	strh.w	r1, [r4, #-2]
 800a840:	468c      	mov	ip, r1
 800a842:	e7ed      	b.n	800a820 <st_sssa8_ch_convolve_rgb+0x258>
 800a844:	3001      	adds	r0, #1
 800a846:	3306      	adds	r3, #6
 800a848:	b200      	sxth	r0, r0
 800a84a:	4282      	cmp	r2, r0
 800a84c:	f823 1c04 	strh.w	r1, [r3, #-4]
 800a850:	f823 1c02 	strh.w	r1, [r3, #-2]
 800a854:	f823 1c06 	strh.w	r1, [r3, #-6]
 800a858:	dcf4      	bgt.n	800a844 <st_sssa8_ch_convolve_rgb+0x27c>
 800a85a:	3501      	adds	r5, #1
 800a85c:	b22d      	sxth	r5, r5
 800a85e:	42bd      	cmp	r5, r7
 800a860:	4628      	mov	r0, r5
 800a862:	dbb9      	blt.n	800a7d8 <st_sssa8_ch_convolve_rgb+0x210>
 800a864:	46c3      	mov	fp, r8
 800a866:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a868:	429a      	cmp	r2, r3
 800a86a:	d06f      	beq.n	800a94c <st_sssa8_ch_convolve_rgb+0x384>
 800a86c:	9a07      	ldr	r2, [sp, #28]
 800a86e:	9808      	ldr	r0, [sp, #32]
 800a870:	3201      	adds	r2, #1
 800a872:	b211      	sxth	r1, r2
 800a874:	9a06      	ldr	r2, [sp, #24]
 800a876:	9107      	str	r1, [sp, #28]
 800a878:	4402      	add	r2, r0
 800a87a:	b292      	uxth	r2, r2
 800a87c:	9206      	str	r2, [sp, #24]
 800a87e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a880:	428a      	cmp	r2, r1
 800a882:	468c      	mov	ip, r1
 800a884:	f340 8086 	ble.w	800a994 <st_sssa8_ch_convolve_rgb+0x3cc>
 800a888:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800a88a:	2a00      	cmp	r2, #0
 800a88c:	d08a      	beq.n	800a7a4 <st_sssa8_ch_convolve_rgb+0x1dc>
 800a88e:	3a01      	subs	r2, #1
 800a890:	2101      	movs	r1, #1
 800a892:	9234      	str	r2, [sp, #208]	; 0xd0
 800a894:	f8ad 10f6 	strh.w	r1, [sp, #246]	; 0xf6
 800a898:	e78e      	b.n	800a7b8 <st_sssa8_ch_convolve_rgb+0x1f0>
 800a89a:	4648      	mov	r0, r9
 800a89c:	3001      	adds	r0, #1
 800a89e:	3306      	adds	r3, #6
 800a8a0:	b200      	sxth	r0, r0
 800a8a2:	4290      	cmp	r0, r2
 800a8a4:	f823 1c04 	strh.w	r1, [r3, #-4]
 800a8a8:	f823 1c02 	strh.w	r1, [r3, #-2]
 800a8ac:	f823 1c06 	strh.w	r1, [r3, #-6]
 800a8b0:	dbf4      	blt.n	800a89c <st_sssa8_ch_convolve_rgb+0x2d4>
 800a8b2:	3501      	adds	r5, #1
 800a8b4:	b22d      	sxth	r5, r5
 800a8b6:	42bd      	cmp	r5, r7
 800a8b8:	4628      	mov	r0, r5
 800a8ba:	db8d      	blt.n	800a7d8 <st_sssa8_ch_convolve_rgb+0x210>
 800a8bc:	e7d2      	b.n	800a864 <st_sssa8_ch_convolve_rgb+0x29c>
 800a8be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8c0:	3501      	adds	r5, #1
 800a8c2:	b22d      	sxth	r5, r5
 800a8c4:	42bd      	cmp	r5, r7
 800a8c6:	4628      	mov	r0, r5
 800a8c8:	db86      	blt.n	800a7d8 <st_sssa8_ch_convolve_rgb+0x210>
 800a8ca:	e7cb      	b.n	800a864 <st_sssa8_ch_convolve_rgb+0x29c>
 800a8cc:	f8bd 10f4 	ldrh.w	r1, [sp, #244]	; 0xf4
 800a8d0:	f8ad 10f6 	strh.w	r1, [sp, #246]	; 0xf6
 800a8d4:	3a01      	subs	r2, #1
 800a8d6:	2901      	cmp	r1, #1
 800a8d8:	9235      	str	r2, [sp, #212]	; 0xd4
 800a8da:	f43f af6d 	beq.w	800a7b8 <st_sssa8_ch_convolve_rgb+0x1f0>
 800a8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8e0:	4297      	cmp	r7, r2
 800a8e2:	ddc0      	ble.n	800a866 <st_sssa8_ch_convolve_rgb+0x29e>
 800a8e4:	9908      	ldr	r1, [sp, #32]
 800a8e6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a8e8:	f9bd 8018 	ldrsh.w	r8, [sp, #24]
 800a8ec:	fb0c 0c01 	mla	ip, ip, r1, r0
 800a8f0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a8f2:	4696      	mov	lr, r2
 800a8f4:	ebac 0c01 	sub.w	ip, ip, r1
 800a8f8:	4615      	mov	r5, r2
 800a8fa:	45c4      	cmp	ip, r8
 800a8fc:	dd1c      	ble.n	800a938 <st_sssa8_ch_convolve_rgb+0x370>
 800a8fe:	fb05 f40a 	mul.w	r4, r5, sl
 800a902:	4642      	mov	r2, r8
 800a904:	4645      	mov	r5, r8
 800a906:	4422      	add	r2, r4
 800a908:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800a90c:	3501      	adds	r5, #1
 800a90e:	f85b 2002 	ldr.w	r2, [fp, r2]
 800a912:	fa2f f182 	sxtb16	r1, r2
 800a916:	b22d      	sxth	r5, r5
 800a918:	ea4f 2232 	mov.w	r2, r2, ror #8
 800a91c:	ea01 0006 	and.w	r0, r1, r6
 800a920:	fa2f f282 	sxtb16	r2, r2
 800a924:	b292      	uxth	r2, r2
 800a926:	4302      	orrs	r2, r0
 800a928:	4565      	cmp	r5, ip
 800a92a:	f8c3 2002 	str.w	r2, [r3, #2]
 800a92e:	8019      	strh	r1, [r3, #0]
 800a930:	462a      	mov	r2, r5
 800a932:	f103 0306 	add.w	r3, r3, #6
 800a936:	dbe6      	blt.n	800a906 <st_sssa8_ch_convolve_rgb+0x33e>
 800a938:	f10e 0e01 	add.w	lr, lr, #1
 800a93c:	fa0f fe8e 	sxth.w	lr, lr
 800a940:	45be      	cmp	lr, r7
 800a942:	4675      	mov	r5, lr
 800a944:	dbd9      	blt.n	800a8fa <st_sssa8_ch_convolve_rgb+0x332>
 800a946:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a948:	429a      	cmp	r2, r3
 800a94a:	d18f      	bne.n	800a86c <st_sssa8_ch_convolve_rgb+0x2a4>
 800a94c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a94e:	9305      	str	r3, [sp, #20]
 800a950:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a952:	9304      	str	r3, [sp, #16]
 800a954:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a956:	9303      	str	r3, [sp, #12]
 800a958:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a95a:	9302      	str	r3, [sp, #8]
 800a95c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a95e:	9301      	str	r3, [sp, #4]
 800a960:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a962:	9300      	str	r3, [sp, #0]
 800a964:	4610      	mov	r0, r2
 800a966:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a968:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a96a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a96c:	f002 fa1a 	bl	800cda4 <st_sssa8_ch_nn_mat_mult_kernel_opt>
 800a970:	9b07      	ldr	r3, [sp, #28]
 800a972:	9908      	ldr	r1, [sp, #32]
 800a974:	9011      	str	r0, [sp, #68]	; 0x44
 800a976:	3301      	adds	r3, #1
 800a978:	b21a      	sxth	r2, r3
 800a97a:	9b06      	ldr	r3, [sp, #24]
 800a97c:	9207      	str	r2, [sp, #28]
 800a97e:	440b      	add	r3, r1
 800a980:	b29b      	uxth	r3, r3
 800a982:	9306      	str	r3, [sp, #24]
 800a984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a986:	4293      	cmp	r3, r2
 800a988:	4694      	mov	ip, r2
 800a98a:	dd17      	ble.n	800a9bc <st_sssa8_ch_convolve_rgb+0x3f4>
 800a98c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a98e:	e77b      	b.n	800a888 <st_sssa8_ch_convolve_rgb+0x2c0>
 800a990:	ffff0000 	.word	0xffff0000
 800a994:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a996:	4299      	cmp	r1, r3
 800a998:	d010      	beq.n	800a9bc <st_sssa8_ch_convolve_rgb+0x3f4>
 800a99a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a99c:	9305      	str	r3, [sp, #20]
 800a99e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9a4:	9303      	str	r3, [sp, #12]
 800a9a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a9a8:	9302      	str	r3, [sp, #8]
 800a9aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a9ac:	9301      	str	r3, [sp, #4]
 800a9ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a9b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a9b6:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a9b8:	f002 fd08 	bl	800d3cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>
 800a9bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a9c0:	1a9b      	subs	r3, r3, r2
 800a9c2:	b299      	uxth	r1, r3
 800a9c4:	428a      	cmp	r2, r1
 800a9c6:	4613      	mov	r3, r2
 800a9c8:	bf28      	it	cs
 800a9ca:	460a      	movcs	r2, r1
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a9d0:	911a      	str	r1, [sp, #104]	; 0x68
 800a9d2:	441a      	add	r2, r3
 800a9d4:	9212      	str	r2, [sp, #72]	; 0x48
 800a9d6:	b90c      	cbnz	r4, 800a9dc <st_sssa8_ch_convolve_rgb+0x414>
 800a9d8:	9410      	str	r4, [sp, #64]	; 0x40
 800a9da:	e6c9      	b.n	800a770 <st_sssa8_ch_convolve_rgb+0x1a8>
 800a9dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9de:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800a9e0:	981e      	ldr	r0, [sp, #120]	; 0x78
 800a9e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800a9ea:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800a9ec:	9116      	str	r1, [sp, #88]	; 0x58
 800a9ee:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800a9f2:	4465      	add	r5, ip
 800a9f4:	9518      	str	r5, [sp, #96]	; 0x60
 800a9f6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800a9f8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a9fa:	4465      	add	r5, ip
 800a9fc:	9517      	str	r5, [sp, #92]	; 0x5c
 800a9fe:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800aa00:	fb02 0003 	mla	r0, r2, r3, r0
 800aa04:	4465      	add	r5, ip
 800aa06:	4623      	mov	r3, r4
 800aa08:	901e      	str	r0, [sp, #120]	; 0x78
 800aa0a:	9519      	str	r5, [sp, #100]	; 0x64
 800aa0c:	f001 fa3e 	bl	800be8c <st_int8_to16_dual>
 800aa10:	e7e2      	b.n	800a9d8 <st_sssa8_ch_convolve_rgb+0x410>
 800aa12:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800aa14:	9908      	ldr	r1, [sp, #32]
 800aa16:	3301      	adds	r3, #1
 800aa18:	b21a      	sxth	r2, r3
 800aa1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aa1c:	9225      	str	r2, [sp, #148]	; 0x94
 800aa1e:	440b      	add	r3, r1
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	931f      	str	r3, [sp, #124]	; 0x7c
 800aa24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa26:	4293      	cmp	r3, r2
 800aa28:	4614      	mov	r4, r2
 800aa2a:	f73f ae77 	bgt.w	800a71c <st_sssa8_ch_convolve_rgb+0x154>
 800aa2e:	2000      	movs	r0, #0
 800aa30:	b049      	add	sp, #292	; 0x124
 800aa32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa36:	428e      	cmp	r6, r1
 800aa38:	f845 4f04 	str.w	r4, [r5, #4]!
 800aa3c:	f47f ae02 	bne.w	800a644 <st_sssa8_ch_convolve_rgb+0x7c>
 800aa40:	e611      	b.n	800a666 <st_sssa8_ch_convolve_rgb+0x9e>
 800aa42:	4613      	mov	r3, r2
 800aa44:	3301      	adds	r3, #1
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	9327      	str	r3, [sp, #156]	; 0x9c
 800aa4a:	e656      	b.n	800a6fa <st_sssa8_ch_convolve_rgb+0x132>
 800aa4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d0ed      	beq.n	800aa2e <st_sssa8_ch_convolve_rgb+0x466>
 800aa52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa54:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800aa58:	4253      	negs	r3, r2
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	9310      	str	r3, [sp, #64]	; 0x40
 800aa5e:	9307      	str	r3, [sp, #28]
 800aa60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa62:	2100      	movs	r1, #0
 800aa64:	eba4 0008 	sub.w	r0, r4, r8
 800aa68:	1a9b      	subs	r3, r3, r2
 800aa6a:	910c      	str	r1, [sp, #48]	; 0x30
 800aa6c:	9009      	str	r0, [sp, #36]	; 0x24
 800aa6e:	460c      	mov	r4, r1
 800aa70:	9324      	str	r3, [sp, #144]	; 0x90
 800aa72:	9b08      	ldr	r3, [sp, #32]
 800aa74:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800aa76:	a834      	add	r0, sp, #208	; 0xd0
 800aa78:	fb03 2404 	mla	r4, r3, r4, r2
 800aa7c:	f04f 0900 	mov.w	r9, #0
 800aa80:	f000 fd48 	bl	800b514 <ai_padding_opt_phase1>
 800aa84:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 800aa88:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800aa8c:	9306      	str	r3, [sp, #24]
 800aa8e:	464b      	mov	r3, r9
 800aa90:	9a34      	ldr	r2, [sp, #208]	; 0xd0
 800aa92:	2a00      	cmp	r2, #0
 800aa94:	f040 8123 	bne.w	800acde <st_sssa8_ch_convolve_rgb+0x716>
 800aa98:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800aa9a:	2a00      	cmp	r2, #0
 800aa9c:	f040 8125 	bne.w	800acea <st_sssa8_ch_convolve_rgb+0x722>
 800aaa0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	3a01      	subs	r2, #1
 800aaa6:	9236      	str	r2, [sp, #216]	; 0xd8
 800aaa8:	f8ad 10f6 	strh.w	r1, [sp, #246]	; 0xf6
 800aaac:	9a06      	ldr	r2, [sp, #24]
 800aaae:	4294      	cmp	r4, r2
 800aab0:	dd57      	ble.n	800ab62 <st_sssa8_ch_convolve_rgb+0x59a>
 800aab2:	9a08      	ldr	r2, [sp, #32]
 800aab4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800aab6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800aaba:	fb03 1302 	mla	r3, r3, r2, r1
 800aabe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aac0:	9906      	ldr	r1, [sp, #24]
 800aac2:	1a9b      	subs	r3, r3, r2
 800aac4:	f9bd 206c 	ldrsh.w	r2, [sp, #108]	; 0x6c
 800aac8:	fa0f fc88 	sxth.w	ip, r8
 800aacc:	460d      	mov	r5, r1
 800aace:	459c      	cmp	ip, r3
 800aad0:	da40      	bge.n	800ab54 <st_sssa8_ch_convolve_rgb+0x58c>
 800aad2:	2d00      	cmp	r5, #0
 800aad4:	fb01 f90b 	mul.w	r9, r1, fp
 800aad8:	f2c0 80ed 	blt.w	800acb6 <st_sssa8_ch_convolve_rgb+0x6ee>
 800aadc:	458b      	cmp	fp, r1
 800aade:	4661      	mov	r1, ip
 800aae0:	dd2c      	ble.n	800ab3c <st_sssa8_ch_convolve_rgb+0x574>
 800aae2:	4666      	mov	r6, ip
 800aae4:	e020      	b.n	800ab28 <st_sssa8_ch_convolve_rgb+0x560>
 800aae6:	eb09 0e06 	add.w	lr, r9, r6
 800aaea:	45b3      	cmp	fp, r6
 800aaec:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 800aaf0:	dd1e      	ble.n	800ab30 <st_sssa8_ch_convolve_rgb+0x568>
 800aaf2:	f857 e00e 	ldr.w	lr, [r7, lr]
 800aaf6:	fa2f f68e 	sxtb16	r6, lr
 800aafa:	9611      	str	r6, [sp, #68]	; 0x44
 800aafc:	0c36      	lsrs	r6, r6, #16
 800aafe:	0436      	lsls	r6, r6, #16
 800ab00:	ea4f 2e3e 	mov.w	lr, lr, ror #8
 800ab04:	fa2f fe8e 	sxtb16	lr, lr
 800ab08:	fa1f fe8e 	uxth.w	lr, lr
 800ab0c:	ea46 0e0e 	orr.w	lr, r6, lr
 800ab10:	f9bd 6044 	ldrsh.w	r6, [sp, #68]	; 0x44
 800ab14:	f8ca e002 	str.w	lr, [sl, #2]
 800ab18:	3101      	adds	r1, #1
 800ab1a:	b209      	sxth	r1, r1
 800ab1c:	428b      	cmp	r3, r1
 800ab1e:	f820 6c06 	strh.w	r6, [r0, #-6]
 800ab22:	4682      	mov	sl, r0
 800ab24:	460e      	mov	r6, r1
 800ab26:	dd15      	ble.n	800ab54 <st_sssa8_ch_convolve_rgb+0x58c>
 800ab28:	2900      	cmp	r1, #0
 800ab2a:	f10a 0006 	add.w	r0, sl, #6
 800ab2e:	dada      	bge.n	800aae6 <st_sssa8_ch_convolve_rgb+0x51e>
 800ab30:	f820 2c04 	strh.w	r2, [r0, #-4]
 800ab34:	f820 2c02 	strh.w	r2, [r0, #-2]
 800ab38:	4616      	mov	r6, r2
 800ab3a:	e7ed      	b.n	800ab18 <st_sssa8_ch_convolve_rgb+0x550>
 800ab3c:	3101      	adds	r1, #1
 800ab3e:	f10a 0a06 	add.w	sl, sl, #6
 800ab42:	b209      	sxth	r1, r1
 800ab44:	428b      	cmp	r3, r1
 800ab46:	f82a 2c04 	strh.w	r2, [sl, #-4]
 800ab4a:	f82a 2c02 	strh.w	r2, [sl, #-2]
 800ab4e:	f82a 2c06 	strh.w	r2, [sl, #-6]
 800ab52:	dcf3      	bgt.n	800ab3c <st_sssa8_ch_convolve_rgb+0x574>
 800ab54:	3501      	adds	r5, #1
 800ab56:	b22d      	sxth	r5, r5
 800ab58:	42a5      	cmp	r5, r4
 800ab5a:	4629      	mov	r1, r5
 800ab5c:	dbb7      	blt.n	800aace <st_sssa8_ch_convolve_rgb+0x506>
 800ab5e:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 800ab62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab64:	4553      	cmp	r3, sl
 800ab66:	f000 8101 	beq.w	800ad6c <st_sssa8_ch_convolve_rgb+0x7a4>
 800ab6a:	f109 0301 	add.w	r3, r9, #1
 800ab6e:	fa0f f983 	sxth.w	r9, r3
 800ab72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab74:	9b08      	ldr	r3, [sp, #32]
 800ab76:	454a      	cmp	r2, r9
 800ab78:	4443      	add	r3, r8
 800ab7a:	fa1f f883 	uxth.w	r8, r3
 800ab7e:	464b      	mov	r3, r9
 800ab80:	dc86      	bgt.n	800aa90 <st_sssa8_ch_convolve_rgb+0x4c8>
 800ab82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab84:	3301      	adds	r3, #1
 800ab86:	b21a      	sxth	r2, r3
 800ab88:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 800ab8c:	440b      	add	r3, r1
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	9307      	str	r3, [sp, #28]
 800ab92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab94:	920c      	str	r2, [sp, #48]	; 0x30
 800ab96:	4293      	cmp	r3, r2
 800ab98:	4614      	mov	r4, r2
 800ab9a:	f73f af6a 	bgt.w	800aa72 <st_sssa8_ch_convolve_rgb+0x4aa>
 800ab9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aba0:	4552      	cmp	r2, sl
 800aba2:	f43f af44 	beq.w	800aa2e <st_sssa8_ch_convolve_rgb+0x466>
 800aba6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800aba8:	2900      	cmp	r1, #0
 800abaa:	f43f af40 	beq.w	800aa2e <st_sssa8_ch_convolve_rgb+0x466>
 800abae:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800abb0:	9814      	ldr	r0, [sp, #80]	; 0x50
 800abb2:	4d95      	ldr	r5, [pc, #596]	; (800ae08 <st_sssa8_ch_convolve_rgb+0x840>)
 800abb4:	1f27      	subs	r7, r4, #4
 800abb6:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800abb8:	f1a4 0902 	sub.w	r9, r4, #2
 800abbc:	9c57      	ldr	r4, [sp, #348]	; 0x15c
 800abbe:	f1a4 0a04 	sub.w	sl, r4, #4
 800abc2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800abc4:	0886      	lsrs	r6, r0, #2
 800abc6:	1e73      	subs	r3, r6, #1
 800abc8:	f1a4 0b04 	sub.w	fp, r4, #4
 800abcc:	9c5b      	ldr	r4, [sp, #364]	; 0x16c
 800abce:	b29b      	uxth	r3, r3
 800abd0:	3301      	adds	r3, #1
 800abd2:	4421      	add	r1, r4
 800abd4:	9108      	str	r1, [sp, #32]
 800abd6:	0099      	lsls	r1, r3, #2
 800abd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800abdc:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
 800abe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800abe2:	9107      	str	r1, [sp, #28]
 800abe4:	f000 0e03 	and.w	lr, r0, #3
 800abe8:	4626      	mov	r6, r4
 800abea:	981d      	ldr	r0, [sp, #116]	; 0x74
 800abec:	f857 3f04 	ldr.w	r3, [r7, #4]!
 800abf0:	2a00      	cmp	r2, #0
 800abf2:	d05e      	beq.n	800acb2 <st_sssa8_ch_convolve_rgb+0x6ea>
 800abf4:	9a07      	ldr	r2, [sp, #28]
 800abf6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800abfa:	1882      	adds	r2, r0, r2
 800abfc:	9206      	str	r2, [sp, #24]
 800abfe:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac02:	fa2f f482 	sxtb16	r4, r2
 800ac06:	b2a1      	uxth	r1, r4
 800ac08:	ea4f 2232 	mov.w	r2, r2, ror #8
 800ac0c:	f8d8 c000 	ldr.w	ip, [r8]
 800ac10:	fa2f f282 	sxtb16	r2, r2
 800ac14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ac18:	fb21 310c 	smlad	r1, r1, ip, r3
 800ac1c:	ea02 0305 	and.w	r3, r2, r5
 800ac20:	ea43 4414 	orr.w	r4, r3, r4, lsr #16
 800ac24:	f108 0808 	add.w	r8, r8, #8
 800ac28:	f858 3c04 	ldr.w	r3, [r8, #-4]
 800ac2c:	fb24 1303 	smlad	r3, r4, r3, r1
 800ac30:	9a06      	ldr	r2, [sp, #24]
 800ac32:	4290      	cmp	r0, r2
 800ac34:	d1e3      	bne.n	800abfe <st_sssa8_ch_convolve_rgb+0x636>
 800ac36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac38:	f1be 0f00 	cmp.w	lr, #0
 800ac3c:	d017      	beq.n	800ac6e <st_sssa8_ch_convolve_rgb+0x6a6>
 800ac3e:	f990 1000 	ldrsb.w	r1, [r0]
 800ac42:	8814      	ldrh	r4, [r2, #0]
 800ac44:	f1be 0f01 	cmp.w	lr, #1
 800ac48:	fb14 3301 	smlabb	r3, r4, r1, r3
 800ac4c:	f000 80bd 	beq.w	800adca <st_sssa8_ch_convolve_rgb+0x802>
 800ac50:	f990 1001 	ldrsb.w	r1, [r0, #1]
 800ac54:	8854      	ldrh	r4, [r2, #2]
 800ac56:	f1be 0f02 	cmp.w	lr, #2
 800ac5a:	fb14 3301 	smlabb	r3, r4, r1, r3
 800ac5e:	f000 80b2 	beq.w	800adc6 <st_sssa8_ch_convolve_rgb+0x7fe>
 800ac62:	8891      	ldrh	r1, [r2, #4]
 800ac64:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800ac68:	3003      	adds	r0, #3
 800ac6a:	fb11 3302 	smlabb	r3, r1, r2, r3
 800ac6e:	f939 1f02 	ldrsh.w	r1, [r9, #2]!
 800ac72:	f85a cf04 	ldr.w	ip, [sl, #4]!
 800ac76:	f85b 4f04 	ldr.w	r4, [fp, #4]!
 800ac7a:	2915      	cmp	r1, #21
 800ac7c:	f106 0601 	add.w	r6, r6, #1
 800ac80:	f340 8095 	ble.w	800adae <st_sssa8_ch_convolve_rgb+0x7e6>
 800ac84:	1e8a      	subs	r2, r1, #2
 800ac86:	f04f 0801 	mov.w	r8, #1
 800ac8a:	3901      	subs	r1, #1
 800ac8c:	fa08 f202 	lsl.w	r2, r8, r2
 800ac90:	fb53 230c 	smmla	r3, r3, ip, r2
 800ac94:	410b      	asrs	r3, r1
 800ac96:	4423      	add	r3, r4
 800ac98:	f303 0307 	ssat	r3, #8, r3
 800ac9c:	f806 3c01 	strb.w	r3, [r6, #-1]
 800aca0:	9b08      	ldr	r3, [sp, #32]
 800aca2:	42b3      	cmp	r3, r6
 800aca4:	f43f aec3 	beq.w	800aa2e <st_sssa8_ch_convolve_rgb+0x466>
 800aca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acaa:	f857 3f04 	ldr.w	r3, [r7, #4]!
 800acae:	2a00      	cmp	r2, #0
 800acb0:	d1a0      	bne.n	800abf4 <st_sssa8_ch_convolve_rgb+0x62c>
 800acb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acb4:	e7c0      	b.n	800ac38 <st_sssa8_ch_convolve_rgb+0x670>
 800acb6:	4661      	mov	r1, ip
 800acb8:	3101      	adds	r1, #1
 800acba:	f10a 0a06 	add.w	sl, sl, #6
 800acbe:	b209      	sxth	r1, r1
 800acc0:	4299      	cmp	r1, r3
 800acc2:	f82a 2c04 	strh.w	r2, [sl, #-4]
 800acc6:	f82a 2c02 	strh.w	r2, [sl, #-2]
 800acca:	f82a 2c06 	strh.w	r2, [sl, #-6]
 800acce:	dbf3      	blt.n	800acb8 <st_sssa8_ch_convolve_rgb+0x6f0>
 800acd0:	3501      	adds	r5, #1
 800acd2:	b22d      	sxth	r5, r5
 800acd4:	42a5      	cmp	r5, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	f6ff aef9 	blt.w	800aace <st_sssa8_ch_convolve_rgb+0x506>
 800acdc:	e73f      	b.n	800ab5e <st_sssa8_ch_convolve_rgb+0x596>
 800acde:	3a01      	subs	r2, #1
 800ace0:	2101      	movs	r1, #1
 800ace2:	9234      	str	r2, [sp, #208]	; 0xd0
 800ace4:	f8ad 10f6 	strh.w	r1, [sp, #246]	; 0xf6
 800ace8:	e6e0      	b.n	800aaac <st_sssa8_ch_convolve_rgb+0x4e4>
 800acea:	f8bd 10f4 	ldrh.w	r1, [sp, #244]	; 0xf4
 800acee:	f8ad 10f6 	strh.w	r1, [sp, #246]	; 0xf6
 800acf2:	3a01      	subs	r2, #1
 800acf4:	2901      	cmp	r1, #1
 800acf6:	9235      	str	r2, [sp, #212]	; 0xd4
 800acf8:	f43f aed8 	beq.w	800aaac <st_sssa8_ch_convolve_rgb+0x4e4>
 800acfc:	9a06      	ldr	r2, [sp, #24]
 800acfe:	4294      	cmp	r4, r2
 800ad00:	f77f af2f 	ble.w	800ab62 <st_sssa8_ch_convolve_rgb+0x59a>
 800ad04:	9908      	ldr	r1, [sp, #32]
 800ad06:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ad08:	fb03 0301 	mla	r3, r3, r1, r0
 800ad0c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800ad0e:	fa0f fe88 	sxth.w	lr, r8
 800ad12:	1a5e      	subs	r6, r3, r1
 800ad14:	4694      	mov	ip, r2
 800ad16:	4615      	mov	r5, r2
 800ad18:	4576      	cmp	r6, lr
 800ad1a:	dd1c      	ble.n	800ad56 <st_sssa8_ch_convolve_rgb+0x78e>
 800ad1c:	fb05 f10b 	mul.w	r1, r5, fp
 800ad20:	4672      	mov	r2, lr
 800ad22:	4673      	mov	r3, lr
 800ad24:	440b      	add	r3, r1
 800ad26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ad2a:	3201      	adds	r2, #1
 800ad2c:	58fb      	ldr	r3, [r7, r3]
 800ad2e:	fa2f f083 	sxtb16	r0, r3
 800ad32:	0c05      	lsrs	r5, r0, #16
 800ad34:	b212      	sxth	r2, r2
 800ad36:	ea4f 2333 	mov.w	r3, r3, ror #8
 800ad3a:	042d      	lsls	r5, r5, #16
 800ad3c:	fa2f f383 	sxtb16	r3, r3
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	432b      	orrs	r3, r5
 800ad44:	42b2      	cmp	r2, r6
 800ad46:	f8ca 3002 	str.w	r3, [sl, #2]
 800ad4a:	f8aa 0000 	strh.w	r0, [sl]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	f10a 0a06 	add.w	sl, sl, #6
 800ad54:	dbe6      	blt.n	800ad24 <st_sssa8_ch_convolve_rgb+0x75c>
 800ad56:	f10c 0c01 	add.w	ip, ip, #1
 800ad5a:	fa0f fc8c 	sxth.w	ip, ip
 800ad5e:	45a4      	cmp	ip, r4
 800ad60:	4665      	mov	r5, ip
 800ad62:	dbd9      	blt.n	800ad18 <st_sssa8_ch_convolve_rgb+0x750>
 800ad64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad66:	4553      	cmp	r3, sl
 800ad68:	f47f aeff 	bne.w	800ab6a <st_sssa8_ch_convolve_rgb+0x5a2>
 800ad6c:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 800ad6e:	9304      	str	r3, [sp, #16]
 800ad70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad72:	9303      	str	r3, [sp, #12]
 800ad74:	9b57      	ldr	r3, [sp, #348]	; 0x15c
 800ad76:	9302      	str	r3, [sp, #8]
 800ad78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ad7a:	9301      	str	r3, [sp, #4]
 800ad7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ad86:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ad88:	f000 fc0c 	bl	800b5a4 <st_sssa8_ch_nn_mat_mult_kernel>
 800ad8c:	f109 0301 	add.w	r3, r9, #1
 800ad90:	fa0f f983 	sxth.w	r9, r3
 800ad94:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ad96:	9b08      	ldr	r3, [sp, #32]
 800ad98:	905b      	str	r0, [sp, #364]	; 0x16c
 800ad9a:	4443      	add	r3, r8
 800ad9c:	454a      	cmp	r2, r9
 800ad9e:	fa1f f883 	uxth.w	r8, r3
 800ada2:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 800ada6:	464b      	mov	r3, r9
 800ada8:	f73f ae72 	bgt.w	800aa90 <st_sssa8_ch_convolve_rgb+0x4c8>
 800adac:	e6e9      	b.n	800ab82 <st_sssa8_ch_convolve_rgb+0x5ba>
 800adae:	2900      	cmp	r1, #0
 800adb0:	dd0d      	ble.n	800adce <st_sssa8_ch_convolve_rgb+0x806>
 800adb2:	005b      	lsls	r3, r3, #1
 800adb4:	fb53 430c 	smmla	r3, r3, ip, r4
 800adb8:	fa43 f101 	asr.w	r1, r3, r1
 800adbc:	f301 0307 	ssat	r3, #8, r1
 800adc0:	f806 3c01 	strb.w	r3, [r6, #-1]
 800adc4:	e76c      	b.n	800aca0 <st_sssa8_ch_convolve_rgb+0x6d8>
 800adc6:	3002      	adds	r0, #2
 800adc8:	e751      	b.n	800ac6e <st_sssa8_ch_convolve_rgb+0x6a6>
 800adca:	3001      	adds	r0, #1
 800adcc:	e74f      	b.n	800ac6e <st_sssa8_ch_convolve_rgb+0x6a6>
 800adce:	f1c1 0101 	rsb	r1, r1, #1
 800add2:	408b      	lsls	r3, r1
 800add4:	f303 031f 	ssat	r3, #32, r3
 800add8:	fb53 f31c 	smmulr	r3, r3, ip
 800addc:	4423      	add	r3, r4
 800adde:	f303 0307 	ssat	r3, #8, r3
 800ade2:	f806 3c01 	strb.w	r3, [r6, #-1]
 800ade6:	e75b      	b.n	800aca0 <st_sssa8_ch_convolve_rgb+0x6d8>
 800ade8:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 800adec:	990a      	ldr	r1, [sp, #40]	; 0x28
 800adee:	981d      	ldr	r0, [sp, #116]	; 0x74
 800adf0:	f001 f84c 	bl	800be8c <st_int8_to16_dual>
 800adf4:	2301      	movs	r3, #1
 800adf6:	9326      	str	r3, [sp, #152]	; 0x98
 800adf8:	e464      	b.n	800a6c4 <st_sssa8_ch_convolve_rgb+0xfc>
 800adfa:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800adfc:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 800ae00:	e434      	b.n	800a66c <st_sssa8_ch_convolve_rgb+0xa4>
 800ae02:	f06f 0002 	mvn.w	r0, #2
 800ae06:	e613      	b.n	800aa30 <st_sssa8_ch_convolve_rgb+0x468>
 800ae08:	ffff0000 	.word	0xffff0000

0800ae0c <st_sssa8_ch_convolve_1x1_WeightsPrefetch>:
 800ae0c:	b570      	push	{r4, r5, r6, lr}
 800ae0e:	685e      	ldr	r6, [r3, #4]
 800ae10:	f06f 0509 	mvn.w	r5, #9
 800ae14:	fb05 6501 	mla	r5, r5, r1, r6
 800ae18:	fb02 f601 	mul.w	r6, r2, r1
 800ae1c:	ebb5 0f46 	cmp.w	r5, r6, lsl #1
 800ae20:	db06      	blt.n	800ae30 <st_sssa8_ch_convolve_1x1_WeightsPrefetch+0x24>
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 800ae28:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800ae2c:	f001 f984 	bl	800c138 <st_sssa8_ch_fullW_prefetch>
 800ae30:	2000      	movs	r0, #0
 800ae32:	bd70      	pop	{r4, r5, r6, pc}

0800ae34 <st_sssa8_ch_convolve_1x1>:
 800ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae38:	b091      	sub	sp, #68	; 0x44
 800ae3a:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
 800ae3e:	f8bd 5070 	ldrh.w	r5, [sp, #112]	; 0x70
 800ae42:	f99d 4094 	ldrsb.w	r4, [sp, #148]	; 0x94
 800ae46:	940e      	str	r4, [sp, #56]	; 0x38
 800ae48:	2d01      	cmp	r5, #1
 800ae4a:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 800ae4e:	f8bd 6074 	ldrh.w	r6, [sp, #116]	; 0x74
 800ae52:	f8bd 8078 	ldrh.w	r8, [sp, #120]	; 0x78
 800ae56:	f8bd 907c 	ldrh.w	r9, [sp, #124]	; 0x7c
 800ae5a:	f8bd a080 	ldrh.w	sl, [sp, #128]	; 0x80
 800ae5e:	f8bd e084 	ldrh.w	lr, [sp, #132]	; 0x84
 800ae62:	f99d c098 	ldrsb.w	ip, [sp, #152]	; 0x98
 800ae66:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800ae68:	920d      	str	r2, [sp, #52]	; 0x34
 800ae6a:	d165      	bne.n	800af38 <st_sssa8_ch_convolve_1x1+0x104>
 800ae6c:	2e01      	cmp	r6, #1
 800ae6e:	d163      	bne.n	800af38 <st_sssa8_ch_convolve_1x1+0x104>
 800ae70:	f1b8 0f00 	cmp.w	r8, #0
 800ae74:	d160      	bne.n	800af38 <st_sssa8_ch_convolve_1x1+0x104>
 800ae76:	f1b9 0f00 	cmp.w	r9, #0
 800ae7a:	d15d      	bne.n	800af38 <st_sssa8_ch_convolve_1x1+0x104>
 800ae7c:	f1ba 0f01 	cmp.w	sl, #1
 800ae80:	d15a      	bne.n	800af38 <st_sssa8_ch_convolve_1x1+0x104>
 800ae82:	f1be 0f01 	cmp.w	lr, #1
 800ae86:	d157      	bne.n	800af38 <st_sssa8_ch_convolve_1x1+0x104>
 800ae88:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ae8c:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 800ae90:	eb0a 0907 	add.w	r9, sl, r7
 800ae94:	eb02 0949 	add.w	r9, r2, r9, lsl #1
 800ae98:	ebc7 7887 	rsb	r8, r7, r7, lsl #30
 800ae9c:	910f      	str	r1, [sp, #60]	; 0x3c
 800ae9e:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 800aea2:	2f00      	cmp	r7, #0
 800aea4:	d04d      	beq.n	800af42 <st_sssa8_ch_convolve_1x1+0x10e>
 800aea6:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800aea8:	ea4f 0b47 	mov.w	fp, r7, lsl #1
 800aeac:	eb04 050b 	add.w	r5, r4, fp
 800aeb0:	f1a8 0604 	sub.w	r6, r8, #4
 800aeb4:	f934 2b02 	ldrsh.w	r2, [r4], #2
 800aeb8:	1e51      	subs	r1, r2, #1
 800aeba:	b289      	uxth	r1, r1
 800aebc:	fa0e f002 	lsl.w	r0, lr, r2
 800aec0:	2914      	cmp	r1, #20
 800aec2:	fa0c f202 	lsl.w	r2, ip, r2
 800aec6:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 800aeca:	d830      	bhi.n	800af2e <st_sssa8_ch_convolve_1x1+0xfa>
 800aecc:	42a5      	cmp	r5, r4
 800aece:	f846 2f04 	str.w	r2, [r6, #4]!
 800aed2:	d1ef      	bne.n	800aeb4 <st_sssa8_ch_convolve_1x1+0x80>
 800aed4:	9524      	str	r5, [sp, #144]	; 0x90
 800aed6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800aed8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800aeda:	44d0      	add	r8, sl
 800aedc:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 800aee0:	f06f 0409 	mvn.w	r4, #9
 800aee4:	fb02 f201 	mul.w	r2, r2, r1
 800aee8:	fb04 5407 	mla	r4, r4, r7, r5
 800aeec:	fb07 f503 	mul.w	r5, r7, r3
 800aef0:	ebb4 0f45 	cmp.w	r4, r5, lsl #1
 800aef4:	9202      	str	r2, [sp, #8]
 800aef6:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800aef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aefa:	f8cd 901c 	str.w	r9, [sp, #28]
 800aefe:	bfac      	ite	ge
 800af00:	4649      	movge	r1, r9
 800af02:	2100      	movlt	r1, #0
 800af04:	e9cd 3204 	strd	r3, r2, [sp, #16]
 800af08:	eba4 050b 	sub.w	r5, r4, fp
 800af0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	eba8 040a 	sub.w	r4, r8, sl
 800af14:	9108      	str	r1, [sp, #32]
 800af16:	9501      	str	r5, [sp, #4]
 800af18:	9406      	str	r4, [sp, #24]
 800af1a:	9703      	str	r7, [sp, #12]
 800af1c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800af1e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800af20:	991a      	ldr	r1, [sp, #104]	; 0x68
 800af22:	f001 f9fb 	bl	800c31c <st_sssa8_ch_nn_mat_mult_nt_t>
 800af26:	2000      	movs	r0, #0
 800af28:	b011      	add	sp, #68	; 0x44
 800af2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2e:	42a5      	cmp	r5, r4
 800af30:	f846 cf04 	str.w	ip, [r6, #4]!
 800af34:	d1be      	bne.n	800aeb4 <st_sssa8_ch_convolve_1x1+0x80>
 800af36:	e7cd      	b.n	800aed4 <st_sssa8_ch_convolve_1x1+0xa0>
 800af38:	f06f 0002 	mvn.w	r0, #2
 800af3c:	b011      	add	sp, #68	; 0x44
 800af3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af42:	46bb      	mov	fp, r7
 800af44:	460d      	mov	r5, r1
 800af46:	e7c9      	b.n	800aedc <st_sssa8_ch_convolve_1x1+0xa8>

0800af48 <st_sssa8_ch_fully_connected>:
 800af48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af4c:	b097      	sub	sp, #92	; 0x5c
 800af4e:	461e      	mov	r6, r3
 800af50:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800af54:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800af56:	9612      	str	r6, [sp, #72]	; 0x48
 800af58:	4476      	add	r6, lr
 800af5a:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 800af5e:	940a      	str	r4, [sp, #40]	; 0x28
 800af60:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800af62:	9204      	str	r2, [sp, #16]
 800af64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af66:	9d21      	ldr	r5, [sp, #132]	; 0x84
 800af68:	f99d 3088 	ldrsb.w	r3, [sp, #136]	; 0x88
 800af6c:	f99d 708c 	ldrsb.w	r7, [sp, #140]	; 0x8c
 800af70:	ebc4 7c84 	rsb	ip, r4, r4, lsl #30
 800af74:	4688      	mov	r8, r1
 800af76:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800af7a:	2c00      	cmp	r4, #0
 800af7c:	f000 826c 	beq.w	800b458 <st_sssa8_ch_fully_connected+0x510>
 800af80:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 800af84:	eb05 0b0a 	add.w	fp, r5, sl
 800af88:	f1ac 0604 	sub.w	r6, ip, #4
 800af8c:	f04f 0901 	mov.w	r9, #1
 800af90:	f935 2b02 	ldrsh.w	r2, [r5], #2
 800af94:	1e51      	subs	r1, r2, #1
 800af96:	b289      	uxth	r1, r1
 800af98:	fa09 f402 	lsl.w	r4, r9, r2
 800af9c:	2914      	cmp	r1, #20
 800af9e:	fa07 f202 	lsl.w	r2, r7, r2
 800afa2:	eb02 0254 	add.w	r2, r2, r4, lsr #1
 800afa6:	f200 81f8 	bhi.w	800b39a <st_sssa8_ch_fully_connected+0x452>
 800afaa:	45ab      	cmp	fp, r5
 800afac:	f846 2f04 	str.w	r2, [r6, #4]!
 800afb0:	d1ee      	bne.n	800af90 <st_sssa8_ch_fully_connected+0x48>
 800afb2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800afb4:	465d      	mov	r5, fp
 800afb6:	44f4      	add	ip, lr
 800afb8:	b29a      	uxth	r2, r3
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800afc0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800afc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800afc6:	eba5 050a 	sub.w	r5, r5, sl
 800afca:	0854      	lsrs	r4, r2, #1
 800afcc:	ebac 060e 	sub.w	r6, ip, lr
 800afd0:	464a      	mov	r2, r9
 800afd2:	4639      	mov	r1, r7
 800afd4:	9514      	str	r5, [sp, #80]	; 0x50
 800afd6:	9613      	str	r6, [sp, #76]	; 0x4c
 800afd8:	f001 feae 	bl	800cd38 <st_int8_reordered_no_shift_zero>
 800afdc:	2c00      	cmp	r4, #0
 800afde:	f000 8176 	beq.w	800b2ce <st_sssa8_ch_fully_connected+0x386>
 800afe2:	f1a9 0310 	sub.w	r3, r9, #16
 800afe6:	091b      	lsrs	r3, r3, #4
 800afe8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800afea:	3c01      	subs	r4, #1
 800afec:	3301      	adds	r3, #1
 800afee:	b2a0      	uxth	r0, r4
 800aff0:	3210      	adds	r2, #16
 800aff2:	011c      	lsls	r4, r3, #4
 800aff4:	eb07 1343 	add.w	r3, r7, r3, lsl #5
 800aff8:	9310      	str	r3, [sp, #64]	; 0x40
 800affa:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
 800affe:	930e      	str	r3, [sp, #56]	; 0x38
 800b000:	f1a9 0303 	sub.w	r3, r9, #3
 800b004:	930f      	str	r3, [sp, #60]	; 0x3c
 800b006:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b008:	9015      	str	r0, [sp, #84]	; 0x54
 800b00a:	3308      	adds	r3, #8
 800b00c:	9309      	str	r3, [sp, #36]	; 0x24
 800b00e:	1d2b      	adds	r3, r5, #4
 800b010:	9308      	str	r3, [sp, #32]
 800b012:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b014:	940b      	str	r4, [sp, #44]	; 0x2c
 800b016:	3308      	adds	r3, #8
 800b018:	9307      	str	r3, [sp, #28]
 800b01a:	f106 0308 	add.w	r3, r6, #8
 800b01e:	9306      	str	r3, [sp, #24]
 800b020:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b022:	3302      	adds	r3, #2
 800b024:	9305      	str	r3, [sp, #20]
 800b026:	f1a9 0304 	sub.w	r3, r9, #4
 800b02a:	9311      	str	r3, [sp, #68]	; 0x44
 800b02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b02e:	9a04      	ldr	r2, [sp, #16]
 800b030:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800b034:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b038:	eb08 0602 	add.w	r6, r8, r2
 800b03c:	2a0f      	cmp	r2, #15
 800b03e:	9603      	str	r6, [sp, #12]
 800b040:	f340 81e4 	ble.w	800b40c <st_sssa8_ch_fully_connected+0x4c4>
 800b044:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b046:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b048:	eb08 0702 	add.w	r7, r8, r2
 800b04c:	461a      	mov	r2, r3
 800b04e:	f8d8 9000 	ldr.w	r9, [r8]
 800b052:	f8d6 c000 	ldr.w	ip, [r6]
 800b056:	fa2f fe89 	sxtb16	lr, r9
 800b05a:	ea4f 243c 	mov.w	r4, ip, ror #8
 800b05e:	ea4f 2939 	mov.w	r9, r9, ror #8
 800b062:	fa2f f384 	sxtb16	r3, r4
 800b066:	fa2f f989 	sxtb16	r9, r9
 800b06a:	fa2f fc8c 	sxtb16	ip, ip
 800b06e:	682c      	ldr	r4, [r5, #0]
 800b070:	fb24 000e 	smlad	r0, r4, lr, r0
 800b074:	fb24 240c 	smlad	r4, r4, ip, r2
 800b078:	6869      	ldr	r1, [r5, #4]
 800b07a:	fb21 0009 	smlad	r0, r1, r9, r0
 800b07e:	fb21 4403 	smlad	r4, r1, r3, r4
 800b082:	f8d8 e004 	ldr.w	lr, [r8, #4]
 800b086:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800b08a:	fa2f fa8e 	sxtb16	sl, lr
 800b08e:	ea4f 233c 	mov.w	r3, ip, ror #8
 800b092:	ea4f 2e3e 	mov.w	lr, lr, ror #8
 800b096:	fa2f f383 	sxtb16	r3, r3
 800b09a:	fa2f fe8e 	sxtb16	lr, lr
 800b09e:	fa2f fc8c 	sxtb16	ip, ip
 800b0a2:	68a9      	ldr	r1, [r5, #8]
 800b0a4:	fb21 000a 	smlad	r0, r1, sl, r0
 800b0a8:	fb21 410c 	smlad	r1, r1, ip, r4
 800b0ac:	f8d5 900c 	ldr.w	r9, [r5, #12]
 800b0b0:	fb29 0e0e 	smlad	lr, r9, lr, r0
 800b0b4:	fb29 1903 	smlad	r9, r9, r3, r1
 800b0b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b0bc:	68b1      	ldr	r1, [r6, #8]
 800b0be:	fa2f f084 	sxtb16	r0, r4
 800b0c2:	ea4f 2231 	mov.w	r2, r1, ror #8
 800b0c6:	ea4f 2434 	mov.w	r4, r4, ror #8
 800b0ca:	fa2f f282 	sxtb16	r2, r2
 800b0ce:	fa2f f484 	sxtb16	r4, r4
 800b0d2:	fa2f f181 	sxtb16	r1, r1
 800b0d6:	692b      	ldr	r3, [r5, #16]
 800b0d8:	fb23 ee00 	smlad	lr, r3, r0, lr
 800b0dc:	fb23 9301 	smlad	r3, r3, r1, r9
 800b0e0:	f8d5 c014 	ldr.w	ip, [r5, #20]
 800b0e4:	fb2c e404 	smlad	r4, ip, r4, lr
 800b0e8:	fb2c 3c02 	smlad	ip, ip, r2, r3
 800b0ec:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800b0f0:	68f3      	ldr	r3, [r6, #12]
 800b0f2:	fa2f f981 	sxtb16	r9, r1
 800b0f6:	ea4f 2233 	mov.w	r2, r3, ror #8
 800b0fa:	ea4f 2031 	mov.w	r0, r1, ror #8
 800b0fe:	fa2f fe82 	sxtb16	lr, r2
 800b102:	f108 0810 	add.w	r8, r8, #16
 800b106:	3610      	adds	r6, #16
 800b108:	fa2f f080 	sxtb16	r0, r0
 800b10c:	fa2f f383 	sxtb16	r3, r3
 800b110:	69aa      	ldr	r2, [r5, #24]
 800b112:	fb22 4909 	smlad	r9, r2, r9, r4
 800b116:	fb22 c203 	smlad	r2, r2, r3, ip
 800b11a:	69ec      	ldr	r4, [r5, #28]
 800b11c:	3520      	adds	r5, #32
 800b11e:	fb24 9000 	smlad	r0, r4, r0, r9
 800b122:	fb24 220e 	smlad	r2, r4, lr, r2
 800b126:	45b8      	cmp	r8, r7
 800b128:	d191      	bne.n	800b04e <st_sssa8_ch_fully_connected+0x106>
 800b12a:	9903      	ldr	r1, [sp, #12]
 800b12c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 800b130:	4613      	mov	r3, r2
 800b132:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b134:	460c      	mov	r4, r1
 800b136:	4414      	add	r4, r2
 800b138:	9403      	str	r4, [sp, #12]
 800b13a:	4696      	mov	lr, r2
 800b13c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b13e:	4596      	cmp	lr, r2
 800b140:	da36      	bge.n	800b1b0 <st_sssa8_ch_fully_connected+0x268>
 800b142:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b144:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800b148:	eba2 0a0e 	sub.w	sl, r2, lr
 800b14c:	ea4f 0a9a 	mov.w	sl, sl, lsr #2
 800b150:	f10a 0201 	add.w	r2, sl, #1
 800b154:	920c      	str	r2, [sp, #48]	; 0x30
 800b156:	0092      	lsls	r2, r2, #2
 800b158:	920d      	str	r2, [sp, #52]	; 0x34
 800b15a:	eb08 0902 	add.w	r9, r8, r2
 800b15e:	465e      	mov	r6, fp
 800b160:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b164:	f858 2b04 	ldr.w	r2, [r8], #4
 800b168:	fa2f f781 	sxtb16	r7, r1
 800b16c:	fa2f f582 	sxtb16	r5, r2
 800b170:	ea4f 2431 	mov.w	r4, r1, ror #8
 800b174:	ea4f 2232 	mov.w	r2, r2, ror #8
 800b178:	fa2f f484 	sxtb16	r4, r4
 800b17c:	fa2f f282 	sxtb16	r2, r2
 800b180:	6831      	ldr	r1, [r6, #0]
 800b182:	fb21 0005 	smlad	r0, r1, r5, r0
 800b186:	fb21 3307 	smlad	r3, r1, r7, r3
 800b18a:	6871      	ldr	r1, [r6, #4]
 800b18c:	3608      	adds	r6, #8
 800b18e:	fb21 0002 	smlad	r0, r1, r2, r0
 800b192:	fb21 3304 	smlad	r3, r1, r4, r3
 800b196:	45c1      	cmp	r9, r8
 800b198:	d1e2      	bne.n	800b160 <st_sssa8_ch_fully_connected+0x218>
 800b19a:	9a03      	ldr	r2, [sp, #12]
 800b19c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b19e:	440a      	add	r2, r1
 800b1a0:	9203      	str	r2, [sp, #12]
 800b1a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b1a4:	f10e 0e04 	add.w	lr, lr, #4
 800b1a8:	eb0e 0e8a 	add.w	lr, lr, sl, lsl #2
 800b1ac:	eb0b 0bc2 	add.w	fp, fp, r2, lsl #3
 800b1b0:	9d04      	ldr	r5, [sp, #16]
 800b1b2:	4575      	cmp	r5, lr
 800b1b4:	dd2d      	ble.n	800b212 <st_sssa8_ch_fully_connected+0x2ca>
 800b1b6:	f9bb 1000 	ldrsh.w	r1, [fp]
 800b1ba:	f998 2000 	ldrsb.w	r2, [r8]
 800b1be:	9c03      	ldr	r4, [sp, #12]
 800b1c0:	fb11 0002 	smlabb	r0, r1, r2, r0
 800b1c4:	f994 4000 	ldrsb.w	r4, [r4]
 800b1c8:	f10e 0201 	add.w	r2, lr, #1
 800b1cc:	4295      	cmp	r5, r2
 800b1ce:	fb11 3304 	smlabb	r3, r1, r4, r3
 800b1d2:	f340 80f5 	ble.w	800b3c0 <st_sssa8_ch_fully_connected+0x478>
 800b1d6:	9903      	ldr	r1, [sp, #12]
 800b1d8:	f9bb 2002 	ldrsh.w	r2, [fp, #2]
 800b1dc:	f998 4001 	ldrsb.w	r4, [r8, #1]
 800b1e0:	f991 1001 	ldrsb.w	r1, [r1, #1]
 800b1e4:	fb12 0004 	smlabb	r0, r2, r4, r0
 800b1e8:	fb12 3301 	smlabb	r3, r2, r1, r3
 800b1ec:	9a04      	ldr	r2, [sp, #16]
 800b1ee:	f10e 0e02 	add.w	lr, lr, #2
 800b1f2:	4572      	cmp	r2, lr
 800b1f4:	f340 810f 	ble.w	800b416 <st_sssa8_ch_fully_connected+0x4ce>
 800b1f8:	9903      	ldr	r1, [sp, #12]
 800b1fa:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800b1fe:	f991 4002 	ldrsb.w	r4, [r1, #2]
 800b202:	f998 1002 	ldrsb.w	r1, [r8, #2]
 800b206:	fb12 3304 	smlabb	r3, r2, r4, r3
 800b20a:	fb12 0001 	smlabb	r0, r2, r1, r0
 800b20e:	f108 0803 	add.w	r8, r8, #3
 800b212:	9a08      	ldr	r2, [sp, #32]
 800b214:	f932 1c04 	ldrsh.w	r1, [r2, #-4]
 800b218:	9a07      	ldr	r2, [sp, #28]
 800b21a:	f852 5c08 	ldr.w	r5, [r2, #-8]
 800b21e:	9a06      	ldr	r2, [sp, #24]
 800b220:	2915      	cmp	r1, #21
 800b222:	f852 4c08 	ldr.w	r4, [r2, #-8]
 800b226:	f340 80be 	ble.w	800b3a6 <st_sssa8_ch_fully_connected+0x45e>
 800b22a:	1e8a      	subs	r2, r1, #2
 800b22c:	2601      	movs	r6, #1
 800b22e:	3901      	subs	r1, #1
 800b230:	fa06 f202 	lsl.w	r2, r6, r2
 800b234:	fb50 2005 	smmla	r0, r0, r5, r2
 800b238:	4108      	asrs	r0, r1
 800b23a:	4420      	add	r0, r4
 800b23c:	f300 0007 	ssat	r0, #8, r0
 800b240:	9a05      	ldr	r2, [sp, #20]
 800b242:	f802 0c02 	strb.w	r0, [r2, #-2]
 800b246:	9a08      	ldr	r2, [sp, #32]
 800b248:	f932 0c02 	ldrsh.w	r0, [r2, #-2]
 800b24c:	2815      	cmp	r0, #21
 800b24e:	f340 8092 	ble.w	800b376 <st_sssa8_ch_fully_connected+0x42e>
 800b252:	9a06      	ldr	r2, [sp, #24]
 800b254:	f852 1c04 	ldr.w	r1, [r2, #-4]
 800b258:	9a07      	ldr	r2, [sp, #28]
 800b25a:	1e84      	subs	r4, r0, #2
 800b25c:	2501      	movs	r5, #1
 800b25e:	3801      	subs	r0, #1
 800b260:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800b264:	fa05 f404 	lsl.w	r4, r5, r4
 800b268:	fb53 4402 	smmla	r4, r3, r2, r4
 800b26c:	fa44 f000 	asr.w	r0, r4, r0
 800b270:	4408      	add	r0, r1
 800b272:	f300 0007 	ssat	r0, #8, r0
 800b276:	9b05      	ldr	r3, [sp, #20]
 800b278:	f803 0c01 	strb.w	r0, [r3, #-1]
 800b27c:	9a04      	ldr	r2, [sp, #16]
 800b27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b280:	4490      	add	r8, r2
 800b282:	9a08      	ldr	r2, [sp, #32]
 800b284:	3204      	adds	r2, #4
 800b286:	9208      	str	r2, [sp, #32]
 800b288:	9a07      	ldr	r2, [sp, #28]
 800b28a:	3208      	adds	r2, #8
 800b28c:	9207      	str	r2, [sp, #28]
 800b28e:	9a06      	ldr	r2, [sp, #24]
 800b290:	3208      	adds	r2, #8
 800b292:	9206      	str	r2, [sp, #24]
 800b294:	9a05      	ldr	r2, [sp, #20]
 800b296:	3202      	adds	r2, #2
 800b298:	9205      	str	r2, [sp, #20]
 800b29a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b29c:	3308      	adds	r3, #8
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2a2:	f47f aec4 	bne.w	800b02e <st_sssa8_ch_fully_connected+0xe6>
 800b2a6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b2a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b2aa:	3401      	adds	r4, #1
 800b2ac:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800b2b0:	9214      	str	r2, [sp, #80]	; 0x50
 800b2b2:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b2b4:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800b2b8:	9225      	str	r2, [sp, #148]	; 0x94
 800b2ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b2bc:	00e3      	lsls	r3, r4, #3
 800b2be:	441a      	add	r2, r3
 800b2c0:	9220      	str	r2, [sp, #128]	; 0x80
 800b2c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b2c4:	441a      	add	r2, r3
 800b2c6:	9224      	str	r2, [sp, #144]	; 0x90
 800b2c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b2ca:	441a      	add	r2, r3
 800b2cc:	9213      	str	r2, [sp, #76]	; 0x4c
 800b2ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b2d0:	07db      	lsls	r3, r3, #31
 800b2d2:	d54c      	bpl.n	800b36e <st_sssa8_ch_fully_connected+0x426>
 800b2d4:	9a04      	ldr	r2, [sp, #16]
 800b2d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b2d8:	0892      	lsrs	r2, r2, #2
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	d01a      	beq.n	800b314 <st_sssa8_ch_fully_connected+0x3cc>
 800b2de:	1e56      	subs	r6, r2, #1
 800b2e0:	b2b6      	uxth	r6, r6
 800b2e2:	3601      	adds	r6, #1
 800b2e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b2e6:	eb08 0786 	add.w	r7, r8, r6, lsl #2
 800b2ea:	f858 2b04 	ldr.w	r2, [r8], #4
 800b2ee:	6820      	ldr	r0, [r4, #0]
 800b2f0:	fa2f f582 	sxtb16	r5, r2
 800b2f4:	6861      	ldr	r1, [r4, #4]
 800b2f6:	ea4f 2232 	mov.w	r2, r2, ror #8
 800b2fa:	3408      	adds	r4, #8
 800b2fc:	fa2f f282 	sxtb16	r2, r2
 800b300:	fb20 3305 	smlad	r3, r0, r5, r3
 800b304:	fb21 3302 	smlad	r3, r1, r2, r3
 800b308:	45b8      	cmp	r8, r7
 800b30a:	d1ee      	bne.n	800b2ea <st_sssa8_ch_fully_connected+0x3a2>
 800b30c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b30e:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 800b312:	920a      	str	r2, [sp, #40]	; 0x28
 800b314:	9a04      	ldr	r2, [sp, #16]
 800b316:	f012 0203 	ands.w	r2, r2, #3
 800b31a:	d013      	beq.n	800b344 <st_sssa8_ch_fully_connected+0x3fc>
 800b31c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b31e:	f998 1000 	ldrsb.w	r1, [r8]
 800b322:	8820      	ldrh	r0, [r4, #0]
 800b324:	2a01      	cmp	r2, #1
 800b326:	fb10 3301 	smlabb	r3, r0, r1, r3
 800b32a:	d00b      	beq.n	800b344 <st_sssa8_ch_fully_connected+0x3fc>
 800b32c:	f998 1001 	ldrsb.w	r1, [r8, #1]
 800b330:	8860      	ldrh	r0, [r4, #2]
 800b332:	2a02      	cmp	r2, #2
 800b334:	fb10 3301 	smlabb	r3, r0, r1, r3
 800b338:	d004      	beq.n	800b344 <st_sssa8_ch_fully_connected+0x3fc>
 800b33a:	f998 2002 	ldrsb.w	r2, [r8, #2]
 800b33e:	88a1      	ldrh	r1, [r4, #4]
 800b340:	fb11 3302 	smlabb	r3, r1, r2, r3
 800b344:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b346:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800b348:	f9b2 1000 	ldrsh.w	r1, [r2]
 800b34c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b34e:	6804      	ldr	r4, [r0, #0]
 800b350:	6812      	ldr	r2, [r2, #0]
 800b352:	2915      	cmp	r1, #21
 800b354:	dd62      	ble.n	800b41c <st_sssa8_ch_fully_connected+0x4d4>
 800b356:	1e8d      	subs	r5, r1, #2
 800b358:	2001      	movs	r0, #1
 800b35a:	3901      	subs	r1, #1
 800b35c:	40a8      	lsls	r0, r5
 800b35e:	fb53 0302 	smmla	r3, r3, r2, r0
 800b362:	410b      	asrs	r3, r1
 800b364:	4423      	add	r3, r4
 800b366:	f303 0307 	ssat	r3, #8, r3
 800b36a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b36c:	7013      	strb	r3, [r2, #0]
 800b36e:	2000      	movs	r0, #0
 800b370:	b017      	add	sp, #92	; 0x5c
 800b372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b376:	2800      	cmp	r0, #0
 800b378:	dd25      	ble.n	800b3c6 <st_sssa8_ch_fully_connected+0x47e>
 800b37a:	9a07      	ldr	r2, [sp, #28]
 800b37c:	9906      	ldr	r1, [sp, #24]
 800b37e:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800b382:	f851 1c04 	ldr.w	r1, [r1, #-4]
 800b386:	005b      	lsls	r3, r3, #1
 800b388:	fb53 1302 	smmla	r3, r3, r2, r1
 800b38c:	4103      	asrs	r3, r0
 800b38e:	f303 0307 	ssat	r3, #8, r3
 800b392:	9a05      	ldr	r2, [sp, #20]
 800b394:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b398:	e770      	b.n	800b27c <st_sssa8_ch_fully_connected+0x334>
 800b39a:	45ab      	cmp	fp, r5
 800b39c:	f846 7f04 	str.w	r7, [r6, #4]!
 800b3a0:	f47f adf6 	bne.w	800af90 <st_sssa8_ch_fully_connected+0x48>
 800b3a4:	e605      	b.n	800afb2 <st_sssa8_ch_fully_connected+0x6a>
 800b3a6:	2900      	cmp	r1, #0
 800b3a8:	dd21      	ble.n	800b3ee <st_sssa8_ch_fully_connected+0x4a6>
 800b3aa:	0040      	lsls	r0, r0, #1
 800b3ac:	fb50 4005 	smmla	r0, r0, r5, r4
 800b3b0:	fa40 f101 	asr.w	r1, r0, r1
 800b3b4:	f301 0107 	ssat	r1, #8, r1
 800b3b8:	9a05      	ldr	r2, [sp, #20]
 800b3ba:	f802 1c02 	strb.w	r1, [r2, #-2]
 800b3be:	e742      	b.n	800b246 <st_sssa8_ch_fully_connected+0x2fe>
 800b3c0:	f108 0801 	add.w	r8, r8, #1
 800b3c4:	e725      	b.n	800b212 <st_sssa8_ch_fully_connected+0x2ca>
 800b3c6:	f1c0 0001 	rsb	r0, r0, #1
 800b3ca:	4083      	lsls	r3, r0
 800b3cc:	f303 031f 	ssat	r3, #32, r3
 800b3d0:	9a07      	ldr	r2, [sp, #28]
 800b3d2:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800b3d6:	fb53 f212 	smmulr	r2, r3, r2
 800b3da:	9b06      	ldr	r3, [sp, #24]
 800b3dc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800b3e0:	441a      	add	r2, r3
 800b3e2:	f302 0207 	ssat	r2, #8, r2
 800b3e6:	9b05      	ldr	r3, [sp, #20]
 800b3e8:	f803 2c01 	strb.w	r2, [r3, #-1]
 800b3ec:	e746      	b.n	800b27c <st_sssa8_ch_fully_connected+0x334>
 800b3ee:	f1c1 0101 	rsb	r1, r1, #1
 800b3f2:	fa00 f101 	lsl.w	r1, r0, r1
 800b3f6:	f301 011f 	ssat	r1, #32, r1
 800b3fa:	fb51 f115 	smmulr	r1, r1, r5
 800b3fe:	4421      	add	r1, r4
 800b400:	f301 0107 	ssat	r1, #8, r1
 800b404:	9a05      	ldr	r2, [sp, #20]
 800b406:	f802 1c02 	strb.w	r1, [r2, #-2]
 800b40a:	e71c      	b.n	800b246 <st_sssa8_ch_fully_connected+0x2fe>
 800b40c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800b410:	f04f 0e00 	mov.w	lr, #0
 800b414:	e692      	b.n	800b13c <st_sssa8_ch_fully_connected+0x1f4>
 800b416:	f108 0802 	add.w	r8, r8, #2
 800b41a:	e6fa      	b.n	800b212 <st_sssa8_ch_fully_connected+0x2ca>
 800b41c:	2900      	cmp	r1, #0
 800b41e:	dd0b      	ble.n	800b438 <st_sssa8_ch_fully_connected+0x4f0>
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	fb53 4302 	smmla	r3, r3, r2, r4
 800b426:	410b      	asrs	r3, r1
 800b428:	f303 0307 	ssat	r3, #8, r3
 800b42c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b42e:	2000      	movs	r0, #0
 800b430:	7013      	strb	r3, [r2, #0]
 800b432:	b017      	add	sp, #92	; 0x5c
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	f1c1 0101 	rsb	r1, r1, #1
 800b43c:	408b      	lsls	r3, r1
 800b43e:	f303 031f 	ssat	r3, #32, r3
 800b442:	fb53 f312 	smmulr	r3, r3, r2
 800b446:	4423      	add	r3, r4
 800b448:	f303 0307 	ssat	r3, #8, r3
 800b44c:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800b44e:	2000      	movs	r0, #0
 800b450:	7013      	strb	r3, [r2, #0]
 800b452:	b017      	add	sp, #92	; 0x5c
 800b454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b458:	46a2      	mov	sl, r4
 800b45a:	4617      	mov	r7, r2
 800b45c:	e5ac      	b.n	800afb8 <st_sssa8_ch_fully_connected+0x70>
 800b45e:	bf00      	nop

0800b460 <ai_padding_opt_init>:
 800b460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b464:	2600      	movs	r6, #0
 800b466:	e9c0 6600 	strd	r6, r6, [r0]
 800b46a:	6086      	str	r6, [r0, #8]
 800b46c:	689d      	ldr	r5, [r3, #8]
 800b46e:	690c      	ldr	r4, [r1, #16]
 800b470:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800b474:	42b5      	cmp	r5, r6
 800b476:	dd20      	ble.n	800b4ba <ai_padding_opt_init+0x5a>
 800b478:	4264      	negs	r4, r4
 800b47a:	46b0      	mov	r8, r6
 800b47c:	46b6      	mov	lr, r6
 800b47e:	46b1      	mov	r9, r6
 800b480:	4637      	mov	r7, r6
 800b482:	e013      	b.n	800b4ac <ai_padding_opt_init+0x4c>
 800b484:	6895      	ldr	r5, [r2, #8]
 800b486:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800b48a:	1b2d      	subs	r5, r5, r4
 800b48c:	42b5      	cmp	r5, r6
 800b48e:	bfb5      	itete	lt
 800b490:	f10e 0e01 	addlt.w	lr, lr, #1
 800b494:	f108 0801 	addge.w	r8, r8, #1
 800b498:	f8c0 e008 	strlt.w	lr, [r0, #8]
 800b49c:	f8c0 8004 	strge.w	r8, [r0, #4]
 800b4a0:	689d      	ldr	r5, [r3, #8]
 800b4a2:	688e      	ldr	r6, [r1, #8]
 800b4a4:	3701      	adds	r7, #1
 800b4a6:	42bd      	cmp	r5, r7
 800b4a8:	4434      	add	r4, r6
 800b4aa:	dd09      	ble.n	800b4c0 <ai_padding_opt_init+0x60>
 800b4ac:	2c00      	cmp	r4, #0
 800b4ae:	dae9      	bge.n	800b484 <ai_padding_opt_init+0x24>
 800b4b0:	f109 0901 	add.w	r9, r9, #1
 800b4b4:	f8c0 9000 	str.w	r9, [r0]
 800b4b8:	e7f2      	b.n	800b4a0 <ai_padding_opt_init+0x40>
 800b4ba:	46b6      	mov	lr, r6
 800b4bc:	46b0      	mov	r8, r6
 800b4be:	46b1      	mov	r9, r6
 800b4c0:	2500      	movs	r5, #0
 800b4c2:	e9c0 9803 	strd	r9, r8, [r0, #12]
 800b4c6:	e9c0 e505 	strd	lr, r5, [r0, #20]
 800b4ca:	e9c0 5507 	strd	r5, r5, [r0, #28]
 800b4ce:	685e      	ldr	r6, [r3, #4]
 800b4d0:	694c      	ldr	r4, [r1, #20]
 800b4d2:	42ae      	cmp	r6, r5
 800b4d4:	f1c4 0400 	rsb	r4, r4, #0
 800b4d8:	dc0f      	bgt.n	800b4fa <ai_padding_opt_init+0x9a>
 800b4da:	e018      	b.n	800b50e <ai_padding_opt_init+0xae>
 800b4dc:	6856      	ldr	r6, [r2, #4]
 800b4de:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800b4e2:	1b36      	subs	r6, r6, r4
 800b4e4:	42be      	cmp	r6, r7
 800b4e6:	da0e      	bge.n	800b506 <ai_padding_opt_init+0xa6>
 800b4e8:	6a06      	ldr	r6, [r0, #32]
 800b4ea:	3601      	adds	r6, #1
 800b4ec:	6206      	str	r6, [r0, #32]
 800b4ee:	685e      	ldr	r6, [r3, #4]
 800b4f0:	68cf      	ldr	r7, [r1, #12]
 800b4f2:	3501      	adds	r5, #1
 800b4f4:	42ae      	cmp	r6, r5
 800b4f6:	443c      	add	r4, r7
 800b4f8:	dd09      	ble.n	800b50e <ai_padding_opt_init+0xae>
 800b4fa:	2c00      	cmp	r4, #0
 800b4fc:	daee      	bge.n	800b4dc <ai_padding_opt_init+0x7c>
 800b4fe:	6986      	ldr	r6, [r0, #24]
 800b500:	3601      	adds	r6, #1
 800b502:	6186      	str	r6, [r0, #24]
 800b504:	e7f3      	b.n	800b4ee <ai_padding_opt_init+0x8e>
 800b506:	69c6      	ldr	r6, [r0, #28]
 800b508:	3601      	adds	r6, #1
 800b50a:	61c6      	str	r6, [r0, #28]
 800b50c:	e7ef      	b.n	800b4ee <ai_padding_opt_init+0x8e>
 800b50e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b512:	bf00      	nop

0800b514 <ai_padding_opt_phase1>:
 800b514:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800b518:	b932      	cbnz	r2, 800b528 <ai_padding_opt_phase1+0x14>
 800b51a:	b993      	cbnz	r3, 800b542 <ai_padding_opt_phase1+0x2e>
 800b51c:	6a03      	ldr	r3, [r0, #32]
 800b51e:	2201      	movs	r2, #1
 800b520:	3b01      	subs	r3, #1
 800b522:	6203      	str	r3, [r0, #32]
 800b524:	8482      	strh	r2, [r0, #36]	; 0x24
 800b526:	e005      	b.n	800b534 <ai_padding_opt_phase1+0x20>
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d0f7      	beq.n	800b51c <ai_padding_opt_phase1+0x8>
 800b52c:	3b01      	subs	r3, #1
 800b52e:	2201      	movs	r2, #1
 800b530:	61c3      	str	r3, [r0, #28]
 800b532:	8482      	strh	r2, [r0, #36]	; 0x24
 800b534:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
 800b538:	6943      	ldr	r3, [r0, #20]
 800b53a:	6083      	str	r3, [r0, #8]
 800b53c:	e9c0 1200 	strd	r1, r2, [r0]
 800b540:	4770      	bx	lr
 800b542:	3b01      	subs	r3, #1
 800b544:	61c3      	str	r3, [r0, #28]
 800b546:	8482      	strh	r2, [r0, #36]	; 0x24
 800b548:	e7f4      	b.n	800b534 <ai_padding_opt_phase1+0x20>
 800b54a:	bf00      	nop

0800b54c <st_uint8_fill>:
 800b54c:	078b      	lsls	r3, r1, #30
 800b54e:	d008      	beq.n	800b562 <st_uint8_fill+0x16>
 800b550:	b90a      	cbnz	r2, 800b556 <st_uint8_fill+0xa>
 800b552:	e01e      	b.n	800b592 <st_uint8_fill+0x46>
 800b554:	b1f2      	cbz	r2, 800b594 <st_uint8_fill+0x48>
 800b556:	f801 0b01 	strb.w	r0, [r1], #1
 800b55a:	078b      	lsls	r3, r1, #30
 800b55c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800b560:	d1f8      	bne.n	800b554 <st_uint8_fill+0x8>
 800b562:	b430      	push	{r4, r5}
 800b564:	0404      	lsls	r4, r0, #16
 800b566:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
 800b56a:	4304      	orrs	r4, r0
 800b56c:	0893      	lsrs	r3, r2, #2
 800b56e:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 800b572:	f002 0503 	and.w	r5, r2, #3
 800b576:	d010      	beq.n	800b59a <st_uint8_fill+0x4e>
 800b578:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800b57c:	f841 4b04 	str.w	r4, [r1], #4
 800b580:	4299      	cmp	r1, r3
 800b582:	d1fb      	bne.n	800b57c <st_uint8_fill+0x30>
 800b584:	b13d      	cbz	r5, 800b596 <st_uint8_fill+0x4a>
 800b586:	462a      	mov	r2, r5
 800b588:	4601      	mov	r1, r0
 800b58a:	bc30      	pop	{r4, r5}
 800b58c:	4618      	mov	r0, r3
 800b58e:	f003 b945 	b.w	800e81c <memset>
 800b592:	4770      	bx	lr
 800b594:	4770      	bx	lr
 800b596:	bc30      	pop	{r4, r5}
 800b598:	4770      	bx	lr
 800b59a:	460b      	mov	r3, r1
 800b59c:	2d00      	cmp	r5, #0
 800b59e:	d1f2      	bne.n	800b586 <st_uint8_fill+0x3a>
 800b5a0:	e7f9      	b.n	800b596 <st_uint8_fill+0x4a>
 800b5a2:	bf00      	nop

0800b5a4 <st_sssa8_ch_nn_mat_mult_kernel>:
 800b5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a8:	b09f      	sub	sp, #124	; 0x7c
 800b5aa:	4683      	mov	fp, r0
 800b5ac:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800b5ae:	f8bd 40a0 	ldrh.w	r4, [sp, #160]	; 0xa0
 800b5b2:	931c      	str	r3, [sp, #112]	; 0x70
 800b5b4:	18c5      	adds	r5, r0, r3
 800b5b6:	085b      	lsrs	r3, r3, #1
 800b5b8:	940c      	str	r4, [sp, #48]	; 0x30
 800b5ba:	9113      	str	r1, [sp, #76]	; 0x4c
 800b5bc:	921a      	str	r2, [sp, #104]	; 0x68
 800b5be:	951b      	str	r5, [sp, #108]	; 0x6c
 800b5c0:	f000 8280 	beq.w	800bac4 <st_sssa8_ch_nn_mat_mult_kernel+0x520>
 800b5c4:	460f      	mov	r7, r1
 800b5c6:	f1a4 0110 	sub.w	r1, r4, #16
 800b5ca:	0909      	lsrs	r1, r1, #4
 800b5cc:	3101      	adds	r1, #1
 800b5ce:	4620      	mov	r0, r4
 800b5d0:	4694      	mov	ip, r2
 800b5d2:	014a      	lsls	r2, r1, #5
 800b5d4:	0109      	lsls	r1, r1, #4
 800b5d6:	eb07 0640 	add.w	r6, r7, r0, lsl #1
 800b5da:	910e      	str	r1, [sp, #56]	; 0x38
 800b5dc:	18b9      	adds	r1, r7, r2
 800b5de:	9118      	str	r1, [sp, #96]	; 0x60
 800b5e0:	18b1      	adds	r1, r6, r2
 800b5e2:	4662      	mov	r2, ip
 800b5e4:	3208      	adds	r2, #8
 800b5e6:	920d      	str	r2, [sp, #52]	; 0x34
 800b5e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800b5ea:	9117      	str	r1, [sp, #92]	; 0x5c
 800b5ec:	3204      	adds	r2, #4
 800b5ee:	9207      	str	r2, [sp, #28]
 800b5f0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800b5f2:	f8df a758 	ldr.w	sl, [pc, #1880]	; 800bd4c <st_sssa8_ch_nn_mat_mult_kernel+0x7a8>
 800b5f6:	9616      	str	r6, [sp, #88]	; 0x58
 800b5f8:	3208      	adds	r2, #8
 800b5fa:	920b      	str	r2, [sp, #44]	; 0x2c
 800b5fc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800b5fe:	f8cd b000 	str.w	fp, [sp]
 800b602:	3b01      	subs	r3, #1
 800b604:	3202      	adds	r2, #2
 800b606:	b29c      	uxth	r4, r3
 800b608:	9209      	str	r2, [sp, #36]	; 0x24
 800b60a:	4663      	mov	r3, ip
 800b60c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800b60e:	941d      	str	r4, [sp, #116]	; 0x74
 800b610:	3310      	adds	r3, #16
 800b612:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
 800b616:	3208      	adds	r2, #8
 800b618:	9114      	str	r1, [sp, #80]	; 0x50
 800b61a:	9208      	str	r2, [sp, #32]
 800b61c:	1ec1      	subs	r1, r0, #3
 800b61e:	1caa      	adds	r2, r5, #2
 800b620:	1f03      	subs	r3, r0, #4
 800b622:	9115      	str	r1, [sp, #84]	; 0x54
 800b624:	920a      	str	r2, [sp, #40]	; 0x28
 800b626:	9319      	str	r3, [sp, #100]	; 0x64
 800b628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b62a:	9d00      	ldr	r5, [sp, #0]
 800b62c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b62e:	18e8      	adds	r0, r5, r3
 800b630:	2b0f      	cmp	r3, #15
 800b632:	9004      	str	r0, [sp, #16]
 800b634:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800b638:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800b63c:	f340 8361 	ble.w	800bd02 <st_sssa8_ch_nn_mat_mult_kernel+0x75e>
 800b640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b642:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
 800b646:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800b64a:	9a00      	ldr	r2, [sp, #0]
 800b64c:	9001      	str	r0, [sp, #4]
 800b64e:	18eb      	adds	r3, r5, r3
 800b650:	9303      	str	r3, [sp, #12]
 800b652:	4625      	mov	r5, r4
 800b654:	4633      	mov	r3, r6
 800b656:	9901      	ldr	r1, [sp, #4]
 800b658:	6812      	ldr	r2, [r2, #0]
 800b65a:	6809      	ldr	r1, [r1, #0]
 800b65c:	fa2f fc82 	sxtb16	ip, r2
 800b660:	ea4f 2232 	mov.w	r2, r2, ror #8
 800b664:	fa2f f282 	sxtb16	r2, r2
 800b668:	ea02 000a 	and.w	r0, r2, sl
 800b66c:	fa1f fb8c 	uxth.w	fp, ip
 800b670:	ea4f 2731 	mov.w	r7, r1, ror #8
 800b674:	ea40 4c1c 	orr.w	ip, r0, ip, lsr #16
 800b678:	fa2f f787 	sxtb16	r7, r7
 800b67c:	fa2f f181 	sxtb16	r1, r1
 800b680:	ea07 0e0a 	and.w	lr, r7, sl
 800b684:	b288      	uxth	r0, r1
 800b686:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800b68a:	ea4e 4111 	orr.w	r1, lr, r1, lsr #16
 800b68e:	ea4b 4202 	orr.w	r2, fp, r2, lsl #16
 800b692:	f8d8 e000 	ldr.w	lr, [r8]
 800b696:	f8d9 7000 	ldr.w	r7, [r9]
 800b69a:	fb22 660e 	smlad	r6, r2, lr, r6
 800b69e:	fb22 3207 	smlad	r2, r2, r7, r3
 800b6a2:	fb20 440e 	smlad	r4, r0, lr, r4
 800b6a6:	fb20 5707 	smlad	r7, r0, r7, r5
 800b6aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b6ae:	f8d9 e004 	ldr.w	lr, [r9, #4]
 800b6b2:	fb2c 6603 	smlad	r6, ip, r3, r6
 800b6b6:	fb2c 2b0e 	smlad	fp, ip, lr, r2
 800b6ba:	fb21 4403 	smlad	r4, r1, r3, r4
 800b6be:	fb21 7e0e 	smlad	lr, r1, lr, r7
 800b6c2:	9b00      	ldr	r3, [sp, #0]
 800b6c4:	9801      	ldr	r0, [sp, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	6840      	ldr	r0, [r0, #4]
 800b6ca:	fa2f f283 	sxtb16	r2, r3
 800b6ce:	ea4f 2333 	mov.w	r3, r3, ror #8
 800b6d2:	fa2f f383 	sxtb16	r3, r3
 800b6d6:	ea03 010a 	and.w	r1, r3, sl
 800b6da:	fa1f fc82 	uxth.w	ip, r2
 800b6de:	ea4f 2530 	mov.w	r5, r0, ror #8
 800b6e2:	ea41 4212 	orr.w	r2, r1, r2, lsr #16
 800b6e6:	fa2f f585 	sxtb16	r5, r5
 800b6ea:	fa2f f080 	sxtb16	r0, r0
 800b6ee:	ea05 070a 	and.w	r7, r5, sl
 800b6f2:	b281      	uxth	r1, r0
 800b6f4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800b6f8:	ea47 4010 	orr.w	r0, r7, r0, lsr #16
 800b6fc:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 800b700:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800b704:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800b708:	fb23 6607 	smlad	r6, r3, r7, r6
 800b70c:	fb23 b305 	smlad	r3, r3, r5, fp
 800b710:	fb21 4407 	smlad	r4, r1, r7, r4
 800b714:	fb21 e105 	smlad	r1, r1, r5, lr
 800b718:	f8d8 500c 	ldr.w	r5, [r8, #12]
 800b71c:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800b720:	fb22 6605 	smlad	r6, r2, r5, r6
 800b724:	fb22 3c07 	smlad	ip, r2, r7, r3
 800b728:	fb20 4405 	smlad	r4, r0, r5, r4
 800b72c:	fb20 1707 	smlad	r7, r0, r7, r1
 800b730:	9900      	ldr	r1, [sp, #0]
 800b732:	9d01      	ldr	r5, [sp, #4]
 800b734:	688a      	ldr	r2, [r1, #8]
 800b736:	68a9      	ldr	r1, [r5, #8]
 800b738:	fa2f f382 	sxtb16	r3, r2
 800b73c:	ea4f 2232 	mov.w	r2, r2, ror #8
 800b740:	fa2f f282 	sxtb16	r2, r2
 800b744:	ea02 050a 	and.w	r5, r2, sl
 800b748:	fa1f fb83 	uxth.w	fp, r3
 800b74c:	ea4f 2e31 	mov.w	lr, r1, ror #8
 800b750:	ea45 4313 	orr.w	r3, r5, r3, lsr #16
 800b754:	fa2f fe8e 	sxtb16	lr, lr
 800b758:	fa2f f181 	sxtb16	r1, r1
 800b75c:	ea0e 000a 	and.w	r0, lr, sl
 800b760:	b28d      	uxth	r5, r1
 800b762:	ea4b 4202 	orr.w	r2, fp, r2, lsl #16
 800b766:	ea45 450e 	orr.w	r5, r5, lr, lsl #16
 800b76a:	ea40 4111 	orr.w	r1, r0, r1, lsr #16
 800b76e:	f8d8 b010 	ldr.w	fp, [r8, #16]
 800b772:	f8d9 e010 	ldr.w	lr, [r9, #16]
 800b776:	fb22 660b 	smlad	r6, r2, fp, r6
 800b77a:	fb22 c20e 	smlad	r2, r2, lr, ip
 800b77e:	fb25 440b 	smlad	r4, r5, fp, r4
 800b782:	fb25 750e 	smlad	r5, r5, lr, r7
 800b786:	f8d8 7014 	ldr.w	r7, [r8, #20]
 800b78a:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800b78e:	fb23 6607 	smlad	r6, r3, r7, r6
 800b792:	fb23 2200 	smlad	r2, r3, r0, r2
 800b796:	9202      	str	r2, [sp, #8]
 800b798:	fb21 4407 	smlad	r4, r1, r7, r4
 800b79c:	fb21 5000 	smlad	r0, r1, r0, r5
 800b7a0:	9a00      	ldr	r2, [sp, #0]
 800b7a2:	9901      	ldr	r1, [sp, #4]
 800b7a4:	68d3      	ldr	r3, [r2, #12]
 800b7a6:	68cd      	ldr	r5, [r1, #12]
 800b7a8:	fa2f fc83 	sxtb16	ip, r3
 800b7ac:	3210      	adds	r2, #16
 800b7ae:	9200      	str	r2, [sp, #0]
 800b7b0:	9a01      	ldr	r2, [sp, #4]
 800b7b2:	fa1f fb8c 	uxth.w	fp, ip
 800b7b6:	ea4f 2333 	mov.w	r3, r3, ror #8
 800b7ba:	fa2f f383 	sxtb16	r3, r3
 800b7be:	ea03 010a 	and.w	r1, r3, sl
 800b7c2:	ea4f 2e35 	mov.w	lr, r5, ror #8
 800b7c6:	ea41 4c1c 	orr.w	ip, r1, ip, lsr #16
 800b7ca:	fa2f fe8e 	sxtb16	lr, lr
 800b7ce:	fa2f f585 	sxtb16	r5, r5
 800b7d2:	ea0e 070a 	and.w	r7, lr, sl
 800b7d6:	b2a9      	uxth	r1, r5
 800b7d8:	ea4b 4303 	orr.w	r3, fp, r3, lsl #16
 800b7dc:	f102 0b10 	add.w	fp, r2, #16
 800b7e0:	f8cd b004 	str.w	fp, [sp, #4]
 800b7e4:	ea47 4715 	orr.w	r7, r7, r5, lsr #16
 800b7e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800b7ec:	f8d8 b018 	ldr.w	fp, [r8, #24]
 800b7f0:	f8d9 5018 	ldr.w	r5, [r9, #24]
 800b7f4:	fb23 660b 	smlad	r6, r3, fp, r6
 800b7f8:	9a02      	ldr	r2, [sp, #8]
 800b7fa:	fb23 2305 	smlad	r3, r3, r5, r2
 800b7fe:	fb21 440b 	smlad	r4, r1, fp, r4
 800b802:	fb21 0105 	smlad	r1, r1, r5, r0
 800b806:	f8d8 201c 	ldr.w	r2, [r8, #28]
 800b80a:	f8d9 501c 	ldr.w	r5, [r9, #28]
 800b80e:	f108 0820 	add.w	r8, r8, #32
 800b812:	f109 0920 	add.w	r9, r9, #32
 800b816:	fb2c 6602 	smlad	r6, ip, r2, r6
 800b81a:	fb2c 3305 	smlad	r3, ip, r5, r3
 800b81e:	fb27 4402 	smlad	r4, r7, r2, r4
 800b822:	fb27 1505 	smlad	r5, r7, r5, r1
 800b826:	9a00      	ldr	r2, [sp, #0]
 800b828:	9903      	ldr	r1, [sp, #12]
 800b82a:	428a      	cmp	r2, r1
 800b82c:	f47f af13 	bne.w	800b656 <st_sssa8_ch_nn_mat_mult_kernel+0xb2>
 800b830:	9a04      	ldr	r2, [sp, #16]
 800b832:	e9cd 5301 	strd	r5, r3, [sp, #4]
 800b836:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b838:	4611      	mov	r1, r2
 800b83a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b83c:	9206      	str	r2, [sp, #24]
 800b83e:	4419      	add	r1, r3
 800b840:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b842:	9104      	str	r1, [sp, #16]
 800b844:	9205      	str	r2, [sp, #20]
 800b846:	469c      	mov	ip, r3
 800b848:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b84a:	459c      	cmp	ip, r3
 800b84c:	da65      	bge.n	800b91a <st_sssa8_ch_nn_mat_mult_kernel+0x376>
 800b84e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b850:	9a04      	ldr	r2, [sp, #16]
 800b852:	f8dd b000 	ldr.w	fp, [sp]
 800b856:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800b85a:	eba3 030c 	sub.w	r3, r3, ip
 800b85e:	089b      	lsrs	r3, r3, #2
 800b860:	9311      	str	r3, [sp, #68]	; 0x44
 800b862:	3301      	adds	r3, #1
 800b864:	9310      	str	r3, [sp, #64]	; 0x40
 800b866:	e9dd 1505 	ldrd	r1, r5, [sp, #20]
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b86e:	18d3      	adds	r3, r2, r3
 800b870:	9303      	str	r3, [sp, #12]
 800b872:	4691      	mov	r9, r2
 800b874:	f85b 3b04 	ldr.w	r3, [fp], #4
 800b878:	f859 0b04 	ldr.w	r0, [r9], #4
 800b87c:	fa2f f283 	sxtb16	r2, r3
 800b880:	ea4f 2333 	mov.w	r3, r3, ror #8
 800b884:	fa2f f383 	sxtb16	r3, r3
 800b888:	ea03 0e0a 	and.w	lr, r3, sl
 800b88c:	b297      	uxth	r7, r2
 800b88e:	ea4f 2830 	mov.w	r8, r0, ror #8
 800b892:	ea4e 4e12 	orr.w	lr, lr, r2, lsr #16
 800b896:	fa2f f888 	sxtb16	r8, r8
 800b89a:	fa2f f080 	sxtb16	r0, r0
 800b89e:	ea08 0c0a 	and.w	ip, r8, sl
 800b8a2:	b282      	uxth	r2, r0
 800b8a4:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 800b8a8:	ea4c 4010 	orr.w	r0, ip, r0, lsr #16
 800b8ac:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800b8b0:	f8d1 c000 	ldr.w	ip, [r1]
 800b8b4:	f8d5 8000 	ldr.w	r8, [r5]
 800b8b8:	fb23 660c 	smlad	r6, r3, ip, r6
 800b8bc:	9f02      	ldr	r7, [sp, #8]
 800b8be:	fb23 7308 	smlad	r3, r3, r8, r7
 800b8c2:	fb22 440c 	smlad	r4, r2, ip, r4
 800b8c6:	9f01      	ldr	r7, [sp, #4]
 800b8c8:	fb22 7208 	smlad	r2, r2, r8, r7
 800b8cc:	f8d1 c004 	ldr.w	ip, [r1, #4]
 800b8d0:	686f      	ldr	r7, [r5, #4]
 800b8d2:	3108      	adds	r1, #8
 800b8d4:	3508      	adds	r5, #8
 800b8d6:	fb2e 660c 	smlad	r6, lr, ip, r6
 800b8da:	fb2e 3307 	smlad	r3, lr, r7, r3
 800b8de:	9302      	str	r3, [sp, #8]
 800b8e0:	fb20 440c 	smlad	r4, r0, ip, r4
 800b8e4:	fb20 2307 	smlad	r3, r0, r7, r2
 800b8e8:	9301      	str	r3, [sp, #4]
 800b8ea:	9b03      	ldr	r3, [sp, #12]
 800b8ec:	454b      	cmp	r3, r9
 800b8ee:	d1c1      	bne.n	800b874 <st_sssa8_ch_nn_mat_mult_kernel+0x2d0>
 800b8f0:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 800b8f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b8f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b8f8:	f8cd 9010 	str.w	r9, [sp, #16]
 800b8fc:	f10c 0204 	add.w	r2, ip, #4
 800b900:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 800b904:	9a06      	ldr	r2, [sp, #24]
 800b906:	00db      	lsls	r3, r3, #3
 800b908:	441a      	add	r2, r3
 800b90a:	9206      	str	r2, [sp, #24]
 800b90c:	9a05      	ldr	r2, [sp, #20]
 800b90e:	441a      	add	r2, r3
 800b910:	9205      	str	r2, [sp, #20]
 800b912:	9b00      	ldr	r3, [sp, #0]
 800b914:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b916:	4413      	add	r3, r2
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b91c:	4565      	cmp	r5, ip
 800b91e:	dd54      	ble.n	800b9ca <st_sssa8_ch_nn_mat_mult_kernel+0x426>
 800b920:	9a05      	ldr	r2, [sp, #20]
 800b922:	9b00      	ldr	r3, [sp, #0]
 800b924:	f9b2 0000 	ldrsh.w	r0, [r2]
 800b928:	9a06      	ldr	r2, [sp, #24]
 800b92a:	f993 3000 	ldrsb.w	r3, [r3]
 800b92e:	f9b2 1000 	ldrsh.w	r1, [r2]
 800b932:	9a04      	ldr	r2, [sp, #16]
 800b934:	9f02      	ldr	r7, [sp, #8]
 800b936:	f992 2000 	ldrsb.w	r2, [r2]
 800b93a:	fb10 6603 	smlabb	r6, r0, r3, r6
 800b93e:	fb10 4402 	smlabb	r4, r0, r2, r4
 800b942:	fb11 7303 	smlabb	r3, r1, r3, r7
 800b946:	9801      	ldr	r0, [sp, #4]
 800b948:	9302      	str	r3, [sp, #8]
 800b94a:	f10c 0301 	add.w	r3, ip, #1
 800b94e:	fb11 0202 	smlabb	r2, r1, r2, r0
 800b952:	42ab      	cmp	r3, r5
 800b954:	9201      	str	r2, [sp, #4]
 800b956:	9b00      	ldr	r3, [sp, #0]
 800b958:	f280 8174 	bge.w	800bc44 <st_sssa8_ch_nn_mat_mult_kernel+0x6a0>
 800b95c:	f993 0001 	ldrsb.w	r0, [r3, #1]
 800b960:	9b05      	ldr	r3, [sp, #20]
 800b962:	9f02      	ldr	r7, [sp, #8]
 800b964:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800b968:	9b06      	ldr	r3, [sp, #24]
 800b96a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800b96e:	9b04      	ldr	r3, [sp, #16]
 800b970:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800b974:	fb11 6600 	smlabb	r6, r1, r0, r6
 800b978:	fb11 4403 	smlabb	r4, r1, r3, r4
 800b97c:	9901      	ldr	r1, [sp, #4]
 800b97e:	fb12 1303 	smlabb	r3, r2, r3, r1
 800b982:	9301      	str	r3, [sp, #4]
 800b984:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b986:	f10c 0502 	add.w	r5, ip, #2
 800b98a:	fb12 7000 	smlabb	r0, r2, r0, r7
 800b98e:	42ab      	cmp	r3, r5
 800b990:	9002      	str	r0, [sp, #8]
 800b992:	f340 81bf 	ble.w	800bd14 <st_sssa8_ch_nn_mat_mult_kernel+0x770>
 800b996:	9b05      	ldr	r3, [sp, #20]
 800b998:	9d00      	ldr	r5, [sp, #0]
 800b99a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800b99e:	9b04      	ldr	r3, [sp, #16]
 800b9a0:	9f01      	ldr	r7, [sp, #4]
 800b9a2:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800b9a6:	9b06      	ldr	r3, [sp, #24]
 800b9a8:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800b9ac:	f995 3002 	ldrsb.w	r3, [r5, #2]
 800b9b0:	fb12 4401 	smlabb	r4, r2, r1, r4
 800b9b4:	fb12 6603 	smlabb	r6, r2, r3, r6
 800b9b8:	9a02      	ldr	r2, [sp, #8]
 800b9ba:	fb10 2303 	smlabb	r3, r0, r3, r2
 800b9be:	fb10 7101 	smlabb	r1, r0, r1, r7
 800b9c2:	9302      	str	r3, [sp, #8]
 800b9c4:	1ceb      	adds	r3, r5, #3
 800b9c6:	9101      	str	r1, [sp, #4]
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	9b07      	ldr	r3, [sp, #28]
 800b9cc:	f933 1c04 	ldrsh.w	r1, [r3, #-4]
 800b9d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9d2:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800b9d6:	9b08      	ldr	r3, [sp, #32]
 800b9d8:	2915      	cmp	r1, #21
 800b9da:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800b9de:	f340 8117 	ble.w	800bc10 <st_sssa8_ch_nn_mat_mult_kernel+0x66c>
 800b9e2:	1e8b      	subs	r3, r1, #2
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	3901      	subs	r1, #1
 800b9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b9ec:	fb56 3600 	smmla	r6, r6, r0, r3
 800b9f0:	410e      	asrs	r6, r1
 800b9f2:	9a02      	ldr	r2, [sp, #8]
 800b9f4:	fb52 3300 	smmla	r3, r2, r0, r3
 800b9f8:	442e      	add	r6, r5
 800b9fa:	f306 0607 	ssat	r6, #8, r6
 800b9fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba00:	410b      	asrs	r3, r1
 800ba02:	442b      	add	r3, r5
 800ba04:	f802 6c02 	strb.w	r6, [r2, #-2]
 800ba08:	f303 0307 	ssat	r3, #8, r3
 800ba0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba0e:	f802 3c02 	strb.w	r3, [r2, #-2]
 800ba12:	9b07      	ldr	r3, [sp, #28]
 800ba14:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 800ba18:	2a15      	cmp	r2, #21
 800ba1a:	f340 80d7 	ble.w	800bbcc <st_sssa8_ch_nn_mat_mult_kernel+0x628>
 800ba1e:	9b08      	ldr	r3, [sp, #32]
 800ba20:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800ba24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba26:	f1a2 0e02 	sub.w	lr, r2, #2
 800ba2a:	2001      	movs	r0, #1
 800ba2c:	3a01      	subs	r2, #1
 800ba2e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ba32:	fa00 fe0e 	lsl.w	lr, r0, lr
 800ba36:	fb54 e003 	smmla	r0, r4, r3, lr
 800ba3a:	4110      	asrs	r0, r2
 800ba3c:	9c01      	ldr	r4, [sp, #4]
 800ba3e:	fb54 ee03 	smmla	lr, r4, r3, lr
 800ba42:	4408      	add	r0, r1
 800ba44:	f300 0007 	ssat	r0, #8, r0
 800ba48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba4a:	fa4e fe02 	asr.w	lr, lr, r2
 800ba4e:	448e      	add	lr, r1
 800ba50:	f803 0c01 	strb.w	r0, [r3, #-1]
 800ba54:	f30e 0e07 	ssat	lr, #8, lr
 800ba58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba5a:	f803 ec01 	strb.w	lr, [r3, #-1]
 800ba5e:	9a00      	ldr	r2, [sp, #0]
 800ba60:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba64:	440a      	add	r2, r1
 800ba66:	9200      	str	r2, [sp, #0]
 800ba68:	9a07      	ldr	r2, [sp, #28]
 800ba6a:	3204      	adds	r2, #4
 800ba6c:	9207      	str	r2, [sp, #28]
 800ba6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba70:	3208      	adds	r2, #8
 800ba72:	920b      	str	r2, [sp, #44]	; 0x2c
 800ba74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba76:	3202      	adds	r2, #2
 800ba78:	9209      	str	r2, [sp, #36]	; 0x24
 800ba7a:	9a08      	ldr	r2, [sp, #32]
 800ba7c:	3208      	adds	r2, #8
 800ba7e:	9208      	str	r2, [sp, #32]
 800ba80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba82:	3202      	adds	r2, #2
 800ba84:	920a      	str	r2, [sp, #40]	; 0x28
 800ba86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ba88:	3308      	adds	r3, #8
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	930d      	str	r3, [sp, #52]	; 0x34
 800ba8e:	f47f adcb 	bne.w	800b628 <st_sssa8_ch_nn_mat_mult_kernel+0x84>
 800ba92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba94:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800ba96:	f8dd b000 	ldr.w	fp, [sp]
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	00da      	lsls	r2, r3, #3
 800ba9e:	0059      	lsls	r1, r3, #1
 800baa0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800baa4:	9329      	str	r3, [sp, #164]	; 0xa4
 800baa6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800baa8:	4413      	add	r3, r2
 800baaa:	931a      	str	r3, [sp, #104]	; 0x68
 800baac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800baae:	4413      	add	r3, r2
 800bab0:	932a      	str	r3, [sp, #168]	; 0xa8
 800bab2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800bab4:	4413      	add	r3, r2
 800bab6:	932b      	str	r3, [sp, #172]	; 0xac
 800bab8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800baba:	440b      	add	r3, r1
 800babc:	932c      	str	r3, [sp, #176]	; 0xb0
 800babe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bac0:	440b      	add	r3, r1
 800bac2:	931b      	str	r3, [sp, #108]	; 0x6c
 800bac4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bac6:	07da      	lsls	r2, r3, #31
 800bac8:	f140 8115 	bpl.w	800bcf6 <st_sssa8_ch_nn_mat_mult_kernel+0x752>
 800bacc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bace:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800bad0:	6818      	ldr	r0, [r3, #0]
 800bad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bad4:	eb06 0943 	add.w	r9, r6, r3, lsl #1
 800bad8:	089b      	lsrs	r3, r3, #2
 800bada:	f000 8135 	beq.w	800bd48 <st_sssa8_ch_nn_mat_mult_kernel+0x7a4>
 800bade:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800bae2:	fa1f fc8c 	uxth.w	ip, ip
 800bae6:	f10c 0c01 	add.w	ip, ip, #1
 800baea:	f8df 8260 	ldr.w	r8, [pc, #608]	; 800bd4c <st_sssa8_ch_nn_mat_mult_kernel+0x7a8>
 800baee:	eb0b 0e8c 	add.w	lr, fp, ip, lsl #2
 800baf2:	464f      	mov	r7, r9
 800baf4:	4602      	mov	r2, r0
 800baf6:	f85b 3b04 	ldr.w	r3, [fp], #4
 800bafa:	fa2f f483 	sxtb16	r4, r3
 800bafe:	ea4f 2333 	mov.w	r3, r3, ror #8
 800bb02:	b2a1      	uxth	r1, r4
 800bb04:	fa2f f383 	sxtb16	r3, r3
 800bb08:	ea03 0508 	and.w	r5, r3, r8
 800bb0c:	ea45 4414 	orr.w	r4, r5, r4, lsr #16
 800bb10:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800bb14:	6831      	ldr	r1, [r6, #0]
 800bb16:	fb23 0001 	smlad	r0, r3, r1, r0
 800bb1a:	6839      	ldr	r1, [r7, #0]
 800bb1c:	fb23 2301 	smlad	r3, r3, r1, r2
 800bb20:	6871      	ldr	r1, [r6, #4]
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	3608      	adds	r6, #8
 800bb26:	3708      	adds	r7, #8
 800bb28:	fb24 0001 	smlad	r0, r4, r1, r0
 800bb2c:	fb24 3202 	smlad	r2, r4, r2, r3
 800bb30:	45de      	cmp	lr, fp
 800bb32:	d1e0      	bne.n	800baf6 <st_sssa8_ch_nn_mat_mult_kernel+0x552>
 800bb34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb36:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800bb3a:	4463      	add	r3, ip
 800bb3c:	44e1      	add	r9, ip
 800bb3e:	9313      	str	r3, [sp, #76]	; 0x4c
 800bb40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb42:	f013 0303 	ands.w	r3, r3, #3
 800bb46:	d01f      	beq.n	800bb88 <st_sssa8_ch_nn_mat_mult_kernel+0x5e4>
 800bb48:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800bb4a:	f99b 1000 	ldrsb.w	r1, [fp]
 800bb4e:	8835      	ldrh	r5, [r6, #0]
 800bb50:	f8b9 4000 	ldrh.w	r4, [r9]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	fb15 0001 	smlabb	r0, r5, r1, r0
 800bb5a:	fb14 2201 	smlabb	r2, r4, r1, r2
 800bb5e:	d013      	beq.n	800bb88 <st_sssa8_ch_nn_mat_mult_kernel+0x5e4>
 800bb60:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 800bb64:	8875      	ldrh	r5, [r6, #2]
 800bb66:	f8b9 4002 	ldrh.w	r4, [r9, #2]
 800bb6a:	2b02      	cmp	r3, #2
 800bb6c:	fb15 0001 	smlabb	r0, r5, r1, r0
 800bb70:	fb14 2201 	smlabb	r2, r4, r1, r2
 800bb74:	d008      	beq.n	800bb88 <st_sssa8_ch_nn_mat_mult_kernel+0x5e4>
 800bb76:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 800bb7a:	88b4      	ldrh	r4, [r6, #4]
 800bb7c:	f8b9 1004 	ldrh.w	r1, [r9, #4]
 800bb80:	fb14 0003 	smlabb	r0, r4, r3, r0
 800bb84:	fb11 2203 	smlabb	r2, r1, r3, r2
 800bb88:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800bb8a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bb8c:	680d      	ldr	r5, [r1, #0]
 800bb8e:	992b      	ldr	r1, [sp, #172]	; 0xac
 800bb90:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bb94:	680c      	ldr	r4, [r1, #0]
 800bb96:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800bb98:	2b15      	cmp	r3, #21
 800bb9a:	f101 0101 	add.w	r1, r1, #1
 800bb9e:	f300 8094 	bgt.w	800bcca <st_sssa8_ch_nn_mat_mult_kernel+0x726>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f340 80ba 	ble.w	800bd1c <st_sssa8_ch_nn_mat_mult_kernel+0x778>
 800bba8:	0040      	lsls	r0, r0, #1
 800bbaa:	0052      	lsls	r2, r2, #1
 800bbac:	fb50 4005 	smmla	r0, r0, r5, r4
 800bbb0:	fb52 4205 	smmla	r2, r2, r5, r4
 800bbb4:	fa40 f303 	asr.w	r3, r0, r3
 800bbb8:	f303 0307 	ssat	r3, #8, r3
 800bbbc:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800bbbe:	7003      	strb	r3, [r0, #0]
 800bbc0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800bbc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bbc6:	fa42 f303 	asr.w	r3, r2, r3
 800bbca:	e08e      	b.n	800bcea <st_sssa8_ch_nn_mat_mult_kernel+0x746>
 800bbcc:	2a00      	cmp	r2, #0
 800bbce:	dd3c      	ble.n	800bc4a <st_sssa8_ch_nn_mat_mult_kernel+0x6a6>
 800bbd0:	9b01      	ldr	r3, [sp, #4]
 800bbd2:	9908      	ldr	r1, [sp, #32]
 800bbd4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 800bbd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bbda:	f851 1c04 	ldr.w	r1, [r1, #-4]
 800bbde:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800bbe2:	fb5e 1e03 	smmla	lr, lr, r3, r1
 800bbe6:	0067      	lsls	r7, r4, #1
 800bbe8:	fb57 1703 	smmla	r7, r7, r3, r1
 800bbec:	fa47 f202 	asr.w	r2, r7, r2
 800bbf0:	f302 0207 	ssat	r2, #8, r2
 800bbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf6:	f803 2c01 	strb.w	r2, [r3, #-1]
 800bbfa:	9b07      	ldr	r3, [sp, #28]
 800bbfc:	f933 1c02 	ldrsh.w	r1, [r3, #-2]
 800bc00:	fa4e f101 	asr.w	r1, lr, r1
 800bc04:	f301 0107 	ssat	r1, #8, r1
 800bc08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc0a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bc0e:	e726      	b.n	800ba5e <st_sssa8_ch_nn_mat_mult_kernel+0x4ba>
 800bc10:	2900      	cmp	r1, #0
 800bc12:	dd3d      	ble.n	800bc90 <st_sssa8_ch_nn_mat_mult_kernel+0x6ec>
 800bc14:	9b02      	ldr	r3, [sp, #8]
 800bc16:	0076      	lsls	r6, r6, #1
 800bc18:	005a      	lsls	r2, r3, #1
 800bc1a:	fb56 5600 	smmla	r6, r6, r0, r5
 800bc1e:	fb52 5000 	smmla	r0, r2, r0, r5
 800bc22:	410e      	asrs	r6, r1
 800bc24:	f306 0607 	ssat	r6, #8, r6
 800bc28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc2a:	f803 6c02 	strb.w	r6, [r3, #-2]
 800bc2e:	9b07      	ldr	r3, [sp, #28]
 800bc30:	f933 2c04 	ldrsh.w	r2, [r3, #-4]
 800bc34:	fa40 f202 	asr.w	r2, r0, r2
 800bc38:	f302 0207 	ssat	r2, #8, r2
 800bc3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc3e:	f803 2c02 	strb.w	r2, [r3, #-2]
 800bc42:	e6e6      	b.n	800ba12 <st_sssa8_ch_nn_mat_mult_kernel+0x46e>
 800bc44:	3301      	adds	r3, #1
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	e6bf      	b.n	800b9ca <st_sssa8_ch_nn_mat_mult_kernel+0x426>
 800bc4a:	f1c2 0201 	rsb	r2, r2, #1
 800bc4e:	fa04 f102 	lsl.w	r1, r4, r2
 800bc52:	f301 011f 	ssat	r1, #32, r1
 800bc56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc58:	f853 4c04 	ldr.w	r4, [r3, #-4]
 800bc5c:	fb51 f114 	smmulr	r1, r1, r4
 800bc60:	9b01      	ldr	r3, [sp, #4]
 800bc62:	4093      	lsls	r3, r2
 800bc64:	f303 001f 	ssat	r0, #32, r3
 800bc68:	fb50 f014 	smmulr	r0, r0, r4
 800bc6c:	9b08      	ldr	r3, [sp, #32]
 800bc6e:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800bc72:	440a      	add	r2, r1
 800bc74:	f302 0207 	ssat	r2, #8, r2
 800bc78:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc7a:	f801 2c01 	strb.w	r2, [r1, #-1]
 800bc7e:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800bc82:	4403      	add	r3, r0
 800bc84:	f303 0307 	ssat	r3, #8, r3
 800bc88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc8a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bc8e:	e6e6      	b.n	800ba5e <st_sssa8_ch_nn_mat_mult_kernel+0x4ba>
 800bc90:	f1c1 0101 	rsb	r1, r1, #1
 800bc94:	408e      	lsls	r6, r1
 800bc96:	f306 061f 	ssat	r6, #32, r6
 800bc9a:	fb56 f610 	smmulr	r6, r6, r0
 800bc9e:	9b02      	ldr	r3, [sp, #8]
 800bca0:	408b      	lsls	r3, r1
 800bca2:	f303 011f 	ssat	r1, #32, r3
 800bca6:	fb51 f010 	smmulr	r0, r1, r0
 800bcaa:	4435      	add	r5, r6
 800bcac:	f305 0507 	ssat	r5, #8, r5
 800bcb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcb2:	f803 5c02 	strb.w	r5, [r3, #-2]
 800bcb6:	9b08      	ldr	r3, [sp, #32]
 800bcb8:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800bcbc:	4403      	add	r3, r0
 800bcbe:	f303 0307 	ssat	r3, #8, r3
 800bcc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcc4:	f802 3c02 	strb.w	r3, [r2, #-2]
 800bcc8:	e6a3      	b.n	800ba12 <st_sssa8_ch_nn_mat_mult_kernel+0x46e>
 800bcca:	1e9f      	subs	r7, r3, #2
 800bccc:	1e5e      	subs	r6, r3, #1
 800bcce:	2301      	movs	r3, #1
 800bcd0:	40bb      	lsls	r3, r7
 800bcd2:	fb50 3005 	smmla	r0, r0, r5, r3
 800bcd6:	4130      	asrs	r0, r6
 800bcd8:	4420      	add	r0, r4
 800bcda:	fb52 3305 	smmla	r3, r2, r5, r3
 800bcde:	f300 0207 	ssat	r2, #8, r0
 800bce2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800bce4:	4133      	asrs	r3, r6
 800bce6:	4423      	add	r3, r4
 800bce8:	7002      	strb	r2, [r0, #0]
 800bcea:	f303 0307 	ssat	r3, #8, r3
 800bcee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bcf0:	912c      	str	r1, [sp, #176]	; 0xb0
 800bcf2:	7013      	strb	r3, [r2, #0]
 800bcf4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800bcf6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 800bcf8:	4413      	add	r3, r2
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	b01f      	add	sp, #124	; 0x7c
 800bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bd04:	9306      	str	r3, [sp, #24]
 800bd06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd08:	9305      	str	r3, [sp, #20]
 800bd0a:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800bd0e:	f04f 0c00 	mov.w	ip, #0
 800bd12:	e599      	b.n	800b848 <st_sssa8_ch_nn_mat_mult_kernel+0x2a4>
 800bd14:	9b00      	ldr	r3, [sp, #0]
 800bd16:	3302      	adds	r3, #2
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	e656      	b.n	800b9ca <st_sssa8_ch_nn_mat_mult_kernel+0x426>
 800bd1c:	f1c3 0601 	rsb	r6, r3, #1
 800bd20:	fa00 f306 	lsl.w	r3, r0, r6
 800bd24:	f303 031f 	ssat	r3, #32, r3
 800bd28:	fb53 f315 	smmulr	r3, r3, r5
 800bd2c:	40b2      	lsls	r2, r6
 800bd2e:	f302 021f 	ssat	r2, #32, r2
 800bd32:	fb52 f215 	smmulr	r2, r2, r5
 800bd36:	4423      	add	r3, r4
 800bd38:	f303 0307 	ssat	r3, #8, r3
 800bd3c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800bd3e:	7003      	strb	r3, [r0, #0]
 800bd40:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4413      	add	r3, r2
 800bd46:	e7d0      	b.n	800bcea <st_sssa8_ch_nn_mat_mult_kernel+0x746>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	e6f9      	b.n	800bb40 <st_sssa8_ch_nn_mat_mult_kernel+0x59c>
 800bd4c:	ffff0000 	.word	0xffff0000

0800bd50 <st_int8_to16_no_shift>:
 800bd50:	f1b2 0c10 	subs.w	ip, r2, #16
 800bd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd58:	f100 808e 	bmi.w	800be78 <st_int8_to16_no_shift+0x128>
 800bd5c:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800bd60:	f10c 0c01 	add.w	ip, ip, #1
 800bd64:	4f48      	ldr	r7, [pc, #288]	; (800be88 <st_int8_to16_no_shift+0x138>)
 800bd66:	eb01 144c 	add.w	r4, r1, ip, lsl #5
 800bd6a:	4605      	mov	r5, r0
 800bd6c:	682b      	ldr	r3, [r5, #0]
 800bd6e:	686e      	ldr	r6, [r5, #4]
 800bd70:	fa2f f983 	sxtb16	r9, r3
 800bd74:	ea4f 2333 	mov.w	r3, r3, ror #8
 800bd78:	fa1f f889 	uxth.w	r8, r9
 800bd7c:	fa2f f383 	sxtb16	r3, r3
 800bd80:	ea03 0a07 	and.w	sl, r3, r7
 800bd84:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 800bd88:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd8c:	ea4f 2e36 	mov.w	lr, r6, ror #8
 800bd90:	fa2f f686 	sxtb16	r6, r6
 800bd94:	fa2f fe8e 	sxtb16	lr, lr
 800bd98:	fa1f f886 	uxth.w	r8, r6
 800bd9c:	ea0e 0a07 	and.w	sl, lr, r7
 800bda0:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 800bda4:	ea48 4e0e 	orr.w	lr, r8, lr, lsl #16
 800bda8:	f8c1 9004 	str.w	r9, [r1, #4]
 800bdac:	f8c1 e008 	str.w	lr, [r1, #8]
 800bdb0:	600b      	str	r3, [r1, #0]
 800bdb2:	60ce      	str	r6, [r1, #12]
 800bdb4:	68ab      	ldr	r3, [r5, #8]
 800bdb6:	68ee      	ldr	r6, [r5, #12]
 800bdb8:	fa2f f983 	sxtb16	r9, r3
 800bdbc:	ea4f 2333 	mov.w	r3, r3, ror #8
 800bdc0:	fa1f f889 	uxth.w	r8, r9
 800bdc4:	fa2f f383 	sxtb16	r3, r3
 800bdc8:	ea03 0a07 	and.w	sl, r3, r7
 800bdcc:	ea4f 2e36 	mov.w	lr, r6, ror #8
 800bdd0:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 800bdd4:	fa2f f686 	sxtb16	r6, r6
 800bdd8:	fa2f fe8e 	sxtb16	lr, lr
 800bddc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bde0:	ea0e 0a07 	and.w	sl, lr, r7
 800bde4:	fa1f f886 	uxth.w	r8, r6
 800bde8:	ea48 4e0e 	orr.w	lr, r8, lr, lsl #16
 800bdec:	ea4a 4616 	orr.w	r6, sl, r6, lsr #16
 800bdf0:	f8c1 9014 	str.w	r9, [r1, #20]
 800bdf4:	610b      	str	r3, [r1, #16]
 800bdf6:	61ce      	str	r6, [r1, #28]
 800bdf8:	f8c1 e018 	str.w	lr, [r1, #24]
 800bdfc:	3120      	adds	r1, #32
 800bdfe:	428c      	cmp	r4, r1
 800be00:	f105 0510 	add.w	r5, r5, #16
 800be04:	d1b2      	bne.n	800bd6c <st_int8_to16_no_shift+0x1c>
 800be06:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800be0a:	1f17      	subs	r7, r2, #4
 800be0c:	4567      	cmp	r7, ip
 800be0e:	4460      	add	r0, ip
 800be10:	db38      	blt.n	800be84 <st_int8_to16_no_shift+0x134>
 800be12:	eba7 070c 	sub.w	r7, r7, ip
 800be16:	08bf      	lsrs	r7, r7, #2
 800be18:	f107 0801 	add.w	r8, r7, #1
 800be1c:	f8df e068 	ldr.w	lr, [pc, #104]	; 800be88 <st_int8_to16_no_shift+0x138>
 800be20:	eb04 05c8 	add.w	r5, r4, r8, lsl #3
 800be24:	4606      	mov	r6, r0
 800be26:	f856 3b04 	ldr.w	r3, [r6], #4
 800be2a:	fa2f f983 	sxtb16	r9, r3
 800be2e:	ea4f 2333 	mov.w	r3, r3, ror #8
 800be32:	fa1f f189 	uxth.w	r1, r9
 800be36:	fa2f f383 	sxtb16	r3, r3
 800be3a:	ea03 0a0e 	and.w	sl, r3, lr
 800be3e:	ea4a 4919 	orr.w	r9, sl, r9, lsr #16
 800be42:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800be46:	f8c4 9004 	str.w	r9, [r4, #4]
 800be4a:	6023      	str	r3, [r4, #0]
 800be4c:	3408      	adds	r4, #8
 800be4e:	42a5      	cmp	r5, r4
 800be50:	d1e9      	bne.n	800be26 <st_int8_to16_no_shift+0xd6>
 800be52:	f10c 0c04 	add.w	ip, ip, #4
 800be56:	eb0c 0c87 	add.w	ip, ip, r7, lsl #2
 800be5a:	eb00 0088 	add.w	r0, r0, r8, lsl #2
 800be5e:	4562      	cmp	r2, ip
 800be60:	dd08      	ble.n	800be74 <st_int8_to16_no_shift+0x124>
 800be62:	eba2 0c0c 	sub.w	ip, r2, ip
 800be66:	4484      	add	ip, r0
 800be68:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800be6c:	f825 3b02 	strh.w	r3, [r5], #2
 800be70:	4560      	cmp	r0, ip
 800be72:	d1f9      	bne.n	800be68 <st_int8_to16_no_shift+0x118>
 800be74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be78:	f04f 0c00 	mov.w	ip, #0
 800be7c:	1f17      	subs	r7, r2, #4
 800be7e:	4567      	cmp	r7, ip
 800be80:	460c      	mov	r4, r1
 800be82:	dac6      	bge.n	800be12 <st_int8_to16_no_shift+0xc2>
 800be84:	4625      	mov	r5, r4
 800be86:	e7ea      	b.n	800be5e <st_int8_to16_no_shift+0x10e>
 800be88:	ffff0000 	.word	0xffff0000

0800be8c <st_int8_to16_dual>:
 800be8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be90:	b089      	sub	sp, #36	; 0x24
 800be92:	4692      	mov	sl, r2
 800be94:	9307      	str	r3, [sp, #28]
 800be96:	085b      	lsrs	r3, r3, #1
 800be98:	eb00 0b02 	add.w	fp, r0, r2
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	f000 810f 	beq.w	800c0c0 <st_int8_to16_dual+0x234>
 800bea2:	f1a2 0310 	sub.w	r3, r2, #16
 800bea6:	9305      	str	r3, [sp, #20]
 800bea8:	091b      	lsrs	r3, r3, #4
 800beaa:	3301      	adds	r3, #1
 800beac:	011a      	lsls	r2, r3, #4
 800beae:	019b      	lsls	r3, r3, #6
 800beb0:	9306      	str	r3, [sp, #24]
 800beb2:	4ca0      	ldr	r4, [pc, #640]	; (800c134 <st_int8_to16_dual+0x2a8>)
 800beb4:	9201      	str	r2, [sp, #4]
 800beb6:	f1aa 0304 	sub.w	r3, sl, #4
 800beba:	46d1      	mov	r9, sl
 800bebc:	9304      	str	r3, [sp, #16]
 800bebe:	468a      	mov	sl, r1
 800bec0:	9b05      	ldr	r3, [sp, #20]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	f2c0 812f 	blt.w	800c126 <st_int8_to16_dual+0x29a>
 800bec8:	9b01      	ldr	r3, [sp, #4]
 800beca:	465e      	mov	r6, fp
 800becc:	18c5      	adds	r5, r0, r3
 800bece:	4653      	mov	r3, sl
 800bed0:	6802      	ldr	r2, [r0, #0]
 800bed2:	6831      	ldr	r1, [r6, #0]
 800bed4:	fa2f f782 	sxtb16	r7, r2
 800bed8:	ea4f 2232 	mov.w	r2, r2, ror #8
 800bedc:	fa2f f282 	sxtb16	r2, r2
 800bee0:	ea02 0c04 	and.w	ip, r2, r4
 800bee4:	ea4c 4c17 	orr.w	ip, ip, r7, lsr #16
 800bee8:	b2bf      	uxth	r7, r7
 800beea:	f8c3 c008 	str.w	ip, [r3, #8]
 800beee:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
 800bef2:	ea4f 2731 	mov.w	r7, r1, ror #8
 800bef6:	fa2f f787 	sxtb16	r7, r7
 800befa:	ea07 0c04 	and.w	ip, r7, r4
 800befe:	fa2f f181 	sxtb16	r1, r1
 800bf02:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 800bf06:	b289      	uxth	r1, r1
 800bf08:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800bf0c:	f8c3 c00c 	str.w	ip, [r3, #12]
 800bf10:	601a      	str	r2, [r3, #0]
 800bf12:	6059      	str	r1, [r3, #4]
 800bf14:	6842      	ldr	r2, [r0, #4]
 800bf16:	6871      	ldr	r1, [r6, #4]
 800bf18:	fa2f f782 	sxtb16	r7, r2
 800bf1c:	ea4f 2232 	mov.w	r2, r2, ror #8
 800bf20:	fa2f f282 	sxtb16	r2, r2
 800bf24:	ea02 0c04 	and.w	ip, r2, r4
 800bf28:	ea4c 4c17 	orr.w	ip, ip, r7, lsr #16
 800bf2c:	b2bf      	uxth	r7, r7
 800bf2e:	f8c3 c018 	str.w	ip, [r3, #24]
 800bf32:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
 800bf36:	ea4f 2731 	mov.w	r7, r1, ror #8
 800bf3a:	fa2f f787 	sxtb16	r7, r7
 800bf3e:	ea07 0c04 	and.w	ip, r7, r4
 800bf42:	fa2f f181 	sxtb16	r1, r1
 800bf46:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 800bf4a:	b289      	uxth	r1, r1
 800bf4c:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800bf50:	f8c3 c01c 	str.w	ip, [r3, #28]
 800bf54:	611a      	str	r2, [r3, #16]
 800bf56:	6159      	str	r1, [r3, #20]
 800bf58:	6882      	ldr	r2, [r0, #8]
 800bf5a:	68b1      	ldr	r1, [r6, #8]
 800bf5c:	fa2f f782 	sxtb16	r7, r2
 800bf60:	ea4f 2232 	mov.w	r2, r2, ror #8
 800bf64:	fa2f f282 	sxtb16	r2, r2
 800bf68:	ea02 0c04 	and.w	ip, r2, r4
 800bf6c:	ea4c 4c17 	orr.w	ip, ip, r7, lsr #16
 800bf70:	b2bf      	uxth	r7, r7
 800bf72:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 800bf76:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
 800bf7a:	ea4f 2731 	mov.w	r7, r1, ror #8
 800bf7e:	fa2f f787 	sxtb16	r7, r7
 800bf82:	ea07 0c04 	and.w	ip, r7, r4
 800bf86:	fa2f f181 	sxtb16	r1, r1
 800bf8a:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 800bf8e:	b289      	uxth	r1, r1
 800bf90:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800bf94:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
 800bf98:	621a      	str	r2, [r3, #32]
 800bf9a:	6259      	str	r1, [r3, #36]	; 0x24
 800bf9c:	68c2      	ldr	r2, [r0, #12]
 800bf9e:	68f1      	ldr	r1, [r6, #12]
 800bfa0:	fa2f f782 	sxtb16	r7, r2
 800bfa4:	ea4f 2232 	mov.w	r2, r2, ror #8
 800bfa8:	fa2f f282 	sxtb16	r2, r2
 800bfac:	ea02 0c04 	and.w	ip, r2, r4
 800bfb0:	ea4c 4c17 	orr.w	ip, ip, r7, lsr #16
 800bfb4:	b2bf      	uxth	r7, r7
 800bfb6:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
 800bfba:	f8c3 c038 	str.w	ip, [r3, #56]	; 0x38
 800bfbe:	ea4f 2731 	mov.w	r7, r1, ror #8
 800bfc2:	fa2f f787 	sxtb16	r7, r7
 800bfc6:	ea07 0c04 	and.w	ip, r7, r4
 800bfca:	fa2f f181 	sxtb16	r1, r1
 800bfce:	3010      	adds	r0, #16
 800bfd0:	ea4c 4c11 	orr.w	ip, ip, r1, lsr #16
 800bfd4:	b289      	uxth	r1, r1
 800bfd6:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 800bfda:	4285      	cmp	r5, r0
 800bfdc:	631a      	str	r2, [r3, #48]	; 0x30
 800bfde:	f8c3 c03c 	str.w	ip, [r3, #60]	; 0x3c
 800bfe2:	6359      	str	r1, [r3, #52]	; 0x34
 800bfe4:	f106 0610 	add.w	r6, r6, #16
 800bfe8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800bfec:	f47f af70 	bne.w	800bed0 <st_int8_to16_dual+0x44>
 800bff0:	9b06      	ldr	r3, [sp, #24]
 800bff2:	449a      	add	sl, r3
 800bff4:	9b01      	ldr	r3, [sp, #4]
 800bff6:	449b      	add	fp, r3
 800bff8:	469c      	mov	ip, r3
 800bffa:	9b04      	ldr	r3, [sp, #16]
 800bffc:	4563      	cmp	r3, ip
 800bffe:	db3b      	blt.n	800c078 <st_int8_to16_dual+0x1ec>
 800c000:	eba3 080c 	sub.w	r8, r3, ip
 800c004:	ea4f 0898 	mov.w	r8, r8, lsr #2
 800c008:	f108 0301 	add.w	r3, r8, #1
 800c00c:	9302      	str	r3, [sp, #8]
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	9303      	str	r3, [sp, #12]
 800c012:	eb05 0e03 	add.w	lr, r5, r3
 800c016:	465f      	mov	r7, fp
 800c018:	4650      	mov	r0, sl
 800c01a:	f855 2b04 	ldr.w	r2, [r5], #4
 800c01e:	f857 3b04 	ldr.w	r3, [r7], #4
 800c022:	fa2f f682 	sxtb16	r6, r2
 800c026:	ea4f 2232 	mov.w	r2, r2, ror #8
 800c02a:	fa2f f282 	sxtb16	r2, r2
 800c02e:	ea02 0104 	and.w	r1, r2, r4
 800c032:	ea41 4116 	orr.w	r1, r1, r6, lsr #16
 800c036:	b2b6      	uxth	r6, r6
 800c038:	ea46 4202 	orr.w	r2, r6, r2, lsl #16
 800c03c:	6081      	str	r1, [r0, #8]
 800c03e:	ea4f 2633 	mov.w	r6, r3, ror #8
 800c042:	fa2f f686 	sxtb16	r6, r6
 800c046:	ea06 0104 	and.w	r1, r6, r4
 800c04a:	fa2f f383 	sxtb16	r3, r3
 800c04e:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800c052:	b29b      	uxth	r3, r3
 800c054:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 800c058:	4575      	cmp	r5, lr
 800c05a:	6002      	str	r2, [r0, #0]
 800c05c:	60c1      	str	r1, [r0, #12]
 800c05e:	6046      	str	r6, [r0, #4]
 800c060:	f100 0010 	add.w	r0, r0, #16
 800c064:	d1d9      	bne.n	800c01a <st_int8_to16_dual+0x18e>
 800c066:	9b02      	ldr	r3, [sp, #8]
 800c068:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
 800c06c:	9b03      	ldr	r3, [sp, #12]
 800c06e:	f10c 0c04 	add.w	ip, ip, #4
 800c072:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 800c076:	449b      	add	fp, r3
 800c078:	45e1      	cmp	r9, ip
 800c07a:	dd15      	ble.n	800c0a8 <st_int8_to16_dual+0x21c>
 800c07c:	eba9 0c0c 	sub.w	ip, r9, ip
 800c080:	eb05 000c 	add.w	r0, r5, ip
 800c084:	f10a 0304 	add.w	r3, sl, #4
 800c088:	465a      	mov	r2, fp
 800c08a:	f915 1b01 	ldrsb.w	r1, [r5], #1
 800c08e:	f823 1c04 	strh.w	r1, [r3, #-4]
 800c092:	f912 1b01 	ldrsb.w	r1, [r2], #1
 800c096:	f823 1c02 	strh.w	r1, [r3, #-2]
 800c09a:	4285      	cmp	r5, r0
 800c09c:	f103 0304 	add.w	r3, r3, #4
 800c0a0:	d1f3      	bne.n	800c08a <st_int8_to16_dual+0x1fe>
 800c0a2:	44e3      	add	fp, ip
 800c0a4:	eb0a 0a8c 	add.w	sl, sl, ip, lsl #2
 800c0a8:	9b00      	ldr	r3, [sp, #0]
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	9300      	str	r3, [sp, #0]
 800c0b0:	eb05 0009 	add.w	r0, r5, r9
 800c0b4:	44cb      	add	fp, r9
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	f47f af02 	bne.w	800bec0 <st_int8_to16_dual+0x34>
 800c0bc:	4651      	mov	r1, sl
 800c0be:	46ca      	mov	sl, r9
 800c0c0:	9b07      	ldr	r3, [sp, #28]
 800c0c2:	07db      	lsls	r3, r3, #31
 800c0c4:	d52c      	bpl.n	800c120 <st_int8_to16_dual+0x294>
 800c0c6:	f1ba 0304 	subs.w	r3, sl, #4
 800c0ca:	d430      	bmi.n	800c12e <st_int8_to16_dual+0x2a2>
 800c0cc:	089b      	lsrs	r3, r3, #2
 800c0ce:	1c5f      	adds	r7, r3, #1
 800c0d0:	f8df c060 	ldr.w	ip, [pc, #96]	; 800c134 <st_int8_to16_dual+0x2a8>
 800c0d4:	eb01 05c7 	add.w	r5, r1, r7, lsl #3
 800c0d8:	4606      	mov	r6, r0
 800c0da:	f856 3b04 	ldr.w	r3, [r6], #4
 800c0de:	fa2f fe83 	sxtb16	lr, r3
 800c0e2:	ea4f 2333 	mov.w	r3, r3, ror #8
 800c0e6:	fa1f f28e 	uxth.w	r2, lr
 800c0ea:	fa2f f383 	sxtb16	r3, r3
 800c0ee:	ea03 040c 	and.w	r4, r3, ip
 800c0f2:	ea44 441e 	orr.w	r4, r4, lr, lsr #16
 800c0f6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800c0fa:	604c      	str	r4, [r1, #4]
 800c0fc:	600b      	str	r3, [r1, #0]
 800c0fe:	3108      	adds	r1, #8
 800c100:	428d      	cmp	r5, r1
 800c102:	d1ea      	bne.n	800c0da <st_int8_to16_dual+0x24e>
 800c104:	00bb      	lsls	r3, r7, #2
 800c106:	4418      	add	r0, r3
 800c108:	459a      	cmp	sl, r3
 800c10a:	dd09      	ble.n	800c120 <st_int8_to16_dual+0x294>
 800c10c:	ebaa 0303 	sub.w	r3, sl, r3
 800c110:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800c114:	f910 2b01 	ldrsb.w	r2, [r0], #1
 800c118:	f825 2b02 	strh.w	r2, [r5], #2
 800c11c:	429d      	cmp	r5, r3
 800c11e:	d1f9      	bne.n	800c114 <st_int8_to16_dual+0x288>
 800c120:	b009      	add	sp, #36	; 0x24
 800c122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c126:	4605      	mov	r5, r0
 800c128:	f04f 0c00 	mov.w	ip, #0
 800c12c:	e765      	b.n	800bffa <st_int8_to16_dual+0x16e>
 800c12e:	460d      	mov	r5, r1
 800c130:	2300      	movs	r3, #0
 800c132:	e7e9      	b.n	800c108 <st_int8_to16_dual+0x27c>
 800c134:	ffff0000 	.word	0xffff0000

0800c138 <st_sssa8_ch_fullW_prefetch>:
 800c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13c:	b087      	sub	sp, #28
 800c13e:	1887      	adds	r7, r0, r2
 800c140:	9105      	str	r1, [sp, #20]
 800c142:	1049      	asrs	r1, r1, #1
 800c144:	9100      	str	r1, [sp, #0]
 800c146:	f000 80cd 	beq.w	800c2e4 <st_sssa8_ch_fullW_prefetch+0x1ac>
 800c14a:	f1a2 0110 	sub.w	r1, r2, #16
 800c14e:	0909      	lsrs	r1, r1, #4
 800c150:	3101      	adds	r1, #1
 800c152:	ea4f 1901 	mov.w	r9, r1, lsl #4
 800c156:	0189      	lsls	r1, r1, #6
 800c158:	9103      	str	r1, [sp, #12]
 800c15a:	1ed1      	subs	r1, r2, #3
 800c15c:	9102      	str	r1, [sp, #8]
 800c15e:	1f11      	subs	r1, r2, #4
 800c160:	9104      	str	r1, [sp, #16]
 800c162:	2a0f      	cmp	r2, #15
 800c164:	f340 80d2 	ble.w	800c30c <st_sssa8_ch_fullW_prefetch+0x1d4>
 800c168:	eb00 0409 	add.w	r4, r0, r9
 800c16c:	463e      	mov	r6, r7
 800c16e:	4619      	mov	r1, r3
 800c170:	6805      	ldr	r5, [r0, #0]
 800c172:	f8d6 c000 	ldr.w	ip, [r6]
 800c176:	fa2f fe85 	sxtb16	lr, r5
 800c17a:	ea4f 2535 	mov.w	r5, r5, ror #8
 800c17e:	f8c1 e000 	str.w	lr, [r1]
 800c182:	fa2f f585 	sxtb16	r5, r5
 800c186:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800c18a:	604d      	str	r5, [r1, #4]
 800c18c:	fa2f fc8c 	sxtb16	ip, ip
 800c190:	fa2f f58e 	sxtb16	r5, lr
 800c194:	f8c1 c008 	str.w	ip, [r1, #8]
 800c198:	60cd      	str	r5, [r1, #12]
 800c19a:	6845      	ldr	r5, [r0, #4]
 800c19c:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800c1a0:	fa2f fe85 	sxtb16	lr, r5
 800c1a4:	ea4f 2535 	mov.w	r5, r5, ror #8
 800c1a8:	f8c1 e010 	str.w	lr, [r1, #16]
 800c1ac:	fa2f f585 	sxtb16	r5, r5
 800c1b0:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800c1b4:	614d      	str	r5, [r1, #20]
 800c1b6:	fa2f fc8c 	sxtb16	ip, ip
 800c1ba:	fa2f f58e 	sxtb16	r5, lr
 800c1be:	f8c1 c018 	str.w	ip, [r1, #24]
 800c1c2:	61cd      	str	r5, [r1, #28]
 800c1c4:	6885      	ldr	r5, [r0, #8]
 800c1c6:	f8d6 c008 	ldr.w	ip, [r6, #8]
 800c1ca:	fa2f fe85 	sxtb16	lr, r5
 800c1ce:	ea4f 2535 	mov.w	r5, r5, ror #8
 800c1d2:	f8c1 e020 	str.w	lr, [r1, #32]
 800c1d6:	fa2f f585 	sxtb16	r5, r5
 800c1da:	ea4f 2e3c 	mov.w	lr, ip, ror #8
 800c1de:	624d      	str	r5, [r1, #36]	; 0x24
 800c1e0:	fa2f fc8c 	sxtb16	ip, ip
 800c1e4:	fa2f f58e 	sxtb16	r5, lr
 800c1e8:	f8c1 c028 	str.w	ip, [r1, #40]	; 0x28
 800c1ec:	62cd      	str	r5, [r1, #44]	; 0x2c
 800c1ee:	68c5      	ldr	r5, [r0, #12]
 800c1f0:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 800c1f4:	fa2f fe85 	sxtb16	lr, r5
 800c1f8:	3010      	adds	r0, #16
 800c1fa:	4284      	cmp	r4, r0
 800c1fc:	ea4f 2535 	mov.w	r5, r5, ror #8
 800c200:	f8c1 e030 	str.w	lr, [r1, #48]	; 0x30
 800c204:	fa2f f585 	sxtb16	r5, r5
 800c208:	f106 0610 	add.w	r6, r6, #16
 800c20c:	634d      	str	r5, [r1, #52]	; 0x34
 800c20e:	ea4f 253c 	mov.w	r5, ip, ror #8
 800c212:	f101 0140 	add.w	r1, r1, #64	; 0x40
 800c216:	fa2f fc8c 	sxtb16	ip, ip
 800c21a:	fa2f f585 	sxtb16	r5, r5
 800c21e:	f841 cc08 	str.w	ip, [r1, #-8]
 800c222:	f841 5c04 	str.w	r5, [r1, #-4]
 800c226:	d1a3      	bne.n	800c170 <st_sssa8_ch_fullW_prefetch+0x38>
 800c228:	9903      	ldr	r1, [sp, #12]
 800c22a:	444f      	add	r7, r9
 800c22c:	440b      	add	r3, r1
 800c22e:	46cc      	mov	ip, r9
 800c230:	9902      	ldr	r1, [sp, #8]
 800c232:	458c      	cmp	ip, r1
 800c234:	da2f      	bge.n	800c296 <st_sssa8_ch_fullW_prefetch+0x15e>
 800c236:	9904      	ldr	r1, [sp, #16]
 800c238:	eba1 080c 	sub.w	r8, r1, ip
 800c23c:	ea4f 0898 	mov.w	r8, r8, lsr #2
 800c240:	f108 0a01 	add.w	sl, r8, #1
 800c244:	ea4f 018a 	mov.w	r1, sl, lsl #2
 800c248:	9101      	str	r1, [sp, #4]
 800c24a:	eb04 0e01 	add.w	lr, r4, r1
 800c24e:	463e      	mov	r6, r7
 800c250:	4618      	mov	r0, r3
 800c252:	f854 1b04 	ldr.w	r1, [r4], #4
 800c256:	f856 5b04 	ldr.w	r5, [r6], #4
 800c25a:	fa2f fb81 	sxtb16	fp, r1
 800c25e:	4574      	cmp	r4, lr
 800c260:	f8c0 b000 	str.w	fp, [r0]
 800c264:	ea4f 2131 	mov.w	r1, r1, ror #8
 800c268:	ea4f 2b35 	mov.w	fp, r5, ror #8
 800c26c:	fa2f f181 	sxtb16	r1, r1
 800c270:	fa2f f585 	sxtb16	r5, r5
 800c274:	6041      	str	r1, [r0, #4]
 800c276:	6085      	str	r5, [r0, #8]
 800c278:	fa2f f18b 	sxtb16	r1, fp
 800c27c:	f100 0010 	add.w	r0, r0, #16
 800c280:	f840 1c04 	str.w	r1, [r0, #-4]
 800c284:	d1e5      	bne.n	800c252 <st_sssa8_ch_fullW_prefetch+0x11a>
 800c286:	9901      	ldr	r1, [sp, #4]
 800c288:	f10c 0c04 	add.w	ip, ip, #4
 800c28c:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 800c290:	eb03 130a 	add.w	r3, r3, sl, lsl #4
 800c294:	440f      	add	r7, r1
 800c296:	4562      	cmp	r2, ip
 800c298:	dd1c      	ble.n	800c2d4 <st_sssa8_ch_fullW_prefetch+0x19c>
 800c29a:	f994 1000 	ldrsb.w	r1, [r4]
 800c29e:	8019      	strh	r1, [r3, #0]
 800c2a0:	f997 1000 	ldrsb.w	r1, [r7]
 800c2a4:	8059      	strh	r1, [r3, #2]
 800c2a6:	f10c 0101 	add.w	r1, ip, #1
 800c2aa:	428a      	cmp	r2, r1
 800c2ac:	dd2a      	ble.n	800c304 <st_sssa8_ch_fullW_prefetch+0x1cc>
 800c2ae:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800c2b2:	8099      	strh	r1, [r3, #4]
 800c2b4:	f10c 0c02 	add.w	ip, ip, #2
 800c2b8:	f997 1001 	ldrsb.w	r1, [r7, #1]
 800c2bc:	80d9      	strh	r1, [r3, #6]
 800c2be:	4562      	cmp	r2, ip
 800c2c0:	dd28      	ble.n	800c314 <st_sssa8_ch_fullW_prefetch+0x1dc>
 800c2c2:	f994 1002 	ldrsb.w	r1, [r4, #2]
 800c2c6:	8119      	strh	r1, [r3, #8]
 800c2c8:	f997 1002 	ldrsb.w	r1, [r7, #2]
 800c2cc:	8159      	strh	r1, [r3, #10]
 800c2ce:	3403      	adds	r4, #3
 800c2d0:	3703      	adds	r7, #3
 800c2d2:	330c      	adds	r3, #12
 800c2d4:	9900      	ldr	r1, [sp, #0]
 800c2d6:	3901      	subs	r1, #1
 800c2d8:	eb04 0002 	add.w	r0, r4, r2
 800c2dc:	4417      	add	r7, r2
 800c2de:	9100      	str	r1, [sp, #0]
 800c2e0:	f47f af3f 	bne.w	800c162 <st_sssa8_ch_fullW_prefetch+0x2a>
 800c2e4:	9905      	ldr	r1, [sp, #20]
 800c2e6:	07c9      	lsls	r1, r1, #31
 800c2e8:	d509      	bpl.n	800c2fe <st_sssa8_ch_fullW_prefetch+0x1c6>
 800c2ea:	2a00      	cmp	r2, #0
 800c2ec:	dd07      	ble.n	800c2fe <st_sssa8_ch_fullW_prefetch+0x1c6>
 800c2ee:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c2f2:	f910 1b01 	ldrsb.w	r1, [r0], #1
 800c2f6:	f823 1b02 	strh.w	r1, [r3], #2
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d1f9      	bne.n	800c2f2 <st_sssa8_ch_fullW_prefetch+0x1ba>
 800c2fe:	b007      	add	sp, #28
 800c300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c304:	3401      	adds	r4, #1
 800c306:	3701      	adds	r7, #1
 800c308:	3304      	adds	r3, #4
 800c30a:	e7e3      	b.n	800c2d4 <st_sssa8_ch_fullW_prefetch+0x19c>
 800c30c:	4604      	mov	r4, r0
 800c30e:	f04f 0c00 	mov.w	ip, #0
 800c312:	e78d      	b.n	800c230 <st_sssa8_ch_fullW_prefetch+0xf8>
 800c314:	3402      	adds	r4, #2
 800c316:	3702      	adds	r7, #2
 800c318:	3308      	adds	r3, #8
 800c31a:	e7db      	b.n	800c2d4 <st_sssa8_ch_fullW_prefetch+0x19c>

0800c31c <st_sssa8_ch_nn_mat_mult_nt_t>:
 800c31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c320:	b0b3      	sub	sp, #204	; 0xcc
 800c322:	9023      	str	r0, [sp, #140]	; 0x8c
 800c324:	9224      	str	r2, [sp, #144]	; 0x90
 800c326:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c328:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800c32a:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 800c32e:	9129      	str	r1, [sp, #164]	; 0xa4
 800c330:	2800      	cmp	r0, #0
 800c332:	bf18      	it	ne
 800c334:	4602      	movne	r2, r0
 800c336:	9243      	str	r2, [sp, #268]	; 0x10c
 800c338:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800c33a:	932e      	str	r3, [sp, #184]	; 0xb8
 800c33c:	2a01      	cmp	r2, #1
 800c33e:	f340 8239 	ble.w	800c7b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x498>
 800c342:	4616      	mov	r6, r2
 800c344:	3a02      	subs	r2, #2
 800c346:	461f      	mov	r7, r3
 800c348:	0852      	lsrs	r2, r2, #1
 800c34a:	f1ab 0310 	sub.w	r3, fp, #16
 800c34e:	9230      	str	r2, [sp, #192]	; 0xc0
 800c350:	091b      	lsrs	r3, r3, #4
 800c352:	00d2      	lsls	r2, r2, #3
 800c354:	3301      	adds	r3, #1
 800c356:	320c      	adds	r2, #12
 800c358:	ea4f 00ab 	mov.w	r0, fp, asr #2
 800c35c:	9227      	str	r2, [sp, #156]	; 0x9c
 800c35e:	011a      	lsls	r2, r3, #4
 800c360:	0084      	lsls	r4, r0, #2
 800c362:	9d3e      	ldr	r5, [sp, #248]	; 0xf8
 800c364:	9205      	str	r2, [sp, #20]
 800c366:	019a      	lsls	r2, r3, #6
 800c368:	9222      	str	r2, [sp, #136]	; 0x88
 800c36a:	eb0b 0204 	add.w	r2, fp, r4
 800c36e:	106d      	asrs	r5, r5, #1
 800c370:	0076      	lsls	r6, r6, #1
 800c372:	922f      	str	r2, [sp, #188]	; 0xbc
 800c374:	0102      	lsls	r2, r0, #4
 800c376:	922d      	str	r2, [sp, #180]	; 0xb4
 800c378:	fb06 f205 	mul.w	r2, r6, r5
 800c37c:	9228      	str	r2, [sp, #160]	; 0xa0
 800c37e:	f00b 0203 	and.w	r2, fp, #3
 800c382:	922c      	str	r2, [sp, #176]	; 0xb0
 800c384:	f1ab 020f 	sub.w	r2, fp, #15
 800c388:	9211      	str	r2, [sp, #68]	; 0x44
 800c38a:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800c38c:	902b      	str	r0, [sp, #172]	; 0xac
 800c38e:	f002 0201 	and.w	r2, r2, #1
 800c392:	9225      	str	r2, [sp, #148]	; 0x94
 800c394:	ea4f 024b 	mov.w	r2, fp, lsl #1
 800c398:	2304      	movs	r3, #4
 800c39a:	9221      	str	r2, [sp, #132]	; 0x84
 800c39c:	ea4f 028b 	mov.w	r2, fp, lsl #2
 800c3a0:	9315      	str	r3, [sp, #84]	; 0x54
 800c3a2:	922a      	str	r2, [sp, #168]	; 0xa8
 800c3a4:	f1ab 0304 	sub.w	r3, fp, #4
 800c3a8:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
 800c3aa:	9314      	str	r3, [sp, #80]	; 0x50
 800c3ac:	f10b 0301 	add.w	r3, fp, #1
 800c3b0:	3202      	adds	r2, #2
 800c3b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3b6:	9431      	str	r4, [sp, #196]	; 0xc4
 800c3b8:	9526      	str	r5, [sp, #152]	; 0x98
 800c3ba:	9612      	str	r6, [sp, #72]	; 0x48
 800c3bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c3be:	9716      	str	r7, [sp, #88]	; 0x58
 800c3c0:	911c      	str	r1, [sp, #112]	; 0x70
 800c3c2:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800c3c4:	9942      	ldr	r1, [sp, #264]	; 0x108
 800c3c6:	441a      	add	r2, r3
 800c3c8:	4419      	add	r1, r3
 800c3ca:	9220      	str	r2, [sp, #128]	; 0x80
 800c3cc:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800c3d0:	920c      	str	r2, [sp, #48]	; 0x30
 800c3d2:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800c3d6:	920e      	str	r2, [sp, #56]	; 0x38
 800c3d8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c3da:	911f      	str	r1, [sp, #124]	; 0x7c
 800c3dc:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 800c3e0:	f9b2 2000 	ldrsh.w	r2, [r2]
 800c3e4:	9204      	str	r2, [sp, #16]
 800c3e6:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
 800c3e8:	9103      	str	r1, [sp, #12]
 800c3ea:	4611      	mov	r1, r2
 800c3ec:	58ca      	ldr	r2, [r1, r3]
 800c3ee:	920d      	str	r2, [sp, #52]	; 0x34
 800c3f0:	9a42      	ldr	r2, [sp, #264]	; 0x108
 800c3f2:	58d3      	ldr	r3, [r2, r3]
 800c3f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c3f6:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	f000 83eb 	beq.w	800cbd4 <st_sssa8_ch_nn_mat_mult_nt_t+0x8b8>
 800c3fe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c400:	2b00      	cmp	r3, #0
 800c402:	f040 839b 	bne.w	800cb3c <st_sssa8_ch_nn_mat_mult_nt_t+0x820>
 800c406:	4619      	mov	r1, r3
 800c408:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800c40a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c40c:	1910      	adds	r0, r2, r4
 800c40e:	5912      	ldr	r2, [r2, r4]
 800c410:	f850 0c04 	ldr.w	r0, [r0, #-4]
 800c414:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800c416:	4413      	add	r3, r2
 800c418:	930a      	str	r3, [sp, #40]	; 0x28
 800c41a:	180b      	adds	r3, r1, r0
 800c41c:	9309      	str	r3, [sp, #36]	; 0x24
 800c41e:	2c00      	cmp	r4, #0
 800c420:	f000 843d 	beq.w	800cc9e <st_sssa8_ch_nn_mat_mult_nt_t+0x982>
 800c424:	9804      	ldr	r0, [sp, #16]
 800c426:	9903      	ldr	r1, [sp, #12]
 800c428:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 800c42c:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 800c430:	9402      	str	r4, [sp, #8]
 800c432:	2501      	movs	r5, #1
 800c434:	1e83      	subs	r3, r0, #2
 800c436:	fa05 f303 	lsl.w	r3, r5, r3
 800c43a:	9319      	str	r3, [sp, #100]	; 0x64
 800c43c:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800c43e:	1e8a      	subs	r2, r1, #2
 800c440:	fa05 f202 	lsl.w	r2, r5, r2
 800c444:	3b03      	subs	r3, #3
 800c446:	9218      	str	r2, [sp, #96]	; 0x60
 800c448:	9310      	str	r3, [sp, #64]	; 0x40
 800c44a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c44c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c44e:	4413      	add	r3, r2
 800c450:	9313      	str	r3, [sp, #76]	; 0x4c
 800c452:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c454:	9301      	str	r3, [sp, #4]
 800c456:	1a6b      	subs	r3, r5, r1
 800c458:	931d      	str	r3, [sp, #116]	; 0x74
 800c45a:	1e4b      	subs	r3, r1, #1
 800c45c:	931a      	str	r3, [sp, #104]	; 0x68
 800c45e:	1a2b      	subs	r3, r5, r0
 800c460:	931e      	str	r3, [sp, #120]	; 0x78
 800c462:	1e43      	subs	r3, r0, #1
 800c464:	931b      	str	r3, [sp, #108]	; 0x6c
 800c466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c468:	2b00      	cmp	r3, #0
 800c46a:	f340 825c 	ble.w	800c926 <st_sssa8_ch_nn_mat_mult_nt_t+0x60a>
 800c46e:	9b05      	ldr	r3, [sp, #20]
 800c470:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c472:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c474:	f8dd 810c 	ldr.w	r8, [sp, #268]	; 0x10c
 800c478:	4453      	add	r3, sl
 800c47a:	9300      	str	r3, [sp, #0]
 800c47c:	4634      	mov	r4, r6
 800c47e:	4603      	mov	r3, r0
 800c480:	eb0a 090b 	add.w	r9, sl, fp
 800c484:	f8da 5000 	ldr.w	r5, [sl]
 800c488:	f8d8 2000 	ldr.w	r2, [r8]
 800c48c:	fa2f f185 	sxtb16	r1, r5
 800c490:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800c494:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c498:	f8d8 e008 	ldr.w	lr, [r8, #8]
 800c49c:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800c4a0:	fb21 6602 	smlad	r6, r1, r2, r6
 800c4a4:	fb25 660c 	smlad	r6, r5, ip, r6
 800c4a8:	fb21 000e 	smlad	r0, r1, lr, r0
 800c4ac:	fb25 0007 	smlad	r0, r5, r7, r0
 800c4b0:	f85a 100b 	ldr.w	r1, [sl, fp]
 800c4b4:	fa2f f581 	sxtb16	r5, r1
 800c4b8:	fa2f f191 	sxtb16	r1, r1, ror #8
 800c4bc:	fb25 4202 	smlad	r2, r5, r2, r4
 800c4c0:	fb25 330e 	smlad	r3, r5, lr, r3
 800c4c4:	fb21 220c 	smlad	r2, r1, ip, r2
 800c4c8:	f8d8 c010 	ldr.w	ip, [r8, #16]
 800c4cc:	f8d8 4014 	ldr.w	r4, [r8, #20]
 800c4d0:	fb21 3707 	smlad	r7, r1, r7, r3
 800c4d4:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c4d8:	f8d8 e018 	ldr.w	lr, [r8, #24]
 800c4dc:	fa2f f583 	sxtb16	r5, r3
 800c4e0:	f8d8 101c 	ldr.w	r1, [r8, #28]
 800c4e4:	fa2f f393 	sxtb16	r3, r3, ror #8
 800c4e8:	fb25 660c 	smlad	r6, r5, ip, r6
 800c4ec:	fb23 6604 	smlad	r6, r3, r4, r6
 800c4f0:	fb25 050e 	smlad	r5, r5, lr, r0
 800c4f4:	fb23 5501 	smlad	r5, r3, r1, r5
 800c4f8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c4fc:	fa2f f380 	sxtb16	r3, r0
 800c500:	fa2f f090 	sxtb16	r0, r0, ror #8
 800c504:	fb23 2c0c 	smlad	ip, r3, ip, r2
 800c508:	fb23 770e 	smlad	r7, r3, lr, r7
 800c50c:	fb20 cc04 	smlad	ip, r0, r4, ip
 800c510:	f8d8 4020 	ldr.w	r4, [r8, #32]
 800c514:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 800c518:	fb20 7101 	smlad	r1, r0, r1, r7
 800c51c:	f8da 2008 	ldr.w	r2, [sl, #8]
 800c520:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
 800c524:	fa2f f382 	sxtb16	r3, r2
 800c528:	f8d8 702c 	ldr.w	r7, [r8, #44]	; 0x2c
 800c52c:	fa2f f292 	sxtb16	r2, r2, ror #8
 800c530:	fb23 6604 	smlad	r6, r3, r4, r6
 800c534:	fb22 660e 	smlad	r6, r2, lr, r6
 800c538:	fb23 5300 	smlad	r3, r3, r0, r5
 800c53c:	fb22 3207 	smlad	r2, r2, r7, r3
 800c540:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800c544:	fa2f f985 	sxtb16	r9, r5
 800c548:	fa2f f595 	sxtb16	r5, r5, ror #8
 800c54c:	fb29 c404 	smlad	r4, r9, r4, ip
 800c550:	fb29 1100 	smlad	r1, r9, r0, r1
 800c554:	fb25 4e0e 	smlad	lr, r5, lr, r4
 800c558:	f8d8 c030 	ldr.w	ip, [r8, #48]	; 0x30
 800c55c:	f8d8 4034 	ldr.w	r4, [r8, #52]	; 0x34
 800c560:	fb25 1707 	smlad	r7, r5, r7, r1
 800c564:	f8da 000c 	ldr.w	r0, [sl, #12]
 800c568:	f8d8 1038 	ldr.w	r1, [r8, #56]	; 0x38
 800c56c:	f8d8 503c 	ldr.w	r5, [r8, #60]	; 0x3c
 800c570:	fa2f f380 	sxtb16	r3, r0
 800c574:	f108 0840 	add.w	r8, r8, #64	; 0x40
 800c578:	f10a 0a10 	add.w	sl, sl, #16
 800c57c:	fa2f f090 	sxtb16	r0, r0, ror #8
 800c580:	fb23 660c 	smlad	r6, r3, ip, r6
 800c584:	fb20 6604 	smlad	r6, r0, r4, r6
 800c588:	fb23 2201 	smlad	r2, r3, r1, r2
 800c58c:	fb20 2005 	smlad	r0, r0, r5, r2
 800c590:	eb0a 090b 	add.w	r9, sl, fp
 800c594:	f859 3c04 	ldr.w	r3, [r9, #-4]
 800c598:	fa2f f283 	sxtb16	r2, r3
 800c59c:	fa2f f393 	sxtb16	r3, r3, ror #8
 800c5a0:	fb22 ee0c 	smlad	lr, r2, ip, lr
 800c5a4:	fb22 7701 	smlad	r7, r2, r1, r7
 800c5a8:	fb23 e404 	smlad	r4, r3, r4, lr
 800c5ac:	fb23 7305 	smlad	r3, r3, r5, r7
 800c5b0:	9a00      	ldr	r2, [sp, #0]
 800c5b2:	4592      	cmp	sl, r2
 800c5b4:	f47f af66 	bne.w	800c484 <st_sssa8_ch_nn_mat_mult_nt_t+0x168>
 800c5b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c5ba:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c5be:	9200      	str	r2, [sp, #0]
 800c5c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c5c2:	4591      	cmp	r9, r2
 800c5c4:	da43      	bge.n	800c64e <st_sssa8_ch_nn_mat_mult_nt_t+0x332>
 800c5c6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c5c8:	9f00      	ldr	r7, [sp, #0]
 800c5ca:	f8cd 9020 	str.w	r9, [sp, #32]
 800c5ce:	eba1 0209 	sub.w	r2, r1, r9
 800c5d2:	0892      	lsrs	r2, r2, #2
 800c5d4:	9207      	str	r2, [sp, #28]
 800c5d6:	3201      	adds	r2, #1
 800c5d8:	9206      	str	r2, [sp, #24]
 800c5da:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800c5de:	f8cd b100 	str.w	fp, [sp, #256]	; 0x100
 800c5e2:	4691      	mov	r9, r2
 800c5e4:	468b      	mov	fp, r1
 800c5e6:	f85a 2b04 	ldr.w	r2, [sl], #4
 800c5ea:	683d      	ldr	r5, [r7, #0]
 800c5ec:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800c5f0:	f8d7 8008 	ldr.w	r8, [r7, #8]
 800c5f4:	fa2f f182 	sxtb16	r1, r2
 800c5f8:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800c5fc:	fa2f f292 	sxtb16	r2, r2, ror #8
 800c600:	3710      	adds	r7, #16
 800c602:	fb21 6605 	smlad	r6, r1, r5, r6
 800c606:	fb22 660e 	smlad	r6, r2, lr, r6
 800c60a:	fb21 0008 	smlad	r0, r1, r8, r0
 800c60e:	fb22 000c 	smlad	r0, r2, ip, r0
 800c612:	f85a 200b 	ldr.w	r2, [sl, fp]
 800c616:	fa2f f182 	sxtb16	r1, r2
 800c61a:	fa2f f292 	sxtb16	r2, r2, ror #8
 800c61e:	fb21 4405 	smlad	r4, r1, r5, r4
 800c622:	fb21 3308 	smlad	r3, r1, r8, r3
 800c626:	fb22 440e 	smlad	r4, r2, lr, r4
 800c62a:	fb22 330c 	smlad	r3, r2, ip, r3
 800c62e:	45ca      	cmp	sl, r9
 800c630:	d1d9      	bne.n	800c5e6 <st_sssa8_ch_nn_mat_mult_nt_t+0x2ca>
 800c632:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c636:	9a07      	ldr	r2, [sp, #28]
 800c638:	9906      	ldr	r1, [sp, #24]
 800c63a:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 800c63e:	f109 0904 	add.w	r9, r9, #4
 800c642:	eb09 0982 	add.w	r9, r9, r2, lsl #2
 800c646:	9a00      	ldr	r2, [sp, #0]
 800c648:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800c64c:	9200      	str	r2, [sp, #0]
 800c64e:	45cb      	cmp	fp, r9
 800c650:	eb0a 020b 	add.w	r2, sl, fp
 800c654:	f340 812e 	ble.w	800c8b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x598>
 800c658:	9900      	ldr	r1, [sp, #0]
 800c65a:	f99a 2000 	ldrsb.w	r2, [sl]
 800c65e:	f9b1 7000 	ldrsh.w	r7, [r1]
 800c662:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800c666:	f91a 100b 	ldrsb.w	r1, [sl, fp]
 800c66a:	fb17 6602 	smlabb	r6, r7, r2, r6
 800c66e:	fb17 4401 	smlabb	r4, r7, r1, r4
 800c672:	fb15 0002 	smlabb	r0, r5, r2, r0
 800c676:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800c678:	f109 0201 	add.w	r2, r9, #1
 800c67c:	4593      	cmp	fp, r2
 800c67e:	fb15 3301 	smlabb	r3, r5, r1, r3
 800c682:	eb0a 0107 	add.w	r1, sl, r7
 800c686:	f340 8117 	ble.w	800c8b8 <st_sssa8_ch_nn_mat_mult_nt_t+0x59c>
 800c68a:	9a00      	ldr	r2, [sp, #0]
 800c68c:	f99a 7001 	ldrsb.w	r7, [sl, #1]
 800c690:	f9b2 5004 	ldrsh.w	r5, [r2, #4]
 800c694:	f9b2 1006 	ldrsh.w	r1, [r2, #6]
 800c698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c69a:	f109 0902 	add.w	r9, r9, #2
 800c69e:	f91a 2002 	ldrsb.w	r2, [sl, r2]
 800c6a2:	fb15 6607 	smlabb	r6, r5, r7, r6
 800c6a6:	fb11 0007 	smlabb	r0, r1, r7, r0
 800c6aa:	45cb      	cmp	fp, r9
 800c6ac:	f10a 0702 	add.w	r7, sl, #2
 800c6b0:	fb15 4402 	smlabb	r4, r5, r2, r4
 800c6b4:	fb11 3302 	smlabb	r3, r1, r2, r3
 800c6b8:	eb07 020b 	add.w	r2, r7, fp
 800c6bc:	f340 80fa 	ble.w	800c8b4 <st_sssa8_ch_nn_mat_mult_nt_t+0x598>
 800c6c0:	9a00      	ldr	r2, [sp, #0]
 800c6c2:	f917 500b 	ldrsb.w	r5, [r7, fp]
 800c6c6:	f9b2 1008 	ldrsh.w	r1, [r2, #8]
 800c6ca:	f9b2 700a 	ldrsh.w	r7, [r2, #10]
 800c6ce:	f99a 2002 	ldrsb.w	r2, [sl, #2]
 800c6d2:	f10a 0a03 	add.w	sl, sl, #3
 800c6d6:	fb11 4405 	smlabb	r4, r1, r5, r4
 800c6da:	fb17 3305 	smlabb	r3, r7, r5, r3
 800c6de:	fb11 6602 	smlabb	r6, r1, r2, r6
 800c6e2:	fb17 0002 	smlabb	r0, r7, r2, r0
 800c6e6:	44da      	add	sl, fp
 800c6e8:	9a03      	ldr	r2, [sp, #12]
 800c6ea:	2a15      	cmp	r2, #21
 800c6ec:	f340 80cd 	ble.w	800c88a <st_sssa8_ch_nn_mat_mult_nt_t+0x56e>
 800c6f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6f2:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800c6f4:	fb56 5602 	smmla	r6, r6, r2, r5
 800c6f8:	fb54 5402 	smmla	r4, r4, r2, r5
 800c6fc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c6fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c700:	4116      	asrs	r6, r2
 800c702:	440e      	add	r6, r1
 800c704:	f306 0607 	ssat	r6, #8, r6
 800c708:	4114      	asrs	r4, r2
 800c70a:	9a01      	ldr	r2, [sp, #4]
 800c70c:	440c      	add	r4, r1
 800c70e:	7016      	strb	r6, [r2, #0]
 800c710:	f304 0407 	ssat	r4, #8, r4
 800c714:	993f      	ldr	r1, [sp, #252]	; 0xfc
 800c716:	5454      	strb	r4, [r2, r1]
 800c718:	9a04      	ldr	r2, [sp, #16]
 800c71a:	2a15      	cmp	r2, #21
 800c71c:	f340 809e 	ble.w	800c85c <st_sssa8_ch_nn_mat_mult_nt_t+0x540>
 800c720:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c722:	9c19      	ldr	r4, [sp, #100]	; 0x64
 800c724:	fb50 4002 	smmla	r0, r0, r2, r4
 800c728:	fb53 4302 	smmla	r3, r3, r2, r4
 800c72c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c72e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c730:	4110      	asrs	r0, r2
 800c732:	4408      	add	r0, r1
 800c734:	f300 0007 	ssat	r0, #8, r0
 800c738:	4113      	asrs	r3, r2
 800c73a:	9a01      	ldr	r2, [sp, #4]
 800c73c:	440b      	add	r3, r1
 800c73e:	7050      	strb	r0, [r2, #1]
 800c740:	f303 0307 	ssat	r3, #8, r3
 800c744:	993f      	ldr	r1, [sp, #252]	; 0xfc
 800c746:	440a      	add	r2, r1
 800c748:	7053      	strb	r3, [r2, #1]
 800c74a:	9b01      	ldr	r3, [sp, #4]
 800c74c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c74e:	4413      	add	r3, r2
 800c750:	9301      	str	r3, [sp, #4]
 800c752:	9b02      	ldr	r3, [sp, #8]
 800c754:	3b01      	subs	r3, #1
 800c756:	9302      	str	r3, [sp, #8]
 800c758:	f47f ae85 	bne.w	800c466 <st_sssa8_ch_nn_mat_mult_nt_t+0x14a>
 800c75c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c75e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800c760:	eb03 0b02 	add.w	fp, r3, r2
 800c764:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800c766:	2b00      	cmp	r3, #0
 800c768:	f040 80e6 	bne.w	800c938 <st_sssa8_ch_nn_mat_mult_nt_t+0x61c>
 800c76c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c76e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c770:	4413      	add	r3, r2
 800c772:	931c      	str	r3, [sp, #112]	; 0x70
 800c774:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c776:	3302      	adds	r3, #2
 800c778:	9316      	str	r3, [sp, #88]	; 0x58
 800c77a:	9b44      	ldr	r3, [sp, #272]	; 0x110
 800c77c:	b11b      	cbz	r3, 800c786 <st_sssa8_ch_nn_mat_mult_nt_t+0x46a>
 800c77e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c780:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 800c782:	4413      	add	r3, r2
 800c784:	9343      	str	r3, [sp, #268]	; 0x10c
 800c786:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c788:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c78a:	3204      	adds	r2, #4
 800c78c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c78e:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800c790:	3308      	adds	r3, #8
 800c792:	429a      	cmp	r2, r3
 800c794:	9315      	str	r3, [sp, #84]	; 0x54
 800c796:	f47f ae14 	bne.w	800c3c2 <st_sssa8_ch_nn_mat_mult_nt_t+0xa6>
 800c79a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800c79c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800c79e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c7a0:	f8dd b100 	ldr.w	fp, [sp, #256]	; 0x100
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	fb03 1202 	mla	r2, r3, r2, r1
 800c7aa:	9229      	str	r2, [sp, #164]	; 0xa4
 800c7ac:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 800c7ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800c7b2:	932e      	str	r3, [sp, #184]	; 0xb8
 800c7b4:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800c7b6:	07db      	lsls	r3, r3, #31
 800c7b8:	d54c      	bpl.n	800c854 <st_sssa8_ch_nn_mat_mult_nt_t+0x538>
 800c7ba:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	dd49      	ble.n	800c854 <st_sssa8_ch_nn_mat_mult_nt_t+0x538>
 800c7c0:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800c7c2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800c7c4:	f8dd a0b8 	ldr.w	sl, [sp, #184]	; 0xb8
 800c7c8:	f8dd 9104 	ldr.w	r9, [sp, #260]	; 0x104
 800c7cc:	f103 4680 	add.w	r6, r3, #1073741824	; 0x40000000
 800c7d0:	f103 4700 	add.w	r7, r3, #2147483648	; 0x80000000
 800c7d4:	3e01      	subs	r6, #1
 800c7d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c7d8:	00b6      	lsls	r6, r6, #2
 800c7da:	4433      	add	r3, r6
 800c7dc:	469e      	mov	lr, r3
 800c7de:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800c7e0:	f8cd e000 	str.w	lr, [sp]
 800c7e4:	eb03 0c06 	add.w	ip, r3, r6
 800c7e8:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800c7ea:	441e      	add	r6, r3
 800c7ec:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
 800c7ee:	3f01      	subs	r7, #1
 800c7f0:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 800c7f4:	2500      	movs	r5, #0
 800c7f6:	f04f 0801 	mov.w	r8, #1
 800c7fa:	9b00      	ldr	r3, [sp, #0]
 800c7fc:	f1bb 0f00 	cmp.w	fp, #0
 800c800:	6819      	ldr	r1, [r3, #0]
 800c802:	dd0d      	ble.n	800c820 <st_sssa8_ch_nn_mat_mult_nt_t+0x504>
 800c804:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800c806:	eb02 0e0b 	add.w	lr, r2, fp
 800c80a:	1e58      	subs	r0, r3, #1
 800c80c:	f912 3b01 	ldrsb.w	r3, [r2], #1
 800c810:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
 800c814:	eba3 0309 	sub.w	r3, r3, r9
 800c818:	4572      	cmp	r2, lr
 800c81a:	fb04 1103 	mla	r1, r4, r3, r1
 800c81e:	d1f5      	bne.n	800c80c <st_sssa8_ch_nn_mat_mult_nt_t+0x4f0>
 800c820:	f9b7 0000 	ldrsh.w	r0, [r7]
 800c824:	f8dc e000 	ldr.w	lr, [ip]
 800c828:	6834      	ldr	r4, [r6, #0]
 800c82a:	2815      	cmp	r0, #21
 800c82c:	f340 823c 	ble.w	800cca8 <st_sssa8_ch_nn_mat_mult_nt_t+0x98c>
 800c830:	1e83      	subs	r3, r0, #2
 800c832:	3801      	subs	r0, #1
 800c834:	fa08 f303 	lsl.w	r3, r8, r3
 800c838:	fb51 330e 	smmla	r3, r1, lr, r3
 800c83c:	4103      	asrs	r3, r0
 800c83e:	4423      	add	r3, r4
 800c840:	f303 0307 	ssat	r3, #8, r3
 800c844:	f88a 3000 	strb.w	r3, [sl]
 800c848:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800c84a:	449a      	add	sl, r3
 800c84c:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
 800c84e:	3501      	adds	r5, #1
 800c850:	42ab      	cmp	r3, r5
 800c852:	d1d2      	bne.n	800c7fa <st_sssa8_ch_nn_mat_mult_nt_t+0x4de>
 800c854:	2000      	movs	r0, #0
 800c856:	b033      	add	sp, #204	; 0xcc
 800c858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85c:	2a00      	cmp	r2, #0
 800c85e:	dd2d      	ble.n	800c8bc <st_sssa8_ch_nn_mat_mult_nt_t+0x5a0>
 800c860:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c862:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c864:	0040      	lsls	r0, r0, #1
 800c866:	005b      	lsls	r3, r3, #1
 800c868:	fb50 5001 	smmla	r0, r0, r1, r5
 800c86c:	fb53 5301 	smmla	r3, r3, r1, r5
 800c870:	4110      	asrs	r0, r2
 800c872:	f300 0007 	ssat	r0, #8, r0
 800c876:	9901      	ldr	r1, [sp, #4]
 800c878:	4113      	asrs	r3, r2
 800c87a:	7048      	strb	r0, [r1, #1]
 800c87c:	f303 0307 	ssat	r3, #8, r3
 800c880:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800c882:	188a      	adds	r2, r1, r2
 800c884:	7053      	strb	r3, [r2, #1]
 800c886:	460b      	mov	r3, r1
 800c888:	e760      	b.n	800c74c <st_sssa8_ch_nn_mat_mult_nt_t+0x430>
 800c88a:	2a00      	cmp	r2, #0
 800c88c:	dd31      	ble.n	800c8f2 <st_sssa8_ch_nn_mat_mult_nt_t+0x5d6>
 800c88e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c890:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 800c892:	0076      	lsls	r6, r6, #1
 800c894:	0064      	lsls	r4, r4, #1
 800c896:	fb56 7601 	smmla	r6, r6, r1, r7
 800c89a:	fb54 7401 	smmla	r4, r4, r1, r7
 800c89e:	4116      	asrs	r6, r2
 800c8a0:	f306 0607 	ssat	r6, #8, r6
 800c8a4:	9901      	ldr	r1, [sp, #4]
 800c8a6:	4114      	asrs	r4, r2
 800c8a8:	700e      	strb	r6, [r1, #0]
 800c8aa:	f304 0407 	ssat	r4, #8, r4
 800c8ae:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800c8b0:	548c      	strb	r4, [r1, r2]
 800c8b2:	e731      	b.n	800c718 <st_sssa8_ch_nn_mat_mult_nt_t+0x3fc>
 800c8b4:	4692      	mov	sl, r2
 800c8b6:	e717      	b.n	800c6e8 <st_sssa8_ch_nn_mat_mult_nt_t+0x3cc>
 800c8b8:	468a      	mov	sl, r1
 800c8ba:	e715      	b.n	800c6e8 <st_sssa8_ch_nn_mat_mult_nt_t+0x3cc>
 800c8bc:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c8be:	fa00 f201 	lsl.w	r2, r0, r1
 800c8c2:	f302 021f 	ssat	r2, #32, r2
 800c8c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c8c8:	fb52 f210 	smmulr	r2, r2, r0
 800c8cc:	408b      	lsls	r3, r1
 800c8ce:	f303 031f 	ssat	r3, #32, r3
 800c8d2:	fb53 f310 	smmulr	r3, r3, r0
 800c8d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c8d8:	440a      	add	r2, r1
 800c8da:	f302 0207 	ssat	r2, #8, r2
 800c8de:	9801      	ldr	r0, [sp, #4]
 800c8e0:	440b      	add	r3, r1
 800c8e2:	7042      	strb	r2, [r0, #1]
 800c8e4:	f303 0307 	ssat	r3, #8, r3
 800c8e8:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800c8ea:	1882      	adds	r2, r0, r2
 800c8ec:	7053      	strb	r3, [r2, #1]
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	e72c      	b.n	800c74c <st_sssa8_ch_nn_mat_mult_nt_t+0x430>
 800c8f2:	991d      	ldr	r1, [sp, #116]	; 0x74
 800c8f4:	fa06 f201 	lsl.w	r2, r6, r1
 800c8f8:	f302 021f 	ssat	r2, #32, r2
 800c8fc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8fe:	fb52 f215 	smmulr	r2, r2, r5
 800c902:	fa04 f101 	lsl.w	r1, r4, r1
 800c906:	f301 011f 	ssat	r1, #32, r1
 800c90a:	fb51 f115 	smmulr	r1, r1, r5
 800c90e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800c910:	4422      	add	r2, r4
 800c912:	f302 0207 	ssat	r2, #8, r2
 800c916:	9d01      	ldr	r5, [sp, #4]
 800c918:	4421      	add	r1, r4
 800c91a:	702a      	strb	r2, [r5, #0]
 800c91c:	f301 0107 	ssat	r1, #8, r1
 800c920:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 800c922:	54a9      	strb	r1, [r5, r2]
 800c924:	e6f8      	b.n	800c718 <st_sssa8_ch_nn_mat_mult_nt_t+0x3fc>
 800c926:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c928:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c92a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c92c:	9300      	str	r3, [sp, #0]
 800c92e:	4634      	mov	r4, r6
 800c930:	4603      	mov	r3, r0
 800c932:	f04f 0900 	mov.w	r9, #0
 800c936:	e643      	b.n	800c5c0 <st_sssa8_ch_nn_mat_mult_nt_t+0x2a4>
 800c938:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f340 81f3 	ble.w	800cd26 <st_sssa8_ch_nn_mat_mult_nt_t+0xa0a>
 800c940:	9b05      	ldr	r3, [sp, #20]
 800c942:	9d43      	ldr	r5, [sp, #268]	; 0x10c
 800c944:	eb0a 0703 	add.w	r7, sl, r3
 800c948:	e9dd 4309 	ldrd	r4, r3, [sp, #36]	; 0x24
 800c94c:	f8da 2000 	ldr.w	r2, [sl]
 800c950:	6828      	ldr	r0, [r5, #0]
 800c952:	fa2f f182 	sxtb16	r1, r2
 800c956:	fa2f f292 	sxtb16	r2, r2, ror #8
 800c95a:	fb21 4000 	smlad	r0, r1, r0, r4
 800c95e:	686c      	ldr	r4, [r5, #4]
 800c960:	fb22 0404 	smlad	r4, r2, r4, r0
 800c964:	68a8      	ldr	r0, [r5, #8]
 800c966:	fb21 3300 	smlad	r3, r1, r0, r3
 800c96a:	68e9      	ldr	r1, [r5, #12]
 800c96c:	fb22 3201 	smlad	r2, r2, r1, r3
 800c970:	f8da 3004 	ldr.w	r3, [sl, #4]
 800c974:	6928      	ldr	r0, [r5, #16]
 800c976:	fa2f f183 	sxtb16	r1, r3
 800c97a:	fa2f f393 	sxtb16	r3, r3, ror #8
 800c97e:	fb21 4000 	smlad	r0, r1, r0, r4
 800c982:	696c      	ldr	r4, [r5, #20]
 800c984:	fb23 0404 	smlad	r4, r3, r4, r0
 800c988:	69a8      	ldr	r0, [r5, #24]
 800c98a:	fb21 2100 	smlad	r1, r1, r0, r2
 800c98e:	69ea      	ldr	r2, [r5, #28]
 800c990:	fb23 1302 	smlad	r3, r3, r2, r1
 800c994:	f8da 2008 	ldr.w	r2, [sl, #8]
 800c998:	6a28      	ldr	r0, [r5, #32]
 800c99a:	fa2f f182 	sxtb16	r1, r2
 800c99e:	fa2f f292 	sxtb16	r2, r2, ror #8
 800c9a2:	fb21 4000 	smlad	r0, r1, r0, r4
 800c9a6:	6a6e      	ldr	r6, [r5, #36]	; 0x24
 800c9a8:	fb22 0606 	smlad	r6, r2, r6, r0
 800c9ac:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 800c9ae:	fb21 3100 	smlad	r1, r1, r0, r3
 800c9b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c9b4:	fb22 1203 	smlad	r2, r2, r3, r1
 800c9b8:	f8da 400c 	ldr.w	r4, [sl, #12]
 800c9bc:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800c9be:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
 800c9c2:	f8d5 e038 	ldr.w	lr, [r5, #56]	; 0x38
 800c9c6:	f8d5 c03c 	ldr.w	ip, [r5, #60]	; 0x3c
 800c9ca:	fa2f f184 	sxtb16	r1, r4
 800c9ce:	3540      	adds	r5, #64	; 0x40
 800c9d0:	f10a 0a10 	add.w	sl, sl, #16
 800c9d4:	fa2f f394 	sxtb16	r3, r4, ror #8
 800c9d8:	fb21 6000 	smlad	r0, r1, r0, r6
 800c9dc:	fb23 0408 	smlad	r4, r3, r8, r0
 800c9e0:	fb21 220e 	smlad	r2, r1, lr, r2
 800c9e4:	fb23 230c 	smlad	r3, r3, ip, r2
 800c9e8:	45ba      	cmp	sl, r7
 800c9ea:	d1af      	bne.n	800c94c <st_sssa8_ch_nn_mat_mult_nt_t+0x630>
 800c9ec:	e9cd 4309 	strd	r4, r3, [sp, #36]	; 0x24
 800c9f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c9f2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c9f4:	f8dd e014 	ldr.w	lr, [sp, #20]
 800c9f8:	eb03 0c02 	add.w	ip, r3, r2
 800c9fc:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800c9fe:	3b03      	subs	r3, #3
 800ca00:	459e      	cmp	lr, r3
 800ca02:	da32      	bge.n	800ca6a <st_sssa8_ch_nn_mat_mult_nt_t+0x74e>
 800ca04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ca06:	f8cd c000 	str.w	ip, [sp]
 800ca0a:	eba3 080e 	sub.w	r8, r3, lr
 800ca0e:	ea4f 0898 	mov.w	r8, r8, lsr #2
 800ca12:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 800ca16:	f108 0901 	add.w	r9, r8, #1
 800ca1a:	eb0a 0789 	add.w	r7, sl, r9, lsl #2
 800ca1e:	4661      	mov	r1, ip
 800ca20:	f8cd e004 	str.w	lr, [sp, #4]
 800ca24:	f85a 3b04 	ldr.w	r3, [sl], #4
 800ca28:	6808      	ldr	r0, [r1, #0]
 800ca2a:	f8d1 e004 	ldr.w	lr, [r1, #4]
 800ca2e:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800ca32:	68ce      	ldr	r6, [r1, #12]
 800ca34:	fa2f f283 	sxtb16	r2, r3
 800ca38:	3110      	adds	r1, #16
 800ca3a:	fa2f f393 	sxtb16	r3, r3, ror #8
 800ca3e:	fb22 4400 	smlad	r4, r2, r0, r4
 800ca42:	fb23 440e 	smlad	r4, r3, lr, r4
 800ca46:	fb22 550c 	smlad	r5, r2, ip, r5
 800ca4a:	fb23 5506 	smlad	r5, r3, r6, r5
 800ca4e:	45ba      	cmp	sl, r7
 800ca50:	d1e8      	bne.n	800ca24 <st_sssa8_ch_nn_mat_mult_nt_t+0x708>
 800ca52:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ca56:	f8dd c000 	ldr.w	ip, [sp]
 800ca5a:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800ca5e:	f10e 0e04 	add.w	lr, lr, #4
 800ca62:	eb0e 0e88 	add.w	lr, lr, r8, lsl #2
 800ca66:	eb0c 1c09 	add.w	ip, ip, r9, lsl #4
 800ca6a:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800ca6c:	4573      	cmp	r3, lr
 800ca6e:	dd2f      	ble.n	800cad0 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b4>
 800ca70:	f99a 2000 	ldrsb.w	r2, [sl]
 800ca74:	f8bc 3000 	ldrh.w	r3, [ip]
 800ca78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca7a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ca7c:	f8bc 1002 	ldrh.w	r1, [ip, #2]
 800ca80:	fb13 0002 	smlabb	r0, r3, r2, r0
 800ca84:	fb11 4402 	smlabb	r4, r1, r2, r4
 800ca88:	9a40      	ldr	r2, [sp, #256]	; 0x100
 800ca8a:	9009      	str	r0, [sp, #36]	; 0x24
 800ca8c:	f10e 0301 	add.w	r3, lr, #1
 800ca90:	429a      	cmp	r2, r3
 800ca92:	940a      	str	r4, [sp, #40]	; 0x28
 800ca94:	dd1c      	ble.n	800cad0 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b4>
 800ca96:	f99a 3001 	ldrsb.w	r3, [sl, #1]
 800ca9a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 800ca9e:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 800caa2:	fb12 0003 	smlabb	r0, r2, r3, r0
 800caa6:	fb11 4403 	smlabb	r4, r1, r3, r4
 800caaa:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800caac:	9009      	str	r0, [sp, #36]	; 0x24
 800caae:	f10e 0e02 	add.w	lr, lr, #2
 800cab2:	4573      	cmp	r3, lr
 800cab4:	940a      	str	r4, [sp, #40]	; 0x28
 800cab6:	dd0b      	ble.n	800cad0 <st_sssa8_ch_nn_mat_mult_nt_t+0x7b4>
 800cab8:	f99a 3002 	ldrsb.w	r3, [sl, #2]
 800cabc:	f8bc 2008 	ldrh.w	r2, [ip, #8]
 800cac0:	f8bc 100a 	ldrh.w	r1, [ip, #10]
 800cac4:	fb12 0203 	smlabb	r2, r2, r3, r0
 800cac8:	fb11 4303 	smlabb	r3, r1, r3, r4
 800cacc:	9209      	str	r2, [sp, #36]	; 0x24
 800cace:	930a      	str	r3, [sp, #40]	; 0x28
 800cad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cad2:	f933 2c02 	ldrsh.w	r2, [r3, #-2]
 800cad6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800cad8:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cadc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cade:	2a15      	cmp	r2, #21
 800cae0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800cae4:	f340 80cf 	ble.w	800cc86 <st_sssa8_ch_nn_mat_mult_nt_t+0x96a>
 800cae8:	1e93      	subs	r3, r2, #2
 800caea:	2401      	movs	r4, #1
 800caec:	3a01      	subs	r2, #1
 800caee:	fa04 f303 	lsl.w	r3, r4, r3
 800caf2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800caf4:	fb54 3300 	smmla	r3, r4, r0, r3
 800caf8:	4113      	asrs	r3, r2
 800cafa:	440b      	add	r3, r1
 800cafc:	f303 0307 	ssat	r3, #8, r3
 800cb00:	f88b 3000 	strb.w	r3, [fp]
 800cb04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cb06:	f9b3 1000 	ldrsh.w	r1, [r3]
 800cb0a:	2915      	cmp	r1, #21
 800cb0c:	f340 80a9 	ble.w	800cc62 <st_sssa8_ch_nn_mat_mult_nt_t+0x946>
 800cb10:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800cb12:	461c      	mov	r4, r3
 800cb14:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb16:	58e2      	ldr	r2, [r4, r3]
 800cb18:	9c3c      	ldr	r4, [sp, #240]	; 0xf0
 800cb1a:	1e88      	subs	r0, r1, #2
 800cb1c:	58e3      	ldr	r3, [r4, r3]
 800cb1e:	3901      	subs	r1, #1
 800cb20:	2401      	movs	r4, #1
 800cb22:	fa04 f000 	lsl.w	r0, r4, r0
 800cb26:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cb28:	fb54 0003 	smmla	r0, r4, r3, r0
 800cb2c:	fa40 f101 	asr.w	r1, r0, r1
 800cb30:	4411      	add	r1, r2
 800cb32:	f301 0307 	ssat	r3, #8, r1
 800cb36:	f88b 3001 	strb.w	r3, [fp, #1]
 800cb3a:	e617      	b.n	800c76c <st_sssa8_ch_nn_mat_mult_nt_t+0x450>
 800cb3c:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800cb3e:	2c00      	cmp	r4, #0
 800cb40:	f000 80ed 	beq.w	800cd1e <st_sssa8_ch_nn_mat_mult_nt_t+0xa02>
 800cb44:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800cb46:	2300      	movs	r3, #0
 800cb48:	4619      	mov	r1, r3
 800cb4a:	f102 0010 	add.w	r0, r2, #16
 800cb4e:	f930 2c08 	ldrsh.w	r2, [r0, #-8]
 800cb52:	f930 6c10 	ldrsh.w	r6, [r0, #-16]
 800cb56:	f930 5c0e 	ldrsh.w	r5, [r0, #-14]
 800cb5a:	1a9b      	subs	r3, r3, r2
 800cb5c:	f930 2c06 	ldrsh.w	r2, [r0, #-6]
 800cb60:	1a9b      	subs	r3, r3, r2
 800cb62:	f930 2c04 	ldrsh.w	r2, [r0, #-4]
 800cb66:	1b89      	subs	r1, r1, r6
 800cb68:	f930 6c0c 	ldrsh.w	r6, [r0, #-12]
 800cb6c:	1b49      	subs	r1, r1, r5
 800cb6e:	1a9b      	subs	r3, r3, r2
 800cb70:	f930 5c0a 	ldrsh.w	r5, [r0, #-10]
 800cb74:	f930 2c02 	ldrsh.w	r2, [r0, #-2]
 800cb78:	1b89      	subs	r1, r1, r6
 800cb7a:	3c01      	subs	r4, #1
 800cb7c:	eba1 0105 	sub.w	r1, r1, r5
 800cb80:	eba3 0302 	sub.w	r3, r3, r2
 800cb84:	f100 0010 	add.w	r0, r0, #16
 800cb88:	d1e1      	bne.n	800cb4e <st_sssa8_ch_nn_mat_mult_nt_t+0x832>
 800cb8a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800cb8c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800cb8e:	4402      	add	r2, r0
 800cb90:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 800cb92:	b1cd      	cbz	r5, 800cbc8 <st_sssa8_ch_nn_mat_mult_nt_t+0x8ac>
 800cb94:	f9b2 4000 	ldrsh.w	r4, [r2]
 800cb98:	f9b2 0002 	ldrsh.w	r0, [r2, #2]
 800cb9c:	2d01      	cmp	r5, #1
 800cb9e:	eba1 0104 	sub.w	r1, r1, r4
 800cba2:	eba3 0300 	sub.w	r3, r3, r0
 800cba6:	d00f      	beq.n	800cbc8 <st_sssa8_ch_nn_mat_mult_nt_t+0x8ac>
 800cba8:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 800cbac:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 800cbb0:	2d02      	cmp	r5, #2
 800cbb2:	eba1 0104 	sub.w	r1, r1, r4
 800cbb6:	eba3 0300 	sub.w	r3, r3, r0
 800cbba:	d005      	beq.n	800cbc8 <st_sssa8_ch_nn_mat_mult_nt_t+0x8ac>
 800cbbc:	f9b2 0008 	ldrsh.w	r0, [r2, #8]
 800cbc0:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 800cbc4:	1a09      	subs	r1, r1, r0
 800cbc6:	1a9b      	subs	r3, r3, r2
 800cbc8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800cbca:	fb02 f101 	mul.w	r1, r2, r1
 800cbce:	fb02 f303 	mul.w	r3, r2, r3
 800cbd2:	e419      	b.n	800c408 <st_sssa8_ch_nn_mat_mult_nt_t+0xec>
 800cbd4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800cbd6:	9b40      	ldr	r3, [sp, #256]	; 0x100
 800cbd8:	982b      	ldr	r0, [sp, #172]	; 0xac
 800cbda:	18ec      	adds	r4, r5, r3
 800cbdc:	2800      	cmp	r0, #0
 800cbde:	f000 80a7 	beq.w	800cd30 <st_sssa8_ch_nn_mat_mult_nt_t+0xa14>
 800cbe2:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800cbe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbe8:	f854 1b04 	ldr.w	r1, [r4], #4
 800cbec:	fa2f f683 	sxtb16	r6, r3
 800cbf0:	3801      	subs	r0, #1
 800cbf2:	6016      	str	r6, [r2, #0]
 800cbf4:	ea4f 2333 	mov.w	r3, r3, ror #8
 800cbf8:	ea4f 2631 	mov.w	r6, r1, ror #8
 800cbfc:	fa2f f383 	sxtb16	r3, r3
 800cc00:	fa2f f181 	sxtb16	r1, r1
 800cc04:	6053      	str	r3, [r2, #4]
 800cc06:	6091      	str	r1, [r2, #8]
 800cc08:	fa2f f386 	sxtb16	r3, r6
 800cc0c:	f102 0210 	add.w	r2, r2, #16
 800cc10:	f842 3c04 	str.w	r3, [r2, #-4]
 800cc14:	d1e6      	bne.n	800cbe4 <st_sssa8_ch_nn_mat_mult_nt_t+0x8c8>
 800cc16:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cc18:	992f      	ldr	r1, [sp, #188]	; 0xbc
 800cc1a:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800cc1c:	185c      	adds	r4, r3, r1
 800cc1e:	189a      	adds	r2, r3, r2
 800cc20:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800cc22:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cc24:	440b      	add	r3, r1
 800cc26:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	f43f abe8 	beq.w	800c3fe <st_sssa8_ch_nn_mat_mult_nt_t+0xe2>
 800cc2e:	f992 1000 	ldrsb.w	r1, [r2]
 800cc32:	8019      	strh	r1, [r3, #0]
 800cc34:	f994 1000 	ldrsb.w	r1, [r4]
 800cc38:	8059      	strh	r1, [r3, #2]
 800cc3a:	2801      	cmp	r0, #1
 800cc3c:	f43f abdf 	beq.w	800c3fe <st_sssa8_ch_nn_mat_mult_nt_t+0xe2>
 800cc40:	f992 1001 	ldrsb.w	r1, [r2, #1]
 800cc44:	8099      	strh	r1, [r3, #4]
 800cc46:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800cc4a:	80d9      	strh	r1, [r3, #6]
 800cc4c:	2802      	cmp	r0, #2
 800cc4e:	f43f abd6 	beq.w	800c3fe <st_sssa8_ch_nn_mat_mult_nt_t+0xe2>
 800cc52:	f992 2002 	ldrsb.w	r2, [r2, #2]
 800cc56:	811a      	strh	r2, [r3, #8]
 800cc58:	f994 2002 	ldrsb.w	r2, [r4, #2]
 800cc5c:	815a      	strh	r2, [r3, #10]
 800cc5e:	f7ff bbce 	b.w	800c3fe <st_sssa8_ch_nn_mat_mult_nt_t+0xe2>
 800cc62:	2900      	cmp	r1, #0
 800cc64:	dd47      	ble.n	800ccf6 <st_sssa8_ch_nn_mat_mult_nt_t+0x9da>
 800cc66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc68:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cc6a:	0058      	lsls	r0, r3, #1
 800cc6c:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800cc6e:	461c      	mov	r4, r3
 800cc70:	58a3      	ldr	r3, [r4, r2]
 800cc72:	9c42      	ldr	r4, [sp, #264]	; 0x108
 800cc74:	58a2      	ldr	r2, [r4, r2]
 800cc76:	fb50 2303 	smmla	r3, r0, r3, r2
 800cc7a:	410b      	asrs	r3, r1
 800cc7c:	f303 0307 	ssat	r3, #8, r3
 800cc80:	f88b 3001 	strb.w	r3, [fp, #1]
 800cc84:	e572      	b.n	800c76c <st_sssa8_ch_nn_mat_mult_nt_t+0x450>
 800cc86:	2a00      	cmp	r2, #0
 800cc88:	dd27      	ble.n	800ccda <st_sssa8_ch_nn_mat_mult_nt_t+0x9be>
 800cc8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc8c:	005b      	lsls	r3, r3, #1
 800cc8e:	fb53 1300 	smmla	r3, r3, r0, r1
 800cc92:	4113      	asrs	r3, r2
 800cc94:	f303 0307 	ssat	r3, #8, r3
 800cc98:	f88b 3000 	strb.w	r3, [fp]
 800cc9c:	e732      	b.n	800cb04 <st_sssa8_ch_nn_mat_mult_nt_t+0x7e8>
 800cc9e:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 800cca2:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 800cca6:	e55d      	b.n	800c764 <st_sssa8_ch_nn_mat_mult_nt_t+0x448>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	dd08      	ble.n	800ccbe <st_sssa8_ch_nn_mat_mult_nt_t+0x9a2>
 800ccac:	0049      	lsls	r1, r1, #1
 800ccae:	fb51 410e 	smmla	r1, r1, lr, r4
 800ccb2:	4101      	asrs	r1, r0
 800ccb4:	f301 0307 	ssat	r3, #8, r1
 800ccb8:	f88a 3000 	strb.w	r3, [sl]
 800ccbc:	e5c4      	b.n	800c848 <st_sssa8_ch_nn_mat_mult_nt_t+0x52c>
 800ccbe:	f1c0 0001 	rsb	r0, r0, #1
 800ccc2:	fa01 f000 	lsl.w	r0, r1, r0
 800ccc6:	f300 031f 	ssat	r3, #32, r0
 800ccca:	fb53 f31e 	smmulr	r3, r3, lr
 800ccce:	4423      	add	r3, r4
 800ccd0:	f303 0307 	ssat	r3, #8, r3
 800ccd4:	f88a 3000 	strb.w	r3, [sl]
 800ccd8:	e5b6      	b.n	800c848 <st_sssa8_ch_nn_mat_mult_nt_t+0x52c>
 800ccda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccdc:	f1c2 0201 	rsb	r2, r2, #1
 800cce0:	4093      	lsls	r3, r2
 800cce2:	f303 031f 	ssat	r3, #32, r3
 800cce6:	fb53 f310 	smmulr	r3, r3, r0
 800ccea:	440b      	add	r3, r1
 800ccec:	f303 0307 	ssat	r3, #8, r3
 800ccf0:	f88b 3000 	strb.w	r3, [fp]
 800ccf4:	e706      	b.n	800cb04 <st_sssa8_ch_nn_mat_mult_nt_t+0x7e8>
 800ccf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccf8:	f1c1 0101 	rsb	r1, r1, #1
 800ccfc:	408a      	lsls	r2, r1
 800ccfe:	f302 021f 	ssat	r2, #32, r2
 800cd02:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
 800cd04:	9915      	ldr	r1, [sp, #84]	; 0x54
 800cd06:	4618      	mov	r0, r3
 800cd08:	5843      	ldr	r3, [r0, r1]
 800cd0a:	fb52 f213 	smmulr	r2, r2, r3
 800cd0e:	9b42      	ldr	r3, [sp, #264]	; 0x108
 800cd10:	585b      	ldr	r3, [r3, r1]
 800cd12:	4413      	add	r3, r2
 800cd14:	f303 0307 	ssat	r3, #8, r3
 800cd18:	f88b 3001 	strb.w	r3, [fp, #1]
 800cd1c:	e526      	b.n	800c76c <st_sssa8_ch_nn_mat_mult_nt_t+0x450>
 800cd1e:	4621      	mov	r1, r4
 800cd20:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800cd22:	4623      	mov	r3, r4
 800cd24:	e734      	b.n	800cb90 <st_sssa8_ch_nn_mat_mult_nt_t+0x874>
 800cd26:	f8dd c10c 	ldr.w	ip, [sp, #268]	; 0x10c
 800cd2a:	f04f 0e00 	mov.w	lr, #0
 800cd2e:	e665      	b.n	800c9fc <st_sssa8_ch_nn_mat_mult_nt_t+0x6e0>
 800cd30:	462a      	mov	r2, r5
 800cd32:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800cd34:	e777      	b.n	800cc26 <st_sssa8_ch_nn_mat_mult_nt_t+0x90a>
 800cd36:	bf00      	nop

0800cd38 <st_int8_reordered_no_shift_zero>:
 800cd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd3a:	ea5f 0e92 	movs.w	lr, r2, lsr #2
 800cd3e:	f9bd c014 	ldrsh.w	ip, [sp, #20]
 800cd42:	d02d      	beq.n	800cda0 <st_int8_reordered_no_shift_zero+0x68>
 800cd44:	eb00 078e 	add.w	r7, r0, lr, lsl #2
 800cd48:	460e      	mov	r6, r1
 800cd4a:	f850 4b04 	ldr.w	r4, [r0], #4
 800cd4e:	ea4f 2534 	mov.w	r5, r4, ror #8
 800cd52:	fa2f f585 	sxtb16	r5, r5
 800cd56:	fad5 f503 	ssub16	r5, r5, r3
 800cd5a:	fa2f f484 	sxtb16	r4, r4
 800cd5e:	fad4 f403 	ssub16	r4, r4, r3
 800cd62:	42b8      	cmp	r0, r7
 800cd64:	6034      	str	r4, [r6, #0]
 800cd66:	6075      	str	r5, [r6, #4]
 800cd68:	f106 0608 	add.w	r6, r6, #8
 800cd6c:	d1ed      	bne.n	800cd4a <st_int8_reordered_no_shift_zero+0x12>
 800cd6e:	eb01 01ce 	add.w	r1, r1, lr, lsl #3
 800cd72:	f012 0203 	ands.w	r2, r2, #3
 800cd76:	d012      	beq.n	800cd9e <st_int8_reordered_no_shift_zero+0x66>
 800cd78:	f997 0000 	ldrsb.w	r0, [r7]
 800cd7c:	fa4f f38c 	sxtb.w	r3, ip
 800cd80:	1ac0      	subs	r0, r0, r3
 800cd82:	2a01      	cmp	r2, #1
 800cd84:	8008      	strh	r0, [r1, #0]
 800cd86:	d00a      	beq.n	800cd9e <st_int8_reordered_no_shift_zero+0x66>
 800cd88:	f997 0001 	ldrsb.w	r0, [r7, #1]
 800cd8c:	2a02      	cmp	r2, #2
 800cd8e:	eba0 0003 	sub.w	r0, r0, r3
 800cd92:	8048      	strh	r0, [r1, #2]
 800cd94:	d003      	beq.n	800cd9e <st_int8_reordered_no_shift_zero+0x66>
 800cd96:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	808b      	strh	r3, [r1, #4]
 800cd9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cda0:	4607      	mov	r7, r0
 800cda2:	e7e6      	b.n	800cd72 <st_int8_reordered_no_shift_zero+0x3a>

0800cda4 <st_sssa8_ch_nn_mat_mult_kernel_opt>:
 800cda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda8:	b09b      	sub	sp, #108	; 0x6c
 800cdaa:	4683      	mov	fp, r0
 800cdac:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 800cdb0:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800cdb2:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 800cdb6:	9318      	str	r3, [sp, #96]	; 0x60
 800cdb8:	18c6      	adds	r6, r0, r3
 800cdba:	086b      	lsrs	r3, r5, #1
 800cdbc:	9517      	str	r5, [sp, #92]	; 0x5c
 800cdbe:	9406      	str	r4, [sp, #24]
 800cdc0:	910d      	str	r1, [sp, #52]	; 0x34
 800cdc2:	9215      	str	r2, [sp, #84]	; 0x54
 800cdc4:	9616      	str	r6, [sp, #88]	; 0x58
 800cdc6:	f000 81cd 	beq.w	800d164 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3c0>
 800cdca:	4694      	mov	ip, r2
 800cdcc:	f1a4 0210 	sub.w	r2, r4, #16
 800cdd0:	0912      	lsrs	r2, r2, #4
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	3201      	adds	r2, #1
 800cdd6:	460f      	mov	r7, r1
 800cdd8:	eb07 0540 	add.w	r5, r7, r0, lsl #1
 800cddc:	0151      	lsls	r1, r2, #5
 800cdde:	440f      	add	r7, r1
 800cde0:	1869      	adds	r1, r5, r1
 800cde2:	9112      	str	r1, [sp, #72]	; 0x48
 800cde4:	0191      	lsls	r1, r2, #6
 800cde6:	9111      	str	r1, [sp, #68]	; 0x44
 800cde8:	0111      	lsls	r1, r2, #4
 800cdea:	4662      	mov	r2, ip
 800cdec:	3208      	adds	r2, #8
 800cdee:	9207      	str	r2, [sp, #28]
 800cdf0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800cdf2:	9113      	str	r1, [sp, #76]	; 0x4c
 800cdf4:	3204      	adds	r2, #4
 800cdf6:	9201      	str	r2, [sp, #4]
 800cdf8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800cdfa:	9510      	str	r5, [sp, #64]	; 0x40
 800cdfc:	3208      	adds	r2, #8
 800cdfe:	9205      	str	r2, [sp, #20]
 800ce00:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800ce02:	9708      	str	r7, [sp, #32]
 800ce04:	3b01      	subs	r3, #1
 800ce06:	3202      	adds	r2, #2
 800ce08:	b29c      	uxth	r4, r3
 800ce0a:	9204      	str	r2, [sp, #16]
 800ce0c:	4663      	mov	r3, ip
 800ce0e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800ce10:	9419      	str	r4, [sp, #100]	; 0x64
 800ce12:	3310      	adds	r3, #16
 800ce14:	eb03 01c4 	add.w	r1, r3, r4, lsl #3
 800ce18:	3208      	adds	r2, #8
 800ce1a:	1f03      	subs	r3, r0, #4
 800ce1c:	910e      	str	r1, [sp, #56]	; 0x38
 800ce1e:	9202      	str	r2, [sp, #8]
 800ce20:	1ec1      	subs	r1, r0, #3
 800ce22:	1cb2      	adds	r2, r6, #2
 800ce24:	9314      	str	r3, [sp, #80]	; 0x50
 800ce26:	9b07      	ldr	r3, [sp, #28]
 800ce28:	910f      	str	r1, [sp, #60]	; 0x3c
 800ce2a:	9203      	str	r2, [sp, #12]
 800ce2c:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800ce30:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ce34:	9b06      	ldr	r3, [sp, #24]
 800ce36:	2b0f      	cmp	r3, #15
 800ce38:	f340 82a4 	ble.w	800d384 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5e0>
 800ce3c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800ce40:	f8dd e034 	ldr.w	lr, [sp, #52]	; 0x34
 800ce44:	9e08      	ldr	r6, [sp, #32]
 800ce46:	46dc      	mov	ip, fp
 800ce48:	4603      	mov	r3, r0
 800ce4a:	462c      	mov	r4, r5
 800ce4c:	f8de 7000 	ldr.w	r7, [lr]
 800ce50:	f8d8 2000 	ldr.w	r2, [r8]
 800ce54:	f8dc 1000 	ldr.w	r1, [ip]
 800ce58:	f8dc a004 	ldr.w	sl, [ip, #4]
 800ce5c:	fb21 5507 	smlad	r5, r1, r7, r5
 800ce60:	fb21 4102 	smlad	r1, r1, r2, r4
 800ce64:	fb2a 0007 	smlad	r0, sl, r7, r0
 800ce68:	fb2a 3202 	smlad	r2, sl, r2, r3
 800ce6c:	f8de 7004 	ldr.w	r7, [lr, #4]
 800ce70:	f8d8 a004 	ldr.w	sl, [r8, #4]
 800ce74:	f8dc 4008 	ldr.w	r4, [ip, #8]
 800ce78:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800ce7c:	fb24 5507 	smlad	r5, r4, r7, r5
 800ce80:	fb24 110a 	smlad	r1, r4, sl, r1
 800ce84:	fb23 0007 	smlad	r0, r3, r7, r0
 800ce88:	fb23 230a 	smlad	r3, r3, sl, r2
 800ce8c:	f8de 7008 	ldr.w	r7, [lr, #8]
 800ce90:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800ce94:	f8dc 4010 	ldr.w	r4, [ip, #16]
 800ce98:	f8dc a014 	ldr.w	sl, [ip, #20]
 800ce9c:	fb24 5507 	smlad	r5, r4, r7, r5
 800cea0:	fb24 1102 	smlad	r1, r4, r2, r1
 800cea4:	fb2a 0007 	smlad	r0, sl, r7, r0
 800cea8:	fb2a 3202 	smlad	r2, sl, r2, r3
 800ceac:	f8de 700c 	ldr.w	r7, [lr, #12]
 800ceb0:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800ceb4:	f8dc 4018 	ldr.w	r4, [ip, #24]
 800ceb8:	f8dc 901c 	ldr.w	r9, [ip, #28]
 800cebc:	fb24 5507 	smlad	r5, r4, r7, r5
 800cec0:	fb24 140a 	smlad	r4, r4, sl, r1
 800cec4:	fb29 0007 	smlad	r0, r9, r7, r0
 800cec8:	fb29 2a0a 	smlad	sl, r9, sl, r2
 800cecc:	f8de 7010 	ldr.w	r7, [lr, #16]
 800ced0:	f8d8 9010 	ldr.w	r9, [r8, #16]
 800ced4:	f8dc 1020 	ldr.w	r1, [ip, #32]
 800ced8:	f8dc 3024 	ldr.w	r3, [ip, #36]	; 0x24
 800cedc:	fb21 5507 	smlad	r5, r1, r7, r5
 800cee0:	fb21 4409 	smlad	r4, r1, r9, r4
 800cee4:	fb23 0007 	smlad	r0, r3, r7, r0
 800cee8:	fb23 a909 	smlad	r9, r3, r9, sl
 800ceec:	f8de 7014 	ldr.w	r7, [lr, #20]
 800cef0:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800cef4:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
 800cef8:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
 800cefc:	fb21 5507 	smlad	r5, r1, r7, r5
 800cf00:	fb21 4402 	smlad	r4, r1, r2, r4
 800cf04:	fb23 0007 	smlad	r0, r3, r7, r0
 800cf08:	fb23 9302 	smlad	r3, r3, r2, r9
 800cf0c:	f8de 7018 	ldr.w	r7, [lr, #24]
 800cf10:	f8d8 9018 	ldr.w	r9, [r8, #24]
 800cf14:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
 800cf18:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
 800cf1c:	fb21 5507 	smlad	r5, r1, r7, r5
 800cf20:	fb21 4409 	smlad	r4, r1, r9, r4
 800cf24:	fb22 0707 	smlad	r7, r2, r7, r0
 800cf28:	fb22 3909 	smlad	r9, r2, r9, r3
 800cf2c:	f8de 001c 	ldr.w	r0, [lr, #28]
 800cf30:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800cf34:	f8dc 1038 	ldr.w	r1, [ip, #56]	; 0x38
 800cf38:	f8dc 203c 	ldr.w	r2, [ip, #60]	; 0x3c
 800cf3c:	f10e 0e20 	add.w	lr, lr, #32
 800cf40:	f108 0820 	add.w	r8, r8, #32
 800cf44:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800cf48:	fb21 5500 	smlad	r5, r1, r0, r5
 800cf4c:	fb21 4403 	smlad	r4, r1, r3, r4
 800cf50:	fb22 7000 	smlad	r0, r2, r0, r7
 800cf54:	fb22 9303 	smlad	r3, r2, r3, r9
 800cf58:	45b6      	cmp	lr, r6
 800cf5a:	f47f af77 	bne.w	800ce4c <st_sssa8_ch_nn_mat_mult_kernel_opt+0xa8>
 800cf5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cf60:	9f08      	ldr	r7, [sp, #32]
 800cf62:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 800cf66:	4493      	add	fp, r2
 800cf68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cf6a:	9200      	str	r2, [sp, #0]
 800cf6c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cf6e:	4596      	cmp	lr, r2
 800cf70:	da40      	bge.n	800cff4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x250>
 800cf72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cf74:	f8dd c000 	ldr.w	ip, [sp]
 800cf78:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
 800cf7c:	eba2 020e 	sub.w	r2, r2, lr
 800cf80:	0892      	lsrs	r2, r2, #2
 800cf82:	920b      	str	r2, [sp, #44]	; 0x2c
 800cf84:	3201      	adds	r2, #1
 800cf86:	920a      	str	r2, [sp, #40]	; 0x28
 800cf88:	00d2      	lsls	r2, r2, #3
 800cf8a:	9209      	str	r2, [sp, #36]	; 0x24
 800cf8c:	eb07 0802 	add.w	r8, r7, r2
 800cf90:	465e      	mov	r6, fp
 800cf92:	f8d7 e000 	ldr.w	lr, [r7]
 800cf96:	f8dc 9000 	ldr.w	r9, [ip]
 800cf9a:	6831      	ldr	r1, [r6, #0]
 800cf9c:	f8d6 a004 	ldr.w	sl, [r6, #4]
 800cfa0:	fb21 550e 	smlad	r5, r1, lr, r5
 800cfa4:	fb21 4409 	smlad	r4, r1, r9, r4
 800cfa8:	fb2a 000e 	smlad	r0, sl, lr, r0
 800cfac:	fb2a 3309 	smlad	r3, sl, r9, r3
 800cfb0:	f8d7 e004 	ldr.w	lr, [r7, #4]
 800cfb4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 800cfb8:	68b1      	ldr	r1, [r6, #8]
 800cfba:	68f2      	ldr	r2, [r6, #12]
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	f10c 0c08 	add.w	ip, ip, #8
 800cfc2:	3610      	adds	r6, #16
 800cfc4:	fb21 550e 	smlad	r5, r1, lr, r5
 800cfc8:	fb21 4409 	smlad	r4, r1, r9, r4
 800cfcc:	fb22 000e 	smlad	r0, r2, lr, r0
 800cfd0:	fb22 3309 	smlad	r3, r2, r9, r3
 800cfd4:	4547      	cmp	r7, r8
 800cfd6:	d1dc      	bne.n	800cf92 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1ee>
 800cfd8:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800cfdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfde:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cfe0:	f10e 0e04 	add.w	lr, lr, #4
 800cfe4:	eb0e 0e82 	add.w	lr, lr, r2, lsl #2
 800cfe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfea:	eb0b 1b02 	add.w	fp, fp, r2, lsl #4
 800cfee:	9a00      	ldr	r2, [sp, #0]
 800cff0:	440a      	add	r2, r1
 800cff2:	9200      	str	r2, [sp, #0]
 800cff4:	9a06      	ldr	r2, [sp, #24]
 800cff6:	4572      	cmp	r2, lr
 800cff8:	dd40      	ble.n	800d07c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d8>
 800cffa:	9e00      	ldr	r6, [sp, #0]
 800cffc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 800d000:	f9b7 c000 	ldrsh.w	ip, [r7]
 800d004:	f9b6 6000 	ldrsh.w	r6, [r6]
 800d008:	f9bb 2000 	ldrsh.w	r2, [fp]
 800d00c:	fb0c 0001 	mla	r0, ip, r1, r0
 800d010:	fb06 3301 	mla	r3, r6, r1, r3
 800d014:	9906      	ldr	r1, [sp, #24]
 800d016:	fb02 550c 	mla	r5, r2, ip, r5
 800d01a:	fb02 4406 	mla	r4, r2, r6, r4
 800d01e:	f10e 0201 	add.w	r2, lr, #1
 800d022:	4291      	cmp	r1, r2
 800d024:	f340 814d 	ble.w	800d2c2 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x51e>
 800d028:	9a00      	ldr	r2, [sp, #0]
 800d02a:	f9b7 6002 	ldrsh.w	r6, [r7, #2]
 800d02e:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800d032:	f9bb 2006 	ldrsh.w	r2, [fp, #6]
 800d036:	f9bb c004 	ldrsh.w	ip, [fp, #4]
 800d03a:	fb06 0002 	mla	r0, r6, r2, r0
 800d03e:	fb01 3302 	mla	r3, r1, r2, r3
 800d042:	9a06      	ldr	r2, [sp, #24]
 800d044:	f10e 0e02 	add.w	lr, lr, #2
 800d048:	4572      	cmp	r2, lr
 800d04a:	fb0c 5506 	mla	r5, ip, r6, r5
 800d04e:	fb0c 4401 	mla	r4, ip, r1, r4
 800d052:	f340 819f 	ble.w	800d394 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f0>
 800d056:	9a00      	ldr	r2, [sp, #0]
 800d058:	f9b7 6004 	ldrsh.w	r6, [r7, #4]
 800d05c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 800d060:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 800d064:	f9bb 200a 	ldrsh.w	r2, [fp, #10]
 800d068:	fb07 5506 	mla	r5, r7, r6, r5
 800d06c:	fb07 4401 	mla	r4, r7, r1, r4
 800d070:	fb06 0002 	mla	r0, r6, r2, r0
 800d074:	fb01 3302 	mla	r3, r1, r2, r3
 800d078:	f10b 0b0c 	add.w	fp, fp, #12
 800d07c:	9a01      	ldr	r2, [sp, #4]
 800d07e:	f932 1c04 	ldrsh.w	r1, [r2, #-4]
 800d082:	9a05      	ldr	r2, [sp, #20]
 800d084:	f852 6c08 	ldr.w	r6, [r2, #-8]
 800d088:	9a02      	ldr	r2, [sp, #8]
 800d08a:	2915      	cmp	r1, #21
 800d08c:	f852 7c08 	ldr.w	r7, [r2, #-8]
 800d090:	f340 80ff 	ble.w	800d292 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ee>
 800d094:	1e8a      	subs	r2, r1, #2
 800d096:	f04f 0c01 	mov.w	ip, #1
 800d09a:	3901      	subs	r1, #1
 800d09c:	fa0c f202 	lsl.w	r2, ip, r2
 800d0a0:	fb55 2506 	smmla	r5, r5, r6, r2
 800d0a4:	410d      	asrs	r5, r1
 800d0a6:	fb54 2206 	smmla	r2, r4, r6, r2
 800d0aa:	443d      	add	r5, r7
 800d0ac:	f305 0507 	ssat	r5, #8, r5
 800d0b0:	410a      	asrs	r2, r1
 800d0b2:	9904      	ldr	r1, [sp, #16]
 800d0b4:	443a      	add	r2, r7
 800d0b6:	f801 5c02 	strb.w	r5, [r1, #-2]
 800d0ba:	f302 0207 	ssat	r2, #8, r2
 800d0be:	9903      	ldr	r1, [sp, #12]
 800d0c0:	f801 2c02 	strb.w	r2, [r1, #-2]
 800d0c4:	9a01      	ldr	r2, [sp, #4]
 800d0c6:	f932 1c02 	ldrsh.w	r1, [r2, #-2]
 800d0ca:	2915      	cmp	r1, #21
 800d0cc:	f340 80c1 	ble.w	800d252 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x4ae>
 800d0d0:	9c02      	ldr	r4, [sp, #8]
 800d0d2:	9d05      	ldr	r5, [sp, #20]
 800d0d4:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800d0d8:	f855 5c04 	ldr.w	r5, [r5, #-4]
 800d0dc:	1e8a      	subs	r2, r1, #2
 800d0de:	2601      	movs	r6, #1
 800d0e0:	3901      	subs	r1, #1
 800d0e2:	fa06 f202 	lsl.w	r2, r6, r2
 800d0e6:	fb50 2005 	smmla	r0, r0, r5, r2
 800d0ea:	4108      	asrs	r0, r1
 800d0ec:	fb53 2305 	smmla	r3, r3, r5, r2
 800d0f0:	4420      	add	r0, r4
 800d0f2:	f300 0007 	ssat	r0, #8, r0
 800d0f6:	9a04      	ldr	r2, [sp, #16]
 800d0f8:	410b      	asrs	r3, r1
 800d0fa:	4423      	add	r3, r4
 800d0fc:	f802 0c01 	strb.w	r0, [r2, #-1]
 800d100:	f303 0307 	ssat	r3, #8, r3
 800d104:	9a03      	ldr	r2, [sp, #12]
 800d106:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d10a:	9a01      	ldr	r2, [sp, #4]
 800d10c:	9b07      	ldr	r3, [sp, #28]
 800d10e:	3204      	adds	r2, #4
 800d110:	9201      	str	r2, [sp, #4]
 800d112:	9a05      	ldr	r2, [sp, #20]
 800d114:	3208      	adds	r2, #8
 800d116:	9205      	str	r2, [sp, #20]
 800d118:	9a04      	ldr	r2, [sp, #16]
 800d11a:	3202      	adds	r2, #2
 800d11c:	9204      	str	r2, [sp, #16]
 800d11e:	9a02      	ldr	r2, [sp, #8]
 800d120:	3208      	adds	r2, #8
 800d122:	9202      	str	r2, [sp, #8]
 800d124:	9a03      	ldr	r2, [sp, #12]
 800d126:	3202      	adds	r2, #2
 800d128:	9203      	str	r2, [sp, #12]
 800d12a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d12c:	3308      	adds	r3, #8
 800d12e:	429a      	cmp	r2, r3
 800d130:	9307      	str	r3, [sp, #28]
 800d132:	f47f ae7b 	bne.w	800ce2c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x88>
 800d136:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d138:	9826      	ldr	r0, [sp, #152]	; 0x98
 800d13a:	3301      	adds	r3, #1
 800d13c:	00da      	lsls	r2, r3, #3
 800d13e:	0059      	lsls	r1, r3, #1
 800d140:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800d144:	9326      	str	r3, [sp, #152]	; 0x98
 800d146:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d148:	4413      	add	r3, r2
 800d14a:	9315      	str	r3, [sp, #84]	; 0x54
 800d14c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800d14e:	4413      	add	r3, r2
 800d150:	9327      	str	r3, [sp, #156]	; 0x9c
 800d152:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d154:	4413      	add	r3, r2
 800d156:	9328      	str	r3, [sp, #160]	; 0xa0
 800d158:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d15a:	440b      	add	r3, r1
 800d15c:	9329      	str	r3, [sp, #164]	; 0xa4
 800d15e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d160:	440b      	add	r3, r1
 800d162:	9316      	str	r3, [sp, #88]	; 0x58
 800d164:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d166:	07da      	lsls	r2, r3, #31
 800d168:	f140 8104 	bpl.w	800d374 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5d0>
 800d16c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d16e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d170:	6819      	ldr	r1, [r3, #0]
 800d172:	9b06      	ldr	r3, [sp, #24]
 800d174:	eb00 0c43 	add.w	ip, r0, r3, lsl #1
 800d178:	089b      	lsrs	r3, r3, #2
 800d17a:	f000 8124 	beq.w	800d3c6 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x622>
 800d17e:	1e5e      	subs	r6, r3, #1
 800d180:	b2b6      	uxth	r6, r6
 800d182:	3601      	adds	r6, #1
 800d184:	00f6      	lsls	r6, r6, #3
 800d186:	eb0b 0706 	add.w	r7, fp, r6
 800d18a:	4664      	mov	r4, ip
 800d18c:	460b      	mov	r3, r1
 800d18e:	f8db 5000 	ldr.w	r5, [fp]
 800d192:	f8db 2004 	ldr.w	r2, [fp, #4]
 800d196:	f8d0 e000 	ldr.w	lr, [r0]
 800d19a:	f10b 0b08 	add.w	fp, fp, #8
 800d19e:	fb25 110e 	smlad	r1, r5, lr, r1
 800d1a2:	f8d4 e000 	ldr.w	lr, [r4]
 800d1a6:	fb25 330e 	smlad	r3, r5, lr, r3
 800d1aa:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800d1ae:	6865      	ldr	r5, [r4, #4]
 800d1b0:	3008      	adds	r0, #8
 800d1b2:	3408      	adds	r4, #8
 800d1b4:	fb22 110e 	smlad	r1, r2, lr, r1
 800d1b8:	fb22 3305 	smlad	r3, r2, r5, r3
 800d1bc:	45bb      	cmp	fp, r7
 800d1be:	d1e6      	bne.n	800d18e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x3ea>
 800d1c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d1c2:	4432      	add	r2, r6
 800d1c4:	44b4      	add	ip, r6
 800d1c6:	920d      	str	r2, [sp, #52]	; 0x34
 800d1c8:	9a06      	ldr	r2, [sp, #24]
 800d1ca:	f012 0203 	ands.w	r2, r2, #3
 800d1ce:	d01f      	beq.n	800d210 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 800d1d0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800d1d2:	f9bb 0000 	ldrsh.w	r0, [fp]
 800d1d6:	8835      	ldrh	r5, [r6, #0]
 800d1d8:	f8bc 4000 	ldrh.w	r4, [ip]
 800d1dc:	2a01      	cmp	r2, #1
 800d1de:	fb15 1100 	smlabb	r1, r5, r0, r1
 800d1e2:	fb14 3300 	smlabb	r3, r4, r0, r3
 800d1e6:	d013      	beq.n	800d210 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 800d1e8:	f9bb 0002 	ldrsh.w	r0, [fp, #2]
 800d1ec:	8875      	ldrh	r5, [r6, #2]
 800d1ee:	f8bc 4002 	ldrh.w	r4, [ip, #2]
 800d1f2:	2a02      	cmp	r2, #2
 800d1f4:	fb15 1100 	smlabb	r1, r5, r0, r1
 800d1f8:	fb14 3300 	smlabb	r3, r4, r0, r3
 800d1fc:	d008      	beq.n	800d210 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x46c>
 800d1fe:	f9bb 2004 	ldrsh.w	r2, [fp, #4]
 800d202:	88b4      	ldrh	r4, [r6, #4]
 800d204:	f8bc 0004 	ldrh.w	r0, [ip, #4]
 800d208:	fb12 1104 	smlabb	r1, r2, r4, r1
 800d20c:	fb12 3300 	smlabb	r3, r2, r0, r3
 800d210:	9827      	ldr	r0, [sp, #156]	; 0x9c
 800d212:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d214:	6805      	ldr	r5, [r0, #0]
 800d216:	9828      	ldr	r0, [sp, #160]	; 0xa0
 800d218:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d21c:	6804      	ldr	r4, [r0, #0]
 800d21e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 800d220:	2a15      	cmp	r2, #21
 800d222:	f100 0001 	add.w	r0, r0, #1
 800d226:	f300 808f 	bgt.w	800d348 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5a4>
 800d22a:	2a00      	cmp	r2, #0
 800d22c:	f340 80b5 	ble.w	800d39a <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5f6>
 800d230:	0049      	lsls	r1, r1, #1
 800d232:	005b      	lsls	r3, r3, #1
 800d234:	fb51 4105 	smmla	r1, r1, r5, r4
 800d238:	fb53 4305 	smmla	r3, r3, r5, r4
 800d23c:	fa41 f202 	asr.w	r2, r1, r2
 800d240:	f302 0207 	ssat	r2, #8, r2
 800d244:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800d246:	700a      	strb	r2, [r1, #0]
 800d248:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d24a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d24e:	4113      	asrs	r3, r2
 800d250:	e08a      	b.n	800d368 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 800d252:	2900      	cmp	r1, #0
 800d254:	dd38      	ble.n	800d2c8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x524>
 800d256:	9a05      	ldr	r2, [sp, #20]
 800d258:	9c02      	ldr	r4, [sp, #8]
 800d25a:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800d25e:	f854 4c04 	ldr.w	r4, [r4, #-4]
 800d262:	0040      	lsls	r0, r0, #1
 800d264:	005b      	lsls	r3, r3, #1
 800d266:	fb50 4002 	smmla	r0, r0, r2, r4
 800d26a:	fb53 4302 	smmla	r3, r3, r2, r4
 800d26e:	fa40 f101 	asr.w	r1, r0, r1
 800d272:	f301 0107 	ssat	r1, #8, r1
 800d276:	9a04      	ldr	r2, [sp, #16]
 800d278:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d27c:	9a01      	ldr	r2, [sp, #4]
 800d27e:	f932 4c02 	ldrsh.w	r4, [r2, #-2]
 800d282:	fa43 f404 	asr.w	r4, r3, r4
 800d286:	f304 0407 	ssat	r4, #8, r4
 800d28a:	9b03      	ldr	r3, [sp, #12]
 800d28c:	f803 4c01 	strb.w	r4, [r3, #-1]
 800d290:	e73c      	b.n	800d10c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x368>
 800d292:	2900      	cmp	r1, #0
 800d294:	dd3b      	ble.n	800d30e <st_sssa8_ch_nn_mat_mult_kernel_opt+0x56a>
 800d296:	006d      	lsls	r5, r5, #1
 800d298:	0064      	lsls	r4, r4, #1
 800d29a:	fb55 7506 	smmla	r5, r5, r6, r7
 800d29e:	fb54 7406 	smmla	r4, r4, r6, r7
 800d2a2:	410d      	asrs	r5, r1
 800d2a4:	f305 0507 	ssat	r5, #8, r5
 800d2a8:	9a04      	ldr	r2, [sp, #16]
 800d2aa:	f802 5c02 	strb.w	r5, [r2, #-2]
 800d2ae:	9a01      	ldr	r2, [sp, #4]
 800d2b0:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 800d2b4:	4114      	asrs	r4, r2
 800d2b6:	f304 0407 	ssat	r4, #8, r4
 800d2ba:	9a03      	ldr	r2, [sp, #12]
 800d2bc:	f802 4c02 	strb.w	r4, [r2, #-2]
 800d2c0:	e700      	b.n	800d0c4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x320>
 800d2c2:	f10b 0b04 	add.w	fp, fp, #4
 800d2c6:	e6d9      	b.n	800d07c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d8>
 800d2c8:	f1c1 0101 	rsb	r1, r1, #1
 800d2cc:	4088      	lsls	r0, r1
 800d2ce:	f300 001f 	ssat	r0, #32, r0
 800d2d2:	9a05      	ldr	r2, [sp, #20]
 800d2d4:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800d2d8:	fb50 f014 	smmulr	r0, r0, r4
 800d2dc:	fa03 f101 	lsl.w	r1, r3, r1
 800d2e0:	f301 011f 	ssat	r1, #32, r1
 800d2e4:	fb51 f114 	smmulr	r1, r1, r4
 800d2e8:	9b02      	ldr	r3, [sp, #8]
 800d2ea:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800d2ee:	4402      	add	r2, r0
 800d2f0:	f302 0207 	ssat	r2, #8, r2
 800d2f4:	9804      	ldr	r0, [sp, #16]
 800d2f6:	f800 2c01 	strb.w	r2, [r0, #-1]
 800d2fa:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d2fe:	440b      	add	r3, r1
 800d300:	f303 0307 	ssat	r3, #8, r3
 800d304:	9a03      	ldr	r2, [sp, #12]
 800d306:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d30a:	9a01      	ldr	r2, [sp, #4]
 800d30c:	e6fe      	b.n	800d10c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x368>
 800d30e:	f1c1 0101 	rsb	r1, r1, #1
 800d312:	408d      	lsls	r5, r1
 800d314:	f305 051f 	ssat	r5, #32, r5
 800d318:	fb55 f516 	smmulr	r5, r5, r6
 800d31c:	fa04 f101 	lsl.w	r1, r4, r1
 800d320:	f301 011f 	ssat	r1, #32, r1
 800d324:	fb51 f616 	smmulr	r6, r1, r6
 800d328:	443d      	add	r5, r7
 800d32a:	f305 0507 	ssat	r5, #8, r5
 800d32e:	9a04      	ldr	r2, [sp, #16]
 800d330:	f802 5c02 	strb.w	r5, [r2, #-2]
 800d334:	9a02      	ldr	r2, [sp, #8]
 800d336:	f852 2c08 	ldr.w	r2, [r2, #-8]
 800d33a:	4416      	add	r6, r2
 800d33c:	f306 0607 	ssat	r6, #8, r6
 800d340:	9a03      	ldr	r2, [sp, #12]
 800d342:	f802 6c02 	strb.w	r6, [r2, #-2]
 800d346:	e6bd      	b.n	800d0c4 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x320>
 800d348:	1e97      	subs	r7, r2, #2
 800d34a:	1e56      	subs	r6, r2, #1
 800d34c:	2201      	movs	r2, #1
 800d34e:	40ba      	lsls	r2, r7
 800d350:	fb51 2105 	smmla	r1, r1, r5, r2
 800d354:	4131      	asrs	r1, r6
 800d356:	4421      	add	r1, r4
 800d358:	fb53 2305 	smmla	r3, r3, r5, r2
 800d35c:	f301 0207 	ssat	r2, #8, r1
 800d360:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800d362:	4133      	asrs	r3, r6
 800d364:	4423      	add	r3, r4
 800d366:	700a      	strb	r2, [r1, #0]
 800d368:	f303 0307 	ssat	r3, #8, r3
 800d36c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d36e:	9029      	str	r0, [sp, #164]	; 0xa4
 800d370:	7013      	strb	r3, [r2, #0]
 800d372:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d374:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d376:	ebc3 0042 	rsb	r0, r3, r2, lsl #1
 800d37a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800d37c:	4418      	add	r0, r3
 800d37e:	b01b      	add	sp, #108	; 0x6c
 800d380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d384:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d386:	9300      	str	r3, [sp, #0]
 800d388:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d38a:	4603      	mov	r3, r0
 800d38c:	462c      	mov	r4, r5
 800d38e:	f04f 0e00 	mov.w	lr, #0
 800d392:	e5eb      	b.n	800cf6c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x1c8>
 800d394:	f10b 0b08 	add.w	fp, fp, #8
 800d398:	e670      	b.n	800d07c <st_sssa8_ch_nn_mat_mult_kernel_opt+0x2d8>
 800d39a:	f1c2 0601 	rsb	r6, r2, #1
 800d39e:	fa01 f206 	lsl.w	r2, r1, r6
 800d3a2:	f302 021f 	ssat	r2, #32, r2
 800d3a6:	fb52 f215 	smmulr	r2, r2, r5
 800d3aa:	40b3      	lsls	r3, r6
 800d3ac:	f303 031f 	ssat	r3, #32, r3
 800d3b0:	fb53 f115 	smmulr	r1, r3, r5
 800d3b4:	1913      	adds	r3, r2, r4
 800d3b6:	f303 0307 	ssat	r3, #8, r3
 800d3ba:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 800d3bc:	7013      	strb	r3, [r2, #0]
 800d3be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	440b      	add	r3, r1
 800d3c4:	e7d0      	b.n	800d368 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x5c4>
 800d3c6:	460b      	mov	r3, r1
 800d3c8:	e6fe      	b.n	800d1c8 <st_sssa8_ch_nn_mat_mult_kernel_opt+0x424>
 800d3ca:	bf00      	nop

0800d3cc <st_sssa8_ch_nn_mat_mult_kernel_single_opt>:
 800d3cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d0:	b08f      	sub	sp, #60	; 0x3c
 800d3d2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 800d3d6:	930c      	str	r3, [sp, #48]	; 0x30
 800d3d8:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 800d3dc:	9403      	str	r4, [sp, #12]
 800d3de:	085b      	lsrs	r3, r3, #1
 800d3e0:	9105      	str	r1, [sp, #20]
 800d3e2:	920b      	str	r2, [sp, #44]	; 0x2c
 800d3e4:	f000 81d1 	beq.w	800d78a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x3be>
 800d3e8:	4616      	mov	r6, r2
 800d3ea:	3b01      	subs	r3, #1
 800d3ec:	b29d      	uxth	r5, r3
 800d3ee:	4633      	mov	r3, r6
 800d3f0:	3310      	adds	r3, #16
 800d3f2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d3f6:	9306      	str	r3, [sp, #24]
 800d3f8:	1ee3      	subs	r3, r4, #3
 800d3fa:	9307      	str	r3, [sp, #28]
 800d3fc:	f106 0308 	add.w	r3, r6, #8
 800d400:	9302      	str	r3, [sp, #8]
 800d402:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d404:	950d      	str	r5, [sp, #52]	; 0x34
 800d406:	3302      	adds	r3, #2
 800d408:	9301      	str	r3, [sp, #4]
 800d40a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d40c:	3304      	adds	r3, #4
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d412:	f1a4 0210 	sub.w	r2, r4, #16
 800d416:	f103 0a08 	add.w	sl, r3, #8
 800d41a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d41c:	0912      	lsrs	r2, r2, #4
 800d41e:	3201      	adds	r2, #1
 800d420:	f103 0b08 	add.w	fp, r3, #8
 800d424:	1f23      	subs	r3, r4, #4
 800d426:	eb01 1e42 	add.w	lr, r1, r2, lsl #5
 800d42a:	930a      	str	r3, [sp, #40]	; 0x28
 800d42c:	0191      	lsls	r1, r2, #6
 800d42e:	9b02      	ldr	r3, [sp, #8]
 800d430:	9108      	str	r1, [sp, #32]
 800d432:	0112      	lsls	r2, r2, #4
 800d434:	9209      	str	r2, [sp, #36]	; 0x24
 800d436:	9a03      	ldr	r2, [sp, #12]
 800d438:	f853 4c08 	ldr.w	r4, [r3, #-8]
 800d43c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800d440:	2a0f      	cmp	r2, #15
 800d442:	f340 817c 	ble.w	800d73e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x372>
 800d446:	f8dd c014 	ldr.w	ip, [sp, #20]
 800d44a:	4607      	mov	r7, r0
 800d44c:	f8dc 5000 	ldr.w	r5, [ip]
 800d450:	6839      	ldr	r1, [r7, #0]
 800d452:	fb21 4405 	smlad	r4, r1, r5, r4
 800d456:	687a      	ldr	r2, [r7, #4]
 800d458:	fb22 3305 	smlad	r3, r2, r5, r3
 800d45c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800d460:	68b9      	ldr	r1, [r7, #8]
 800d462:	fb21 4105 	smlad	r1, r1, r5, r4
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	fb22 3205 	smlad	r2, r2, r5, r3
 800d46c:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800d470:	693c      	ldr	r4, [r7, #16]
 800d472:	fb24 1105 	smlad	r1, r4, r5, r1
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	fb23 2205 	smlad	r2, r3, r5, r2
 800d47c:	f8dc 500c 	ldr.w	r5, [ip, #12]
 800d480:	69bc      	ldr	r4, [r7, #24]
 800d482:	fb24 1405 	smlad	r4, r4, r5, r1
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	fb23 2305 	smlad	r3, r3, r5, r2
 800d48c:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800d490:	6a39      	ldr	r1, [r7, #32]
 800d492:	fb21 4405 	smlad	r4, r1, r5, r4
 800d496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d498:	fb22 3305 	smlad	r3, r2, r5, r3
 800d49c:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800d4a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4a2:	fb21 4105 	smlad	r1, r1, r5, r4
 800d4a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4a8:	fb22 3205 	smlad	r2, r2, r5, r3
 800d4ac:	f8dc 5018 	ldr.w	r5, [ip, #24]
 800d4b0:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800d4b2:	fb24 1105 	smlad	r1, r4, r5, r1
 800d4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b8:	fb23 2205 	smlad	r2, r3, r5, r2
 800d4bc:	f8dc 501c 	ldr.w	r5, [ip, #28]
 800d4c0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800d4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c4:	f10c 0c20 	add.w	ip, ip, #32
 800d4c8:	3740      	adds	r7, #64	; 0x40
 800d4ca:	fb24 1405 	smlad	r4, r4, r5, r1
 800d4ce:	fb23 2305 	smlad	r3, r3, r5, r2
 800d4d2:	45f4      	cmp	ip, lr
 800d4d4:	d1ba      	bne.n	800d44c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x80>
 800d4d6:	9a08      	ldr	r2, [sp, #32]
 800d4d8:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 800d4dc:	4410      	add	r0, r2
 800d4de:	4677      	mov	r7, lr
 800d4e0:	9a07      	ldr	r2, [sp, #28]
 800d4e2:	4594      	cmp	ip, r2
 800d4e4:	da23      	bge.n	800d52e <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x162>
 800d4e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d4e8:	eba2 090c 	sub.w	r9, r2, ip
 800d4ec:	ea4f 0999 	mov.w	r9, r9, lsr #2
 800d4f0:	f109 0201 	add.w	r2, r9, #1
 800d4f4:	9204      	str	r2, [sp, #16]
 800d4f6:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800d4fa:	4606      	mov	r6, r0
 800d4fc:	683a      	ldr	r2, [r7, #0]
 800d4fe:	6831      	ldr	r1, [r6, #0]
 800d500:	fb21 4402 	smlad	r4, r1, r2, r4
 800d504:	6871      	ldr	r1, [r6, #4]
 800d506:	fb21 3202 	smlad	r2, r1, r2, r3
 800d50a:	6879      	ldr	r1, [r7, #4]
 800d50c:	68b5      	ldr	r5, [r6, #8]
 800d50e:	68f3      	ldr	r3, [r6, #12]
 800d510:	3708      	adds	r7, #8
 800d512:	3610      	adds	r6, #16
 800d514:	fb25 4401 	smlad	r4, r5, r1, r4
 800d518:	fb23 2301 	smlad	r3, r3, r1, r2
 800d51c:	4547      	cmp	r7, r8
 800d51e:	d1ed      	bne.n	800d4fc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x130>
 800d520:	9a04      	ldr	r2, [sp, #16]
 800d522:	f10c 0c04 	add.w	ip, ip, #4
 800d526:	eb0c 0c89 	add.w	ip, ip, r9, lsl #2
 800d52a:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 800d52e:	9e03      	ldr	r6, [sp, #12]
 800d530:	4566      	cmp	r6, ip
 800d532:	dd23      	ble.n	800d57c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1b0>
 800d534:	f9b7 1000 	ldrsh.w	r1, [r7]
 800d538:	8802      	ldrh	r2, [r0, #0]
 800d53a:	8845      	ldrh	r5, [r0, #2]
 800d53c:	fb12 4401 	smlabb	r4, r2, r1, r4
 800d540:	f10c 0201 	add.w	r2, ip, #1
 800d544:	4296      	cmp	r6, r2
 800d546:	fb11 3305 	smlabb	r3, r1, r5, r3
 800d54a:	f340 80d4 	ble.w	800d6f6 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32a>
 800d54e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800d552:	8881      	ldrh	r1, [r0, #4]
 800d554:	88c5      	ldrh	r5, [r0, #6]
 800d556:	fb11 4402 	smlabb	r4, r1, r2, r4
 800d55a:	fb12 3305 	smlabb	r3, r2, r5, r3
 800d55e:	9a03      	ldr	r2, [sp, #12]
 800d560:	f10c 0c02 	add.w	ip, ip, #2
 800d564:	4562      	cmp	r2, ip
 800d566:	f340 80ee 	ble.w	800d746 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x37a>
 800d56a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800d56e:	8905      	ldrh	r5, [r0, #8]
 800d570:	8941      	ldrh	r1, [r0, #10]
 800d572:	fb15 4402 	smlabb	r4, r5, r2, r4
 800d576:	fb12 3301 	smlabb	r3, r2, r1, r3
 800d57a:	300c      	adds	r0, #12
 800d57c:	9a00      	ldr	r2, [sp, #0]
 800d57e:	f85a 6c08 	ldr.w	r6, [sl, #-8]
 800d582:	f932 2c04 	ldrsh.w	r2, [r2, #-4]
 800d586:	f85b 1c08 	ldr.w	r1, [fp, #-8]
 800d58a:	2a15      	cmp	r2, #21
 800d58c:	f340 80a6 	ble.w	800d6dc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x310>
 800d590:	1e95      	subs	r5, r2, #2
 800d592:	2701      	movs	r7, #1
 800d594:	3a01      	subs	r2, #1
 800d596:	fa07 f505 	lsl.w	r5, r7, r5
 800d59a:	fb54 5406 	smmla	r4, r4, r6, r5
 800d59e:	4114      	asrs	r4, r2
 800d5a0:	440c      	add	r4, r1
 800d5a2:	f304 0407 	ssat	r4, #8, r4
 800d5a6:	9a01      	ldr	r2, [sp, #4]
 800d5a8:	f802 4c02 	strb.w	r4, [r2, #-2]
 800d5ac:	9a00      	ldr	r2, [sp, #0]
 800d5ae:	f932 6c02 	ldrsh.w	r6, [r2, #-2]
 800d5b2:	2e15      	cmp	r6, #21
 800d5b4:	f340 8082 	ble.w	800d6bc <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2f0>
 800d5b8:	1eb2      	subs	r2, r6, #2
 800d5ba:	f85b 4c04 	ldr.w	r4, [fp, #-4]
 800d5be:	f85a 1c04 	ldr.w	r1, [sl, #-4]
 800d5c2:	3e01      	subs	r6, #1
 800d5c4:	2501      	movs	r5, #1
 800d5c6:	fa05 f202 	lsl.w	r2, r5, r2
 800d5ca:	fb53 2201 	smmla	r2, r3, r1, r2
 800d5ce:	4132      	asrs	r2, r6
 800d5d0:	4422      	add	r2, r4
 800d5d2:	f302 0207 	ssat	r2, #8, r2
 800d5d6:	9b01      	ldr	r3, [sp, #4]
 800d5d8:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d5dc:	461a      	mov	r2, r3
 800d5de:	3202      	adds	r2, #2
 800d5e0:	9201      	str	r2, [sp, #4]
 800d5e2:	9a00      	ldr	r2, [sp, #0]
 800d5e4:	9b02      	ldr	r3, [sp, #8]
 800d5e6:	3204      	adds	r2, #4
 800d5e8:	9200      	str	r2, [sp, #0]
 800d5ea:	9a06      	ldr	r2, [sp, #24]
 800d5ec:	3308      	adds	r3, #8
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	9302      	str	r3, [sp, #8]
 800d5f2:	f10a 0a08 	add.w	sl, sl, #8
 800d5f6:	f10b 0b08 	add.w	fp, fp, #8
 800d5fa:	f47f af1c 	bne.w	800d436 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x6a>
 800d5fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d600:	991d      	ldr	r1, [sp, #116]	; 0x74
 800d602:	3301      	adds	r3, #1
 800d604:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 800d608:	991a      	ldr	r1, [sp, #104]	; 0x68
 800d60a:	00da      	lsls	r2, r3, #3
 800d60c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d610:	931a      	str	r3, [sp, #104]	; 0x68
 800d612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d614:	4413      	add	r3, r2
 800d616:	930b      	str	r3, [sp, #44]	; 0x2c
 800d618:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d61a:	4413      	add	r3, r2
 800d61c:	931b      	str	r3, [sp, #108]	; 0x6c
 800d61e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d620:	4413      	add	r3, r2
 800d622:	931c      	str	r3, [sp, #112]	; 0x70
 800d624:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d626:	07db      	lsls	r3, r3, #31
 800d628:	d544      	bpl.n	800d6b4 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2e8>
 800d62a:	9a03      	ldr	r2, [sp, #12]
 800d62c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d62e:	0892      	lsrs	r2, r2, #2
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	d015      	beq.n	800d660 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x294>
 800d634:	1e56      	subs	r6, r2, #1
 800d636:	b2b6      	uxth	r6, r6
 800d638:	3601      	adds	r6, #1
 800d63a:	00f6      	lsls	r6, r6, #3
 800d63c:	9905      	ldr	r1, [sp, #20]
 800d63e:	1987      	adds	r7, r0, r6
 800d640:	6805      	ldr	r5, [r0, #0]
 800d642:	6842      	ldr	r2, [r0, #4]
 800d644:	f8d1 c000 	ldr.w	ip, [r1]
 800d648:	3008      	adds	r0, #8
 800d64a:	fb25 330c 	smlad	r3, r5, ip, r3
 800d64e:	684d      	ldr	r5, [r1, #4]
 800d650:	3108      	adds	r1, #8
 800d652:	fb22 3305 	smlad	r3, r2, r5, r3
 800d656:	42b8      	cmp	r0, r7
 800d658:	d1f2      	bne.n	800d640 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x274>
 800d65a:	9a05      	ldr	r2, [sp, #20]
 800d65c:	4432      	add	r2, r6
 800d65e:	9205      	str	r2, [sp, #20]
 800d660:	9a03      	ldr	r2, [sp, #12]
 800d662:	f012 0203 	ands.w	r2, r2, #3
 800d666:	d010      	beq.n	800d68a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2be>
 800d668:	9e05      	ldr	r6, [sp, #20]
 800d66a:	8801      	ldrh	r1, [r0, #0]
 800d66c:	8835      	ldrh	r5, [r6, #0]
 800d66e:	2a01      	cmp	r2, #1
 800d670:	fb15 3301 	smlabb	r3, r5, r1, r3
 800d674:	d009      	beq.n	800d68a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2be>
 800d676:	8875      	ldrh	r5, [r6, #2]
 800d678:	8841      	ldrh	r1, [r0, #2]
 800d67a:	2a02      	cmp	r2, #2
 800d67c:	fb15 3301 	smlabb	r3, r5, r1, r3
 800d680:	d003      	beq.n	800d68a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x2be>
 800d682:	8881      	ldrh	r1, [r0, #4]
 800d684:	88b2      	ldrh	r2, [r6, #4]
 800d686:	fb11 3302 	smlabb	r3, r1, r2, r3
 800d68a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d68c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800d68e:	f9b2 2000 	ldrsh.w	r2, [r2]
 800d692:	680e      	ldr	r6, [r1, #0]
 800d694:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d696:	2a15      	cmp	r2, #21
 800d698:	680d      	ldr	r5, [r1, #0]
 800d69a:	f104 0101 	add.w	r1, r4, #1
 800d69e:	dc54      	bgt.n	800d74a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x37e>
 800d6a0:	2a00      	cmp	r2, #0
 800d6a2:	dd62      	ble.n	800d76a <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x39e>
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	fb53 5306 	smmla	r3, r3, r6, r5
 800d6aa:	4113      	asrs	r3, r2
 800d6ac:	f303 0307 	ssat	r3, #8, r3
 800d6b0:	7023      	strb	r3, [r4, #0]
 800d6b2:	460c      	mov	r4, r1
 800d6b4:	4620      	mov	r0, r4
 800d6b6:	b00f      	add	sp, #60	; 0x3c
 800d6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6bc:	2e00      	cmp	r6, #0
 800d6be:	dd1c      	ble.n	800d6fa <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x32e>
 800d6c0:	f85a 4c04 	ldr.w	r4, [sl, #-4]
 800d6c4:	f85b 5c04 	ldr.w	r5, [fp, #-4]
 800d6c8:	005b      	lsls	r3, r3, #1
 800d6ca:	fb53 5304 	smmla	r3, r3, r4, r5
 800d6ce:	4133      	asrs	r3, r6
 800d6d0:	f303 0307 	ssat	r3, #8, r3
 800d6d4:	9a01      	ldr	r2, [sp, #4]
 800d6d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d6da:	e780      	b.n	800d5de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x212>
 800d6dc:	2a00      	cmp	r2, #0
 800d6de:	dd1f      	ble.n	800d720 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x354>
 800d6e0:	0064      	lsls	r4, r4, #1
 800d6e2:	fb54 1406 	smmla	r4, r4, r6, r1
 800d6e6:	fa44 f202 	asr.w	r2, r4, r2
 800d6ea:	f302 0207 	ssat	r2, #8, r2
 800d6ee:	9901      	ldr	r1, [sp, #4]
 800d6f0:	f801 2c02 	strb.w	r2, [r1, #-2]
 800d6f4:	e75a      	b.n	800d5ac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e0>
 800d6f6:	3004      	adds	r0, #4
 800d6f8:	e740      	b.n	800d57c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1b0>
 800d6fa:	f1c6 0601 	rsb	r6, r6, #1
 800d6fe:	40b3      	lsls	r3, r6
 800d700:	f303 031f 	ssat	r3, #32, r3
 800d704:	f85a 2c04 	ldr.w	r2, [sl, #-4]
 800d708:	fb53 f212 	smmulr	r2, r3, r2
 800d70c:	f85b 3c04 	ldr.w	r3, [fp, #-4]
 800d710:	441a      	add	r2, r3
 800d712:	f302 0207 	ssat	r2, #8, r2
 800d716:	9b01      	ldr	r3, [sp, #4]
 800d718:	f803 2c01 	strb.w	r2, [r3, #-1]
 800d71c:	461a      	mov	r2, r3
 800d71e:	e75e      	b.n	800d5de <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x212>
 800d720:	f1c2 0201 	rsb	r2, r2, #1
 800d724:	fa04 f202 	lsl.w	r2, r4, r2
 800d728:	f302 021f 	ssat	r2, #32, r2
 800d72c:	fb52 f216 	smmulr	r2, r2, r6
 800d730:	440a      	add	r2, r1
 800d732:	f302 0207 	ssat	r2, #8, r2
 800d736:	9901      	ldr	r1, [sp, #4]
 800d738:	f801 2c02 	strb.w	r2, [r1, #-2]
 800d73c:	e736      	b.n	800d5ac <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1e0>
 800d73e:	9f05      	ldr	r7, [sp, #20]
 800d740:	f04f 0c00 	mov.w	ip, #0
 800d744:	e6cc      	b.n	800d4e0 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x114>
 800d746:	3008      	adds	r0, #8
 800d748:	e718      	b.n	800d57c <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x1b0>
 800d74a:	1e97      	subs	r7, r2, #2
 800d74c:	2001      	movs	r0, #1
 800d74e:	3a01      	subs	r2, #1
 800d750:	40b8      	lsls	r0, r7
 800d752:	fb53 0306 	smmla	r3, r3, r6, r0
 800d756:	4113      	asrs	r3, r2
 800d758:	442b      	add	r3, r5
 800d75a:	f303 0307 	ssat	r3, #8, r3
 800d75e:	7023      	strb	r3, [r4, #0]
 800d760:	460c      	mov	r4, r1
 800d762:	4620      	mov	r0, r4
 800d764:	b00f      	add	sp, #60	; 0x3c
 800d766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d76a:	f1c2 0201 	rsb	r2, r2, #1
 800d76e:	4093      	lsls	r3, r2
 800d770:	f303 031f 	ssat	r3, #32, r3
 800d774:	fb53 f316 	smmulr	r3, r3, r6
 800d778:	442b      	add	r3, r5
 800d77a:	f303 0307 	ssat	r3, #8, r3
 800d77e:	7023      	strb	r3, [r4, #0]
 800d780:	460c      	mov	r4, r1
 800d782:	4620      	mov	r0, r4
 800d784:	b00f      	add	sp, #60	; 0x3c
 800d786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d78a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 800d78c:	e74a      	b.n	800d624 <st_sssa8_ch_nn_mat_mult_kernel_single_opt+0x258>
 800d78e:	bf00      	nop

0800d790 <st_int8_maxpool>:
 800d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	b097      	sub	sp, #92	; 0x5c
 800d796:	e9cd 1003 	strd	r1, r0, [sp, #12]
 800d79a:	f8bd 0094 	ldrh.w	r0, [sp, #148]	; 0x94
 800d79e:	900c      	str	r0, [sp, #48]	; 0x30
 800d7a0:	f8bd 0098 	ldrh.w	r0, [sp, #152]	; 0x98
 800d7a4:	9015      	str	r0, [sp, #84]	; 0x54
 800d7a6:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 800d7aa:	900a      	str	r0, [sp, #40]	; 0x28
 800d7ac:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	; 0xa0
 800d7b0:	900e      	str	r0, [sp, #56]	; 0x38
 800d7b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d7b6:	f99d 00a4 	ldrsb.w	r0, [sp, #164]	; 0xa4
 800d7ba:	9313      	str	r3, [sp, #76]	; 0x4c
 800d7bc:	9001      	str	r0, [sp, #4]
 800d7be:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 800d7c2:	f99d 00a8 	ldrsb.w	r0, [sp, #168]	; 0xa8
 800d7c6:	9314      	str	r3, [sp, #80]	; 0x50
 800d7c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7cc:	4692      	mov	sl, r2
 800d7ce:	9007      	str	r0, [sp, #28]
 800d7d0:	eec0 6a20 	vdiv.f32	s13, s0, s1
 800d7d4:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 800d7d8:	f8bd 1084 	ldrh.w	r1, [sp, #132]	; 0x84
 800d7dc:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 800d7e0:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 800d7e4:	980e      	ldr	r0, [sp, #56]	; 0x38
 800d7e6:	f2c0 80c8 	blt.w	800d97a <st_int8_maxpool+0x1ea>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	f000 80b5 	beq.w	800d95a <st_int8_maxpool+0x1ca>
 800d7f0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	f000 80b1 	beq.w	800d95a <st_int8_maxpool+0x1ca>
 800d7f8:	f1bb 0f00 	cmp.w	fp, #0
 800d7fc:	f000 80ad 	beq.w	800d95a <st_int8_maxpool+0x1ca>
 800d800:	4252      	negs	r2, r2
 800d802:	eddd 7a07 	vldr	s15, [sp, #28]
 800d806:	eddf 5ab8 	vldr	s11, [pc, #736]	; 800dae8 <st_int8_maxpool+0x358>
 800d80a:	b292      	uxth	r2, r2
 800d80c:	2000      	movs	r0, #0
 800d80e:	920f      	str	r2, [sp, #60]	; 0x3c
 800d810:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800d814:	1aca      	subs	r2, r1, r3
 800d816:	425b      	negs	r3, r3
 800d818:	9211      	str	r2, [sp, #68]	; 0x44
 800d81a:	9012      	str	r0, [sp, #72]	; 0x48
 800d81c:	9310      	str	r3, [sp, #64]	; 0x40
 800d81e:	4602      	mov	r2, r0
 800d820:	46d9      	mov	r9, fp
 800d822:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d824:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d826:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d828:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800d82c:	fb02 f204 	mul.w	r2, r2, r4
 800d830:	920d      	str	r2, [sp, #52]	; 0x34
 800d832:	b20a      	sxth	r2, r1
 800d834:	9206      	str	r2, [sp, #24]
 800d836:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800d83a:	9208      	str	r2, [sp, #32]
 800d83c:	440b      	add	r3, r1
 800d83e:	2000      	movs	r0, #0
 800d840:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 800d844:	900b      	str	r0, [sp, #44]	; 0x2c
 800d846:	fa0f fb83 	sxth.w	fp, r3
 800d84a:	9209      	str	r2, [sp, #36]	; 0x24
 800d84c:	4603      	mov	r3, r0
 800d84e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d850:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 800d854:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 800d858:	4413      	add	r3, r2
 800d85a:	f04f 0c00 	mov.w	ip, #0
 800d85e:	fb09 f303 	mul.w	r3, r9, r3
 800d862:	9305      	str	r3, [sp, #20]
 800d864:	ea04 76e4 	and.w	r6, r4, r4, asr #31
 800d868:	f8cd c000 	str.w	ip, [sp]
 800d86c:	9a06      	ldr	r2, [sp, #24]
 800d86e:	455a      	cmp	r2, fp
 800d870:	f06f 0e7f 	mvn.w	lr, #127	; 0x7f
 800d874:	da20      	bge.n	800d8b8 <st_int8_maxpool+0x128>
 800d876:	9b04      	ldr	r3, [sp, #16]
 800d878:	9900      	ldr	r1, [sp, #0]
 800d87a:	440b      	add	r3, r1
 800d87c:	9302      	str	r3, [sp, #8]
 800d87e:	42a7      	cmp	r7, r4
 800d880:	da16      	bge.n	800d8b0 <st_int8_maxpool+0x120>
 800d882:	2a00      	cmp	r2, #0
 800d884:	fb02 f50a 	mul.w	r5, r2, sl
 800d888:	db12      	blt.n	800d8b0 <st_int8_maxpool+0x120>
 800d88a:	4542      	cmp	r2, r8
 800d88c:	da10      	bge.n	800d8b0 <st_int8_maxpool+0x120>
 800d88e:	2f00      	cmp	r7, #0
 800d890:	463b      	mov	r3, r7
 800d892:	db65      	blt.n	800d960 <st_int8_maxpool+0x1d0>
 800d894:	18e9      	adds	r1, r5, r3
 800d896:	1c58      	adds	r0, r3, #1
 800d898:	459a      	cmp	sl, r3
 800d89a:	fb09 f101 	mul.w	r1, r9, r1
 800d89e:	b203      	sxth	r3, r0
 800d8a0:	dd04      	ble.n	800d8ac <st_int8_maxpool+0x11c>
 800d8a2:	9802      	ldr	r0, [sp, #8]
 800d8a4:	5641      	ldrsb	r1, [r0, r1]
 800d8a6:	458e      	cmp	lr, r1
 800d8a8:	bfb8      	it	lt
 800d8aa:	468e      	movlt	lr, r1
 800d8ac:	429c      	cmp	r4, r3
 800d8ae:	dcf1      	bgt.n	800d894 <st_int8_maxpool+0x104>
 800d8b0:	3201      	adds	r2, #1
 800d8b2:	b212      	sxth	r2, r2
 800d8b4:	455a      	cmp	r2, fp
 800d8b6:	dbe2      	blt.n	800d87e <st_int8_maxpool+0xee>
 800d8b8:	9b00      	ldr	r3, [sp, #0]
 800d8ba:	9a05      	ldr	r2, [sp, #20]
 800d8bc:	eeb4 0a60 	vcmp.f32	s0, s1
 800d8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c4:	4413      	add	r3, r2
 800d8c6:	d103      	bne.n	800d8d0 <st_int8_maxpool+0x140>
 800d8c8:	9a01      	ldr	r2, [sp, #4]
 800d8ca:	9907      	ldr	r1, [sp, #28]
 800d8cc:	428a      	cmp	r2, r1
 800d8ce:	d050      	beq.n	800d972 <st_int8_maxpool+0x1e2>
 800d8d0:	9a01      	ldr	r2, [sp, #4]
 800d8d2:	ebae 0e02 	sub.w	lr, lr, r2
 800d8d6:	ee07 ea90 	vmov	s15, lr
 800d8da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8de:	eeb0 5a46 	vmov.f32	s10, s12
 800d8e2:	eea7 5aa6 	vfma.f32	s10, s15, s13
 800d8e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d8ea:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800d8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f2:	bfb8      	it	lt
 800d8f4:	eeb0 7a65 	vmovlt.f32	s14, s11
 800d8f8:	ee77 7a05 	vadd.f32	s15, s14, s10
 800d8fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d900:	ee17 2a90 	vmov	r2, s15
 800d904:	f302 0207 	ssat	r2, #8, r2
 800d908:	9903      	ldr	r1, [sp, #12]
 800d90a:	54ca      	strb	r2, [r1, r3]
 800d90c:	f10c 0c01 	add.w	ip, ip, #1
 800d910:	fa0f fc8c 	sxth.w	ip, ip
 800d914:	45cc      	cmp	ip, r9
 800d916:	f8cd c000 	str.w	ip, [sp]
 800d91a:	dba7      	blt.n	800d86c <st_int8_maxpool+0xdc>
 800d91c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d91e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d920:	3301      	adds	r3, #1
 800d922:	b219      	sxth	r1, r3
 800d924:	9b08      	ldr	r3, [sp, #32]
 800d926:	910b      	str	r1, [sp, #44]	; 0x2c
 800d928:	461a      	mov	r2, r3
 800d92a:	4402      	add	r2, r0
 800d92c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d92e:	b292      	uxth	r2, r2
 800d930:	9208      	str	r2, [sp, #32]
 800d932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d934:	4403      	add	r3, r0
 800d936:	b29b      	uxth	r3, r3
 800d938:	4291      	cmp	r1, r2
 800d93a:	9309      	str	r3, [sp, #36]	; 0x24
 800d93c:	460b      	mov	r3, r1
 800d93e:	db86      	blt.n	800d84e <st_int8_maxpool+0xbe>
 800d940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d942:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d944:	3301      	adds	r3, #1
 800d946:	b21a      	sxth	r2, r3
 800d948:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d94a:	9212      	str	r2, [sp, #72]	; 0x48
 800d94c:	440b      	add	r3, r1
 800d94e:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d950:	b29b      	uxth	r3, r3
 800d952:	428a      	cmp	r2, r1
 800d954:	930f      	str	r3, [sp, #60]	; 0x3c
 800d956:	f6ff af64 	blt.w	800d822 <st_int8_maxpool+0x92>
 800d95a:	b017      	add	sp, #92	; 0x5c
 800d95c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d960:	3301      	adds	r3, #1
 800d962:	b21b      	sxth	r3, r3
 800d964:	429e      	cmp	r6, r3
 800d966:	dda1      	ble.n	800d8ac <st_int8_maxpool+0x11c>
 800d968:	3301      	adds	r3, #1
 800d96a:	b21b      	sxth	r3, r3
 800d96c:	429e      	cmp	r6, r3
 800d96e:	dcf7      	bgt.n	800d960 <st_int8_maxpool+0x1d0>
 800d970:	e79c      	b.n	800d8ac <st_int8_maxpool+0x11c>
 800d972:	9a03      	ldr	r2, [sp, #12]
 800d974:	f802 e003 	strb.w	lr, [r2, r3]
 800d978:	e7c8      	b.n	800d90c <st_int8_maxpool+0x17c>
 800d97a:	2800      	cmp	r0, #0
 800d97c:	d0ed      	beq.n	800d95a <st_int8_maxpool+0x1ca>
 800d97e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800d980:	2800      	cmp	r0, #0
 800d982:	d0ea      	beq.n	800d95a <st_int8_maxpool+0x1ca>
 800d984:	f1bb 0f00 	cmp.w	fp, #0
 800d988:	d0e7      	beq.n	800d95a <st_int8_maxpool+0x1ca>
 800d98a:	4252      	negs	r2, r2
 800d98c:	eddd 7a07 	vldr	s15, [sp, #28]
 800d990:	eddf 5a55 	vldr	s11, [pc, #340]	; 800dae8 <st_int8_maxpool+0x358>
 800d994:	b292      	uxth	r2, r2
 800d996:	2000      	movs	r0, #0
 800d998:	920d      	str	r2, [sp, #52]	; 0x34
 800d99a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800d99e:	1aca      	subs	r2, r1, r3
 800d9a0:	425b      	negs	r3, r3
 800d9a2:	9211      	str	r2, [sp, #68]	; 0x44
 800d9a4:	9012      	str	r0, [sp, #72]	; 0x48
 800d9a6:	9310      	str	r3, [sp, #64]	; 0x40
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	46d9      	mov	r9, fp
 800d9ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d9ae:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d9b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d9b2:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 800d9b6:	fb02 f204 	mul.w	r2, r2, r4
 800d9ba:	920f      	str	r2, [sp, #60]	; 0x3c
 800d9bc:	b20a      	sxth	r2, r1
 800d9be:	9206      	str	r2, [sp, #24]
 800d9c0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800d9c4:	9209      	str	r2, [sp, #36]	; 0x24
 800d9c6:	18cb      	adds	r3, r1, r3
 800d9c8:	2000      	movs	r0, #0
 800d9ca:	f8bd 2044 	ldrh.w	r2, [sp, #68]	; 0x44
 800d9ce:	900b      	str	r0, [sp, #44]	; 0x2c
 800d9d0:	fa0f fb83 	sxth.w	fp, r3
 800d9d4:	9208      	str	r2, [sp, #32]
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d9da:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 800d9de:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	; 0x24
 800d9e2:	4413      	add	r3, r2
 800d9e4:	f04f 0c00 	mov.w	ip, #0
 800d9e8:	fb09 f303 	mul.w	r3, r9, r3
 800d9ec:	9305      	str	r3, [sp, #20]
 800d9ee:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 800d9f2:	f8cd c000 	str.w	ip, [sp]
 800d9f6:	9a06      	ldr	r2, [sp, #24]
 800d9f8:	455a      	cmp	r2, fp
 800d9fa:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
 800d9fe:	da20      	bge.n	800da42 <st_int8_maxpool+0x2b2>
 800da00:	9b04      	ldr	r3, [sp, #16]
 800da02:	9900      	ldr	r1, [sp, #0]
 800da04:	440b      	add	r3, r1
 800da06:	9302      	str	r3, [sp, #8]
 800da08:	42a6      	cmp	r6, r4
 800da0a:	da16      	bge.n	800da3a <st_int8_maxpool+0x2aa>
 800da0c:	2a00      	cmp	r2, #0
 800da0e:	fb02 f50a 	mul.w	r5, r2, sl
 800da12:	db12      	blt.n	800da3a <st_int8_maxpool+0x2aa>
 800da14:	4542      	cmp	r2, r8
 800da16:	da10      	bge.n	800da3a <st_int8_maxpool+0x2aa>
 800da18:	2e00      	cmp	r6, #0
 800da1a:	4633      	mov	r3, r6
 800da1c:	db66      	blt.n	800daec <st_int8_maxpool+0x35c>
 800da1e:	18e9      	adds	r1, r5, r3
 800da20:	1c58      	adds	r0, r3, #1
 800da22:	459a      	cmp	sl, r3
 800da24:	fb09 f101 	mul.w	r1, r9, r1
 800da28:	b203      	sxth	r3, r0
 800da2a:	dd04      	ble.n	800da36 <st_int8_maxpool+0x2a6>
 800da2c:	9802      	ldr	r0, [sp, #8]
 800da2e:	5641      	ldrsb	r1, [r0, r1]
 800da30:	458e      	cmp	lr, r1
 800da32:	bfa8      	it	ge
 800da34:	468e      	movge	lr, r1
 800da36:	429c      	cmp	r4, r3
 800da38:	dcf1      	bgt.n	800da1e <st_int8_maxpool+0x28e>
 800da3a:	3201      	adds	r2, #1
 800da3c:	b212      	sxth	r2, r2
 800da3e:	455a      	cmp	r2, fp
 800da40:	dbe2      	blt.n	800da08 <st_int8_maxpool+0x278>
 800da42:	9b00      	ldr	r3, [sp, #0]
 800da44:	9a05      	ldr	r2, [sp, #20]
 800da46:	eeb4 0a60 	vcmp.f32	s0, s1
 800da4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4e:	4413      	add	r3, r2
 800da50:	d103      	bne.n	800da5a <st_int8_maxpool+0x2ca>
 800da52:	9a01      	ldr	r2, [sp, #4]
 800da54:	9907      	ldr	r1, [sp, #28]
 800da56:	428a      	cmp	r2, r1
 800da58:	d053      	beq.n	800db02 <st_int8_maxpool+0x372>
 800da5a:	9a01      	ldr	r2, [sp, #4]
 800da5c:	ebae 0e02 	sub.w	lr, lr, r2
 800da60:	ee07 ea90 	vmov	s15, lr
 800da64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da68:	eeb0 5a46 	vmov.f32	s10, s12
 800da6c:	eea7 5aa6 	vfma.f32	s10, s15, s13
 800da70:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800da74:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800da78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da7c:	bfb8      	it	lt
 800da7e:	eeb0 7a65 	vmovlt.f32	s14, s11
 800da82:	ee77 7a05 	vadd.f32	s15, s14, s10
 800da86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800da8a:	ee17 2a90 	vmov	r2, s15
 800da8e:	f302 0207 	ssat	r2, #8, r2
 800da92:	9903      	ldr	r1, [sp, #12]
 800da94:	54ca      	strb	r2, [r1, r3]
 800da96:	f10c 0c01 	add.w	ip, ip, #1
 800da9a:	fa0f fc8c 	sxth.w	ip, ip
 800da9e:	45cc      	cmp	ip, r9
 800daa0:	f8cd c000 	str.w	ip, [sp]
 800daa4:	dba7      	blt.n	800d9f6 <st_int8_maxpool+0x266>
 800daa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daa8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800daaa:	3301      	adds	r3, #1
 800daac:	b219      	sxth	r1, r3
 800daae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dab0:	910b      	str	r1, [sp, #44]	; 0x2c
 800dab2:	461a      	mov	r2, r3
 800dab4:	4402      	add	r2, r0
 800dab6:	9b08      	ldr	r3, [sp, #32]
 800dab8:	b292      	uxth	r2, r2
 800daba:	9209      	str	r2, [sp, #36]	; 0x24
 800dabc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dabe:	4403      	add	r3, r0
 800dac0:	b29b      	uxth	r3, r3
 800dac2:	4291      	cmp	r1, r2
 800dac4:	9308      	str	r3, [sp, #32]
 800dac6:	460b      	mov	r3, r1
 800dac8:	db86      	blt.n	800d9d8 <st_int8_maxpool+0x248>
 800daca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dacc:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dace:	3301      	adds	r3, #1
 800dad0:	b21a      	sxth	r2, r3
 800dad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dad4:	9212      	str	r2, [sp, #72]	; 0x48
 800dad6:	440b      	add	r3, r1
 800dad8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800dada:	b29b      	uxth	r3, r3
 800dadc:	428a      	cmp	r2, r1
 800dade:	930d      	str	r3, [sp, #52]	; 0x34
 800dae0:	f6ff af64 	blt.w	800d9ac <st_int8_maxpool+0x21c>
 800dae4:	e739      	b.n	800d95a <st_int8_maxpool+0x1ca>
 800dae6:	bf00      	nop
 800dae8:	befffffc 	.word	0xbefffffc
 800daec:	3301      	adds	r3, #1
 800daee:	b21b      	sxth	r3, r3
 800daf0:	42bb      	cmp	r3, r7
 800daf2:	dbfb      	blt.n	800daec <st_int8_maxpool+0x35c>
 800daf4:	42a3      	cmp	r3, r4
 800daf6:	db92      	blt.n	800da1e <st_int8_maxpool+0x28e>
 800daf8:	3201      	adds	r2, #1
 800dafa:	b212      	sxth	r2, r2
 800dafc:	455a      	cmp	r2, fp
 800dafe:	db83      	blt.n	800da08 <st_int8_maxpool+0x278>
 800db00:	e79f      	b.n	800da42 <st_int8_maxpool+0x2b2>
 800db02:	9a03      	ldr	r2, [sp, #12]
 800db04:	f802 e003 	strb.w	lr, [r2, r3]
 800db08:	e7c5      	b.n	800da96 <st_int8_maxpool+0x306>
 800db0a:	bf00      	nop

0800db0c <ai_array_to_buffer_fmt>:
 800db0c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800db10:	2b02      	cmp	r3, #2
 800db12:	d029      	beq.n	800db68 <ai_array_to_buffer_fmt+0x5c>
 800db14:	4a22      	ldr	r2, [pc, #136]	; (800dba0 <ai_array_to_buffer_fmt+0x94>)
 800db16:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d010      	beq.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db1e:	dd13      	ble.n	800db48 <ai_array_to_buffer_fmt+0x3c>
 800db20:	4a20      	ldr	r2, [pc, #128]	; (800dba4 <ai_array_to_buffer_fmt+0x98>)
 800db22:	4293      	cmp	r3, r2
 800db24:	d00c      	beq.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db26:	dc27      	bgt.n	800db78 <ai_array_to_buffer_fmt+0x6c>
 800db28:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d007      	beq.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db30:	3207      	adds	r2, #7
 800db32:	4293      	cmp	r3, r2
 800db34:	d004      	beq.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db36:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d000      	beq.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db3e:	2340      	movs	r3, #64	; 0x40
 800db40:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800db44:	4318      	orrs	r0, r3
 800db46:	4770      	bx	lr
 800db48:	4a17      	ldr	r2, [pc, #92]	; (800dba8 <ai_array_to_buffer_fmt+0x9c>)
 800db4a:	4293      	cmp	r3, r2
 800db4c:	d0f8      	beq.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db4e:	dd1e      	ble.n	800db8e <ai_array_to_buffer_fmt+0x82>
 800db50:	4a16      	ldr	r2, [pc, #88]	; (800dbac <ai_array_to_buffer_fmt+0xa0>)
 800db52:	4293      	cmp	r3, r2
 800db54:	d0f4      	beq.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db56:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 800db5a:	4293      	cmp	r3, r2
 800db5c:	d0f0      	beq.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db5e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800db62:	4293      	cmp	r3, r2
 800db64:	d1eb      	bne.n	800db3e <ai_array_to_buffer_fmt+0x32>
 800db66:	e7eb      	b.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db68:	4b11      	ldr	r3, [pc, #68]	; (800dbb0 <ai_array_to_buffer_fmt+0xa4>)
 800db6a:	4003      	ands	r3, r0
 800db6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800db70:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800db74:	4318      	orrs	r0, r3
 800db76:	4770      	bx	lr
 800db78:	4a0e      	ldr	r2, [pc, #56]	; (800dbb4 <ai_array_to_buffer_fmt+0xa8>)
 800db7a:	4293      	cmp	r3, r2
 800db7c:	d0e0      	beq.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db7e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 800db82:	4293      	cmp	r3, r2
 800db84:	d0dc      	beq.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db86:	4a0c      	ldr	r2, [pc, #48]	; (800dbb8 <ai_array_to_buffer_fmt+0xac>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d1d8      	bne.n	800db3e <ai_array_to_buffer_fmt+0x32>
 800db8c:	e7d8      	b.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db8e:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 800db92:	4293      	cmp	r3, r2
 800db94:	d0d4      	beq.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800db9a:	4293      	cmp	r3, r2
 800db9c:	d0d0      	beq.n	800db40 <ai_array_to_buffer_fmt+0x34>
 800db9e:	e7ce      	b.n	800db3e <ai_array_to_buffer_fmt+0x32>
 800dba0:	00060440 	.word	0x00060440
 800dba4:	00840840 	.word	0x00840840
 800dba8:	00040447 	.word	0x00040447
 800dbac:	0004084f 	.word	0x0004084f
 800dbb0:	00803fff 	.word	0x00803fff
 800dbb4:	00841040 	.word	0x00841040
 800dbb8:	0084084f 	.word	0x0084084f

0800dbbc <ai_array_get_byte_size>:
 800dbbc:	b1c1      	cbz	r1, 800dbf0 <ai_array_get_byte_size+0x34>
 800dbbe:	f3c0 3282 	ubfx	r2, r0, #14, #3
 800dbc2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800dbc6:	4413      	add	r3, r2
 800dbc8:	fb01 f103 	mul.w	r1, r1, r3
 800dbcc:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800dbd0:	3107      	adds	r1, #7
 800dbd2:	f3c0 4043 	ubfx	r0, r0, #17, #4
 800dbd6:	f021 0107 	bic.w	r1, r1, #7
 800dbda:	2804      	cmp	r0, #4
 800dbdc:	fa21 f102 	lsr.w	r1, r1, r2
 800dbe0:	d008      	beq.n	800dbf4 <ai_array_get_byte_size+0x38>
 800dbe2:	2808      	cmp	r0, #8
 800dbe4:	d101      	bne.n	800dbea <ai_array_get_byte_size+0x2e>
 800dbe6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800dbea:	3107      	adds	r1, #7
 800dbec:	08c8      	lsrs	r0, r1, #3
 800dbee:	4770      	bx	lr
 800dbf0:	4608      	mov	r0, r1
 800dbf2:	4770      	bx	lr
 800dbf4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800dbf8:	3107      	adds	r1, #7
 800dbfa:	08c8      	lsrs	r0, r1, #3
 800dbfc:	4770      	bx	lr
 800dbfe:	bf00      	nop

0800dc00 <core_tensor_clone>:
 800dc00:	680b      	ldr	r3, [r1, #0]
 800dc02:	6003      	str	r3, [r0, #0]
 800dc04:	684b      	ldr	r3, [r1, #4]
 800dc06:	6043      	str	r3, [r0, #4]
 800dc08:	698b      	ldr	r3, [r1, #24]
 800dc0a:	6183      	str	r3, [r0, #24]
 800dc0c:	688b      	ldr	r3, [r1, #8]
 800dc0e:	6882      	ldr	r2, [r0, #8]
 800dc10:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800dc14:	f363 221f 	bfi	r2, r3, #8, #24
 800dc18:	b410      	push	{r4}
 800dc1a:	6082      	str	r2, [r0, #8]
 800dc1c:	b15b      	cbz	r3, 800dc36 <core_tensor_clone+0x36>
 800dc1e:	2300      	movs	r3, #0
 800dc20:	68cc      	ldr	r4, [r1, #12]
 800dc22:	68c2      	ldr	r2, [r0, #12]
 800dc24:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800dc28:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800dc2c:	6882      	ldr	r2, [r0, #8]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800dc34:	d3f4      	bcc.n	800dc20 <core_tensor_clone+0x20>
 800dc36:	690b      	ldr	r3, [r1, #16]
 800dc38:	6902      	ldr	r2, [r0, #16]
 800dc3a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800dc3e:	f363 221f 	bfi	r2, r3, #8, #24
 800dc42:	6102      	str	r2, [r0, #16]
 800dc44:	b15b      	cbz	r3, 800dc5e <core_tensor_clone+0x5e>
 800dc46:	2300      	movs	r3, #0
 800dc48:	694c      	ldr	r4, [r1, #20]
 800dc4a:	6942      	ldr	r2, [r0, #20]
 800dc4c:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 800dc50:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
 800dc54:	6902      	ldr	r2, [r0, #16]
 800dc56:	3301      	adds	r3, #1
 800dc58:	ebb3 2f12 	cmp.w	r3, r2, lsr #8
 800dc5c:	d3f4      	bcc.n	800dc48 <core_tensor_clone+0x48>
 800dc5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc62:	4770      	bx	lr

0800dc64 <core_array_clone>:
 800dc64:	b410      	push	{r4}
 800dc66:	4604      	mov	r4, r0
 800dc68:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 800dc6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800dc6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc72:	4770      	bx	lr

0800dc74 <st_dsp_arm_copy_q7>:
 800dc74:	b470      	push	{r4, r5, r6}
 800dc76:	0896      	lsrs	r6, r2, #2
 800dc78:	d01b      	beq.n	800dcb2 <st_dsp_arm_copy_q7+0x3e>
 800dc7a:	00b6      	lsls	r6, r6, #2
 800dc7c:	1985      	adds	r5, r0, r6
 800dc7e:	460b      	mov	r3, r1
 800dc80:	f850 4b04 	ldr.w	r4, [r0], #4
 800dc84:	f843 4b04 	str.w	r4, [r3], #4
 800dc88:	42a8      	cmp	r0, r5
 800dc8a:	d1f9      	bne.n	800dc80 <st_dsp_arm_copy_q7+0xc>
 800dc8c:	4431      	add	r1, r6
 800dc8e:	f012 0203 	ands.w	r2, r2, #3
 800dc92:	d00c      	beq.n	800dcae <st_dsp_arm_copy_q7+0x3a>
 800dc94:	f995 3000 	ldrsb.w	r3, [r5]
 800dc98:	700b      	strb	r3, [r1, #0]
 800dc9a:	2a01      	cmp	r2, #1
 800dc9c:	d007      	beq.n	800dcae <st_dsp_arm_copy_q7+0x3a>
 800dc9e:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800dca2:	704b      	strb	r3, [r1, #1]
 800dca4:	2a02      	cmp	r2, #2
 800dca6:	bf1c      	itt	ne
 800dca8:	f995 3002 	ldrsbne.w	r3, [r5, #2]
 800dcac:	708b      	strbne	r3, [r1, #2]
 800dcae:	bc70      	pop	{r4, r5, r6}
 800dcb0:	4770      	bx	lr
 800dcb2:	4605      	mov	r5, r0
 800dcb4:	e7eb      	b.n	800dc8e <st_dsp_arm_copy_q7+0x1a>
 800dcb6:	bf00      	nop

0800dcb8 <st_dsp_arm_fill_q15>:
 800dcb8:	b470      	push	{r4, r5, r6}
 800dcba:	b285      	uxth	r5, r0
 800dcbc:	0896      	lsrs	r6, r2, #2
 800dcbe:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800dcc2:	d009      	beq.n	800dcd8 <st_dsp_arm_fill_q15+0x20>
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4634      	mov	r4, r6
 800dcc8:	3c01      	subs	r4, #1
 800dcca:	601d      	str	r5, [r3, #0]
 800dccc:	605d      	str	r5, [r3, #4]
 800dcce:	f103 0308 	add.w	r3, r3, #8
 800dcd2:	d1f9      	bne.n	800dcc8 <st_dsp_arm_fill_q15+0x10>
 800dcd4:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800dcd8:	f012 0203 	ands.w	r2, r2, #3
 800dcdc:	d006      	beq.n	800dcec <st_dsp_arm_fill_q15+0x34>
 800dcde:	2a01      	cmp	r2, #1
 800dce0:	8008      	strh	r0, [r1, #0]
 800dce2:	d003      	beq.n	800dcec <st_dsp_arm_fill_q15+0x34>
 800dce4:	2a02      	cmp	r2, #2
 800dce6:	8048      	strh	r0, [r1, #2]
 800dce8:	bf18      	it	ne
 800dcea:	8088      	strhne	r0, [r1, #4]
 800dcec:	bc70      	pop	{r4, r5, r6}
 800dcee:	4770      	bx	lr

0800dcf0 <fabsf>:
 800dcf0:	ee10 3a10 	vmov	r3, s0
 800dcf4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dcf8:	ee00 3a10 	vmov	s0, r3
 800dcfc:	4770      	bx	lr
	...

0800dd00 <expf>:
 800dd00:	b508      	push	{r3, lr}
 800dd02:	ed2d 8b02 	vpush	{d8}
 800dd06:	eef0 8a40 	vmov.f32	s17, s0
 800dd0a:	f000 f8cf 	bl	800deac <__ieee754_expf>
 800dd0e:	4b16      	ldr	r3, [pc, #88]	; (800dd68 <expf+0x68>)
 800dd10:	f993 3000 	ldrsb.w	r3, [r3]
 800dd14:	3301      	adds	r3, #1
 800dd16:	eeb0 8a40 	vmov.f32	s16, s0
 800dd1a:	d011      	beq.n	800dd40 <expf+0x40>
 800dd1c:	eeb0 0a68 	vmov.f32	s0, s17
 800dd20:	f000 fc5b 	bl	800e5da <finitef>
 800dd24:	b160      	cbz	r0, 800dd40 <expf+0x40>
 800dd26:	eddf 7a11 	vldr	s15, [pc, #68]	; 800dd6c <expf+0x6c>
 800dd2a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800dd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd32:	dd0a      	ble.n	800dd4a <expf+0x4a>
 800dd34:	f000 fd32 	bl	800e79c <__errno>
 800dd38:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 800dd70 <expf+0x70>
 800dd3c:	2322      	movs	r3, #34	; 0x22
 800dd3e:	6003      	str	r3, [r0, #0]
 800dd40:	eeb0 0a48 	vmov.f32	s0, s16
 800dd44:	ecbd 8b02 	vpop	{d8}
 800dd48:	bd08      	pop	{r3, pc}
 800dd4a:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800dd74 <expf+0x74>
 800dd4e:	eef4 8ae7 	vcmpe.f32	s17, s15
 800dd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd56:	d5f3      	bpl.n	800dd40 <expf+0x40>
 800dd58:	f000 fd20 	bl	800e79c <__errno>
 800dd5c:	2322      	movs	r3, #34	; 0x22
 800dd5e:	ed9f 8a06 	vldr	s16, [pc, #24]	; 800dd78 <expf+0x78>
 800dd62:	6003      	str	r3, [r0, #0]
 800dd64:	e7ec      	b.n	800dd40 <expf+0x40>
 800dd66:	bf00      	nop
 800dd68:	20000a84 	.word	0x20000a84
 800dd6c:	42b17180 	.word	0x42b17180
 800dd70:	7f800000 	.word	0x7f800000
 800dd74:	c2cff1b5 	.word	0xc2cff1b5
 800dd78:	00000000 	.word	0x00000000

0800dd7c <powf>:
 800dd7c:	b508      	push	{r3, lr}
 800dd7e:	ed2d 8b04 	vpush	{d8-d9}
 800dd82:	eeb0 9a40 	vmov.f32	s18, s0
 800dd86:	eef0 8a60 	vmov.f32	s17, s1
 800dd8a:	f000 f963 	bl	800e054 <__ieee754_powf>
 800dd8e:	4b43      	ldr	r3, [pc, #268]	; (800de9c <powf+0x120>)
 800dd90:	f993 3000 	ldrsb.w	r3, [r3]
 800dd94:	3301      	adds	r3, #1
 800dd96:	eeb0 8a40 	vmov.f32	s16, s0
 800dd9a:	d012      	beq.n	800ddc2 <powf+0x46>
 800dd9c:	eef4 8a68 	vcmp.f32	s17, s17
 800dda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dda4:	d60d      	bvs.n	800ddc2 <powf+0x46>
 800dda6:	eeb4 9a49 	vcmp.f32	s18, s18
 800ddaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddae:	d70d      	bvc.n	800ddcc <powf+0x50>
 800ddb0:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ddb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ddbc:	bf08      	it	eq
 800ddbe:	eeb0 8a67 	vmoveq.f32	s16, s15
 800ddc2:	eeb0 0a48 	vmov.f32	s0, s16
 800ddc6:	ecbd 8b04 	vpop	{d8-d9}
 800ddca:	bd08      	pop	{r3, pc}
 800ddcc:	eddf 9a34 	vldr	s19, [pc, #208]	; 800dea0 <powf+0x124>
 800ddd0:	eeb4 9a69 	vcmp.f32	s18, s19
 800ddd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd8:	d116      	bne.n	800de08 <powf+0x8c>
 800ddda:	eef4 8a69 	vcmp.f32	s17, s19
 800ddde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dde2:	d057      	beq.n	800de94 <powf+0x118>
 800dde4:	eeb0 0a68 	vmov.f32	s0, s17
 800dde8:	f000 fbf7 	bl	800e5da <finitef>
 800ddec:	2800      	cmp	r0, #0
 800ddee:	d0e8      	beq.n	800ddc2 <powf+0x46>
 800ddf0:	eef4 8ae9 	vcmpe.f32	s17, s19
 800ddf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddf8:	d5e3      	bpl.n	800ddc2 <powf+0x46>
 800ddfa:	f000 fccf 	bl	800e79c <__errno>
 800ddfe:	2321      	movs	r3, #33	; 0x21
 800de00:	6003      	str	r3, [r0, #0]
 800de02:	ed9f 8a28 	vldr	s16, [pc, #160]	; 800dea4 <powf+0x128>
 800de06:	e7dc      	b.n	800ddc2 <powf+0x46>
 800de08:	f000 fbe7 	bl	800e5da <finitef>
 800de0c:	bb50      	cbnz	r0, 800de64 <powf+0xe8>
 800de0e:	eeb0 0a49 	vmov.f32	s0, s18
 800de12:	f000 fbe2 	bl	800e5da <finitef>
 800de16:	b328      	cbz	r0, 800de64 <powf+0xe8>
 800de18:	eeb0 0a68 	vmov.f32	s0, s17
 800de1c:	f000 fbdd 	bl	800e5da <finitef>
 800de20:	b300      	cbz	r0, 800de64 <powf+0xe8>
 800de22:	eeb4 8a48 	vcmp.f32	s16, s16
 800de26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de2a:	d706      	bvc.n	800de3a <powf+0xbe>
 800de2c:	f000 fcb6 	bl	800e79c <__errno>
 800de30:	2321      	movs	r3, #33	; 0x21
 800de32:	ee89 8aa9 	vdiv.f32	s16, s19, s19
 800de36:	6003      	str	r3, [r0, #0]
 800de38:	e7c3      	b.n	800ddc2 <powf+0x46>
 800de3a:	f000 fcaf 	bl	800e79c <__errno>
 800de3e:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 800de42:	2322      	movs	r3, #34	; 0x22
 800de44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de48:	6003      	str	r3, [r0, #0]
 800de4a:	d508      	bpl.n	800de5e <powf+0xe2>
 800de4c:	eeb0 0a68 	vmov.f32	s0, s17
 800de50:	f000 fbd6 	bl	800e600 <rintf>
 800de54:	eeb4 0a68 	vcmp.f32	s0, s17
 800de58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de5c:	d1d1      	bne.n	800de02 <powf+0x86>
 800de5e:	ed9f 8a12 	vldr	s16, [pc, #72]	; 800dea8 <powf+0x12c>
 800de62:	e7ae      	b.n	800ddc2 <powf+0x46>
 800de64:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800de68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de6c:	d1a9      	bne.n	800ddc2 <powf+0x46>
 800de6e:	eeb0 0a49 	vmov.f32	s0, s18
 800de72:	f000 fbb2 	bl	800e5da <finitef>
 800de76:	2800      	cmp	r0, #0
 800de78:	d0a3      	beq.n	800ddc2 <powf+0x46>
 800de7a:	eeb0 0a68 	vmov.f32	s0, s17
 800de7e:	f000 fbac 	bl	800e5da <finitef>
 800de82:	2800      	cmp	r0, #0
 800de84:	d09d      	beq.n	800ddc2 <powf+0x46>
 800de86:	f000 fc89 	bl	800e79c <__errno>
 800de8a:	2322      	movs	r3, #34	; 0x22
 800de8c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800dea0 <powf+0x124>
 800de90:	6003      	str	r3, [r0, #0]
 800de92:	e796      	b.n	800ddc2 <powf+0x46>
 800de94:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800de98:	e793      	b.n	800ddc2 <powf+0x46>
 800de9a:	bf00      	nop
 800de9c:	20000a84 	.word	0x20000a84
 800dea0:	00000000 	.word	0x00000000
 800dea4:	ff800000 	.word	0xff800000
 800dea8:	7f800000 	.word	0x7f800000

0800deac <__ieee754_expf>:
 800deac:	ee10 2a10 	vmov	r2, s0
 800deb0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800deb4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800deb8:	d902      	bls.n	800dec0 <__ieee754_expf+0x14>
 800deba:	ee30 0a00 	vadd.f32	s0, s0, s0
 800debe:	4770      	bx	lr
 800dec0:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800dec4:	d106      	bne.n	800ded4 <__ieee754_expf+0x28>
 800dec6:	eddf 7a51 	vldr	s15, [pc, #324]	; 800e00c <__ieee754_expf+0x160>
 800deca:	2b00      	cmp	r3, #0
 800decc:	bf18      	it	ne
 800dece:	eeb0 0a67 	vmovne.f32	s0, s15
 800ded2:	4770      	bx	lr
 800ded4:	484e      	ldr	r0, [pc, #312]	; (800e010 <__ieee754_expf+0x164>)
 800ded6:	4282      	cmp	r2, r0
 800ded8:	dd04      	ble.n	800dee4 <__ieee754_expf+0x38>
 800deda:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800e014 <__ieee754_expf+0x168>
 800dede:	ee20 0a00 	vmul.f32	s0, s0, s0
 800dee2:	4770      	bx	lr
 800dee4:	2a00      	cmp	r2, #0
 800dee6:	da03      	bge.n	800def0 <__ieee754_expf+0x44>
 800dee8:	4a4b      	ldr	r2, [pc, #300]	; (800e018 <__ieee754_expf+0x16c>)
 800deea:	4291      	cmp	r1, r2
 800deec:	f200 808a 	bhi.w	800e004 <__ieee754_expf+0x158>
 800def0:	4a4a      	ldr	r2, [pc, #296]	; (800e01c <__ieee754_expf+0x170>)
 800def2:	4291      	cmp	r1, r2
 800def4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800def8:	d954      	bls.n	800dfa4 <__ieee754_expf+0xf8>
 800defa:	4a49      	ldr	r2, [pc, #292]	; (800e020 <__ieee754_expf+0x174>)
 800defc:	4291      	cmp	r1, r2
 800defe:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800df02:	d836      	bhi.n	800df72 <__ieee754_expf+0xc6>
 800df04:	4947      	ldr	r1, [pc, #284]	; (800e024 <__ieee754_expf+0x178>)
 800df06:	4411      	add	r1, r2
 800df08:	ed91 7a00 	vldr	s14, [r1]
 800df0c:	4946      	ldr	r1, [pc, #280]	; (800e028 <__ieee754_expf+0x17c>)
 800df0e:	440a      	add	r2, r1
 800df10:	edd2 7a00 	vldr	s15, [r2]
 800df14:	ee30 7a47 	vsub.f32	s14, s0, s14
 800df18:	f1c3 0201 	rsb	r2, r3, #1
 800df1c:	1ad2      	subs	r2, r2, r3
 800df1e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800df22:	ee60 6a00 	vmul.f32	s13, s0, s0
 800df26:	eddf 5a41 	vldr	s11, [pc, #260]	; 800e02c <__ieee754_expf+0x180>
 800df2a:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800e030 <__ieee754_expf+0x184>
 800df2e:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800df32:	eddf 5a40 	vldr	s11, [pc, #256]	; 800e034 <__ieee754_expf+0x188>
 800df36:	eee5 5a26 	vfma.f32	s11, s10, s13
 800df3a:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800e038 <__ieee754_expf+0x18c>
 800df3e:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800df42:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800e03c <__ieee754_expf+0x190>
 800df46:	eee5 5a26 	vfma.f32	s11, s10, s13
 800df4a:	eeb0 5a40 	vmov.f32	s10, s0
 800df4e:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800df52:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800df56:	eef0 6a45 	vmov.f32	s13, s10
 800df5a:	ee20 5a05 	vmul.f32	s10, s0, s10
 800df5e:	bb92      	cbnz	r2, 800dfc6 <__ieee754_expf+0x11a>
 800df60:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800df64:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800df68:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800df6c:	ee36 0a40 	vsub.f32	s0, s12, s0
 800df70:	4770      	bx	lr
 800df72:	4b33      	ldr	r3, [pc, #204]	; (800e040 <__ieee754_expf+0x194>)
 800df74:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800e044 <__ieee754_expf+0x198>
 800df78:	4413      	add	r3, r2
 800df7a:	edd3 7a00 	vldr	s15, [r3]
 800df7e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800df82:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800e048 <__ieee754_expf+0x19c>
 800df86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df8a:	ee17 2a90 	vmov	r2, s15
 800df8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800df92:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800df96:	eeb0 7a40 	vmov.f32	s14, s0
 800df9a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e04c <__ieee754_expf+0x1a0>
 800df9e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800dfa2:	e7bc      	b.n	800df1e <__ieee754_expf+0x72>
 800dfa4:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800dfa8:	d20b      	bcs.n	800dfc2 <__ieee754_expf+0x116>
 800dfaa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800e014 <__ieee754_expf+0x168>
 800dfae:	ee70 6a26 	vadd.f32	s13, s0, s13
 800dfb2:	eef4 6ac6 	vcmpe.f32	s13, s12
 800dfb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfba:	dd02      	ble.n	800dfc2 <__ieee754_expf+0x116>
 800dfbc:	ee30 0a06 	vadd.f32	s0, s0, s12
 800dfc0:	4770      	bx	lr
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	e7ad      	b.n	800df22 <__ieee754_expf+0x76>
 800dfc6:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800dfca:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800dfce:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800dfd2:	bfb8      	it	lt
 800dfd4:	3264      	addlt	r2, #100	; 0x64
 800dfd6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800dfda:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800dfde:	ee76 7a40 	vsub.f32	s15, s12, s0
 800dfe2:	ee17 3a90 	vmov	r3, s15
 800dfe6:	bfab      	itete	ge
 800dfe8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800dfec:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800dff0:	ee00 3a10 	vmovge	s0, r3
 800dff4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800e050 <__ieee754_expf+0x1a4>
 800dff8:	bfbc      	itt	lt
 800dffa:	ee00 3a10 	vmovlt	s0, r3
 800dffe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800e002:	4770      	bx	lr
 800e004:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e00c <__ieee754_expf+0x160>
 800e008:	4770      	bx	lr
 800e00a:	bf00      	nop
 800e00c:	00000000 	.word	0x00000000
 800e010:	42b17217 	.word	0x42b17217
 800e014:	7149f2ca 	.word	0x7149f2ca
 800e018:	42cff1b5 	.word	0x42cff1b5
 800e01c:	3eb17218 	.word	0x3eb17218
 800e020:	3f851591 	.word	0x3f851591
 800e024:	0813ced8 	.word	0x0813ced8
 800e028:	0813cee0 	.word	0x0813cee0
 800e02c:	3331bb4c 	.word	0x3331bb4c
 800e030:	b5ddea0e 	.word	0xb5ddea0e
 800e034:	388ab355 	.word	0x388ab355
 800e038:	bb360b61 	.word	0xbb360b61
 800e03c:	3e2aaaab 	.word	0x3e2aaaab
 800e040:	0813ced0 	.word	0x0813ced0
 800e044:	3fb8aa3b 	.word	0x3fb8aa3b
 800e048:	3f317180 	.word	0x3f317180
 800e04c:	3717f7d1 	.word	0x3717f7d1
 800e050:	0d800000 	.word	0x0d800000

0800e054 <__ieee754_powf>:
 800e054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e058:	ee10 5a90 	vmov	r5, s1
 800e05c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800e060:	ed2d 8b02 	vpush	{d8}
 800e064:	eeb0 8a40 	vmov.f32	s16, s0
 800e068:	eef0 8a60 	vmov.f32	s17, s1
 800e06c:	f000 8291 	beq.w	800e592 <__ieee754_powf+0x53e>
 800e070:	ee10 8a10 	vmov	r8, s0
 800e074:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800e078:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800e07c:	dc06      	bgt.n	800e08c <__ieee754_powf+0x38>
 800e07e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e082:	dd0a      	ble.n	800e09a <__ieee754_powf+0x46>
 800e084:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e088:	f000 8283 	beq.w	800e592 <__ieee754_powf+0x53e>
 800e08c:	ecbd 8b02 	vpop	{d8}
 800e090:	48d8      	ldr	r0, [pc, #864]	; (800e3f4 <__ieee754_powf+0x3a0>)
 800e092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e096:	f000 baad 	b.w	800e5f4 <nanf>
 800e09a:	f1b8 0f00 	cmp.w	r8, #0
 800e09e:	da1f      	bge.n	800e0e0 <__ieee754_powf+0x8c>
 800e0a0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800e0a4:	da2e      	bge.n	800e104 <__ieee754_powf+0xb0>
 800e0a6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e0aa:	f2c0 827b 	blt.w	800e5a4 <__ieee754_powf+0x550>
 800e0ae:	15fb      	asrs	r3, r7, #23
 800e0b0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800e0b4:	fa47 f603 	asr.w	r6, r7, r3
 800e0b8:	fa06 f303 	lsl.w	r3, r6, r3
 800e0bc:	42bb      	cmp	r3, r7
 800e0be:	f040 8271 	bne.w	800e5a4 <__ieee754_powf+0x550>
 800e0c2:	f006 0601 	and.w	r6, r6, #1
 800e0c6:	f1c6 0602 	rsb	r6, r6, #2
 800e0ca:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800e0ce:	d120      	bne.n	800e112 <__ieee754_powf+0xbe>
 800e0d0:	2d00      	cmp	r5, #0
 800e0d2:	f280 8264 	bge.w	800e59e <__ieee754_powf+0x54a>
 800e0d6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e0da:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800e0de:	e00d      	b.n	800e0fc <__ieee754_powf+0xa8>
 800e0e0:	2600      	movs	r6, #0
 800e0e2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800e0e6:	d1f0      	bne.n	800e0ca <__ieee754_powf+0x76>
 800e0e8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800e0ec:	f000 8251 	beq.w	800e592 <__ieee754_powf+0x53e>
 800e0f0:	dd0a      	ble.n	800e108 <__ieee754_powf+0xb4>
 800e0f2:	2d00      	cmp	r5, #0
 800e0f4:	f280 8250 	bge.w	800e598 <__ieee754_powf+0x544>
 800e0f8:	ed9f 0abf 	vldr	s0, [pc, #764]	; 800e3f8 <__ieee754_powf+0x3a4>
 800e0fc:	ecbd 8b02 	vpop	{d8}
 800e100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e104:	2602      	movs	r6, #2
 800e106:	e7ec      	b.n	800e0e2 <__ieee754_powf+0x8e>
 800e108:	2d00      	cmp	r5, #0
 800e10a:	daf5      	bge.n	800e0f8 <__ieee754_powf+0xa4>
 800e10c:	eeb1 0a68 	vneg.f32	s0, s17
 800e110:	e7f4      	b.n	800e0fc <__ieee754_powf+0xa8>
 800e112:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800e116:	d102      	bne.n	800e11e <__ieee754_powf+0xca>
 800e118:	ee28 0a08 	vmul.f32	s0, s16, s16
 800e11c:	e7ee      	b.n	800e0fc <__ieee754_powf+0xa8>
 800e11e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800e122:	eeb0 0a48 	vmov.f32	s0, s16
 800e126:	d108      	bne.n	800e13a <__ieee754_powf+0xe6>
 800e128:	f1b8 0f00 	cmp.w	r8, #0
 800e12c:	db05      	blt.n	800e13a <__ieee754_powf+0xe6>
 800e12e:	ecbd 8b02 	vpop	{d8}
 800e132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e136:	f000 ba4d 	b.w	800e5d4 <__ieee754_sqrtf>
 800e13a:	f7ff fdd9 	bl	800dcf0 <fabsf>
 800e13e:	b124      	cbz	r4, 800e14a <__ieee754_powf+0xf6>
 800e140:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800e144:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800e148:	d117      	bne.n	800e17a <__ieee754_powf+0x126>
 800e14a:	2d00      	cmp	r5, #0
 800e14c:	bfbc      	itt	lt
 800e14e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800e152:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800e156:	f1b8 0f00 	cmp.w	r8, #0
 800e15a:	dacf      	bge.n	800e0fc <__ieee754_powf+0xa8>
 800e15c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800e160:	ea54 0306 	orrs.w	r3, r4, r6
 800e164:	d104      	bne.n	800e170 <__ieee754_powf+0x11c>
 800e166:	ee70 7a40 	vsub.f32	s15, s0, s0
 800e16a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800e16e:	e7c5      	b.n	800e0fc <__ieee754_powf+0xa8>
 800e170:	2e01      	cmp	r6, #1
 800e172:	d1c3      	bne.n	800e0fc <__ieee754_powf+0xa8>
 800e174:	eeb1 0a40 	vneg.f32	s0, s0
 800e178:	e7c0      	b.n	800e0fc <__ieee754_powf+0xa8>
 800e17a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800e17e:	3801      	subs	r0, #1
 800e180:	ea56 0300 	orrs.w	r3, r6, r0
 800e184:	d104      	bne.n	800e190 <__ieee754_powf+0x13c>
 800e186:	ee38 8a48 	vsub.f32	s16, s16, s16
 800e18a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800e18e:	e7b5      	b.n	800e0fc <__ieee754_powf+0xa8>
 800e190:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800e194:	dd6b      	ble.n	800e26e <__ieee754_powf+0x21a>
 800e196:	4b99      	ldr	r3, [pc, #612]	; (800e3fc <__ieee754_powf+0x3a8>)
 800e198:	429c      	cmp	r4, r3
 800e19a:	dc06      	bgt.n	800e1aa <__ieee754_powf+0x156>
 800e19c:	2d00      	cmp	r5, #0
 800e19e:	daab      	bge.n	800e0f8 <__ieee754_powf+0xa4>
 800e1a0:	ed9f 0a97 	vldr	s0, [pc, #604]	; 800e400 <__ieee754_powf+0x3ac>
 800e1a4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800e1a8:	e7a8      	b.n	800e0fc <__ieee754_powf+0xa8>
 800e1aa:	4b96      	ldr	r3, [pc, #600]	; (800e404 <__ieee754_powf+0x3b0>)
 800e1ac:	429c      	cmp	r4, r3
 800e1ae:	dd02      	ble.n	800e1b6 <__ieee754_powf+0x162>
 800e1b0:	2d00      	cmp	r5, #0
 800e1b2:	dcf5      	bgt.n	800e1a0 <__ieee754_powf+0x14c>
 800e1b4:	e7a0      	b.n	800e0f8 <__ieee754_powf+0xa4>
 800e1b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e1ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e1be:	eddf 6a92 	vldr	s13, [pc, #584]	; 800e408 <__ieee754_powf+0x3b4>
 800e1c2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800e1c6:	eee0 6a67 	vfms.f32	s13, s0, s15
 800e1ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e1ce:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800e1d2:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e1d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1da:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800e40c <__ieee754_powf+0x3b8>
 800e1de:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800e1e2:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800e410 <__ieee754_powf+0x3bc>
 800e1e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e1ea:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800e414 <__ieee754_powf+0x3c0>
 800e1ee:	eef0 6a67 	vmov.f32	s13, s15
 800e1f2:	eee0 6a07 	vfma.f32	s13, s0, s14
 800e1f6:	ee16 3a90 	vmov	r3, s13
 800e1fa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e1fe:	f023 030f 	bic.w	r3, r3, #15
 800e202:	ee00 3a90 	vmov	s1, r3
 800e206:	eee0 0a47 	vfms.f32	s1, s0, s14
 800e20a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800e20e:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800e212:	f025 050f 	bic.w	r5, r5, #15
 800e216:	ee07 5a10 	vmov	s14, r5
 800e21a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800e21e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800e222:	ee07 3a90 	vmov	s15, r3
 800e226:	eee7 0a27 	vfma.f32	s1, s14, s15
 800e22a:	3e01      	subs	r6, #1
 800e22c:	ea56 0200 	orrs.w	r2, r6, r0
 800e230:	ee07 5a10 	vmov	s14, r5
 800e234:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e238:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800e23c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800e240:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e244:	ee17 4a10 	vmov	r4, s14
 800e248:	bf08      	it	eq
 800e24a:	eeb0 8a40 	vmoveq.f32	s16, s0
 800e24e:	2c00      	cmp	r4, #0
 800e250:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e254:	f340 8184 	ble.w	800e560 <__ieee754_powf+0x50c>
 800e258:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800e25c:	f340 80fc 	ble.w	800e458 <__ieee754_powf+0x404>
 800e260:	eddf 7a67 	vldr	s15, [pc, #412]	; 800e400 <__ieee754_powf+0x3ac>
 800e264:	ee28 0a27 	vmul.f32	s0, s16, s15
 800e268:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e26c:	e746      	b.n	800e0fc <__ieee754_powf+0xa8>
 800e26e:	f018 4fff 	tst.w	r8, #2139095040	; 0x7f800000
 800e272:	bf01      	itttt	eq
 800e274:	eddf 7a68 	vldreq	s15, [pc, #416]	; 800e418 <__ieee754_powf+0x3c4>
 800e278:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800e27c:	f06f 0217 	mvneq.w	r2, #23
 800e280:	ee17 4a90 	vmoveq	r4, s15
 800e284:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800e288:	bf18      	it	ne
 800e28a:	2200      	movne	r2, #0
 800e28c:	3b7f      	subs	r3, #127	; 0x7f
 800e28e:	4413      	add	r3, r2
 800e290:	4a62      	ldr	r2, [pc, #392]	; (800e41c <__ieee754_powf+0x3c8>)
 800e292:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800e296:	4294      	cmp	r4, r2
 800e298:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800e29c:	dd06      	ble.n	800e2ac <__ieee754_powf+0x258>
 800e29e:	4a60      	ldr	r2, [pc, #384]	; (800e420 <__ieee754_powf+0x3cc>)
 800e2a0:	4294      	cmp	r4, r2
 800e2a2:	f340 80a4 	ble.w	800e3ee <__ieee754_powf+0x39a>
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800e2ac:	2400      	movs	r4, #0
 800e2ae:	4a5d      	ldr	r2, [pc, #372]	; (800e424 <__ieee754_powf+0x3d0>)
 800e2b0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800e2b4:	ee07 1a90 	vmov	s15, r1
 800e2b8:	ed92 7a00 	vldr	s14, [r2]
 800e2bc:	4a5a      	ldr	r2, [pc, #360]	; (800e428 <__ieee754_powf+0x3d4>)
 800e2be:	ee37 6a27 	vadd.f32	s12, s14, s15
 800e2c2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e2c6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800e2ca:	1049      	asrs	r1, r1, #1
 800e2cc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800e2d0:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800e2d4:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800e2d8:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800e2dc:	ee06 1a10 	vmov	s12, r1
 800e2e0:	ee65 4a26 	vmul.f32	s9, s10, s13
 800e2e4:	ee36 7a47 	vsub.f32	s14, s12, s14
 800e2e8:	ee14 7a90 	vmov	r7, s9
 800e2ec:	4017      	ands	r7, r2
 800e2ee:	ee05 7a90 	vmov	s11, r7
 800e2f2:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800e2f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e2fa:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800e42c <__ieee754_powf+0x3d8>
 800e2fe:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800e302:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800e306:	ee25 6a26 	vmul.f32	s12, s10, s13
 800e30a:	eddf 6a49 	vldr	s13, [pc, #292]	; 800e430 <__ieee754_powf+0x3dc>
 800e30e:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800e312:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e434 <__ieee754_powf+0x3e0>
 800e316:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e31a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800e408 <__ieee754_powf+0x3b4>
 800e31e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e322:	eddf 6a45 	vldr	s13, [pc, #276]	; 800e438 <__ieee754_powf+0x3e4>
 800e326:	eee7 6a27 	vfma.f32	s13, s14, s15
 800e32a:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800e43c <__ieee754_powf+0x3e8>
 800e32e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800e332:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800e336:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800e33a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e33e:	eee5 6a07 	vfma.f32	s13, s10, s14
 800e342:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800e346:	eef0 7a45 	vmov.f32	s15, s10
 800e34a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800e34e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e352:	ee17 1a90 	vmov	r1, s15
 800e356:	4011      	ands	r1, r2
 800e358:	ee07 1a90 	vmov	s15, r1
 800e35c:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800e360:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800e364:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800e368:	ee27 7a24 	vmul.f32	s14, s14, s9
 800e36c:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e370:	eeb0 6a47 	vmov.f32	s12, s14
 800e374:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800e378:	ee16 1a10 	vmov	r1, s12
 800e37c:	4011      	ands	r1, r2
 800e37e:	ee06 1a90 	vmov	s13, r1
 800e382:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800e386:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e440 <__ieee754_powf+0x3ec>
 800e38a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e444 <__ieee754_powf+0x3f0>
 800e38e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800e392:	ee06 1a10 	vmov	s12, r1
 800e396:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e39a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e448 <__ieee754_powf+0x3f4>
 800e39e:	492b      	ldr	r1, [pc, #172]	; (800e44c <__ieee754_powf+0x3f8>)
 800e3a0:	eea6 7a27 	vfma.f32	s14, s12, s15
 800e3a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e3a8:	edd1 7a00 	vldr	s15, [r1]
 800e3ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e3b0:	ee07 3a90 	vmov	s15, r3
 800e3b4:	4b26      	ldr	r3, [pc, #152]	; (800e450 <__ieee754_powf+0x3fc>)
 800e3b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e3ba:	eef0 7a47 	vmov.f32	s15, s14
 800e3be:	eee6 7a25 	vfma.f32	s15, s12, s11
 800e3c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e3c6:	edd4 0a00 	vldr	s1, [r4]
 800e3ca:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800e3ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e3d2:	ee17 3a90 	vmov	r3, s15
 800e3d6:	4013      	ands	r3, r2
 800e3d8:	ee07 3a90 	vmov	s15, r3
 800e3dc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800e3e0:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800e3e4:	eee6 6a65 	vfms.f32	s13, s12, s11
 800e3e8:	ee77 7a66 	vsub.f32	s15, s14, s13
 800e3ec:	e70f      	b.n	800e20e <__ieee754_powf+0x1ba>
 800e3ee:	2401      	movs	r4, #1
 800e3f0:	e75d      	b.n	800e2ae <__ieee754_powf+0x25a>
 800e3f2:	bf00      	nop
 800e3f4:	0813ce7d 	.word	0x0813ce7d
 800e3f8:	00000000 	.word	0x00000000
 800e3fc:	3f7ffff7 	.word	0x3f7ffff7
 800e400:	7149f2ca 	.word	0x7149f2ca
 800e404:	3f800007 	.word	0x3f800007
 800e408:	3eaaaaab 	.word	0x3eaaaaab
 800e40c:	3fb8aa3b 	.word	0x3fb8aa3b
 800e410:	36eca570 	.word	0x36eca570
 800e414:	3fb8aa00 	.word	0x3fb8aa00
 800e418:	4b800000 	.word	0x4b800000
 800e41c:	001cc471 	.word	0x001cc471
 800e420:	005db3d6 	.word	0x005db3d6
 800e424:	0813cee8 	.word	0x0813cee8
 800e428:	fffff000 	.word	0xfffff000
 800e42c:	3e6c3255 	.word	0x3e6c3255
 800e430:	3e53f142 	.word	0x3e53f142
 800e434:	3e8ba305 	.word	0x3e8ba305
 800e438:	3edb6db7 	.word	0x3edb6db7
 800e43c:	3f19999a 	.word	0x3f19999a
 800e440:	3f76384f 	.word	0x3f76384f
 800e444:	3f763800 	.word	0x3f763800
 800e448:	369dc3a0 	.word	0x369dc3a0
 800e44c:	0813cef8 	.word	0x0813cef8
 800e450:	0813cef0 	.word	0x0813cef0
 800e454:	3338aa3c 	.word	0x3338aa3c
 800e458:	f040 8092 	bne.w	800e580 <__ieee754_powf+0x52c>
 800e45c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800e454 <__ieee754_powf+0x400>
 800e460:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e464:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800e468:	eef4 6ac7 	vcmpe.f32	s13, s14
 800e46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e470:	f73f aef6 	bgt.w	800e260 <__ieee754_powf+0x20c>
 800e474:	15db      	asrs	r3, r3, #23
 800e476:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800e47a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e47e:	4103      	asrs	r3, r0
 800e480:	4423      	add	r3, r4
 800e482:	4949      	ldr	r1, [pc, #292]	; (800e5a8 <__ieee754_powf+0x554>)
 800e484:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e488:	3a7f      	subs	r2, #127	; 0x7f
 800e48a:	4111      	asrs	r1, r2
 800e48c:	ea23 0101 	bic.w	r1, r3, r1
 800e490:	ee07 1a10 	vmov	s14, r1
 800e494:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800e498:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800e49c:	f1c2 0217 	rsb	r2, r2, #23
 800e4a0:	4110      	asrs	r0, r2
 800e4a2:	2c00      	cmp	r4, #0
 800e4a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e4a8:	bfb8      	it	lt
 800e4aa:	4240      	neglt	r0, r0
 800e4ac:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800e4b0:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800e5ac <__ieee754_powf+0x558>
 800e4b4:	ee17 3a10 	vmov	r3, s14
 800e4b8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e4bc:	f023 030f 	bic.w	r3, r3, #15
 800e4c0:	ee07 3a10 	vmov	s14, r3
 800e4c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e4c8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800e4cc:	eddf 7a38 	vldr	s15, [pc, #224]	; 800e5b0 <__ieee754_powf+0x55c>
 800e4d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4d4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800e4d8:	eddf 6a36 	vldr	s13, [pc, #216]	; 800e5b4 <__ieee754_powf+0x560>
 800e4dc:	eeb0 0a67 	vmov.f32	s0, s15
 800e4e0:	eea7 0a26 	vfma.f32	s0, s14, s13
 800e4e4:	eeb0 6a40 	vmov.f32	s12, s0
 800e4e8:	eea7 6a66 	vfms.f32	s12, s14, s13
 800e4ec:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e4f0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800e4f4:	eddf 6a30 	vldr	s13, [pc, #192]	; 800e5b8 <__ieee754_powf+0x564>
 800e4f8:	ed9f 6a30 	vldr	s12, [pc, #192]	; 800e5bc <__ieee754_powf+0x568>
 800e4fc:	eea7 6a26 	vfma.f32	s12, s14, s13
 800e500:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800e5c0 <__ieee754_powf+0x56c>
 800e504:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e508:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800e5c4 <__ieee754_powf+0x570>
 800e50c:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e510:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800e5c8 <__ieee754_powf+0x574>
 800e514:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e518:	eeb0 6a40 	vmov.f32	s12, s0
 800e51c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800e520:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800e524:	eeb0 7a46 	vmov.f32	s14, s12
 800e528:	ee77 6a66 	vsub.f32	s13, s14, s13
 800e52c:	ee20 6a06 	vmul.f32	s12, s0, s12
 800e530:	eee0 7a27 	vfma.f32	s15, s0, s15
 800e534:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800e538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e53c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e540:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e544:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e548:	ee10 3a10 	vmov	r3, s0
 800e54c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800e550:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e554:	da1a      	bge.n	800e58c <__ieee754_powf+0x538>
 800e556:	f000 f8af 	bl	800e6b8 <scalbnf>
 800e55a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800e55e:	e5cd      	b.n	800e0fc <__ieee754_powf+0xa8>
 800e560:	4a1a      	ldr	r2, [pc, #104]	; (800e5cc <__ieee754_powf+0x578>)
 800e562:	4293      	cmp	r3, r2
 800e564:	dd02      	ble.n	800e56c <__ieee754_powf+0x518>
 800e566:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800e5d0 <__ieee754_powf+0x57c>
 800e56a:	e67b      	b.n	800e264 <__ieee754_powf+0x210>
 800e56c:	d108      	bne.n	800e580 <__ieee754_powf+0x52c>
 800e56e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e572:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800e576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e57a:	f6ff af7b 	blt.w	800e474 <__ieee754_powf+0x420>
 800e57e:	e7f2      	b.n	800e566 <__ieee754_powf+0x512>
 800e580:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800e584:	f73f af76 	bgt.w	800e474 <__ieee754_powf+0x420>
 800e588:	2000      	movs	r0, #0
 800e58a:	e78f      	b.n	800e4ac <__ieee754_powf+0x458>
 800e58c:	ee00 3a10 	vmov	s0, r3
 800e590:	e7e3      	b.n	800e55a <__ieee754_powf+0x506>
 800e592:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e596:	e5b1      	b.n	800e0fc <__ieee754_powf+0xa8>
 800e598:	eeb0 0a68 	vmov.f32	s0, s17
 800e59c:	e5ae      	b.n	800e0fc <__ieee754_powf+0xa8>
 800e59e:	eeb0 0a48 	vmov.f32	s0, s16
 800e5a2:	e5ab      	b.n	800e0fc <__ieee754_powf+0xa8>
 800e5a4:	2600      	movs	r6, #0
 800e5a6:	e590      	b.n	800e0ca <__ieee754_powf+0x76>
 800e5a8:	007fffff 	.word	0x007fffff
 800e5ac:	3f317218 	.word	0x3f317218
 800e5b0:	35bfbe8c 	.word	0x35bfbe8c
 800e5b4:	3f317200 	.word	0x3f317200
 800e5b8:	3331bb4c 	.word	0x3331bb4c
 800e5bc:	b5ddea0e 	.word	0xb5ddea0e
 800e5c0:	388ab355 	.word	0x388ab355
 800e5c4:	bb360b61 	.word	0xbb360b61
 800e5c8:	3e2aaaab 	.word	0x3e2aaaab
 800e5cc:	43160000 	.word	0x43160000
 800e5d0:	0da24260 	.word	0x0da24260

0800e5d4 <__ieee754_sqrtf>:
 800e5d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e5d8:	4770      	bx	lr

0800e5da <finitef>:
 800e5da:	b082      	sub	sp, #8
 800e5dc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e5e0:	9801      	ldr	r0, [sp, #4]
 800e5e2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e5e6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e5ea:	bfac      	ite	ge
 800e5ec:	2000      	movge	r0, #0
 800e5ee:	2001      	movlt	r0, #1
 800e5f0:	b002      	add	sp, #8
 800e5f2:	4770      	bx	lr

0800e5f4 <nanf>:
 800e5f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e5fc <nanf+0x8>
 800e5f8:	4770      	bx	lr
 800e5fa:	bf00      	nop
 800e5fc:	7fc00000 	.word	0x7fc00000

0800e600 <rintf>:
 800e600:	ee10 2a10 	vmov	r2, s0
 800e604:	b513      	push	{r0, r1, r4, lr}
 800e606:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800e60a:	397f      	subs	r1, #127	; 0x7f
 800e60c:	2916      	cmp	r1, #22
 800e60e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800e612:	dc47      	bgt.n	800e6a4 <rintf+0xa4>
 800e614:	b32b      	cbz	r3, 800e662 <rintf+0x62>
 800e616:	2900      	cmp	r1, #0
 800e618:	ee10 3a10 	vmov	r3, s0
 800e61c:	ea4f 70d2 	mov.w	r0, r2, lsr #31
 800e620:	da21      	bge.n	800e666 <rintf+0x66>
 800e622:	f3c2 0316 	ubfx	r3, r2, #0, #23
 800e626:	425b      	negs	r3, r3
 800e628:	4921      	ldr	r1, [pc, #132]	; (800e6b0 <rintf+0xb0>)
 800e62a:	0a5b      	lsrs	r3, r3, #9
 800e62c:	0d12      	lsrs	r2, r2, #20
 800e62e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e632:	0512      	lsls	r2, r2, #20
 800e634:	4313      	orrs	r3, r2
 800e636:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800e63a:	ee07 3a90 	vmov	s15, r3
 800e63e:	edd1 6a00 	vldr	s13, [r1]
 800e642:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800e646:	ed8d 7a01 	vstr	s14, [sp, #4]
 800e64a:	eddd 7a01 	vldr	s15, [sp, #4]
 800e64e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e652:	ee17 3a90 	vmov	r3, s15
 800e656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e65a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800e65e:	ee00 3a10 	vmov	s0, r3
 800e662:	b002      	add	sp, #8
 800e664:	bd10      	pop	{r4, pc}
 800e666:	4a13      	ldr	r2, [pc, #76]	; (800e6b4 <rintf+0xb4>)
 800e668:	410a      	asrs	r2, r1
 800e66a:	4213      	tst	r3, r2
 800e66c:	d0f9      	beq.n	800e662 <rintf+0x62>
 800e66e:	0854      	lsrs	r4, r2, #1
 800e670:	ea13 0252 	ands.w	r2, r3, r2, lsr #1
 800e674:	d006      	beq.n	800e684 <rintf+0x84>
 800e676:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e67a:	ea23 0304 	bic.w	r3, r3, r4
 800e67e:	fa42 f101 	asr.w	r1, r2, r1
 800e682:	430b      	orrs	r3, r1
 800e684:	4a0a      	ldr	r2, [pc, #40]	; (800e6b0 <rintf+0xb0>)
 800e686:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800e68a:	ed90 7a00 	vldr	s14, [r0]
 800e68e:	ee07 3a90 	vmov	s15, r3
 800e692:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e696:	edcd 7a01 	vstr	s15, [sp, #4]
 800e69a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e69e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e6a2:	e7de      	b.n	800e662 <rintf+0x62>
 800e6a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e6a8:	d3db      	bcc.n	800e662 <rintf+0x62>
 800e6aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e6ae:	e7d8      	b.n	800e662 <rintf+0x62>
 800e6b0:	0813cf00 	.word	0x0813cf00
 800e6b4:	007fffff 	.word	0x007fffff

0800e6b8 <scalbnf>:
 800e6b8:	ee10 3a10 	vmov	r3, s0
 800e6bc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e6c0:	d025      	beq.n	800e70e <scalbnf+0x56>
 800e6c2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e6c6:	d302      	bcc.n	800e6ce <scalbnf+0x16>
 800e6c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e6cc:	4770      	bx	lr
 800e6ce:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e6d2:	d122      	bne.n	800e71a <scalbnf+0x62>
 800e6d4:	4b2a      	ldr	r3, [pc, #168]	; (800e780 <scalbnf+0xc8>)
 800e6d6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e784 <scalbnf+0xcc>
 800e6da:	4298      	cmp	r0, r3
 800e6dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e6e0:	db16      	blt.n	800e710 <scalbnf+0x58>
 800e6e2:	ee10 3a10 	vmov	r3, s0
 800e6e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e6ea:	3a19      	subs	r2, #25
 800e6ec:	4402      	add	r2, r0
 800e6ee:	2afe      	cmp	r2, #254	; 0xfe
 800e6f0:	dd15      	ble.n	800e71e <scalbnf+0x66>
 800e6f2:	ee10 3a10 	vmov	r3, s0
 800e6f6:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e788 <scalbnf+0xd0>
 800e6fa:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e78c <scalbnf+0xd4>
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	eeb0 7a67 	vmov.f32	s14, s15
 800e704:	bfb8      	it	lt
 800e706:	eef0 7a66 	vmovlt.f32	s15, s13
 800e70a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e70e:	4770      	bx	lr
 800e710:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e790 <scalbnf+0xd8>
 800e714:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e718:	4770      	bx	lr
 800e71a:	0dd2      	lsrs	r2, r2, #23
 800e71c:	e7e6      	b.n	800e6ec <scalbnf+0x34>
 800e71e:	2a00      	cmp	r2, #0
 800e720:	dd06      	ble.n	800e730 <scalbnf+0x78>
 800e722:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e726:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e72a:	ee00 3a10 	vmov	s0, r3
 800e72e:	4770      	bx	lr
 800e730:	f112 0f16 	cmn.w	r2, #22
 800e734:	da1a      	bge.n	800e76c <scalbnf+0xb4>
 800e736:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e73a:	4298      	cmp	r0, r3
 800e73c:	ee10 3a10 	vmov	r3, s0
 800e740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e744:	dd0a      	ble.n	800e75c <scalbnf+0xa4>
 800e746:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e788 <scalbnf+0xd0>
 800e74a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e78c <scalbnf+0xd4>
 800e74e:	eef0 7a40 	vmov.f32	s15, s0
 800e752:	2b00      	cmp	r3, #0
 800e754:	bf18      	it	ne
 800e756:	eeb0 0a47 	vmovne.f32	s0, s14
 800e75a:	e7db      	b.n	800e714 <scalbnf+0x5c>
 800e75c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e790 <scalbnf+0xd8>
 800e760:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e794 <scalbnf+0xdc>
 800e764:	eef0 7a40 	vmov.f32	s15, s0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	e7f3      	b.n	800e754 <scalbnf+0x9c>
 800e76c:	3219      	adds	r2, #25
 800e76e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e772:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e776:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e798 <scalbnf+0xe0>
 800e77a:	ee07 3a10 	vmov	s14, r3
 800e77e:	e7c4      	b.n	800e70a <scalbnf+0x52>
 800e780:	ffff3cb0 	.word	0xffff3cb0
 800e784:	4c000000 	.word	0x4c000000
 800e788:	7149f2ca 	.word	0x7149f2ca
 800e78c:	f149f2ca 	.word	0xf149f2ca
 800e790:	0da24260 	.word	0x0da24260
 800e794:	8da24260 	.word	0x8da24260
 800e798:	33000000 	.word	0x33000000

0800e79c <__errno>:
 800e79c:	4b01      	ldr	r3, [pc, #4]	; (800e7a4 <__errno+0x8>)
 800e79e:	6818      	ldr	r0, [r3, #0]
 800e7a0:	4770      	bx	lr
 800e7a2:	bf00      	nop
 800e7a4:	20000a88 	.word	0x20000a88

0800e7a8 <__libc_init_array>:
 800e7a8:	b570      	push	{r4, r5, r6, lr}
 800e7aa:	4d0d      	ldr	r5, [pc, #52]	; (800e7e0 <__libc_init_array+0x38>)
 800e7ac:	4c0d      	ldr	r4, [pc, #52]	; (800e7e4 <__libc_init_array+0x3c>)
 800e7ae:	1b64      	subs	r4, r4, r5
 800e7b0:	10a4      	asrs	r4, r4, #2
 800e7b2:	2600      	movs	r6, #0
 800e7b4:	42a6      	cmp	r6, r4
 800e7b6:	d109      	bne.n	800e7cc <__libc_init_array+0x24>
 800e7b8:	4d0b      	ldr	r5, [pc, #44]	; (800e7e8 <__libc_init_array+0x40>)
 800e7ba:	4c0c      	ldr	r4, [pc, #48]	; (800e7ec <__libc_init_array+0x44>)
 800e7bc:	f004 fde4 	bl	8013388 <_init>
 800e7c0:	1b64      	subs	r4, r4, r5
 800e7c2:	10a4      	asrs	r4, r4, #2
 800e7c4:	2600      	movs	r6, #0
 800e7c6:	42a6      	cmp	r6, r4
 800e7c8:	d105      	bne.n	800e7d6 <__libc_init_array+0x2e>
 800e7ca:	bd70      	pop	{r4, r5, r6, pc}
 800e7cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7d0:	4798      	blx	r3
 800e7d2:	3601      	adds	r6, #1
 800e7d4:	e7ee      	b.n	800e7b4 <__libc_init_array+0xc>
 800e7d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7da:	4798      	blx	r3
 800e7dc:	3601      	adds	r6, #1
 800e7de:	e7f2      	b.n	800e7c6 <__libc_init_array+0x1e>
 800e7e0:	0813d3c4 	.word	0x0813d3c4
 800e7e4:	0813d3c4 	.word	0x0813d3c4
 800e7e8:	0813d3c4 	.word	0x0813d3c4
 800e7ec:	0813d3c8 	.word	0x0813d3c8

0800e7f0 <malloc>:
 800e7f0:	4b02      	ldr	r3, [pc, #8]	; (800e7fc <malloc+0xc>)
 800e7f2:	4601      	mov	r1, r0
 800e7f4:	6818      	ldr	r0, [r3, #0]
 800e7f6:	f000 b869 	b.w	800e8cc <_malloc_r>
 800e7fa:	bf00      	nop
 800e7fc:	20000a88 	.word	0x20000a88

0800e800 <memcpy>:
 800e800:	440a      	add	r2, r1
 800e802:	4291      	cmp	r1, r2
 800e804:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e808:	d100      	bne.n	800e80c <memcpy+0xc>
 800e80a:	4770      	bx	lr
 800e80c:	b510      	push	{r4, lr}
 800e80e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e812:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e816:	4291      	cmp	r1, r2
 800e818:	d1f9      	bne.n	800e80e <memcpy+0xe>
 800e81a:	bd10      	pop	{r4, pc}

0800e81c <memset>:
 800e81c:	4402      	add	r2, r0
 800e81e:	4603      	mov	r3, r0
 800e820:	4293      	cmp	r3, r2
 800e822:	d100      	bne.n	800e826 <memset+0xa>
 800e824:	4770      	bx	lr
 800e826:	f803 1b01 	strb.w	r1, [r3], #1
 800e82a:	e7f9      	b.n	800e820 <memset+0x4>

0800e82c <_free_r>:
 800e82c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e82e:	2900      	cmp	r1, #0
 800e830:	d048      	beq.n	800e8c4 <_free_r+0x98>
 800e832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e836:	9001      	str	r0, [sp, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f1a1 0404 	sub.w	r4, r1, #4
 800e83e:	bfb8      	it	lt
 800e840:	18e4      	addlt	r4, r4, r3
 800e842:	f003 fc2d 	bl	80120a0 <__malloc_lock>
 800e846:	4a20      	ldr	r2, [pc, #128]	; (800e8c8 <_free_r+0x9c>)
 800e848:	9801      	ldr	r0, [sp, #4]
 800e84a:	6813      	ldr	r3, [r2, #0]
 800e84c:	4615      	mov	r5, r2
 800e84e:	b933      	cbnz	r3, 800e85e <_free_r+0x32>
 800e850:	6063      	str	r3, [r4, #4]
 800e852:	6014      	str	r4, [r2, #0]
 800e854:	b003      	add	sp, #12
 800e856:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e85a:	f003 bc27 	b.w	80120ac <__malloc_unlock>
 800e85e:	42a3      	cmp	r3, r4
 800e860:	d90b      	bls.n	800e87a <_free_r+0x4e>
 800e862:	6821      	ldr	r1, [r4, #0]
 800e864:	1862      	adds	r2, r4, r1
 800e866:	4293      	cmp	r3, r2
 800e868:	bf04      	itt	eq
 800e86a:	681a      	ldreq	r2, [r3, #0]
 800e86c:	685b      	ldreq	r3, [r3, #4]
 800e86e:	6063      	str	r3, [r4, #4]
 800e870:	bf04      	itt	eq
 800e872:	1852      	addeq	r2, r2, r1
 800e874:	6022      	streq	r2, [r4, #0]
 800e876:	602c      	str	r4, [r5, #0]
 800e878:	e7ec      	b.n	800e854 <_free_r+0x28>
 800e87a:	461a      	mov	r2, r3
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	b10b      	cbz	r3, 800e884 <_free_r+0x58>
 800e880:	42a3      	cmp	r3, r4
 800e882:	d9fa      	bls.n	800e87a <_free_r+0x4e>
 800e884:	6811      	ldr	r1, [r2, #0]
 800e886:	1855      	adds	r5, r2, r1
 800e888:	42a5      	cmp	r5, r4
 800e88a:	d10b      	bne.n	800e8a4 <_free_r+0x78>
 800e88c:	6824      	ldr	r4, [r4, #0]
 800e88e:	4421      	add	r1, r4
 800e890:	1854      	adds	r4, r2, r1
 800e892:	42a3      	cmp	r3, r4
 800e894:	6011      	str	r1, [r2, #0]
 800e896:	d1dd      	bne.n	800e854 <_free_r+0x28>
 800e898:	681c      	ldr	r4, [r3, #0]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	6053      	str	r3, [r2, #4]
 800e89e:	4421      	add	r1, r4
 800e8a0:	6011      	str	r1, [r2, #0]
 800e8a2:	e7d7      	b.n	800e854 <_free_r+0x28>
 800e8a4:	d902      	bls.n	800e8ac <_free_r+0x80>
 800e8a6:	230c      	movs	r3, #12
 800e8a8:	6003      	str	r3, [r0, #0]
 800e8aa:	e7d3      	b.n	800e854 <_free_r+0x28>
 800e8ac:	6825      	ldr	r5, [r4, #0]
 800e8ae:	1961      	adds	r1, r4, r5
 800e8b0:	428b      	cmp	r3, r1
 800e8b2:	bf04      	itt	eq
 800e8b4:	6819      	ldreq	r1, [r3, #0]
 800e8b6:	685b      	ldreq	r3, [r3, #4]
 800e8b8:	6063      	str	r3, [r4, #4]
 800e8ba:	bf04      	itt	eq
 800e8bc:	1949      	addeq	r1, r1, r5
 800e8be:	6021      	streq	r1, [r4, #0]
 800e8c0:	6054      	str	r4, [r2, #4]
 800e8c2:	e7c7      	b.n	800e854 <_free_r+0x28>
 800e8c4:	b003      	add	sp, #12
 800e8c6:	bd30      	pop	{r4, r5, pc}
 800e8c8:	20009ba0 	.word	0x20009ba0

0800e8cc <_malloc_r>:
 800e8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ce:	1ccd      	adds	r5, r1, #3
 800e8d0:	f025 0503 	bic.w	r5, r5, #3
 800e8d4:	3508      	adds	r5, #8
 800e8d6:	2d0c      	cmp	r5, #12
 800e8d8:	bf38      	it	cc
 800e8da:	250c      	movcc	r5, #12
 800e8dc:	2d00      	cmp	r5, #0
 800e8de:	4606      	mov	r6, r0
 800e8e0:	db01      	blt.n	800e8e6 <_malloc_r+0x1a>
 800e8e2:	42a9      	cmp	r1, r5
 800e8e4:	d903      	bls.n	800e8ee <_malloc_r+0x22>
 800e8e6:	230c      	movs	r3, #12
 800e8e8:	6033      	str	r3, [r6, #0]
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8ee:	f003 fbd7 	bl	80120a0 <__malloc_lock>
 800e8f2:	4921      	ldr	r1, [pc, #132]	; (800e978 <_malloc_r+0xac>)
 800e8f4:	680a      	ldr	r2, [r1, #0]
 800e8f6:	4614      	mov	r4, r2
 800e8f8:	b99c      	cbnz	r4, 800e922 <_malloc_r+0x56>
 800e8fa:	4f20      	ldr	r7, [pc, #128]	; (800e97c <_malloc_r+0xb0>)
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	b923      	cbnz	r3, 800e90a <_malloc_r+0x3e>
 800e900:	4621      	mov	r1, r4
 800e902:	4630      	mov	r0, r6
 800e904:	f000 ff44 	bl	800f790 <_sbrk_r>
 800e908:	6038      	str	r0, [r7, #0]
 800e90a:	4629      	mov	r1, r5
 800e90c:	4630      	mov	r0, r6
 800e90e:	f000 ff3f 	bl	800f790 <_sbrk_r>
 800e912:	1c43      	adds	r3, r0, #1
 800e914:	d123      	bne.n	800e95e <_malloc_r+0x92>
 800e916:	230c      	movs	r3, #12
 800e918:	6033      	str	r3, [r6, #0]
 800e91a:	4630      	mov	r0, r6
 800e91c:	f003 fbc6 	bl	80120ac <__malloc_unlock>
 800e920:	e7e3      	b.n	800e8ea <_malloc_r+0x1e>
 800e922:	6823      	ldr	r3, [r4, #0]
 800e924:	1b5b      	subs	r3, r3, r5
 800e926:	d417      	bmi.n	800e958 <_malloc_r+0x8c>
 800e928:	2b0b      	cmp	r3, #11
 800e92a:	d903      	bls.n	800e934 <_malloc_r+0x68>
 800e92c:	6023      	str	r3, [r4, #0]
 800e92e:	441c      	add	r4, r3
 800e930:	6025      	str	r5, [r4, #0]
 800e932:	e004      	b.n	800e93e <_malloc_r+0x72>
 800e934:	6863      	ldr	r3, [r4, #4]
 800e936:	42a2      	cmp	r2, r4
 800e938:	bf0c      	ite	eq
 800e93a:	600b      	streq	r3, [r1, #0]
 800e93c:	6053      	strne	r3, [r2, #4]
 800e93e:	4630      	mov	r0, r6
 800e940:	f003 fbb4 	bl	80120ac <__malloc_unlock>
 800e944:	f104 000b 	add.w	r0, r4, #11
 800e948:	1d23      	adds	r3, r4, #4
 800e94a:	f020 0007 	bic.w	r0, r0, #7
 800e94e:	1ac2      	subs	r2, r0, r3
 800e950:	d0cc      	beq.n	800e8ec <_malloc_r+0x20>
 800e952:	1a1b      	subs	r3, r3, r0
 800e954:	50a3      	str	r3, [r4, r2]
 800e956:	e7c9      	b.n	800e8ec <_malloc_r+0x20>
 800e958:	4622      	mov	r2, r4
 800e95a:	6864      	ldr	r4, [r4, #4]
 800e95c:	e7cc      	b.n	800e8f8 <_malloc_r+0x2c>
 800e95e:	1cc4      	adds	r4, r0, #3
 800e960:	f024 0403 	bic.w	r4, r4, #3
 800e964:	42a0      	cmp	r0, r4
 800e966:	d0e3      	beq.n	800e930 <_malloc_r+0x64>
 800e968:	1a21      	subs	r1, r4, r0
 800e96a:	4630      	mov	r0, r6
 800e96c:	f000 ff10 	bl	800f790 <_sbrk_r>
 800e970:	3001      	adds	r0, #1
 800e972:	d1dd      	bne.n	800e930 <_malloc_r+0x64>
 800e974:	e7cf      	b.n	800e916 <_malloc_r+0x4a>
 800e976:	bf00      	nop
 800e978:	20009ba0 	.word	0x20009ba0
 800e97c:	20009ba4 	.word	0x20009ba4

0800e980 <__cvt>:
 800e980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e984:	ec55 4b10 	vmov	r4, r5, d0
 800e988:	2d00      	cmp	r5, #0
 800e98a:	460e      	mov	r6, r1
 800e98c:	4619      	mov	r1, r3
 800e98e:	462b      	mov	r3, r5
 800e990:	bfbb      	ittet	lt
 800e992:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e996:	461d      	movlt	r5, r3
 800e998:	2300      	movge	r3, #0
 800e99a:	232d      	movlt	r3, #45	; 0x2d
 800e99c:	700b      	strb	r3, [r1, #0]
 800e99e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e9a4:	4691      	mov	r9, r2
 800e9a6:	f023 0820 	bic.w	r8, r3, #32
 800e9aa:	bfbc      	itt	lt
 800e9ac:	4622      	movlt	r2, r4
 800e9ae:	4614      	movlt	r4, r2
 800e9b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e9b4:	d005      	beq.n	800e9c2 <__cvt+0x42>
 800e9b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e9ba:	d100      	bne.n	800e9be <__cvt+0x3e>
 800e9bc:	3601      	adds	r6, #1
 800e9be:	2102      	movs	r1, #2
 800e9c0:	e000      	b.n	800e9c4 <__cvt+0x44>
 800e9c2:	2103      	movs	r1, #3
 800e9c4:	ab03      	add	r3, sp, #12
 800e9c6:	9301      	str	r3, [sp, #4]
 800e9c8:	ab02      	add	r3, sp, #8
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	ec45 4b10 	vmov	d0, r4, r5
 800e9d0:	4653      	mov	r3, sl
 800e9d2:	4632      	mov	r2, r6
 800e9d4:	f001 ffd4 	bl	8010980 <_dtoa_r>
 800e9d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e9dc:	4607      	mov	r7, r0
 800e9de:	d102      	bne.n	800e9e6 <__cvt+0x66>
 800e9e0:	f019 0f01 	tst.w	r9, #1
 800e9e4:	d022      	beq.n	800ea2c <__cvt+0xac>
 800e9e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e9ea:	eb07 0906 	add.w	r9, r7, r6
 800e9ee:	d110      	bne.n	800ea12 <__cvt+0x92>
 800e9f0:	783b      	ldrb	r3, [r7, #0]
 800e9f2:	2b30      	cmp	r3, #48	; 0x30
 800e9f4:	d10a      	bne.n	800ea0c <__cvt+0x8c>
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	f7f2 f873 	bl	8000ae8 <__aeabi_dcmpeq>
 800ea02:	b918      	cbnz	r0, 800ea0c <__cvt+0x8c>
 800ea04:	f1c6 0601 	rsb	r6, r6, #1
 800ea08:	f8ca 6000 	str.w	r6, [sl]
 800ea0c:	f8da 3000 	ldr.w	r3, [sl]
 800ea10:	4499      	add	r9, r3
 800ea12:	2200      	movs	r2, #0
 800ea14:	2300      	movs	r3, #0
 800ea16:	4620      	mov	r0, r4
 800ea18:	4629      	mov	r1, r5
 800ea1a:	f7f2 f865 	bl	8000ae8 <__aeabi_dcmpeq>
 800ea1e:	b108      	cbz	r0, 800ea24 <__cvt+0xa4>
 800ea20:	f8cd 900c 	str.w	r9, [sp, #12]
 800ea24:	2230      	movs	r2, #48	; 0x30
 800ea26:	9b03      	ldr	r3, [sp, #12]
 800ea28:	454b      	cmp	r3, r9
 800ea2a:	d307      	bcc.n	800ea3c <__cvt+0xbc>
 800ea2c:	9b03      	ldr	r3, [sp, #12]
 800ea2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ea30:	1bdb      	subs	r3, r3, r7
 800ea32:	4638      	mov	r0, r7
 800ea34:	6013      	str	r3, [r2, #0]
 800ea36:	b004      	add	sp, #16
 800ea38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea3c:	1c59      	adds	r1, r3, #1
 800ea3e:	9103      	str	r1, [sp, #12]
 800ea40:	701a      	strb	r2, [r3, #0]
 800ea42:	e7f0      	b.n	800ea26 <__cvt+0xa6>

0800ea44 <__exponent>:
 800ea44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea46:	4603      	mov	r3, r0
 800ea48:	2900      	cmp	r1, #0
 800ea4a:	bfb8      	it	lt
 800ea4c:	4249      	neglt	r1, r1
 800ea4e:	f803 2b02 	strb.w	r2, [r3], #2
 800ea52:	bfb4      	ite	lt
 800ea54:	222d      	movlt	r2, #45	; 0x2d
 800ea56:	222b      	movge	r2, #43	; 0x2b
 800ea58:	2909      	cmp	r1, #9
 800ea5a:	7042      	strb	r2, [r0, #1]
 800ea5c:	dd2a      	ble.n	800eab4 <__exponent+0x70>
 800ea5e:	f10d 0407 	add.w	r4, sp, #7
 800ea62:	46a4      	mov	ip, r4
 800ea64:	270a      	movs	r7, #10
 800ea66:	46a6      	mov	lr, r4
 800ea68:	460a      	mov	r2, r1
 800ea6a:	fb91 f6f7 	sdiv	r6, r1, r7
 800ea6e:	fb07 1516 	mls	r5, r7, r6, r1
 800ea72:	3530      	adds	r5, #48	; 0x30
 800ea74:	2a63      	cmp	r2, #99	; 0x63
 800ea76:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ea7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ea7e:	4631      	mov	r1, r6
 800ea80:	dcf1      	bgt.n	800ea66 <__exponent+0x22>
 800ea82:	3130      	adds	r1, #48	; 0x30
 800ea84:	f1ae 0502 	sub.w	r5, lr, #2
 800ea88:	f804 1c01 	strb.w	r1, [r4, #-1]
 800ea8c:	1c44      	adds	r4, r0, #1
 800ea8e:	4629      	mov	r1, r5
 800ea90:	4561      	cmp	r1, ip
 800ea92:	d30a      	bcc.n	800eaaa <__exponent+0x66>
 800ea94:	f10d 0209 	add.w	r2, sp, #9
 800ea98:	eba2 020e 	sub.w	r2, r2, lr
 800ea9c:	4565      	cmp	r5, ip
 800ea9e:	bf88      	it	hi
 800eaa0:	2200      	movhi	r2, #0
 800eaa2:	4413      	add	r3, r2
 800eaa4:	1a18      	subs	r0, r3, r0
 800eaa6:	b003      	add	sp, #12
 800eaa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eaae:	f804 2f01 	strb.w	r2, [r4, #1]!
 800eab2:	e7ed      	b.n	800ea90 <__exponent+0x4c>
 800eab4:	2330      	movs	r3, #48	; 0x30
 800eab6:	3130      	adds	r1, #48	; 0x30
 800eab8:	7083      	strb	r3, [r0, #2]
 800eaba:	70c1      	strb	r1, [r0, #3]
 800eabc:	1d03      	adds	r3, r0, #4
 800eabe:	e7f1      	b.n	800eaa4 <__exponent+0x60>

0800eac0 <_printf_float>:
 800eac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eac4:	ed2d 8b02 	vpush	{d8}
 800eac8:	b08d      	sub	sp, #52	; 0x34
 800eaca:	460c      	mov	r4, r1
 800eacc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ead0:	4616      	mov	r6, r2
 800ead2:	461f      	mov	r7, r3
 800ead4:	4605      	mov	r5, r0
 800ead6:	f003 fa65 	bl	8011fa4 <_localeconv_r>
 800eada:	f8d0 a000 	ldr.w	sl, [r0]
 800eade:	4650      	mov	r0, sl
 800eae0:	f7f1 fb86 	bl	80001f0 <strlen>
 800eae4:	2300      	movs	r3, #0
 800eae6:	930a      	str	r3, [sp, #40]	; 0x28
 800eae8:	6823      	ldr	r3, [r4, #0]
 800eaea:	9305      	str	r3, [sp, #20]
 800eaec:	f8d8 3000 	ldr.w	r3, [r8]
 800eaf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eaf4:	3307      	adds	r3, #7
 800eaf6:	f023 0307 	bic.w	r3, r3, #7
 800eafa:	f103 0208 	add.w	r2, r3, #8
 800eafe:	f8c8 2000 	str.w	r2, [r8]
 800eb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800eb0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800eb0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eb12:	9307      	str	r3, [sp, #28]
 800eb14:	f8cd 8018 	str.w	r8, [sp, #24]
 800eb18:	ee08 0a10 	vmov	s16, r0
 800eb1c:	4b9f      	ldr	r3, [pc, #636]	; (800ed9c <_printf_float+0x2dc>)
 800eb1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb26:	f7f2 f811 	bl	8000b4c <__aeabi_dcmpun>
 800eb2a:	bb88      	cbnz	r0, 800eb90 <_printf_float+0xd0>
 800eb2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb30:	4b9a      	ldr	r3, [pc, #616]	; (800ed9c <_printf_float+0x2dc>)
 800eb32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb36:	f7f1 ffeb 	bl	8000b10 <__aeabi_dcmple>
 800eb3a:	bb48      	cbnz	r0, 800eb90 <_printf_float+0xd0>
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	2300      	movs	r3, #0
 800eb40:	4640      	mov	r0, r8
 800eb42:	4649      	mov	r1, r9
 800eb44:	f7f1 ffda 	bl	8000afc <__aeabi_dcmplt>
 800eb48:	b110      	cbz	r0, 800eb50 <_printf_float+0x90>
 800eb4a:	232d      	movs	r3, #45	; 0x2d
 800eb4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb50:	4b93      	ldr	r3, [pc, #588]	; (800eda0 <_printf_float+0x2e0>)
 800eb52:	4894      	ldr	r0, [pc, #592]	; (800eda4 <_printf_float+0x2e4>)
 800eb54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800eb58:	bf94      	ite	ls
 800eb5a:	4698      	movls	r8, r3
 800eb5c:	4680      	movhi	r8, r0
 800eb5e:	2303      	movs	r3, #3
 800eb60:	6123      	str	r3, [r4, #16]
 800eb62:	9b05      	ldr	r3, [sp, #20]
 800eb64:	f023 0204 	bic.w	r2, r3, #4
 800eb68:	6022      	str	r2, [r4, #0]
 800eb6a:	f04f 0900 	mov.w	r9, #0
 800eb6e:	9700      	str	r7, [sp, #0]
 800eb70:	4633      	mov	r3, r6
 800eb72:	aa0b      	add	r2, sp, #44	; 0x2c
 800eb74:	4621      	mov	r1, r4
 800eb76:	4628      	mov	r0, r5
 800eb78:	f000 f9d8 	bl	800ef2c <_printf_common>
 800eb7c:	3001      	adds	r0, #1
 800eb7e:	f040 8090 	bne.w	800eca2 <_printf_float+0x1e2>
 800eb82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb86:	b00d      	add	sp, #52	; 0x34
 800eb88:	ecbd 8b02 	vpop	{d8}
 800eb8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb90:	4642      	mov	r2, r8
 800eb92:	464b      	mov	r3, r9
 800eb94:	4640      	mov	r0, r8
 800eb96:	4649      	mov	r1, r9
 800eb98:	f7f1 ffd8 	bl	8000b4c <__aeabi_dcmpun>
 800eb9c:	b140      	cbz	r0, 800ebb0 <_printf_float+0xf0>
 800eb9e:	464b      	mov	r3, r9
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	bfbc      	itt	lt
 800eba4:	232d      	movlt	r3, #45	; 0x2d
 800eba6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ebaa:	487f      	ldr	r0, [pc, #508]	; (800eda8 <_printf_float+0x2e8>)
 800ebac:	4b7f      	ldr	r3, [pc, #508]	; (800edac <_printf_float+0x2ec>)
 800ebae:	e7d1      	b.n	800eb54 <_printf_float+0x94>
 800ebb0:	6863      	ldr	r3, [r4, #4]
 800ebb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ebb6:	9206      	str	r2, [sp, #24]
 800ebb8:	1c5a      	adds	r2, r3, #1
 800ebba:	d13f      	bne.n	800ec3c <_printf_float+0x17c>
 800ebbc:	2306      	movs	r3, #6
 800ebbe:	6063      	str	r3, [r4, #4]
 800ebc0:	9b05      	ldr	r3, [sp, #20]
 800ebc2:	6861      	ldr	r1, [r4, #4]
 800ebc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ebc8:	2300      	movs	r3, #0
 800ebca:	9303      	str	r3, [sp, #12]
 800ebcc:	ab0a      	add	r3, sp, #40	; 0x28
 800ebce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ebd2:	ab09      	add	r3, sp, #36	; 0x24
 800ebd4:	ec49 8b10 	vmov	d0, r8, r9
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	6022      	str	r2, [r4, #0]
 800ebdc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	f7ff fecd 	bl	800e980 <__cvt>
 800ebe6:	9b06      	ldr	r3, [sp, #24]
 800ebe8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebea:	2b47      	cmp	r3, #71	; 0x47
 800ebec:	4680      	mov	r8, r0
 800ebee:	d108      	bne.n	800ec02 <_printf_float+0x142>
 800ebf0:	1cc8      	adds	r0, r1, #3
 800ebf2:	db02      	blt.n	800ebfa <_printf_float+0x13a>
 800ebf4:	6863      	ldr	r3, [r4, #4]
 800ebf6:	4299      	cmp	r1, r3
 800ebf8:	dd41      	ble.n	800ec7e <_printf_float+0x1be>
 800ebfa:	f1ab 0b02 	sub.w	fp, fp, #2
 800ebfe:	fa5f fb8b 	uxtb.w	fp, fp
 800ec02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ec06:	d820      	bhi.n	800ec4a <_printf_float+0x18a>
 800ec08:	3901      	subs	r1, #1
 800ec0a:	465a      	mov	r2, fp
 800ec0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ec10:	9109      	str	r1, [sp, #36]	; 0x24
 800ec12:	f7ff ff17 	bl	800ea44 <__exponent>
 800ec16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec18:	1813      	adds	r3, r2, r0
 800ec1a:	2a01      	cmp	r2, #1
 800ec1c:	4681      	mov	r9, r0
 800ec1e:	6123      	str	r3, [r4, #16]
 800ec20:	dc02      	bgt.n	800ec28 <_printf_float+0x168>
 800ec22:	6822      	ldr	r2, [r4, #0]
 800ec24:	07d2      	lsls	r2, r2, #31
 800ec26:	d501      	bpl.n	800ec2c <_printf_float+0x16c>
 800ec28:	3301      	adds	r3, #1
 800ec2a:	6123      	str	r3, [r4, #16]
 800ec2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d09c      	beq.n	800eb6e <_printf_float+0xae>
 800ec34:	232d      	movs	r3, #45	; 0x2d
 800ec36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec3a:	e798      	b.n	800eb6e <_printf_float+0xae>
 800ec3c:	9a06      	ldr	r2, [sp, #24]
 800ec3e:	2a47      	cmp	r2, #71	; 0x47
 800ec40:	d1be      	bne.n	800ebc0 <_printf_float+0x100>
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d1bc      	bne.n	800ebc0 <_printf_float+0x100>
 800ec46:	2301      	movs	r3, #1
 800ec48:	e7b9      	b.n	800ebbe <_printf_float+0xfe>
 800ec4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ec4e:	d118      	bne.n	800ec82 <_printf_float+0x1c2>
 800ec50:	2900      	cmp	r1, #0
 800ec52:	6863      	ldr	r3, [r4, #4]
 800ec54:	dd0b      	ble.n	800ec6e <_printf_float+0x1ae>
 800ec56:	6121      	str	r1, [r4, #16]
 800ec58:	b913      	cbnz	r3, 800ec60 <_printf_float+0x1a0>
 800ec5a:	6822      	ldr	r2, [r4, #0]
 800ec5c:	07d0      	lsls	r0, r2, #31
 800ec5e:	d502      	bpl.n	800ec66 <_printf_float+0x1a6>
 800ec60:	3301      	adds	r3, #1
 800ec62:	440b      	add	r3, r1
 800ec64:	6123      	str	r3, [r4, #16]
 800ec66:	65a1      	str	r1, [r4, #88]	; 0x58
 800ec68:	f04f 0900 	mov.w	r9, #0
 800ec6c:	e7de      	b.n	800ec2c <_printf_float+0x16c>
 800ec6e:	b913      	cbnz	r3, 800ec76 <_printf_float+0x1b6>
 800ec70:	6822      	ldr	r2, [r4, #0]
 800ec72:	07d2      	lsls	r2, r2, #31
 800ec74:	d501      	bpl.n	800ec7a <_printf_float+0x1ba>
 800ec76:	3302      	adds	r3, #2
 800ec78:	e7f4      	b.n	800ec64 <_printf_float+0x1a4>
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	e7f2      	b.n	800ec64 <_printf_float+0x1a4>
 800ec7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ec82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec84:	4299      	cmp	r1, r3
 800ec86:	db05      	blt.n	800ec94 <_printf_float+0x1d4>
 800ec88:	6823      	ldr	r3, [r4, #0]
 800ec8a:	6121      	str	r1, [r4, #16]
 800ec8c:	07d8      	lsls	r0, r3, #31
 800ec8e:	d5ea      	bpl.n	800ec66 <_printf_float+0x1a6>
 800ec90:	1c4b      	adds	r3, r1, #1
 800ec92:	e7e7      	b.n	800ec64 <_printf_float+0x1a4>
 800ec94:	2900      	cmp	r1, #0
 800ec96:	bfd4      	ite	le
 800ec98:	f1c1 0202 	rsble	r2, r1, #2
 800ec9c:	2201      	movgt	r2, #1
 800ec9e:	4413      	add	r3, r2
 800eca0:	e7e0      	b.n	800ec64 <_printf_float+0x1a4>
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	055a      	lsls	r2, r3, #21
 800eca6:	d407      	bmi.n	800ecb8 <_printf_float+0x1f8>
 800eca8:	6923      	ldr	r3, [r4, #16]
 800ecaa:	4642      	mov	r2, r8
 800ecac:	4631      	mov	r1, r6
 800ecae:	4628      	mov	r0, r5
 800ecb0:	47b8      	blx	r7
 800ecb2:	3001      	adds	r0, #1
 800ecb4:	d12c      	bne.n	800ed10 <_printf_float+0x250>
 800ecb6:	e764      	b.n	800eb82 <_printf_float+0xc2>
 800ecb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ecbc:	f240 80e0 	bls.w	800ee80 <_printf_float+0x3c0>
 800ecc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	f7f1 ff0e 	bl	8000ae8 <__aeabi_dcmpeq>
 800eccc:	2800      	cmp	r0, #0
 800ecce:	d034      	beq.n	800ed3a <_printf_float+0x27a>
 800ecd0:	4a37      	ldr	r2, [pc, #220]	; (800edb0 <_printf_float+0x2f0>)
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	4631      	mov	r1, r6
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	47b8      	blx	r7
 800ecda:	3001      	adds	r0, #1
 800ecdc:	f43f af51 	beq.w	800eb82 <_printf_float+0xc2>
 800ece0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ece4:	429a      	cmp	r2, r3
 800ece6:	db02      	blt.n	800ecee <_printf_float+0x22e>
 800ece8:	6823      	ldr	r3, [r4, #0]
 800ecea:	07d8      	lsls	r0, r3, #31
 800ecec:	d510      	bpl.n	800ed10 <_printf_float+0x250>
 800ecee:	ee18 3a10 	vmov	r3, s16
 800ecf2:	4652      	mov	r2, sl
 800ecf4:	4631      	mov	r1, r6
 800ecf6:	4628      	mov	r0, r5
 800ecf8:	47b8      	blx	r7
 800ecfa:	3001      	adds	r0, #1
 800ecfc:	f43f af41 	beq.w	800eb82 <_printf_float+0xc2>
 800ed00:	f04f 0800 	mov.w	r8, #0
 800ed04:	f104 091a 	add.w	r9, r4, #26
 800ed08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed0a:	3b01      	subs	r3, #1
 800ed0c:	4543      	cmp	r3, r8
 800ed0e:	dc09      	bgt.n	800ed24 <_printf_float+0x264>
 800ed10:	6823      	ldr	r3, [r4, #0]
 800ed12:	079b      	lsls	r3, r3, #30
 800ed14:	f100 8105 	bmi.w	800ef22 <_printf_float+0x462>
 800ed18:	68e0      	ldr	r0, [r4, #12]
 800ed1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed1c:	4298      	cmp	r0, r3
 800ed1e:	bfb8      	it	lt
 800ed20:	4618      	movlt	r0, r3
 800ed22:	e730      	b.n	800eb86 <_printf_float+0xc6>
 800ed24:	2301      	movs	r3, #1
 800ed26:	464a      	mov	r2, r9
 800ed28:	4631      	mov	r1, r6
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	47b8      	blx	r7
 800ed2e:	3001      	adds	r0, #1
 800ed30:	f43f af27 	beq.w	800eb82 <_printf_float+0xc2>
 800ed34:	f108 0801 	add.w	r8, r8, #1
 800ed38:	e7e6      	b.n	800ed08 <_printf_float+0x248>
 800ed3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	dc39      	bgt.n	800edb4 <_printf_float+0x2f4>
 800ed40:	4a1b      	ldr	r2, [pc, #108]	; (800edb0 <_printf_float+0x2f0>)
 800ed42:	2301      	movs	r3, #1
 800ed44:	4631      	mov	r1, r6
 800ed46:	4628      	mov	r0, r5
 800ed48:	47b8      	blx	r7
 800ed4a:	3001      	adds	r0, #1
 800ed4c:	f43f af19 	beq.w	800eb82 <_printf_float+0xc2>
 800ed50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ed54:	4313      	orrs	r3, r2
 800ed56:	d102      	bne.n	800ed5e <_printf_float+0x29e>
 800ed58:	6823      	ldr	r3, [r4, #0]
 800ed5a:	07d9      	lsls	r1, r3, #31
 800ed5c:	d5d8      	bpl.n	800ed10 <_printf_float+0x250>
 800ed5e:	ee18 3a10 	vmov	r3, s16
 800ed62:	4652      	mov	r2, sl
 800ed64:	4631      	mov	r1, r6
 800ed66:	4628      	mov	r0, r5
 800ed68:	47b8      	blx	r7
 800ed6a:	3001      	adds	r0, #1
 800ed6c:	f43f af09 	beq.w	800eb82 <_printf_float+0xc2>
 800ed70:	f04f 0900 	mov.w	r9, #0
 800ed74:	f104 0a1a 	add.w	sl, r4, #26
 800ed78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed7a:	425b      	negs	r3, r3
 800ed7c:	454b      	cmp	r3, r9
 800ed7e:	dc01      	bgt.n	800ed84 <_printf_float+0x2c4>
 800ed80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed82:	e792      	b.n	800ecaa <_printf_float+0x1ea>
 800ed84:	2301      	movs	r3, #1
 800ed86:	4652      	mov	r2, sl
 800ed88:	4631      	mov	r1, r6
 800ed8a:	4628      	mov	r0, r5
 800ed8c:	47b8      	blx	r7
 800ed8e:	3001      	adds	r0, #1
 800ed90:	f43f aef7 	beq.w	800eb82 <_printf_float+0xc2>
 800ed94:	f109 0901 	add.w	r9, r9, #1
 800ed98:	e7ee      	b.n	800ed78 <_printf_float+0x2b8>
 800ed9a:	bf00      	nop
 800ed9c:	7fefffff 	.word	0x7fefffff
 800eda0:	0813cf0c 	.word	0x0813cf0c
 800eda4:	0813cf10 	.word	0x0813cf10
 800eda8:	0813cf18 	.word	0x0813cf18
 800edac:	0813cf14 	.word	0x0813cf14
 800edb0:	0813cf1c 	.word	0x0813cf1c
 800edb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800edb8:	429a      	cmp	r2, r3
 800edba:	bfa8      	it	ge
 800edbc:	461a      	movge	r2, r3
 800edbe:	2a00      	cmp	r2, #0
 800edc0:	4691      	mov	r9, r2
 800edc2:	dc37      	bgt.n	800ee34 <_printf_float+0x374>
 800edc4:	f04f 0b00 	mov.w	fp, #0
 800edc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800edcc:	f104 021a 	add.w	r2, r4, #26
 800edd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800edd2:	9305      	str	r3, [sp, #20]
 800edd4:	eba3 0309 	sub.w	r3, r3, r9
 800edd8:	455b      	cmp	r3, fp
 800edda:	dc33      	bgt.n	800ee44 <_printf_float+0x384>
 800eddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ede0:	429a      	cmp	r2, r3
 800ede2:	db3b      	blt.n	800ee5c <_printf_float+0x39c>
 800ede4:	6823      	ldr	r3, [r4, #0]
 800ede6:	07da      	lsls	r2, r3, #31
 800ede8:	d438      	bmi.n	800ee5c <_printf_float+0x39c>
 800edea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800edec:	9b05      	ldr	r3, [sp, #20]
 800edee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800edf0:	1ad3      	subs	r3, r2, r3
 800edf2:	eba2 0901 	sub.w	r9, r2, r1
 800edf6:	4599      	cmp	r9, r3
 800edf8:	bfa8      	it	ge
 800edfa:	4699      	movge	r9, r3
 800edfc:	f1b9 0f00 	cmp.w	r9, #0
 800ee00:	dc35      	bgt.n	800ee6e <_printf_float+0x3ae>
 800ee02:	f04f 0800 	mov.w	r8, #0
 800ee06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ee0a:	f104 0a1a 	add.w	sl, r4, #26
 800ee0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ee12:	1a9b      	subs	r3, r3, r2
 800ee14:	eba3 0309 	sub.w	r3, r3, r9
 800ee18:	4543      	cmp	r3, r8
 800ee1a:	f77f af79 	ble.w	800ed10 <_printf_float+0x250>
 800ee1e:	2301      	movs	r3, #1
 800ee20:	4652      	mov	r2, sl
 800ee22:	4631      	mov	r1, r6
 800ee24:	4628      	mov	r0, r5
 800ee26:	47b8      	blx	r7
 800ee28:	3001      	adds	r0, #1
 800ee2a:	f43f aeaa 	beq.w	800eb82 <_printf_float+0xc2>
 800ee2e:	f108 0801 	add.w	r8, r8, #1
 800ee32:	e7ec      	b.n	800ee0e <_printf_float+0x34e>
 800ee34:	4613      	mov	r3, r2
 800ee36:	4631      	mov	r1, r6
 800ee38:	4642      	mov	r2, r8
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	47b8      	blx	r7
 800ee3e:	3001      	adds	r0, #1
 800ee40:	d1c0      	bne.n	800edc4 <_printf_float+0x304>
 800ee42:	e69e      	b.n	800eb82 <_printf_float+0xc2>
 800ee44:	2301      	movs	r3, #1
 800ee46:	4631      	mov	r1, r6
 800ee48:	4628      	mov	r0, r5
 800ee4a:	9205      	str	r2, [sp, #20]
 800ee4c:	47b8      	blx	r7
 800ee4e:	3001      	adds	r0, #1
 800ee50:	f43f ae97 	beq.w	800eb82 <_printf_float+0xc2>
 800ee54:	9a05      	ldr	r2, [sp, #20]
 800ee56:	f10b 0b01 	add.w	fp, fp, #1
 800ee5a:	e7b9      	b.n	800edd0 <_printf_float+0x310>
 800ee5c:	ee18 3a10 	vmov	r3, s16
 800ee60:	4652      	mov	r2, sl
 800ee62:	4631      	mov	r1, r6
 800ee64:	4628      	mov	r0, r5
 800ee66:	47b8      	blx	r7
 800ee68:	3001      	adds	r0, #1
 800ee6a:	d1be      	bne.n	800edea <_printf_float+0x32a>
 800ee6c:	e689      	b.n	800eb82 <_printf_float+0xc2>
 800ee6e:	9a05      	ldr	r2, [sp, #20]
 800ee70:	464b      	mov	r3, r9
 800ee72:	4442      	add	r2, r8
 800ee74:	4631      	mov	r1, r6
 800ee76:	4628      	mov	r0, r5
 800ee78:	47b8      	blx	r7
 800ee7a:	3001      	adds	r0, #1
 800ee7c:	d1c1      	bne.n	800ee02 <_printf_float+0x342>
 800ee7e:	e680      	b.n	800eb82 <_printf_float+0xc2>
 800ee80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee82:	2a01      	cmp	r2, #1
 800ee84:	dc01      	bgt.n	800ee8a <_printf_float+0x3ca>
 800ee86:	07db      	lsls	r3, r3, #31
 800ee88:	d538      	bpl.n	800eefc <_printf_float+0x43c>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	4642      	mov	r2, r8
 800ee8e:	4631      	mov	r1, r6
 800ee90:	4628      	mov	r0, r5
 800ee92:	47b8      	blx	r7
 800ee94:	3001      	adds	r0, #1
 800ee96:	f43f ae74 	beq.w	800eb82 <_printf_float+0xc2>
 800ee9a:	ee18 3a10 	vmov	r3, s16
 800ee9e:	4652      	mov	r2, sl
 800eea0:	4631      	mov	r1, r6
 800eea2:	4628      	mov	r0, r5
 800eea4:	47b8      	blx	r7
 800eea6:	3001      	adds	r0, #1
 800eea8:	f43f ae6b 	beq.w	800eb82 <_printf_float+0xc2>
 800eeac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	f7f1 fe18 	bl	8000ae8 <__aeabi_dcmpeq>
 800eeb8:	b9d8      	cbnz	r0, 800eef2 <_printf_float+0x432>
 800eeba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eebc:	f108 0201 	add.w	r2, r8, #1
 800eec0:	3b01      	subs	r3, #1
 800eec2:	4631      	mov	r1, r6
 800eec4:	4628      	mov	r0, r5
 800eec6:	47b8      	blx	r7
 800eec8:	3001      	adds	r0, #1
 800eeca:	d10e      	bne.n	800eeea <_printf_float+0x42a>
 800eecc:	e659      	b.n	800eb82 <_printf_float+0xc2>
 800eece:	2301      	movs	r3, #1
 800eed0:	4652      	mov	r2, sl
 800eed2:	4631      	mov	r1, r6
 800eed4:	4628      	mov	r0, r5
 800eed6:	47b8      	blx	r7
 800eed8:	3001      	adds	r0, #1
 800eeda:	f43f ae52 	beq.w	800eb82 <_printf_float+0xc2>
 800eede:	f108 0801 	add.w	r8, r8, #1
 800eee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eee4:	3b01      	subs	r3, #1
 800eee6:	4543      	cmp	r3, r8
 800eee8:	dcf1      	bgt.n	800eece <_printf_float+0x40e>
 800eeea:	464b      	mov	r3, r9
 800eeec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eef0:	e6dc      	b.n	800ecac <_printf_float+0x1ec>
 800eef2:	f04f 0800 	mov.w	r8, #0
 800eef6:	f104 0a1a 	add.w	sl, r4, #26
 800eefa:	e7f2      	b.n	800eee2 <_printf_float+0x422>
 800eefc:	2301      	movs	r3, #1
 800eefe:	4642      	mov	r2, r8
 800ef00:	e7df      	b.n	800eec2 <_printf_float+0x402>
 800ef02:	2301      	movs	r3, #1
 800ef04:	464a      	mov	r2, r9
 800ef06:	4631      	mov	r1, r6
 800ef08:	4628      	mov	r0, r5
 800ef0a:	47b8      	blx	r7
 800ef0c:	3001      	adds	r0, #1
 800ef0e:	f43f ae38 	beq.w	800eb82 <_printf_float+0xc2>
 800ef12:	f108 0801 	add.w	r8, r8, #1
 800ef16:	68e3      	ldr	r3, [r4, #12]
 800ef18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ef1a:	1a5b      	subs	r3, r3, r1
 800ef1c:	4543      	cmp	r3, r8
 800ef1e:	dcf0      	bgt.n	800ef02 <_printf_float+0x442>
 800ef20:	e6fa      	b.n	800ed18 <_printf_float+0x258>
 800ef22:	f04f 0800 	mov.w	r8, #0
 800ef26:	f104 0919 	add.w	r9, r4, #25
 800ef2a:	e7f4      	b.n	800ef16 <_printf_float+0x456>

0800ef2c <_printf_common>:
 800ef2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef30:	4616      	mov	r6, r2
 800ef32:	4699      	mov	r9, r3
 800ef34:	688a      	ldr	r2, [r1, #8]
 800ef36:	690b      	ldr	r3, [r1, #16]
 800ef38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	bfb8      	it	lt
 800ef40:	4613      	movlt	r3, r2
 800ef42:	6033      	str	r3, [r6, #0]
 800ef44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef48:	4607      	mov	r7, r0
 800ef4a:	460c      	mov	r4, r1
 800ef4c:	b10a      	cbz	r2, 800ef52 <_printf_common+0x26>
 800ef4e:	3301      	adds	r3, #1
 800ef50:	6033      	str	r3, [r6, #0]
 800ef52:	6823      	ldr	r3, [r4, #0]
 800ef54:	0699      	lsls	r1, r3, #26
 800ef56:	bf42      	ittt	mi
 800ef58:	6833      	ldrmi	r3, [r6, #0]
 800ef5a:	3302      	addmi	r3, #2
 800ef5c:	6033      	strmi	r3, [r6, #0]
 800ef5e:	6825      	ldr	r5, [r4, #0]
 800ef60:	f015 0506 	ands.w	r5, r5, #6
 800ef64:	d106      	bne.n	800ef74 <_printf_common+0x48>
 800ef66:	f104 0a19 	add.w	sl, r4, #25
 800ef6a:	68e3      	ldr	r3, [r4, #12]
 800ef6c:	6832      	ldr	r2, [r6, #0]
 800ef6e:	1a9b      	subs	r3, r3, r2
 800ef70:	42ab      	cmp	r3, r5
 800ef72:	dc26      	bgt.n	800efc2 <_printf_common+0x96>
 800ef74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef78:	1e13      	subs	r3, r2, #0
 800ef7a:	6822      	ldr	r2, [r4, #0]
 800ef7c:	bf18      	it	ne
 800ef7e:	2301      	movne	r3, #1
 800ef80:	0692      	lsls	r2, r2, #26
 800ef82:	d42b      	bmi.n	800efdc <_printf_common+0xb0>
 800ef84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef88:	4649      	mov	r1, r9
 800ef8a:	4638      	mov	r0, r7
 800ef8c:	47c0      	blx	r8
 800ef8e:	3001      	adds	r0, #1
 800ef90:	d01e      	beq.n	800efd0 <_printf_common+0xa4>
 800ef92:	6823      	ldr	r3, [r4, #0]
 800ef94:	68e5      	ldr	r5, [r4, #12]
 800ef96:	6832      	ldr	r2, [r6, #0]
 800ef98:	f003 0306 	and.w	r3, r3, #6
 800ef9c:	2b04      	cmp	r3, #4
 800ef9e:	bf08      	it	eq
 800efa0:	1aad      	subeq	r5, r5, r2
 800efa2:	68a3      	ldr	r3, [r4, #8]
 800efa4:	6922      	ldr	r2, [r4, #16]
 800efa6:	bf0c      	ite	eq
 800efa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800efac:	2500      	movne	r5, #0
 800efae:	4293      	cmp	r3, r2
 800efb0:	bfc4      	itt	gt
 800efb2:	1a9b      	subgt	r3, r3, r2
 800efb4:	18ed      	addgt	r5, r5, r3
 800efb6:	2600      	movs	r6, #0
 800efb8:	341a      	adds	r4, #26
 800efba:	42b5      	cmp	r5, r6
 800efbc:	d11a      	bne.n	800eff4 <_printf_common+0xc8>
 800efbe:	2000      	movs	r0, #0
 800efc0:	e008      	b.n	800efd4 <_printf_common+0xa8>
 800efc2:	2301      	movs	r3, #1
 800efc4:	4652      	mov	r2, sl
 800efc6:	4649      	mov	r1, r9
 800efc8:	4638      	mov	r0, r7
 800efca:	47c0      	blx	r8
 800efcc:	3001      	adds	r0, #1
 800efce:	d103      	bne.n	800efd8 <_printf_common+0xac>
 800efd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efd8:	3501      	adds	r5, #1
 800efda:	e7c6      	b.n	800ef6a <_printf_common+0x3e>
 800efdc:	18e1      	adds	r1, r4, r3
 800efde:	1c5a      	adds	r2, r3, #1
 800efe0:	2030      	movs	r0, #48	; 0x30
 800efe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efe6:	4422      	add	r2, r4
 800efe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eff0:	3302      	adds	r3, #2
 800eff2:	e7c7      	b.n	800ef84 <_printf_common+0x58>
 800eff4:	2301      	movs	r3, #1
 800eff6:	4622      	mov	r2, r4
 800eff8:	4649      	mov	r1, r9
 800effa:	4638      	mov	r0, r7
 800effc:	47c0      	blx	r8
 800effe:	3001      	adds	r0, #1
 800f000:	d0e6      	beq.n	800efd0 <_printf_common+0xa4>
 800f002:	3601      	adds	r6, #1
 800f004:	e7d9      	b.n	800efba <_printf_common+0x8e>
	...

0800f008 <_printf_i>:
 800f008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f00c:	460c      	mov	r4, r1
 800f00e:	4691      	mov	r9, r2
 800f010:	7e27      	ldrb	r7, [r4, #24]
 800f012:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f014:	2f78      	cmp	r7, #120	; 0x78
 800f016:	4680      	mov	r8, r0
 800f018:	469a      	mov	sl, r3
 800f01a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f01e:	d807      	bhi.n	800f030 <_printf_i+0x28>
 800f020:	2f62      	cmp	r7, #98	; 0x62
 800f022:	d80a      	bhi.n	800f03a <_printf_i+0x32>
 800f024:	2f00      	cmp	r7, #0
 800f026:	f000 80d8 	beq.w	800f1da <_printf_i+0x1d2>
 800f02a:	2f58      	cmp	r7, #88	; 0x58
 800f02c:	f000 80a3 	beq.w	800f176 <_printf_i+0x16e>
 800f030:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f038:	e03a      	b.n	800f0b0 <_printf_i+0xa8>
 800f03a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f03e:	2b15      	cmp	r3, #21
 800f040:	d8f6      	bhi.n	800f030 <_printf_i+0x28>
 800f042:	a001      	add	r0, pc, #4	; (adr r0, 800f048 <_printf_i+0x40>)
 800f044:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f048:	0800f0a1 	.word	0x0800f0a1
 800f04c:	0800f0b5 	.word	0x0800f0b5
 800f050:	0800f031 	.word	0x0800f031
 800f054:	0800f031 	.word	0x0800f031
 800f058:	0800f031 	.word	0x0800f031
 800f05c:	0800f031 	.word	0x0800f031
 800f060:	0800f0b5 	.word	0x0800f0b5
 800f064:	0800f031 	.word	0x0800f031
 800f068:	0800f031 	.word	0x0800f031
 800f06c:	0800f031 	.word	0x0800f031
 800f070:	0800f031 	.word	0x0800f031
 800f074:	0800f1c1 	.word	0x0800f1c1
 800f078:	0800f0e5 	.word	0x0800f0e5
 800f07c:	0800f1a3 	.word	0x0800f1a3
 800f080:	0800f031 	.word	0x0800f031
 800f084:	0800f031 	.word	0x0800f031
 800f088:	0800f1e3 	.word	0x0800f1e3
 800f08c:	0800f031 	.word	0x0800f031
 800f090:	0800f0e5 	.word	0x0800f0e5
 800f094:	0800f031 	.word	0x0800f031
 800f098:	0800f031 	.word	0x0800f031
 800f09c:	0800f1ab 	.word	0x0800f1ab
 800f0a0:	680b      	ldr	r3, [r1, #0]
 800f0a2:	1d1a      	adds	r2, r3, #4
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	600a      	str	r2, [r1, #0]
 800f0a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f0ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e0a3      	b.n	800f1fc <_printf_i+0x1f4>
 800f0b4:	6825      	ldr	r5, [r4, #0]
 800f0b6:	6808      	ldr	r0, [r1, #0]
 800f0b8:	062e      	lsls	r6, r5, #24
 800f0ba:	f100 0304 	add.w	r3, r0, #4
 800f0be:	d50a      	bpl.n	800f0d6 <_printf_i+0xce>
 800f0c0:	6805      	ldr	r5, [r0, #0]
 800f0c2:	600b      	str	r3, [r1, #0]
 800f0c4:	2d00      	cmp	r5, #0
 800f0c6:	da03      	bge.n	800f0d0 <_printf_i+0xc8>
 800f0c8:	232d      	movs	r3, #45	; 0x2d
 800f0ca:	426d      	negs	r5, r5
 800f0cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0d0:	485e      	ldr	r0, [pc, #376]	; (800f24c <_printf_i+0x244>)
 800f0d2:	230a      	movs	r3, #10
 800f0d4:	e019      	b.n	800f10a <_printf_i+0x102>
 800f0d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f0da:	6805      	ldr	r5, [r0, #0]
 800f0dc:	600b      	str	r3, [r1, #0]
 800f0de:	bf18      	it	ne
 800f0e0:	b22d      	sxthne	r5, r5
 800f0e2:	e7ef      	b.n	800f0c4 <_printf_i+0xbc>
 800f0e4:	680b      	ldr	r3, [r1, #0]
 800f0e6:	6825      	ldr	r5, [r4, #0]
 800f0e8:	1d18      	adds	r0, r3, #4
 800f0ea:	6008      	str	r0, [r1, #0]
 800f0ec:	0628      	lsls	r0, r5, #24
 800f0ee:	d501      	bpl.n	800f0f4 <_printf_i+0xec>
 800f0f0:	681d      	ldr	r5, [r3, #0]
 800f0f2:	e002      	b.n	800f0fa <_printf_i+0xf2>
 800f0f4:	0669      	lsls	r1, r5, #25
 800f0f6:	d5fb      	bpl.n	800f0f0 <_printf_i+0xe8>
 800f0f8:	881d      	ldrh	r5, [r3, #0]
 800f0fa:	4854      	ldr	r0, [pc, #336]	; (800f24c <_printf_i+0x244>)
 800f0fc:	2f6f      	cmp	r7, #111	; 0x6f
 800f0fe:	bf0c      	ite	eq
 800f100:	2308      	moveq	r3, #8
 800f102:	230a      	movne	r3, #10
 800f104:	2100      	movs	r1, #0
 800f106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f10a:	6866      	ldr	r6, [r4, #4]
 800f10c:	60a6      	str	r6, [r4, #8]
 800f10e:	2e00      	cmp	r6, #0
 800f110:	bfa2      	ittt	ge
 800f112:	6821      	ldrge	r1, [r4, #0]
 800f114:	f021 0104 	bicge.w	r1, r1, #4
 800f118:	6021      	strge	r1, [r4, #0]
 800f11a:	b90d      	cbnz	r5, 800f120 <_printf_i+0x118>
 800f11c:	2e00      	cmp	r6, #0
 800f11e:	d04d      	beq.n	800f1bc <_printf_i+0x1b4>
 800f120:	4616      	mov	r6, r2
 800f122:	fbb5 f1f3 	udiv	r1, r5, r3
 800f126:	fb03 5711 	mls	r7, r3, r1, r5
 800f12a:	5dc7      	ldrb	r7, [r0, r7]
 800f12c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f130:	462f      	mov	r7, r5
 800f132:	42bb      	cmp	r3, r7
 800f134:	460d      	mov	r5, r1
 800f136:	d9f4      	bls.n	800f122 <_printf_i+0x11a>
 800f138:	2b08      	cmp	r3, #8
 800f13a:	d10b      	bne.n	800f154 <_printf_i+0x14c>
 800f13c:	6823      	ldr	r3, [r4, #0]
 800f13e:	07df      	lsls	r7, r3, #31
 800f140:	d508      	bpl.n	800f154 <_printf_i+0x14c>
 800f142:	6923      	ldr	r3, [r4, #16]
 800f144:	6861      	ldr	r1, [r4, #4]
 800f146:	4299      	cmp	r1, r3
 800f148:	bfde      	ittt	le
 800f14a:	2330      	movle	r3, #48	; 0x30
 800f14c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f150:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800f154:	1b92      	subs	r2, r2, r6
 800f156:	6122      	str	r2, [r4, #16]
 800f158:	f8cd a000 	str.w	sl, [sp]
 800f15c:	464b      	mov	r3, r9
 800f15e:	aa03      	add	r2, sp, #12
 800f160:	4621      	mov	r1, r4
 800f162:	4640      	mov	r0, r8
 800f164:	f7ff fee2 	bl	800ef2c <_printf_common>
 800f168:	3001      	adds	r0, #1
 800f16a:	d14c      	bne.n	800f206 <_printf_i+0x1fe>
 800f16c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f170:	b004      	add	sp, #16
 800f172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f176:	4835      	ldr	r0, [pc, #212]	; (800f24c <_printf_i+0x244>)
 800f178:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f17c:	6823      	ldr	r3, [r4, #0]
 800f17e:	680e      	ldr	r6, [r1, #0]
 800f180:	061f      	lsls	r7, r3, #24
 800f182:	f856 5b04 	ldr.w	r5, [r6], #4
 800f186:	600e      	str	r6, [r1, #0]
 800f188:	d514      	bpl.n	800f1b4 <_printf_i+0x1ac>
 800f18a:	07d9      	lsls	r1, r3, #31
 800f18c:	bf44      	itt	mi
 800f18e:	f043 0320 	orrmi.w	r3, r3, #32
 800f192:	6023      	strmi	r3, [r4, #0]
 800f194:	b91d      	cbnz	r5, 800f19e <_printf_i+0x196>
 800f196:	6823      	ldr	r3, [r4, #0]
 800f198:	f023 0320 	bic.w	r3, r3, #32
 800f19c:	6023      	str	r3, [r4, #0]
 800f19e:	2310      	movs	r3, #16
 800f1a0:	e7b0      	b.n	800f104 <_printf_i+0xfc>
 800f1a2:	6823      	ldr	r3, [r4, #0]
 800f1a4:	f043 0320 	orr.w	r3, r3, #32
 800f1a8:	6023      	str	r3, [r4, #0]
 800f1aa:	2378      	movs	r3, #120	; 0x78
 800f1ac:	4828      	ldr	r0, [pc, #160]	; (800f250 <_printf_i+0x248>)
 800f1ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f1b2:	e7e3      	b.n	800f17c <_printf_i+0x174>
 800f1b4:	065e      	lsls	r6, r3, #25
 800f1b6:	bf48      	it	mi
 800f1b8:	b2ad      	uxthmi	r5, r5
 800f1ba:	e7e6      	b.n	800f18a <_printf_i+0x182>
 800f1bc:	4616      	mov	r6, r2
 800f1be:	e7bb      	b.n	800f138 <_printf_i+0x130>
 800f1c0:	680b      	ldr	r3, [r1, #0]
 800f1c2:	6826      	ldr	r6, [r4, #0]
 800f1c4:	6960      	ldr	r0, [r4, #20]
 800f1c6:	1d1d      	adds	r5, r3, #4
 800f1c8:	600d      	str	r5, [r1, #0]
 800f1ca:	0635      	lsls	r5, r6, #24
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	d501      	bpl.n	800f1d4 <_printf_i+0x1cc>
 800f1d0:	6018      	str	r0, [r3, #0]
 800f1d2:	e002      	b.n	800f1da <_printf_i+0x1d2>
 800f1d4:	0671      	lsls	r1, r6, #25
 800f1d6:	d5fb      	bpl.n	800f1d0 <_printf_i+0x1c8>
 800f1d8:	8018      	strh	r0, [r3, #0]
 800f1da:	2300      	movs	r3, #0
 800f1dc:	6123      	str	r3, [r4, #16]
 800f1de:	4616      	mov	r6, r2
 800f1e0:	e7ba      	b.n	800f158 <_printf_i+0x150>
 800f1e2:	680b      	ldr	r3, [r1, #0]
 800f1e4:	1d1a      	adds	r2, r3, #4
 800f1e6:	600a      	str	r2, [r1, #0]
 800f1e8:	681e      	ldr	r6, [r3, #0]
 800f1ea:	6862      	ldr	r2, [r4, #4]
 800f1ec:	2100      	movs	r1, #0
 800f1ee:	4630      	mov	r0, r6
 800f1f0:	f7f1 f806 	bl	8000200 <memchr>
 800f1f4:	b108      	cbz	r0, 800f1fa <_printf_i+0x1f2>
 800f1f6:	1b80      	subs	r0, r0, r6
 800f1f8:	6060      	str	r0, [r4, #4]
 800f1fa:	6863      	ldr	r3, [r4, #4]
 800f1fc:	6123      	str	r3, [r4, #16]
 800f1fe:	2300      	movs	r3, #0
 800f200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f204:	e7a8      	b.n	800f158 <_printf_i+0x150>
 800f206:	6923      	ldr	r3, [r4, #16]
 800f208:	4632      	mov	r2, r6
 800f20a:	4649      	mov	r1, r9
 800f20c:	4640      	mov	r0, r8
 800f20e:	47d0      	blx	sl
 800f210:	3001      	adds	r0, #1
 800f212:	d0ab      	beq.n	800f16c <_printf_i+0x164>
 800f214:	6823      	ldr	r3, [r4, #0]
 800f216:	079b      	lsls	r3, r3, #30
 800f218:	d413      	bmi.n	800f242 <_printf_i+0x23a>
 800f21a:	68e0      	ldr	r0, [r4, #12]
 800f21c:	9b03      	ldr	r3, [sp, #12]
 800f21e:	4298      	cmp	r0, r3
 800f220:	bfb8      	it	lt
 800f222:	4618      	movlt	r0, r3
 800f224:	e7a4      	b.n	800f170 <_printf_i+0x168>
 800f226:	2301      	movs	r3, #1
 800f228:	4632      	mov	r2, r6
 800f22a:	4649      	mov	r1, r9
 800f22c:	4640      	mov	r0, r8
 800f22e:	47d0      	blx	sl
 800f230:	3001      	adds	r0, #1
 800f232:	d09b      	beq.n	800f16c <_printf_i+0x164>
 800f234:	3501      	adds	r5, #1
 800f236:	68e3      	ldr	r3, [r4, #12]
 800f238:	9903      	ldr	r1, [sp, #12]
 800f23a:	1a5b      	subs	r3, r3, r1
 800f23c:	42ab      	cmp	r3, r5
 800f23e:	dcf2      	bgt.n	800f226 <_printf_i+0x21e>
 800f240:	e7eb      	b.n	800f21a <_printf_i+0x212>
 800f242:	2500      	movs	r5, #0
 800f244:	f104 0619 	add.w	r6, r4, #25
 800f248:	e7f5      	b.n	800f236 <_printf_i+0x22e>
 800f24a:	bf00      	nop
 800f24c:	0813cf1e 	.word	0x0813cf1e
 800f250:	0813cf2f 	.word	0x0813cf2f

0800f254 <_scanf_float>:
 800f254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f258:	b087      	sub	sp, #28
 800f25a:	4617      	mov	r7, r2
 800f25c:	9303      	str	r3, [sp, #12]
 800f25e:	688b      	ldr	r3, [r1, #8]
 800f260:	1e5a      	subs	r2, r3, #1
 800f262:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800f266:	bf83      	ittte	hi
 800f268:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800f26c:	195b      	addhi	r3, r3, r5
 800f26e:	9302      	strhi	r3, [sp, #8]
 800f270:	2300      	movls	r3, #0
 800f272:	bf86      	itte	hi
 800f274:	f240 135d 	movwhi	r3, #349	; 0x15d
 800f278:	608b      	strhi	r3, [r1, #8]
 800f27a:	9302      	strls	r3, [sp, #8]
 800f27c:	680b      	ldr	r3, [r1, #0]
 800f27e:	468b      	mov	fp, r1
 800f280:	2500      	movs	r5, #0
 800f282:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800f286:	f84b 3b1c 	str.w	r3, [fp], #28
 800f28a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800f28e:	4680      	mov	r8, r0
 800f290:	460c      	mov	r4, r1
 800f292:	465e      	mov	r6, fp
 800f294:	46aa      	mov	sl, r5
 800f296:	46a9      	mov	r9, r5
 800f298:	9501      	str	r5, [sp, #4]
 800f29a:	68a2      	ldr	r2, [r4, #8]
 800f29c:	b152      	cbz	r2, 800f2b4 <_scanf_float+0x60>
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	2b4e      	cmp	r3, #78	; 0x4e
 800f2a4:	d864      	bhi.n	800f370 <_scanf_float+0x11c>
 800f2a6:	2b40      	cmp	r3, #64	; 0x40
 800f2a8:	d83c      	bhi.n	800f324 <_scanf_float+0xd0>
 800f2aa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800f2ae:	b2c8      	uxtb	r0, r1
 800f2b0:	280e      	cmp	r0, #14
 800f2b2:	d93a      	bls.n	800f32a <_scanf_float+0xd6>
 800f2b4:	f1b9 0f00 	cmp.w	r9, #0
 800f2b8:	d003      	beq.n	800f2c2 <_scanf_float+0x6e>
 800f2ba:	6823      	ldr	r3, [r4, #0]
 800f2bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2c0:	6023      	str	r3, [r4, #0]
 800f2c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f2c6:	f1ba 0f01 	cmp.w	sl, #1
 800f2ca:	f200 8113 	bhi.w	800f4f4 <_scanf_float+0x2a0>
 800f2ce:	455e      	cmp	r6, fp
 800f2d0:	f200 8105 	bhi.w	800f4de <_scanf_float+0x28a>
 800f2d4:	2501      	movs	r5, #1
 800f2d6:	4628      	mov	r0, r5
 800f2d8:	b007      	add	sp, #28
 800f2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2de:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800f2e2:	2a0d      	cmp	r2, #13
 800f2e4:	d8e6      	bhi.n	800f2b4 <_scanf_float+0x60>
 800f2e6:	a101      	add	r1, pc, #4	; (adr r1, 800f2ec <_scanf_float+0x98>)
 800f2e8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f2ec:	0800f42b 	.word	0x0800f42b
 800f2f0:	0800f2b5 	.word	0x0800f2b5
 800f2f4:	0800f2b5 	.word	0x0800f2b5
 800f2f8:	0800f2b5 	.word	0x0800f2b5
 800f2fc:	0800f48b 	.word	0x0800f48b
 800f300:	0800f463 	.word	0x0800f463
 800f304:	0800f2b5 	.word	0x0800f2b5
 800f308:	0800f2b5 	.word	0x0800f2b5
 800f30c:	0800f439 	.word	0x0800f439
 800f310:	0800f2b5 	.word	0x0800f2b5
 800f314:	0800f2b5 	.word	0x0800f2b5
 800f318:	0800f2b5 	.word	0x0800f2b5
 800f31c:	0800f2b5 	.word	0x0800f2b5
 800f320:	0800f3f1 	.word	0x0800f3f1
 800f324:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800f328:	e7db      	b.n	800f2e2 <_scanf_float+0x8e>
 800f32a:	290e      	cmp	r1, #14
 800f32c:	d8c2      	bhi.n	800f2b4 <_scanf_float+0x60>
 800f32e:	a001      	add	r0, pc, #4	; (adr r0, 800f334 <_scanf_float+0xe0>)
 800f330:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800f334:	0800f3e3 	.word	0x0800f3e3
 800f338:	0800f2b5 	.word	0x0800f2b5
 800f33c:	0800f3e3 	.word	0x0800f3e3
 800f340:	0800f477 	.word	0x0800f477
 800f344:	0800f2b5 	.word	0x0800f2b5
 800f348:	0800f391 	.word	0x0800f391
 800f34c:	0800f3cd 	.word	0x0800f3cd
 800f350:	0800f3cd 	.word	0x0800f3cd
 800f354:	0800f3cd 	.word	0x0800f3cd
 800f358:	0800f3cd 	.word	0x0800f3cd
 800f35c:	0800f3cd 	.word	0x0800f3cd
 800f360:	0800f3cd 	.word	0x0800f3cd
 800f364:	0800f3cd 	.word	0x0800f3cd
 800f368:	0800f3cd 	.word	0x0800f3cd
 800f36c:	0800f3cd 	.word	0x0800f3cd
 800f370:	2b6e      	cmp	r3, #110	; 0x6e
 800f372:	d809      	bhi.n	800f388 <_scanf_float+0x134>
 800f374:	2b60      	cmp	r3, #96	; 0x60
 800f376:	d8b2      	bhi.n	800f2de <_scanf_float+0x8a>
 800f378:	2b54      	cmp	r3, #84	; 0x54
 800f37a:	d077      	beq.n	800f46c <_scanf_float+0x218>
 800f37c:	2b59      	cmp	r3, #89	; 0x59
 800f37e:	d199      	bne.n	800f2b4 <_scanf_float+0x60>
 800f380:	2d07      	cmp	r5, #7
 800f382:	d197      	bne.n	800f2b4 <_scanf_float+0x60>
 800f384:	2508      	movs	r5, #8
 800f386:	e029      	b.n	800f3dc <_scanf_float+0x188>
 800f388:	2b74      	cmp	r3, #116	; 0x74
 800f38a:	d06f      	beq.n	800f46c <_scanf_float+0x218>
 800f38c:	2b79      	cmp	r3, #121	; 0x79
 800f38e:	e7f6      	b.n	800f37e <_scanf_float+0x12a>
 800f390:	6821      	ldr	r1, [r4, #0]
 800f392:	05c8      	lsls	r0, r1, #23
 800f394:	d51a      	bpl.n	800f3cc <_scanf_float+0x178>
 800f396:	9b02      	ldr	r3, [sp, #8]
 800f398:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f39c:	6021      	str	r1, [r4, #0]
 800f39e:	f109 0901 	add.w	r9, r9, #1
 800f3a2:	b11b      	cbz	r3, 800f3ac <_scanf_float+0x158>
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	3201      	adds	r2, #1
 800f3a8:	9302      	str	r3, [sp, #8]
 800f3aa:	60a2      	str	r2, [r4, #8]
 800f3ac:	68a3      	ldr	r3, [r4, #8]
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	60a3      	str	r3, [r4, #8]
 800f3b2:	6923      	ldr	r3, [r4, #16]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	6123      	str	r3, [r4, #16]
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	3b01      	subs	r3, #1
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	607b      	str	r3, [r7, #4]
 800f3c0:	f340 8084 	ble.w	800f4cc <_scanf_float+0x278>
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	603b      	str	r3, [r7, #0]
 800f3ca:	e766      	b.n	800f29a <_scanf_float+0x46>
 800f3cc:	eb1a 0f05 	cmn.w	sl, r5
 800f3d0:	f47f af70 	bne.w	800f2b4 <_scanf_float+0x60>
 800f3d4:	6822      	ldr	r2, [r4, #0]
 800f3d6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800f3da:	6022      	str	r2, [r4, #0]
 800f3dc:	f806 3b01 	strb.w	r3, [r6], #1
 800f3e0:	e7e4      	b.n	800f3ac <_scanf_float+0x158>
 800f3e2:	6822      	ldr	r2, [r4, #0]
 800f3e4:	0610      	lsls	r0, r2, #24
 800f3e6:	f57f af65 	bpl.w	800f2b4 <_scanf_float+0x60>
 800f3ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800f3ee:	e7f4      	b.n	800f3da <_scanf_float+0x186>
 800f3f0:	f1ba 0f00 	cmp.w	sl, #0
 800f3f4:	d10e      	bne.n	800f414 <_scanf_float+0x1c0>
 800f3f6:	f1b9 0f00 	cmp.w	r9, #0
 800f3fa:	d10e      	bne.n	800f41a <_scanf_float+0x1c6>
 800f3fc:	6822      	ldr	r2, [r4, #0]
 800f3fe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f402:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f406:	d108      	bne.n	800f41a <_scanf_float+0x1c6>
 800f408:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f40c:	6022      	str	r2, [r4, #0]
 800f40e:	f04f 0a01 	mov.w	sl, #1
 800f412:	e7e3      	b.n	800f3dc <_scanf_float+0x188>
 800f414:	f1ba 0f02 	cmp.w	sl, #2
 800f418:	d055      	beq.n	800f4c6 <_scanf_float+0x272>
 800f41a:	2d01      	cmp	r5, #1
 800f41c:	d002      	beq.n	800f424 <_scanf_float+0x1d0>
 800f41e:	2d04      	cmp	r5, #4
 800f420:	f47f af48 	bne.w	800f2b4 <_scanf_float+0x60>
 800f424:	3501      	adds	r5, #1
 800f426:	b2ed      	uxtb	r5, r5
 800f428:	e7d8      	b.n	800f3dc <_scanf_float+0x188>
 800f42a:	f1ba 0f01 	cmp.w	sl, #1
 800f42e:	f47f af41 	bne.w	800f2b4 <_scanf_float+0x60>
 800f432:	f04f 0a02 	mov.w	sl, #2
 800f436:	e7d1      	b.n	800f3dc <_scanf_float+0x188>
 800f438:	b97d      	cbnz	r5, 800f45a <_scanf_float+0x206>
 800f43a:	f1b9 0f00 	cmp.w	r9, #0
 800f43e:	f47f af3c 	bne.w	800f2ba <_scanf_float+0x66>
 800f442:	6822      	ldr	r2, [r4, #0]
 800f444:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800f448:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f44c:	f47f af39 	bne.w	800f2c2 <_scanf_float+0x6e>
 800f450:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f454:	6022      	str	r2, [r4, #0]
 800f456:	2501      	movs	r5, #1
 800f458:	e7c0      	b.n	800f3dc <_scanf_float+0x188>
 800f45a:	2d03      	cmp	r5, #3
 800f45c:	d0e2      	beq.n	800f424 <_scanf_float+0x1d0>
 800f45e:	2d05      	cmp	r5, #5
 800f460:	e7de      	b.n	800f420 <_scanf_float+0x1cc>
 800f462:	2d02      	cmp	r5, #2
 800f464:	f47f af26 	bne.w	800f2b4 <_scanf_float+0x60>
 800f468:	2503      	movs	r5, #3
 800f46a:	e7b7      	b.n	800f3dc <_scanf_float+0x188>
 800f46c:	2d06      	cmp	r5, #6
 800f46e:	f47f af21 	bne.w	800f2b4 <_scanf_float+0x60>
 800f472:	2507      	movs	r5, #7
 800f474:	e7b2      	b.n	800f3dc <_scanf_float+0x188>
 800f476:	6822      	ldr	r2, [r4, #0]
 800f478:	0591      	lsls	r1, r2, #22
 800f47a:	f57f af1b 	bpl.w	800f2b4 <_scanf_float+0x60>
 800f47e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f482:	6022      	str	r2, [r4, #0]
 800f484:	f8cd 9004 	str.w	r9, [sp, #4]
 800f488:	e7a8      	b.n	800f3dc <_scanf_float+0x188>
 800f48a:	6822      	ldr	r2, [r4, #0]
 800f48c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f490:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f494:	d006      	beq.n	800f4a4 <_scanf_float+0x250>
 800f496:	0550      	lsls	r0, r2, #21
 800f498:	f57f af0c 	bpl.w	800f2b4 <_scanf_float+0x60>
 800f49c:	f1b9 0f00 	cmp.w	r9, #0
 800f4a0:	f43f af0f 	beq.w	800f2c2 <_scanf_float+0x6e>
 800f4a4:	0591      	lsls	r1, r2, #22
 800f4a6:	bf58      	it	pl
 800f4a8:	9901      	ldrpl	r1, [sp, #4]
 800f4aa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f4ae:	bf58      	it	pl
 800f4b0:	eba9 0101 	subpl.w	r1, r9, r1
 800f4b4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f4b8:	bf58      	it	pl
 800f4ba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f4be:	6022      	str	r2, [r4, #0]
 800f4c0:	f04f 0900 	mov.w	r9, #0
 800f4c4:	e78a      	b.n	800f3dc <_scanf_float+0x188>
 800f4c6:	f04f 0a03 	mov.w	sl, #3
 800f4ca:	e787      	b.n	800f3dc <_scanf_float+0x188>
 800f4cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f4d0:	4639      	mov	r1, r7
 800f4d2:	4640      	mov	r0, r8
 800f4d4:	4798      	blx	r3
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	f43f aedf 	beq.w	800f29a <_scanf_float+0x46>
 800f4dc:	e6ea      	b.n	800f2b4 <_scanf_float+0x60>
 800f4de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f4e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f4e6:	463a      	mov	r2, r7
 800f4e8:	4640      	mov	r0, r8
 800f4ea:	4798      	blx	r3
 800f4ec:	6923      	ldr	r3, [r4, #16]
 800f4ee:	3b01      	subs	r3, #1
 800f4f0:	6123      	str	r3, [r4, #16]
 800f4f2:	e6ec      	b.n	800f2ce <_scanf_float+0x7a>
 800f4f4:	1e6b      	subs	r3, r5, #1
 800f4f6:	2b06      	cmp	r3, #6
 800f4f8:	d825      	bhi.n	800f546 <_scanf_float+0x2f2>
 800f4fa:	2d02      	cmp	r5, #2
 800f4fc:	d836      	bhi.n	800f56c <_scanf_float+0x318>
 800f4fe:	455e      	cmp	r6, fp
 800f500:	f67f aee8 	bls.w	800f2d4 <_scanf_float+0x80>
 800f504:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f508:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f50c:	463a      	mov	r2, r7
 800f50e:	4640      	mov	r0, r8
 800f510:	4798      	blx	r3
 800f512:	6923      	ldr	r3, [r4, #16]
 800f514:	3b01      	subs	r3, #1
 800f516:	6123      	str	r3, [r4, #16]
 800f518:	e7f1      	b.n	800f4fe <_scanf_float+0x2aa>
 800f51a:	9802      	ldr	r0, [sp, #8]
 800f51c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f520:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f524:	9002      	str	r0, [sp, #8]
 800f526:	463a      	mov	r2, r7
 800f528:	4640      	mov	r0, r8
 800f52a:	4798      	blx	r3
 800f52c:	6923      	ldr	r3, [r4, #16]
 800f52e:	3b01      	subs	r3, #1
 800f530:	6123      	str	r3, [r4, #16]
 800f532:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f536:	fa5f fa8a 	uxtb.w	sl, sl
 800f53a:	f1ba 0f02 	cmp.w	sl, #2
 800f53e:	d1ec      	bne.n	800f51a <_scanf_float+0x2c6>
 800f540:	3d03      	subs	r5, #3
 800f542:	b2ed      	uxtb	r5, r5
 800f544:	1b76      	subs	r6, r6, r5
 800f546:	6823      	ldr	r3, [r4, #0]
 800f548:	05da      	lsls	r2, r3, #23
 800f54a:	d52f      	bpl.n	800f5ac <_scanf_float+0x358>
 800f54c:	055b      	lsls	r3, r3, #21
 800f54e:	d510      	bpl.n	800f572 <_scanf_float+0x31e>
 800f550:	455e      	cmp	r6, fp
 800f552:	f67f aebf 	bls.w	800f2d4 <_scanf_float+0x80>
 800f556:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f55a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f55e:	463a      	mov	r2, r7
 800f560:	4640      	mov	r0, r8
 800f562:	4798      	blx	r3
 800f564:	6923      	ldr	r3, [r4, #16]
 800f566:	3b01      	subs	r3, #1
 800f568:	6123      	str	r3, [r4, #16]
 800f56a:	e7f1      	b.n	800f550 <_scanf_float+0x2fc>
 800f56c:	46aa      	mov	sl, r5
 800f56e:	9602      	str	r6, [sp, #8]
 800f570:	e7df      	b.n	800f532 <_scanf_float+0x2de>
 800f572:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f576:	6923      	ldr	r3, [r4, #16]
 800f578:	2965      	cmp	r1, #101	; 0x65
 800f57a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800f57e:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800f582:	6123      	str	r3, [r4, #16]
 800f584:	d00c      	beq.n	800f5a0 <_scanf_float+0x34c>
 800f586:	2945      	cmp	r1, #69	; 0x45
 800f588:	d00a      	beq.n	800f5a0 <_scanf_float+0x34c>
 800f58a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f58e:	463a      	mov	r2, r7
 800f590:	4640      	mov	r0, r8
 800f592:	4798      	blx	r3
 800f594:	6923      	ldr	r3, [r4, #16]
 800f596:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f59a:	3b01      	subs	r3, #1
 800f59c:	1eb5      	subs	r5, r6, #2
 800f59e:	6123      	str	r3, [r4, #16]
 800f5a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f5a4:	463a      	mov	r2, r7
 800f5a6:	4640      	mov	r0, r8
 800f5a8:	4798      	blx	r3
 800f5aa:	462e      	mov	r6, r5
 800f5ac:	6825      	ldr	r5, [r4, #0]
 800f5ae:	f015 0510 	ands.w	r5, r5, #16
 800f5b2:	d158      	bne.n	800f666 <_scanf_float+0x412>
 800f5b4:	7035      	strb	r5, [r6, #0]
 800f5b6:	6823      	ldr	r3, [r4, #0]
 800f5b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f5bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5c0:	d11c      	bne.n	800f5fc <_scanf_float+0x3a8>
 800f5c2:	9b01      	ldr	r3, [sp, #4]
 800f5c4:	454b      	cmp	r3, r9
 800f5c6:	eba3 0209 	sub.w	r2, r3, r9
 800f5ca:	d124      	bne.n	800f616 <_scanf_float+0x3c2>
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	4659      	mov	r1, fp
 800f5d0:	4640      	mov	r0, r8
 800f5d2:	f000 fffb 	bl	80105cc <_strtod_r>
 800f5d6:	9b03      	ldr	r3, [sp, #12]
 800f5d8:	6821      	ldr	r1, [r4, #0]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	f011 0f02 	tst.w	r1, #2
 800f5e0:	ec57 6b10 	vmov	r6, r7, d0
 800f5e4:	f103 0204 	add.w	r2, r3, #4
 800f5e8:	d020      	beq.n	800f62c <_scanf_float+0x3d8>
 800f5ea:	9903      	ldr	r1, [sp, #12]
 800f5ec:	600a      	str	r2, [r1, #0]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	e9c3 6700 	strd	r6, r7, [r3]
 800f5f4:	68e3      	ldr	r3, [r4, #12]
 800f5f6:	3301      	adds	r3, #1
 800f5f8:	60e3      	str	r3, [r4, #12]
 800f5fa:	e66c      	b.n	800f2d6 <_scanf_float+0x82>
 800f5fc:	9b04      	ldr	r3, [sp, #16]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d0e4      	beq.n	800f5cc <_scanf_float+0x378>
 800f602:	9905      	ldr	r1, [sp, #20]
 800f604:	230a      	movs	r3, #10
 800f606:	462a      	mov	r2, r5
 800f608:	3101      	adds	r1, #1
 800f60a:	4640      	mov	r0, r8
 800f60c:	f001 f868 	bl	80106e0 <_strtol_r>
 800f610:	9b04      	ldr	r3, [sp, #16]
 800f612:	9e05      	ldr	r6, [sp, #20]
 800f614:	1ac2      	subs	r2, r0, r3
 800f616:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f61a:	429e      	cmp	r6, r3
 800f61c:	bf28      	it	cs
 800f61e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f622:	4912      	ldr	r1, [pc, #72]	; (800f66c <_scanf_float+0x418>)
 800f624:	4630      	mov	r0, r6
 800f626:	f000 f989 	bl	800f93c <siprintf>
 800f62a:	e7cf      	b.n	800f5cc <_scanf_float+0x378>
 800f62c:	f011 0f04 	tst.w	r1, #4
 800f630:	9903      	ldr	r1, [sp, #12]
 800f632:	600a      	str	r2, [r1, #0]
 800f634:	d1db      	bne.n	800f5ee <_scanf_float+0x39a>
 800f636:	f8d3 8000 	ldr.w	r8, [r3]
 800f63a:	ee10 2a10 	vmov	r2, s0
 800f63e:	ee10 0a10 	vmov	r0, s0
 800f642:	463b      	mov	r3, r7
 800f644:	4639      	mov	r1, r7
 800f646:	f7f1 fa81 	bl	8000b4c <__aeabi_dcmpun>
 800f64a:	b128      	cbz	r0, 800f658 <_scanf_float+0x404>
 800f64c:	4808      	ldr	r0, [pc, #32]	; (800f670 <_scanf_float+0x41c>)
 800f64e:	f7fe ffd1 	bl	800e5f4 <nanf>
 800f652:	ed88 0a00 	vstr	s0, [r8]
 800f656:	e7cd      	b.n	800f5f4 <_scanf_float+0x3a0>
 800f658:	4630      	mov	r0, r6
 800f65a:	4639      	mov	r1, r7
 800f65c:	f7f1 fad4 	bl	8000c08 <__aeabi_d2f>
 800f660:	f8c8 0000 	str.w	r0, [r8]
 800f664:	e7c6      	b.n	800f5f4 <_scanf_float+0x3a0>
 800f666:	2500      	movs	r5, #0
 800f668:	e635      	b.n	800f2d6 <_scanf_float+0x82>
 800f66a:	bf00      	nop
 800f66c:	0813cf40 	.word	0x0813cf40
 800f670:	0813ce7d 	.word	0x0813ce7d

0800f674 <iprintf>:
 800f674:	b40f      	push	{r0, r1, r2, r3}
 800f676:	4b0a      	ldr	r3, [pc, #40]	; (800f6a0 <iprintf+0x2c>)
 800f678:	b513      	push	{r0, r1, r4, lr}
 800f67a:	681c      	ldr	r4, [r3, #0]
 800f67c:	b124      	cbz	r4, 800f688 <iprintf+0x14>
 800f67e:	69a3      	ldr	r3, [r4, #24]
 800f680:	b913      	cbnz	r3, 800f688 <iprintf+0x14>
 800f682:	4620      	mov	r0, r4
 800f684:	f002 f882 	bl	801178c <__sinit>
 800f688:	ab05      	add	r3, sp, #20
 800f68a:	9a04      	ldr	r2, [sp, #16]
 800f68c:	68a1      	ldr	r1, [r4, #8]
 800f68e:	9301      	str	r3, [sp, #4]
 800f690:	4620      	mov	r0, r4
 800f692:	f003 fb87 	bl	8012da4 <_vfiprintf_r>
 800f696:	b002      	add	sp, #8
 800f698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f69c:	b004      	add	sp, #16
 800f69e:	4770      	bx	lr
 800f6a0:	20000a88 	.word	0x20000a88

0800f6a4 <_puts_r>:
 800f6a4:	b570      	push	{r4, r5, r6, lr}
 800f6a6:	460e      	mov	r6, r1
 800f6a8:	4605      	mov	r5, r0
 800f6aa:	b118      	cbz	r0, 800f6b4 <_puts_r+0x10>
 800f6ac:	6983      	ldr	r3, [r0, #24]
 800f6ae:	b90b      	cbnz	r3, 800f6b4 <_puts_r+0x10>
 800f6b0:	f002 f86c 	bl	801178c <__sinit>
 800f6b4:	69ab      	ldr	r3, [r5, #24]
 800f6b6:	68ac      	ldr	r4, [r5, #8]
 800f6b8:	b913      	cbnz	r3, 800f6c0 <_puts_r+0x1c>
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	f002 f866 	bl	801178c <__sinit>
 800f6c0:	4b2c      	ldr	r3, [pc, #176]	; (800f774 <_puts_r+0xd0>)
 800f6c2:	429c      	cmp	r4, r3
 800f6c4:	d120      	bne.n	800f708 <_puts_r+0x64>
 800f6c6:	686c      	ldr	r4, [r5, #4]
 800f6c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f6ca:	07db      	lsls	r3, r3, #31
 800f6cc:	d405      	bmi.n	800f6da <_puts_r+0x36>
 800f6ce:	89a3      	ldrh	r3, [r4, #12]
 800f6d0:	0598      	lsls	r0, r3, #22
 800f6d2:	d402      	bmi.n	800f6da <_puts_r+0x36>
 800f6d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f6d6:	f002 fc6a 	bl	8011fae <__retarget_lock_acquire_recursive>
 800f6da:	89a3      	ldrh	r3, [r4, #12]
 800f6dc:	0719      	lsls	r1, r3, #28
 800f6de:	d51d      	bpl.n	800f71c <_puts_r+0x78>
 800f6e0:	6923      	ldr	r3, [r4, #16]
 800f6e2:	b1db      	cbz	r3, 800f71c <_puts_r+0x78>
 800f6e4:	3e01      	subs	r6, #1
 800f6e6:	68a3      	ldr	r3, [r4, #8]
 800f6e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f6ec:	3b01      	subs	r3, #1
 800f6ee:	60a3      	str	r3, [r4, #8]
 800f6f0:	bb39      	cbnz	r1, 800f742 <_puts_r+0x9e>
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	da38      	bge.n	800f768 <_puts_r+0xc4>
 800f6f6:	4622      	mov	r2, r4
 800f6f8:	210a      	movs	r1, #10
 800f6fa:	4628      	mov	r0, r5
 800f6fc:	f000 fff2 	bl	80106e4 <__swbuf_r>
 800f700:	3001      	adds	r0, #1
 800f702:	d011      	beq.n	800f728 <_puts_r+0x84>
 800f704:	250a      	movs	r5, #10
 800f706:	e011      	b.n	800f72c <_puts_r+0x88>
 800f708:	4b1b      	ldr	r3, [pc, #108]	; (800f778 <_puts_r+0xd4>)
 800f70a:	429c      	cmp	r4, r3
 800f70c:	d101      	bne.n	800f712 <_puts_r+0x6e>
 800f70e:	68ac      	ldr	r4, [r5, #8]
 800f710:	e7da      	b.n	800f6c8 <_puts_r+0x24>
 800f712:	4b1a      	ldr	r3, [pc, #104]	; (800f77c <_puts_r+0xd8>)
 800f714:	429c      	cmp	r4, r3
 800f716:	bf08      	it	eq
 800f718:	68ec      	ldreq	r4, [r5, #12]
 800f71a:	e7d5      	b.n	800f6c8 <_puts_r+0x24>
 800f71c:	4621      	mov	r1, r4
 800f71e:	4628      	mov	r0, r5
 800f720:	f001 f832 	bl	8010788 <__swsetup_r>
 800f724:	2800      	cmp	r0, #0
 800f726:	d0dd      	beq.n	800f6e4 <_puts_r+0x40>
 800f728:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f72c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f72e:	07da      	lsls	r2, r3, #31
 800f730:	d405      	bmi.n	800f73e <_puts_r+0x9a>
 800f732:	89a3      	ldrh	r3, [r4, #12]
 800f734:	059b      	lsls	r3, r3, #22
 800f736:	d402      	bmi.n	800f73e <_puts_r+0x9a>
 800f738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f73a:	f002 fc39 	bl	8011fb0 <__retarget_lock_release_recursive>
 800f73e:	4628      	mov	r0, r5
 800f740:	bd70      	pop	{r4, r5, r6, pc}
 800f742:	2b00      	cmp	r3, #0
 800f744:	da04      	bge.n	800f750 <_puts_r+0xac>
 800f746:	69a2      	ldr	r2, [r4, #24]
 800f748:	429a      	cmp	r2, r3
 800f74a:	dc06      	bgt.n	800f75a <_puts_r+0xb6>
 800f74c:	290a      	cmp	r1, #10
 800f74e:	d004      	beq.n	800f75a <_puts_r+0xb6>
 800f750:	6823      	ldr	r3, [r4, #0]
 800f752:	1c5a      	adds	r2, r3, #1
 800f754:	6022      	str	r2, [r4, #0]
 800f756:	7019      	strb	r1, [r3, #0]
 800f758:	e7c5      	b.n	800f6e6 <_puts_r+0x42>
 800f75a:	4622      	mov	r2, r4
 800f75c:	4628      	mov	r0, r5
 800f75e:	f000 ffc1 	bl	80106e4 <__swbuf_r>
 800f762:	3001      	adds	r0, #1
 800f764:	d1bf      	bne.n	800f6e6 <_puts_r+0x42>
 800f766:	e7df      	b.n	800f728 <_puts_r+0x84>
 800f768:	6823      	ldr	r3, [r4, #0]
 800f76a:	250a      	movs	r5, #10
 800f76c:	1c5a      	adds	r2, r3, #1
 800f76e:	6022      	str	r2, [r4, #0]
 800f770:	701d      	strb	r5, [r3, #0]
 800f772:	e7db      	b.n	800f72c <_puts_r+0x88>
 800f774:	0813d150 	.word	0x0813d150
 800f778:	0813d170 	.word	0x0813d170
 800f77c:	0813d130 	.word	0x0813d130

0800f780 <puts>:
 800f780:	4b02      	ldr	r3, [pc, #8]	; (800f78c <puts+0xc>)
 800f782:	4601      	mov	r1, r0
 800f784:	6818      	ldr	r0, [r3, #0]
 800f786:	f7ff bf8d 	b.w	800f6a4 <_puts_r>
 800f78a:	bf00      	nop
 800f78c:	20000a88 	.word	0x20000a88

0800f790 <_sbrk_r>:
 800f790:	b538      	push	{r3, r4, r5, lr}
 800f792:	4d06      	ldr	r5, [pc, #24]	; (800f7ac <_sbrk_r+0x1c>)
 800f794:	2300      	movs	r3, #0
 800f796:	4604      	mov	r4, r0
 800f798:	4608      	mov	r0, r1
 800f79a:	602b      	str	r3, [r5, #0]
 800f79c:	f003 fddc 	bl	8013358 <_sbrk>
 800f7a0:	1c43      	adds	r3, r0, #1
 800f7a2:	d102      	bne.n	800f7aa <_sbrk_r+0x1a>
 800f7a4:	682b      	ldr	r3, [r5, #0]
 800f7a6:	b103      	cbz	r3, 800f7aa <_sbrk_r+0x1a>
 800f7a8:	6023      	str	r3, [r4, #0]
 800f7aa:	bd38      	pop	{r3, r4, r5, pc}
 800f7ac:	20009f68 	.word	0x20009f68

0800f7b0 <setvbuf>:
 800f7b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f7b4:	461d      	mov	r5, r3
 800f7b6:	4b5d      	ldr	r3, [pc, #372]	; (800f92c <setvbuf+0x17c>)
 800f7b8:	681f      	ldr	r7, [r3, #0]
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	460e      	mov	r6, r1
 800f7be:	4690      	mov	r8, r2
 800f7c0:	b127      	cbz	r7, 800f7cc <setvbuf+0x1c>
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	b913      	cbnz	r3, 800f7cc <setvbuf+0x1c>
 800f7c6:	4638      	mov	r0, r7
 800f7c8:	f001 ffe0 	bl	801178c <__sinit>
 800f7cc:	4b58      	ldr	r3, [pc, #352]	; (800f930 <setvbuf+0x180>)
 800f7ce:	429c      	cmp	r4, r3
 800f7d0:	d167      	bne.n	800f8a2 <setvbuf+0xf2>
 800f7d2:	687c      	ldr	r4, [r7, #4]
 800f7d4:	f1b8 0f02 	cmp.w	r8, #2
 800f7d8:	d006      	beq.n	800f7e8 <setvbuf+0x38>
 800f7da:	f1b8 0f01 	cmp.w	r8, #1
 800f7de:	f200 809f 	bhi.w	800f920 <setvbuf+0x170>
 800f7e2:	2d00      	cmp	r5, #0
 800f7e4:	f2c0 809c 	blt.w	800f920 <setvbuf+0x170>
 800f7e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7ea:	07db      	lsls	r3, r3, #31
 800f7ec:	d405      	bmi.n	800f7fa <setvbuf+0x4a>
 800f7ee:	89a3      	ldrh	r3, [r4, #12]
 800f7f0:	0598      	lsls	r0, r3, #22
 800f7f2:	d402      	bmi.n	800f7fa <setvbuf+0x4a>
 800f7f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7f6:	f002 fbda 	bl	8011fae <__retarget_lock_acquire_recursive>
 800f7fa:	4621      	mov	r1, r4
 800f7fc:	4638      	mov	r0, r7
 800f7fe:	f001 ff31 	bl	8011664 <_fflush_r>
 800f802:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f804:	b141      	cbz	r1, 800f818 <setvbuf+0x68>
 800f806:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f80a:	4299      	cmp	r1, r3
 800f80c:	d002      	beq.n	800f814 <setvbuf+0x64>
 800f80e:	4638      	mov	r0, r7
 800f810:	f7ff f80c 	bl	800e82c <_free_r>
 800f814:	2300      	movs	r3, #0
 800f816:	6363      	str	r3, [r4, #52]	; 0x34
 800f818:	2300      	movs	r3, #0
 800f81a:	61a3      	str	r3, [r4, #24]
 800f81c:	6063      	str	r3, [r4, #4]
 800f81e:	89a3      	ldrh	r3, [r4, #12]
 800f820:	0619      	lsls	r1, r3, #24
 800f822:	d503      	bpl.n	800f82c <setvbuf+0x7c>
 800f824:	6921      	ldr	r1, [r4, #16]
 800f826:	4638      	mov	r0, r7
 800f828:	f7ff f800 	bl	800e82c <_free_r>
 800f82c:	89a3      	ldrh	r3, [r4, #12]
 800f82e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800f832:	f023 0303 	bic.w	r3, r3, #3
 800f836:	f1b8 0f02 	cmp.w	r8, #2
 800f83a:	81a3      	strh	r3, [r4, #12]
 800f83c:	d06c      	beq.n	800f918 <setvbuf+0x168>
 800f83e:	ab01      	add	r3, sp, #4
 800f840:	466a      	mov	r2, sp
 800f842:	4621      	mov	r1, r4
 800f844:	4638      	mov	r0, r7
 800f846:	f002 fbb4 	bl	8011fb2 <__swhatbuf_r>
 800f84a:	89a3      	ldrh	r3, [r4, #12]
 800f84c:	4318      	orrs	r0, r3
 800f84e:	81a0      	strh	r0, [r4, #12]
 800f850:	2d00      	cmp	r5, #0
 800f852:	d130      	bne.n	800f8b6 <setvbuf+0x106>
 800f854:	9d00      	ldr	r5, [sp, #0]
 800f856:	4628      	mov	r0, r5
 800f858:	f7fe ffca 	bl	800e7f0 <malloc>
 800f85c:	4606      	mov	r6, r0
 800f85e:	2800      	cmp	r0, #0
 800f860:	d155      	bne.n	800f90e <setvbuf+0x15e>
 800f862:	f8dd 9000 	ldr.w	r9, [sp]
 800f866:	45a9      	cmp	r9, r5
 800f868:	d14a      	bne.n	800f900 <setvbuf+0x150>
 800f86a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f86e:	2200      	movs	r2, #0
 800f870:	60a2      	str	r2, [r4, #8]
 800f872:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800f876:	6022      	str	r2, [r4, #0]
 800f878:	6122      	str	r2, [r4, #16]
 800f87a:	2201      	movs	r2, #1
 800f87c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f880:	6162      	str	r2, [r4, #20]
 800f882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f884:	f043 0302 	orr.w	r3, r3, #2
 800f888:	07d2      	lsls	r2, r2, #31
 800f88a:	81a3      	strh	r3, [r4, #12]
 800f88c:	d405      	bmi.n	800f89a <setvbuf+0xea>
 800f88e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800f892:	d102      	bne.n	800f89a <setvbuf+0xea>
 800f894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f896:	f002 fb8b 	bl	8011fb0 <__retarget_lock_release_recursive>
 800f89a:	4628      	mov	r0, r5
 800f89c:	b003      	add	sp, #12
 800f89e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8a2:	4b24      	ldr	r3, [pc, #144]	; (800f934 <setvbuf+0x184>)
 800f8a4:	429c      	cmp	r4, r3
 800f8a6:	d101      	bne.n	800f8ac <setvbuf+0xfc>
 800f8a8:	68bc      	ldr	r4, [r7, #8]
 800f8aa:	e793      	b.n	800f7d4 <setvbuf+0x24>
 800f8ac:	4b22      	ldr	r3, [pc, #136]	; (800f938 <setvbuf+0x188>)
 800f8ae:	429c      	cmp	r4, r3
 800f8b0:	bf08      	it	eq
 800f8b2:	68fc      	ldreq	r4, [r7, #12]
 800f8b4:	e78e      	b.n	800f7d4 <setvbuf+0x24>
 800f8b6:	2e00      	cmp	r6, #0
 800f8b8:	d0cd      	beq.n	800f856 <setvbuf+0xa6>
 800f8ba:	69bb      	ldr	r3, [r7, #24]
 800f8bc:	b913      	cbnz	r3, 800f8c4 <setvbuf+0x114>
 800f8be:	4638      	mov	r0, r7
 800f8c0:	f001 ff64 	bl	801178c <__sinit>
 800f8c4:	f1b8 0f01 	cmp.w	r8, #1
 800f8c8:	bf08      	it	eq
 800f8ca:	89a3      	ldrheq	r3, [r4, #12]
 800f8cc:	6026      	str	r6, [r4, #0]
 800f8ce:	bf04      	itt	eq
 800f8d0:	f043 0301 	orreq.w	r3, r3, #1
 800f8d4:	81a3      	strheq	r3, [r4, #12]
 800f8d6:	89a2      	ldrh	r2, [r4, #12]
 800f8d8:	f012 0308 	ands.w	r3, r2, #8
 800f8dc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800f8e0:	d01c      	beq.n	800f91c <setvbuf+0x16c>
 800f8e2:	07d3      	lsls	r3, r2, #31
 800f8e4:	bf41      	itttt	mi
 800f8e6:	2300      	movmi	r3, #0
 800f8e8:	426d      	negmi	r5, r5
 800f8ea:	60a3      	strmi	r3, [r4, #8]
 800f8ec:	61a5      	strmi	r5, [r4, #24]
 800f8ee:	bf58      	it	pl
 800f8f0:	60a5      	strpl	r5, [r4, #8]
 800f8f2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800f8f4:	f015 0501 	ands.w	r5, r5, #1
 800f8f8:	d115      	bne.n	800f926 <setvbuf+0x176>
 800f8fa:	f412 7f00 	tst.w	r2, #512	; 0x200
 800f8fe:	e7c8      	b.n	800f892 <setvbuf+0xe2>
 800f900:	4648      	mov	r0, r9
 800f902:	f7fe ff75 	bl	800e7f0 <malloc>
 800f906:	4606      	mov	r6, r0
 800f908:	2800      	cmp	r0, #0
 800f90a:	d0ae      	beq.n	800f86a <setvbuf+0xba>
 800f90c:	464d      	mov	r5, r9
 800f90e:	89a3      	ldrh	r3, [r4, #12]
 800f910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f914:	81a3      	strh	r3, [r4, #12]
 800f916:	e7d0      	b.n	800f8ba <setvbuf+0x10a>
 800f918:	2500      	movs	r5, #0
 800f91a:	e7a8      	b.n	800f86e <setvbuf+0xbe>
 800f91c:	60a3      	str	r3, [r4, #8]
 800f91e:	e7e8      	b.n	800f8f2 <setvbuf+0x142>
 800f920:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800f924:	e7b9      	b.n	800f89a <setvbuf+0xea>
 800f926:	2500      	movs	r5, #0
 800f928:	e7b7      	b.n	800f89a <setvbuf+0xea>
 800f92a:	bf00      	nop
 800f92c:	20000a88 	.word	0x20000a88
 800f930:	0813d150 	.word	0x0813d150
 800f934:	0813d170 	.word	0x0813d170
 800f938:	0813d130 	.word	0x0813d130

0800f93c <siprintf>:
 800f93c:	b40e      	push	{r1, r2, r3}
 800f93e:	b500      	push	{lr}
 800f940:	b09c      	sub	sp, #112	; 0x70
 800f942:	ab1d      	add	r3, sp, #116	; 0x74
 800f944:	9002      	str	r0, [sp, #8]
 800f946:	9006      	str	r0, [sp, #24]
 800f948:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f94c:	4809      	ldr	r0, [pc, #36]	; (800f974 <siprintf+0x38>)
 800f94e:	9107      	str	r1, [sp, #28]
 800f950:	9104      	str	r1, [sp, #16]
 800f952:	4909      	ldr	r1, [pc, #36]	; (800f978 <siprintf+0x3c>)
 800f954:	f853 2b04 	ldr.w	r2, [r3], #4
 800f958:	9105      	str	r1, [sp, #20]
 800f95a:	6800      	ldr	r0, [r0, #0]
 800f95c:	9301      	str	r3, [sp, #4]
 800f95e:	a902      	add	r1, sp, #8
 800f960:	f003 f8f6 	bl	8012b50 <_svfiprintf_r>
 800f964:	9b02      	ldr	r3, [sp, #8]
 800f966:	2200      	movs	r2, #0
 800f968:	701a      	strb	r2, [r3, #0]
 800f96a:	b01c      	add	sp, #112	; 0x70
 800f96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f970:	b003      	add	sp, #12
 800f972:	4770      	bx	lr
 800f974:	20000a88 	.word	0x20000a88
 800f978:	ffff0208 	.word	0xffff0208

0800f97c <sulp>:
 800f97c:	b570      	push	{r4, r5, r6, lr}
 800f97e:	4604      	mov	r4, r0
 800f980:	460d      	mov	r5, r1
 800f982:	ec45 4b10 	vmov	d0, r4, r5
 800f986:	4616      	mov	r6, r2
 800f988:	f002 ff02 	bl	8012790 <__ulp>
 800f98c:	ec51 0b10 	vmov	r0, r1, d0
 800f990:	b17e      	cbz	r6, 800f9b2 <sulp+0x36>
 800f992:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f996:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	dd09      	ble.n	800f9b2 <sulp+0x36>
 800f99e:	051b      	lsls	r3, r3, #20
 800f9a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f9a4:	2400      	movs	r4, #0
 800f9a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f9aa:	4622      	mov	r2, r4
 800f9ac:	462b      	mov	r3, r5
 800f9ae:	f7f0 fe33 	bl	8000618 <__aeabi_dmul>
 800f9b2:	bd70      	pop	{r4, r5, r6, pc}
 800f9b4:	0000      	movs	r0, r0
	...

0800f9b8 <_strtod_l>:
 800f9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9bc:	b0a3      	sub	sp, #140	; 0x8c
 800f9be:	461f      	mov	r7, r3
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	931e      	str	r3, [sp, #120]	; 0x78
 800f9c4:	4ba4      	ldr	r3, [pc, #656]	; (800fc58 <_strtod_l+0x2a0>)
 800f9c6:	9219      	str	r2, [sp, #100]	; 0x64
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	9307      	str	r3, [sp, #28]
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	4688      	mov	r8, r1
 800f9d2:	f7f0 fc0d 	bl	80001f0 <strlen>
 800f9d6:	f04f 0a00 	mov.w	sl, #0
 800f9da:	4605      	mov	r5, r0
 800f9dc:	f04f 0b00 	mov.w	fp, #0
 800f9e0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800f9e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f9e6:	781a      	ldrb	r2, [r3, #0]
 800f9e8:	2a2b      	cmp	r2, #43	; 0x2b
 800f9ea:	d04c      	beq.n	800fa86 <_strtod_l+0xce>
 800f9ec:	d839      	bhi.n	800fa62 <_strtod_l+0xaa>
 800f9ee:	2a0d      	cmp	r2, #13
 800f9f0:	d832      	bhi.n	800fa58 <_strtod_l+0xa0>
 800f9f2:	2a08      	cmp	r2, #8
 800f9f4:	d832      	bhi.n	800fa5c <_strtod_l+0xa4>
 800f9f6:	2a00      	cmp	r2, #0
 800f9f8:	d03c      	beq.n	800fa74 <_strtod_l+0xbc>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	930e      	str	r3, [sp, #56]	; 0x38
 800f9fe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fa00:	7833      	ldrb	r3, [r6, #0]
 800fa02:	2b30      	cmp	r3, #48	; 0x30
 800fa04:	f040 80b4 	bne.w	800fb70 <_strtod_l+0x1b8>
 800fa08:	7873      	ldrb	r3, [r6, #1]
 800fa0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fa0e:	2b58      	cmp	r3, #88	; 0x58
 800fa10:	d16c      	bne.n	800faec <_strtod_l+0x134>
 800fa12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa14:	9301      	str	r3, [sp, #4]
 800fa16:	ab1e      	add	r3, sp, #120	; 0x78
 800fa18:	9702      	str	r7, [sp, #8]
 800fa1a:	9300      	str	r3, [sp, #0]
 800fa1c:	4a8f      	ldr	r2, [pc, #572]	; (800fc5c <_strtod_l+0x2a4>)
 800fa1e:	ab1f      	add	r3, sp, #124	; 0x7c
 800fa20:	a91d      	add	r1, sp, #116	; 0x74
 800fa22:	4620      	mov	r0, r4
 800fa24:	f001 ffb6 	bl	8011994 <__gethex>
 800fa28:	f010 0707 	ands.w	r7, r0, #7
 800fa2c:	4605      	mov	r5, r0
 800fa2e:	d005      	beq.n	800fa3c <_strtod_l+0x84>
 800fa30:	2f06      	cmp	r7, #6
 800fa32:	d12a      	bne.n	800fa8a <_strtod_l+0xd2>
 800fa34:	3601      	adds	r6, #1
 800fa36:	2300      	movs	r3, #0
 800fa38:	961d      	str	r6, [sp, #116]	; 0x74
 800fa3a:	930e      	str	r3, [sp, #56]	; 0x38
 800fa3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f040 8596 	bne.w	8010570 <_strtod_l+0xbb8>
 800fa44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa46:	b1db      	cbz	r3, 800fa80 <_strtod_l+0xc8>
 800fa48:	4652      	mov	r2, sl
 800fa4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800fa4e:	ec43 2b10 	vmov	d0, r2, r3
 800fa52:	b023      	add	sp, #140	; 0x8c
 800fa54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa58:	2a20      	cmp	r2, #32
 800fa5a:	d1ce      	bne.n	800f9fa <_strtod_l+0x42>
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	931d      	str	r3, [sp, #116]	; 0x74
 800fa60:	e7c0      	b.n	800f9e4 <_strtod_l+0x2c>
 800fa62:	2a2d      	cmp	r2, #45	; 0x2d
 800fa64:	d1c9      	bne.n	800f9fa <_strtod_l+0x42>
 800fa66:	2201      	movs	r2, #1
 800fa68:	920e      	str	r2, [sp, #56]	; 0x38
 800fa6a:	1c5a      	adds	r2, r3, #1
 800fa6c:	921d      	str	r2, [sp, #116]	; 0x74
 800fa6e:	785b      	ldrb	r3, [r3, #1]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d1c4      	bne.n	800f9fe <_strtod_l+0x46>
 800fa74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fa76:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	f040 8576 	bne.w	801056c <_strtod_l+0xbb4>
 800fa80:	4652      	mov	r2, sl
 800fa82:	465b      	mov	r3, fp
 800fa84:	e7e3      	b.n	800fa4e <_strtod_l+0x96>
 800fa86:	2200      	movs	r2, #0
 800fa88:	e7ee      	b.n	800fa68 <_strtod_l+0xb0>
 800fa8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fa8c:	b13a      	cbz	r2, 800fa9e <_strtod_l+0xe6>
 800fa8e:	2135      	movs	r1, #53	; 0x35
 800fa90:	a820      	add	r0, sp, #128	; 0x80
 800fa92:	f002 ff88 	bl	80129a6 <__copybits>
 800fa96:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f002 fb4d 	bl	8012138 <_Bfree>
 800fa9e:	3f01      	subs	r7, #1
 800faa0:	2f05      	cmp	r7, #5
 800faa2:	d807      	bhi.n	800fab4 <_strtod_l+0xfc>
 800faa4:	e8df f007 	tbb	[pc, r7]
 800faa8:	1d180b0e 	.word	0x1d180b0e
 800faac:	030e      	.short	0x030e
 800faae:	f04f 0b00 	mov.w	fp, #0
 800fab2:	46da      	mov	sl, fp
 800fab4:	0728      	lsls	r0, r5, #28
 800fab6:	d5c1      	bpl.n	800fa3c <_strtod_l+0x84>
 800fab8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fabc:	e7be      	b.n	800fa3c <_strtod_l+0x84>
 800fabe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800fac2:	e7f7      	b.n	800fab4 <_strtod_l+0xfc>
 800fac4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800fac8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800faca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800face:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fad2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fad6:	e7ed      	b.n	800fab4 <_strtod_l+0xfc>
 800fad8:	f8df b184 	ldr.w	fp, [pc, #388]	; 800fc60 <_strtod_l+0x2a8>
 800fadc:	f04f 0a00 	mov.w	sl, #0
 800fae0:	e7e8      	b.n	800fab4 <_strtod_l+0xfc>
 800fae2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fae6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800faea:	e7e3      	b.n	800fab4 <_strtod_l+0xfc>
 800faec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800faee:	1c5a      	adds	r2, r3, #1
 800faf0:	921d      	str	r2, [sp, #116]	; 0x74
 800faf2:	785b      	ldrb	r3, [r3, #1]
 800faf4:	2b30      	cmp	r3, #48	; 0x30
 800faf6:	d0f9      	beq.n	800faec <_strtod_l+0x134>
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d09f      	beq.n	800fa3c <_strtod_l+0x84>
 800fafc:	2301      	movs	r3, #1
 800fafe:	f04f 0900 	mov.w	r9, #0
 800fb02:	9304      	str	r3, [sp, #16]
 800fb04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb06:	930a      	str	r3, [sp, #40]	; 0x28
 800fb08:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fb0c:	464f      	mov	r7, r9
 800fb0e:	220a      	movs	r2, #10
 800fb10:	981d      	ldr	r0, [sp, #116]	; 0x74
 800fb12:	7806      	ldrb	r6, [r0, #0]
 800fb14:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800fb18:	b2d9      	uxtb	r1, r3
 800fb1a:	2909      	cmp	r1, #9
 800fb1c:	d92a      	bls.n	800fb74 <_strtod_l+0x1bc>
 800fb1e:	9907      	ldr	r1, [sp, #28]
 800fb20:	462a      	mov	r2, r5
 800fb22:	f003 fabc 	bl	801309e <strncmp>
 800fb26:	b398      	cbz	r0, 800fb90 <_strtod_l+0x1d8>
 800fb28:	2000      	movs	r0, #0
 800fb2a:	4633      	mov	r3, r6
 800fb2c:	463d      	mov	r5, r7
 800fb2e:	9007      	str	r0, [sp, #28]
 800fb30:	4602      	mov	r2, r0
 800fb32:	2b65      	cmp	r3, #101	; 0x65
 800fb34:	d001      	beq.n	800fb3a <_strtod_l+0x182>
 800fb36:	2b45      	cmp	r3, #69	; 0x45
 800fb38:	d118      	bne.n	800fb6c <_strtod_l+0x1b4>
 800fb3a:	b91d      	cbnz	r5, 800fb44 <_strtod_l+0x18c>
 800fb3c:	9b04      	ldr	r3, [sp, #16]
 800fb3e:	4303      	orrs	r3, r0
 800fb40:	d098      	beq.n	800fa74 <_strtod_l+0xbc>
 800fb42:	2500      	movs	r5, #0
 800fb44:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800fb48:	f108 0301 	add.w	r3, r8, #1
 800fb4c:	931d      	str	r3, [sp, #116]	; 0x74
 800fb4e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fb52:	2b2b      	cmp	r3, #43	; 0x2b
 800fb54:	d075      	beq.n	800fc42 <_strtod_l+0x28a>
 800fb56:	2b2d      	cmp	r3, #45	; 0x2d
 800fb58:	d07b      	beq.n	800fc52 <_strtod_l+0x29a>
 800fb5a:	f04f 0c00 	mov.w	ip, #0
 800fb5e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fb62:	2909      	cmp	r1, #9
 800fb64:	f240 8082 	bls.w	800fc6c <_strtod_l+0x2b4>
 800fb68:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800fb6c:	2600      	movs	r6, #0
 800fb6e:	e09d      	b.n	800fcac <_strtod_l+0x2f4>
 800fb70:	2300      	movs	r3, #0
 800fb72:	e7c4      	b.n	800fafe <_strtod_l+0x146>
 800fb74:	2f08      	cmp	r7, #8
 800fb76:	bfd8      	it	le
 800fb78:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800fb7a:	f100 0001 	add.w	r0, r0, #1
 800fb7e:	bfda      	itte	le
 800fb80:	fb02 3301 	mlale	r3, r2, r1, r3
 800fb84:	9309      	strle	r3, [sp, #36]	; 0x24
 800fb86:	fb02 3909 	mlagt	r9, r2, r9, r3
 800fb8a:	3701      	adds	r7, #1
 800fb8c:	901d      	str	r0, [sp, #116]	; 0x74
 800fb8e:	e7bf      	b.n	800fb10 <_strtod_l+0x158>
 800fb90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fb92:	195a      	adds	r2, r3, r5
 800fb94:	921d      	str	r2, [sp, #116]	; 0x74
 800fb96:	5d5b      	ldrb	r3, [r3, r5]
 800fb98:	2f00      	cmp	r7, #0
 800fb9a:	d037      	beq.n	800fc0c <_strtod_l+0x254>
 800fb9c:	9007      	str	r0, [sp, #28]
 800fb9e:	463d      	mov	r5, r7
 800fba0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800fba4:	2a09      	cmp	r2, #9
 800fba6:	d912      	bls.n	800fbce <_strtod_l+0x216>
 800fba8:	2201      	movs	r2, #1
 800fbaa:	e7c2      	b.n	800fb32 <_strtod_l+0x17a>
 800fbac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fbae:	1c5a      	adds	r2, r3, #1
 800fbb0:	921d      	str	r2, [sp, #116]	; 0x74
 800fbb2:	785b      	ldrb	r3, [r3, #1]
 800fbb4:	3001      	adds	r0, #1
 800fbb6:	2b30      	cmp	r3, #48	; 0x30
 800fbb8:	d0f8      	beq.n	800fbac <_strtod_l+0x1f4>
 800fbba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800fbbe:	2a08      	cmp	r2, #8
 800fbc0:	f200 84db 	bhi.w	801057a <_strtod_l+0xbc2>
 800fbc4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fbc6:	9007      	str	r0, [sp, #28]
 800fbc8:	2000      	movs	r0, #0
 800fbca:	920a      	str	r2, [sp, #40]	; 0x28
 800fbcc:	4605      	mov	r5, r0
 800fbce:	3b30      	subs	r3, #48	; 0x30
 800fbd0:	f100 0201 	add.w	r2, r0, #1
 800fbd4:	d014      	beq.n	800fc00 <_strtod_l+0x248>
 800fbd6:	9907      	ldr	r1, [sp, #28]
 800fbd8:	4411      	add	r1, r2
 800fbda:	9107      	str	r1, [sp, #28]
 800fbdc:	462a      	mov	r2, r5
 800fbde:	eb00 0e05 	add.w	lr, r0, r5
 800fbe2:	210a      	movs	r1, #10
 800fbe4:	4572      	cmp	r2, lr
 800fbe6:	d113      	bne.n	800fc10 <_strtod_l+0x258>
 800fbe8:	182a      	adds	r2, r5, r0
 800fbea:	2a08      	cmp	r2, #8
 800fbec:	f105 0501 	add.w	r5, r5, #1
 800fbf0:	4405      	add	r5, r0
 800fbf2:	dc1c      	bgt.n	800fc2e <_strtod_l+0x276>
 800fbf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbf6:	220a      	movs	r2, #10
 800fbf8:	fb02 3301 	mla	r3, r2, r1, r3
 800fbfc:	9309      	str	r3, [sp, #36]	; 0x24
 800fbfe:	2200      	movs	r2, #0
 800fc00:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc02:	1c59      	adds	r1, r3, #1
 800fc04:	911d      	str	r1, [sp, #116]	; 0x74
 800fc06:	785b      	ldrb	r3, [r3, #1]
 800fc08:	4610      	mov	r0, r2
 800fc0a:	e7c9      	b.n	800fba0 <_strtod_l+0x1e8>
 800fc0c:	4638      	mov	r0, r7
 800fc0e:	e7d2      	b.n	800fbb6 <_strtod_l+0x1fe>
 800fc10:	2a08      	cmp	r2, #8
 800fc12:	dc04      	bgt.n	800fc1e <_strtod_l+0x266>
 800fc14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800fc16:	434e      	muls	r6, r1
 800fc18:	9609      	str	r6, [sp, #36]	; 0x24
 800fc1a:	3201      	adds	r2, #1
 800fc1c:	e7e2      	b.n	800fbe4 <_strtod_l+0x22c>
 800fc1e:	f102 0c01 	add.w	ip, r2, #1
 800fc22:	f1bc 0f10 	cmp.w	ip, #16
 800fc26:	bfd8      	it	le
 800fc28:	fb01 f909 	mulle.w	r9, r1, r9
 800fc2c:	e7f5      	b.n	800fc1a <_strtod_l+0x262>
 800fc2e:	2d10      	cmp	r5, #16
 800fc30:	bfdc      	itt	le
 800fc32:	220a      	movle	r2, #10
 800fc34:	fb02 3909 	mlale	r9, r2, r9, r3
 800fc38:	e7e1      	b.n	800fbfe <_strtod_l+0x246>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	9307      	str	r3, [sp, #28]
 800fc3e:	2201      	movs	r2, #1
 800fc40:	e77c      	b.n	800fb3c <_strtod_l+0x184>
 800fc42:	f04f 0c00 	mov.w	ip, #0
 800fc46:	f108 0302 	add.w	r3, r8, #2
 800fc4a:	931d      	str	r3, [sp, #116]	; 0x74
 800fc4c:	f898 3002 	ldrb.w	r3, [r8, #2]
 800fc50:	e785      	b.n	800fb5e <_strtod_l+0x1a6>
 800fc52:	f04f 0c01 	mov.w	ip, #1
 800fc56:	e7f6      	b.n	800fc46 <_strtod_l+0x28e>
 800fc58:	0813d1f8 	.word	0x0813d1f8
 800fc5c:	0813cf48 	.word	0x0813cf48
 800fc60:	7ff00000 	.word	0x7ff00000
 800fc64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc66:	1c59      	adds	r1, r3, #1
 800fc68:	911d      	str	r1, [sp, #116]	; 0x74
 800fc6a:	785b      	ldrb	r3, [r3, #1]
 800fc6c:	2b30      	cmp	r3, #48	; 0x30
 800fc6e:	d0f9      	beq.n	800fc64 <_strtod_l+0x2ac>
 800fc70:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800fc74:	2908      	cmp	r1, #8
 800fc76:	f63f af79 	bhi.w	800fb6c <_strtod_l+0x1b4>
 800fc7a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fc7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc80:	9308      	str	r3, [sp, #32]
 800fc82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fc84:	1c59      	adds	r1, r3, #1
 800fc86:	911d      	str	r1, [sp, #116]	; 0x74
 800fc88:	785b      	ldrb	r3, [r3, #1]
 800fc8a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800fc8e:	2e09      	cmp	r6, #9
 800fc90:	d937      	bls.n	800fd02 <_strtod_l+0x34a>
 800fc92:	9e08      	ldr	r6, [sp, #32]
 800fc94:	1b89      	subs	r1, r1, r6
 800fc96:	2908      	cmp	r1, #8
 800fc98:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800fc9c:	dc02      	bgt.n	800fca4 <_strtod_l+0x2ec>
 800fc9e:	4576      	cmp	r6, lr
 800fca0:	bfa8      	it	ge
 800fca2:	4676      	movge	r6, lr
 800fca4:	f1bc 0f00 	cmp.w	ip, #0
 800fca8:	d000      	beq.n	800fcac <_strtod_l+0x2f4>
 800fcaa:	4276      	negs	r6, r6
 800fcac:	2d00      	cmp	r5, #0
 800fcae:	d14f      	bne.n	800fd50 <_strtod_l+0x398>
 800fcb0:	9904      	ldr	r1, [sp, #16]
 800fcb2:	4301      	orrs	r1, r0
 800fcb4:	f47f aec2 	bne.w	800fa3c <_strtod_l+0x84>
 800fcb8:	2a00      	cmp	r2, #0
 800fcba:	f47f aedb 	bne.w	800fa74 <_strtod_l+0xbc>
 800fcbe:	2b69      	cmp	r3, #105	; 0x69
 800fcc0:	d027      	beq.n	800fd12 <_strtod_l+0x35a>
 800fcc2:	dc24      	bgt.n	800fd0e <_strtod_l+0x356>
 800fcc4:	2b49      	cmp	r3, #73	; 0x49
 800fcc6:	d024      	beq.n	800fd12 <_strtod_l+0x35a>
 800fcc8:	2b4e      	cmp	r3, #78	; 0x4e
 800fcca:	f47f aed3 	bne.w	800fa74 <_strtod_l+0xbc>
 800fcce:	499e      	ldr	r1, [pc, #632]	; (800ff48 <_strtod_l+0x590>)
 800fcd0:	a81d      	add	r0, sp, #116	; 0x74
 800fcd2:	f002 f8b7 	bl	8011e44 <__match>
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	f43f aecc 	beq.w	800fa74 <_strtod_l+0xbc>
 800fcdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	2b28      	cmp	r3, #40	; 0x28
 800fce2:	d12d      	bne.n	800fd40 <_strtod_l+0x388>
 800fce4:	4999      	ldr	r1, [pc, #612]	; (800ff4c <_strtod_l+0x594>)
 800fce6:	aa20      	add	r2, sp, #128	; 0x80
 800fce8:	a81d      	add	r0, sp, #116	; 0x74
 800fcea:	f002 f8bf 	bl	8011e6c <__hexnan>
 800fcee:	2805      	cmp	r0, #5
 800fcf0:	d126      	bne.n	800fd40 <_strtod_l+0x388>
 800fcf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fcf4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800fcf8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fcfc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fd00:	e69c      	b.n	800fa3c <_strtod_l+0x84>
 800fd02:	210a      	movs	r1, #10
 800fd04:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fd08:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fd0c:	e7b9      	b.n	800fc82 <_strtod_l+0x2ca>
 800fd0e:	2b6e      	cmp	r3, #110	; 0x6e
 800fd10:	e7db      	b.n	800fcca <_strtod_l+0x312>
 800fd12:	498f      	ldr	r1, [pc, #572]	; (800ff50 <_strtod_l+0x598>)
 800fd14:	a81d      	add	r0, sp, #116	; 0x74
 800fd16:	f002 f895 	bl	8011e44 <__match>
 800fd1a:	2800      	cmp	r0, #0
 800fd1c:	f43f aeaa 	beq.w	800fa74 <_strtod_l+0xbc>
 800fd20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd22:	498c      	ldr	r1, [pc, #560]	; (800ff54 <_strtod_l+0x59c>)
 800fd24:	3b01      	subs	r3, #1
 800fd26:	a81d      	add	r0, sp, #116	; 0x74
 800fd28:	931d      	str	r3, [sp, #116]	; 0x74
 800fd2a:	f002 f88b 	bl	8011e44 <__match>
 800fd2e:	b910      	cbnz	r0, 800fd36 <_strtod_l+0x37e>
 800fd30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fd32:	3301      	adds	r3, #1
 800fd34:	931d      	str	r3, [sp, #116]	; 0x74
 800fd36:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ff64 <_strtod_l+0x5ac>
 800fd3a:	f04f 0a00 	mov.w	sl, #0
 800fd3e:	e67d      	b.n	800fa3c <_strtod_l+0x84>
 800fd40:	4885      	ldr	r0, [pc, #532]	; (800ff58 <_strtod_l+0x5a0>)
 800fd42:	f003 f961 	bl	8013008 <nan>
 800fd46:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fd4a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800fd4e:	e675      	b.n	800fa3c <_strtod_l+0x84>
 800fd50:	9b07      	ldr	r3, [sp, #28]
 800fd52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd54:	1af3      	subs	r3, r6, r3
 800fd56:	2f00      	cmp	r7, #0
 800fd58:	bf08      	it	eq
 800fd5a:	462f      	moveq	r7, r5
 800fd5c:	2d10      	cmp	r5, #16
 800fd5e:	9308      	str	r3, [sp, #32]
 800fd60:	46a8      	mov	r8, r5
 800fd62:	bfa8      	it	ge
 800fd64:	f04f 0810 	movge.w	r8, #16
 800fd68:	f7f0 fbdc 	bl	8000524 <__aeabi_ui2d>
 800fd6c:	2d09      	cmp	r5, #9
 800fd6e:	4682      	mov	sl, r0
 800fd70:	468b      	mov	fp, r1
 800fd72:	dd13      	ble.n	800fd9c <_strtod_l+0x3e4>
 800fd74:	4b79      	ldr	r3, [pc, #484]	; (800ff5c <_strtod_l+0x5a4>)
 800fd76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fd7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fd7e:	f7f0 fc4b 	bl	8000618 <__aeabi_dmul>
 800fd82:	4682      	mov	sl, r0
 800fd84:	4648      	mov	r0, r9
 800fd86:	468b      	mov	fp, r1
 800fd88:	f7f0 fbcc 	bl	8000524 <__aeabi_ui2d>
 800fd8c:	4602      	mov	r2, r0
 800fd8e:	460b      	mov	r3, r1
 800fd90:	4650      	mov	r0, sl
 800fd92:	4659      	mov	r1, fp
 800fd94:	f7f0 fa8a 	bl	80002ac <__adddf3>
 800fd98:	4682      	mov	sl, r0
 800fd9a:	468b      	mov	fp, r1
 800fd9c:	2d0f      	cmp	r5, #15
 800fd9e:	dc38      	bgt.n	800fe12 <_strtod_l+0x45a>
 800fda0:	9b08      	ldr	r3, [sp, #32]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	f43f ae4a 	beq.w	800fa3c <_strtod_l+0x84>
 800fda8:	dd24      	ble.n	800fdf4 <_strtod_l+0x43c>
 800fdaa:	2b16      	cmp	r3, #22
 800fdac:	dc0b      	bgt.n	800fdc6 <_strtod_l+0x40e>
 800fdae:	4d6b      	ldr	r5, [pc, #428]	; (800ff5c <_strtod_l+0x5a4>)
 800fdb0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800fdb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fdb8:	4652      	mov	r2, sl
 800fdba:	465b      	mov	r3, fp
 800fdbc:	f7f0 fc2c 	bl	8000618 <__aeabi_dmul>
 800fdc0:	4682      	mov	sl, r0
 800fdc2:	468b      	mov	fp, r1
 800fdc4:	e63a      	b.n	800fa3c <_strtod_l+0x84>
 800fdc6:	9a08      	ldr	r2, [sp, #32]
 800fdc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	db20      	blt.n	800fe12 <_strtod_l+0x45a>
 800fdd0:	4c62      	ldr	r4, [pc, #392]	; (800ff5c <_strtod_l+0x5a4>)
 800fdd2:	f1c5 050f 	rsb	r5, r5, #15
 800fdd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800fdda:	4652      	mov	r2, sl
 800fddc:	465b      	mov	r3, fp
 800fdde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fde2:	f7f0 fc19 	bl	8000618 <__aeabi_dmul>
 800fde6:	9b08      	ldr	r3, [sp, #32]
 800fde8:	1b5d      	subs	r5, r3, r5
 800fdea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800fdee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fdf2:	e7e3      	b.n	800fdbc <_strtod_l+0x404>
 800fdf4:	9b08      	ldr	r3, [sp, #32]
 800fdf6:	3316      	adds	r3, #22
 800fdf8:	db0b      	blt.n	800fe12 <_strtod_l+0x45a>
 800fdfa:	9b07      	ldr	r3, [sp, #28]
 800fdfc:	4a57      	ldr	r2, [pc, #348]	; (800ff5c <_strtod_l+0x5a4>)
 800fdfe:	1b9e      	subs	r6, r3, r6
 800fe00:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800fe04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fe08:	4650      	mov	r0, sl
 800fe0a:	4659      	mov	r1, fp
 800fe0c:	f7f0 fd2e 	bl	800086c <__aeabi_ddiv>
 800fe10:	e7d6      	b.n	800fdc0 <_strtod_l+0x408>
 800fe12:	9b08      	ldr	r3, [sp, #32]
 800fe14:	eba5 0808 	sub.w	r8, r5, r8
 800fe18:	4498      	add	r8, r3
 800fe1a:	f1b8 0f00 	cmp.w	r8, #0
 800fe1e:	dd71      	ble.n	800ff04 <_strtod_l+0x54c>
 800fe20:	f018 030f 	ands.w	r3, r8, #15
 800fe24:	d00a      	beq.n	800fe3c <_strtod_l+0x484>
 800fe26:	494d      	ldr	r1, [pc, #308]	; (800ff5c <_strtod_l+0x5a4>)
 800fe28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fe2c:	4652      	mov	r2, sl
 800fe2e:	465b      	mov	r3, fp
 800fe30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fe34:	f7f0 fbf0 	bl	8000618 <__aeabi_dmul>
 800fe38:	4682      	mov	sl, r0
 800fe3a:	468b      	mov	fp, r1
 800fe3c:	f038 080f 	bics.w	r8, r8, #15
 800fe40:	d04d      	beq.n	800fede <_strtod_l+0x526>
 800fe42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fe46:	dd22      	ble.n	800fe8e <_strtod_l+0x4d6>
 800fe48:	2500      	movs	r5, #0
 800fe4a:	462e      	mov	r6, r5
 800fe4c:	9509      	str	r5, [sp, #36]	; 0x24
 800fe4e:	9507      	str	r5, [sp, #28]
 800fe50:	2322      	movs	r3, #34	; 0x22
 800fe52:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ff64 <_strtod_l+0x5ac>
 800fe56:	6023      	str	r3, [r4, #0]
 800fe58:	f04f 0a00 	mov.w	sl, #0
 800fe5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f43f adec 	beq.w	800fa3c <_strtod_l+0x84>
 800fe64:	991e      	ldr	r1, [sp, #120]	; 0x78
 800fe66:	4620      	mov	r0, r4
 800fe68:	f002 f966 	bl	8012138 <_Bfree>
 800fe6c:	9907      	ldr	r1, [sp, #28]
 800fe6e:	4620      	mov	r0, r4
 800fe70:	f002 f962 	bl	8012138 <_Bfree>
 800fe74:	4631      	mov	r1, r6
 800fe76:	4620      	mov	r0, r4
 800fe78:	f002 f95e 	bl	8012138 <_Bfree>
 800fe7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f002 f95a 	bl	8012138 <_Bfree>
 800fe84:	4629      	mov	r1, r5
 800fe86:	4620      	mov	r0, r4
 800fe88:	f002 f956 	bl	8012138 <_Bfree>
 800fe8c:	e5d6      	b.n	800fa3c <_strtod_l+0x84>
 800fe8e:	2300      	movs	r3, #0
 800fe90:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fe94:	4650      	mov	r0, sl
 800fe96:	4659      	mov	r1, fp
 800fe98:	4699      	mov	r9, r3
 800fe9a:	f1b8 0f01 	cmp.w	r8, #1
 800fe9e:	dc21      	bgt.n	800fee4 <_strtod_l+0x52c>
 800fea0:	b10b      	cbz	r3, 800fea6 <_strtod_l+0x4ee>
 800fea2:	4682      	mov	sl, r0
 800fea4:	468b      	mov	fp, r1
 800fea6:	4b2e      	ldr	r3, [pc, #184]	; (800ff60 <_strtod_l+0x5a8>)
 800fea8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800feac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800feb0:	4652      	mov	r2, sl
 800feb2:	465b      	mov	r3, fp
 800feb4:	e9d9 0100 	ldrd	r0, r1, [r9]
 800feb8:	f7f0 fbae 	bl	8000618 <__aeabi_dmul>
 800febc:	4b29      	ldr	r3, [pc, #164]	; (800ff64 <_strtod_l+0x5ac>)
 800febe:	460a      	mov	r2, r1
 800fec0:	400b      	ands	r3, r1
 800fec2:	4929      	ldr	r1, [pc, #164]	; (800ff68 <_strtod_l+0x5b0>)
 800fec4:	428b      	cmp	r3, r1
 800fec6:	4682      	mov	sl, r0
 800fec8:	d8be      	bhi.n	800fe48 <_strtod_l+0x490>
 800feca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fece:	428b      	cmp	r3, r1
 800fed0:	bf86      	itte	hi
 800fed2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ff6c <_strtod_l+0x5b4>
 800fed6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800feda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fede:	2300      	movs	r3, #0
 800fee0:	9304      	str	r3, [sp, #16]
 800fee2:	e081      	b.n	800ffe8 <_strtod_l+0x630>
 800fee4:	f018 0f01 	tst.w	r8, #1
 800fee8:	d007      	beq.n	800fefa <_strtod_l+0x542>
 800feea:	4b1d      	ldr	r3, [pc, #116]	; (800ff60 <_strtod_l+0x5a8>)
 800feec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800fef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fef4:	f7f0 fb90 	bl	8000618 <__aeabi_dmul>
 800fef8:	2301      	movs	r3, #1
 800fefa:	f109 0901 	add.w	r9, r9, #1
 800fefe:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ff02:	e7ca      	b.n	800fe9a <_strtod_l+0x4e2>
 800ff04:	d0eb      	beq.n	800fede <_strtod_l+0x526>
 800ff06:	f1c8 0800 	rsb	r8, r8, #0
 800ff0a:	f018 020f 	ands.w	r2, r8, #15
 800ff0e:	d00a      	beq.n	800ff26 <_strtod_l+0x56e>
 800ff10:	4b12      	ldr	r3, [pc, #72]	; (800ff5c <_strtod_l+0x5a4>)
 800ff12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff16:	4650      	mov	r0, sl
 800ff18:	4659      	mov	r1, fp
 800ff1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff1e:	f7f0 fca5 	bl	800086c <__aeabi_ddiv>
 800ff22:	4682      	mov	sl, r0
 800ff24:	468b      	mov	fp, r1
 800ff26:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ff2a:	d0d8      	beq.n	800fede <_strtod_l+0x526>
 800ff2c:	f1b8 0f1f 	cmp.w	r8, #31
 800ff30:	dd1e      	ble.n	800ff70 <_strtod_l+0x5b8>
 800ff32:	2500      	movs	r5, #0
 800ff34:	462e      	mov	r6, r5
 800ff36:	9509      	str	r5, [sp, #36]	; 0x24
 800ff38:	9507      	str	r5, [sp, #28]
 800ff3a:	2322      	movs	r3, #34	; 0x22
 800ff3c:	f04f 0a00 	mov.w	sl, #0
 800ff40:	f04f 0b00 	mov.w	fp, #0
 800ff44:	6023      	str	r3, [r4, #0]
 800ff46:	e789      	b.n	800fe5c <_strtod_l+0x4a4>
 800ff48:	0813cf19 	.word	0x0813cf19
 800ff4c:	0813cf5c 	.word	0x0813cf5c
 800ff50:	0813cf11 	.word	0x0813cf11
 800ff54:	0813d09c 	.word	0x0813d09c
 800ff58:	0813ce7d 	.word	0x0813ce7d
 800ff5c:	0813d298 	.word	0x0813d298
 800ff60:	0813d270 	.word	0x0813d270
 800ff64:	7ff00000 	.word	0x7ff00000
 800ff68:	7ca00000 	.word	0x7ca00000
 800ff6c:	7fefffff 	.word	0x7fefffff
 800ff70:	f018 0310 	ands.w	r3, r8, #16
 800ff74:	bf18      	it	ne
 800ff76:	236a      	movne	r3, #106	; 0x6a
 800ff78:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8010330 <_strtod_l+0x978>
 800ff7c:	9304      	str	r3, [sp, #16]
 800ff7e:	4650      	mov	r0, sl
 800ff80:	4659      	mov	r1, fp
 800ff82:	2300      	movs	r3, #0
 800ff84:	f018 0f01 	tst.w	r8, #1
 800ff88:	d004      	beq.n	800ff94 <_strtod_l+0x5dc>
 800ff8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ff8e:	f7f0 fb43 	bl	8000618 <__aeabi_dmul>
 800ff92:	2301      	movs	r3, #1
 800ff94:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ff98:	f109 0908 	add.w	r9, r9, #8
 800ff9c:	d1f2      	bne.n	800ff84 <_strtod_l+0x5cc>
 800ff9e:	b10b      	cbz	r3, 800ffa4 <_strtod_l+0x5ec>
 800ffa0:	4682      	mov	sl, r0
 800ffa2:	468b      	mov	fp, r1
 800ffa4:	9b04      	ldr	r3, [sp, #16]
 800ffa6:	b1bb      	cbz	r3, 800ffd8 <_strtod_l+0x620>
 800ffa8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ffac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	4659      	mov	r1, fp
 800ffb4:	dd10      	ble.n	800ffd8 <_strtod_l+0x620>
 800ffb6:	2b1f      	cmp	r3, #31
 800ffb8:	f340 8128 	ble.w	801020c <_strtod_l+0x854>
 800ffbc:	2b34      	cmp	r3, #52	; 0x34
 800ffbe:	bfde      	ittt	le
 800ffc0:	3b20      	suble	r3, #32
 800ffc2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800ffc6:	fa02 f303 	lslle.w	r3, r2, r3
 800ffca:	f04f 0a00 	mov.w	sl, #0
 800ffce:	bfcc      	ite	gt
 800ffd0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ffd4:	ea03 0b01 	andle.w	fp, r3, r1
 800ffd8:	2200      	movs	r2, #0
 800ffda:	2300      	movs	r3, #0
 800ffdc:	4650      	mov	r0, sl
 800ffde:	4659      	mov	r1, fp
 800ffe0:	f7f0 fd82 	bl	8000ae8 <__aeabi_dcmpeq>
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	d1a4      	bne.n	800ff32 <_strtod_l+0x57a>
 800ffe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffea:	9300      	str	r3, [sp, #0]
 800ffec:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ffee:	462b      	mov	r3, r5
 800fff0:	463a      	mov	r2, r7
 800fff2:	4620      	mov	r0, r4
 800fff4:	f002 f90c 	bl	8012210 <__s2b>
 800fff8:	9009      	str	r0, [sp, #36]	; 0x24
 800fffa:	2800      	cmp	r0, #0
 800fffc:	f43f af24 	beq.w	800fe48 <_strtod_l+0x490>
 8010000:	9b07      	ldr	r3, [sp, #28]
 8010002:	1b9e      	subs	r6, r3, r6
 8010004:	9b08      	ldr	r3, [sp, #32]
 8010006:	2b00      	cmp	r3, #0
 8010008:	bfb4      	ite	lt
 801000a:	4633      	movlt	r3, r6
 801000c:	2300      	movge	r3, #0
 801000e:	9310      	str	r3, [sp, #64]	; 0x40
 8010010:	9b08      	ldr	r3, [sp, #32]
 8010012:	2500      	movs	r5, #0
 8010014:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010018:	9318      	str	r3, [sp, #96]	; 0x60
 801001a:	462e      	mov	r6, r5
 801001c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801001e:	4620      	mov	r0, r4
 8010020:	6859      	ldr	r1, [r3, #4]
 8010022:	f002 f849 	bl	80120b8 <_Balloc>
 8010026:	9007      	str	r0, [sp, #28]
 8010028:	2800      	cmp	r0, #0
 801002a:	f43f af11 	beq.w	800fe50 <_strtod_l+0x498>
 801002e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010030:	691a      	ldr	r2, [r3, #16]
 8010032:	3202      	adds	r2, #2
 8010034:	f103 010c 	add.w	r1, r3, #12
 8010038:	0092      	lsls	r2, r2, #2
 801003a:	300c      	adds	r0, #12
 801003c:	f7fe fbe0 	bl	800e800 <memcpy>
 8010040:	ec4b ab10 	vmov	d0, sl, fp
 8010044:	aa20      	add	r2, sp, #128	; 0x80
 8010046:	a91f      	add	r1, sp, #124	; 0x7c
 8010048:	4620      	mov	r0, r4
 801004a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801004e:	f002 fc1b 	bl	8012888 <__d2b>
 8010052:	901e      	str	r0, [sp, #120]	; 0x78
 8010054:	2800      	cmp	r0, #0
 8010056:	f43f aefb 	beq.w	800fe50 <_strtod_l+0x498>
 801005a:	2101      	movs	r1, #1
 801005c:	4620      	mov	r0, r4
 801005e:	f002 f971 	bl	8012344 <__i2b>
 8010062:	4606      	mov	r6, r0
 8010064:	2800      	cmp	r0, #0
 8010066:	f43f aef3 	beq.w	800fe50 <_strtod_l+0x498>
 801006a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801006c:	9904      	ldr	r1, [sp, #16]
 801006e:	2b00      	cmp	r3, #0
 8010070:	bfab      	itete	ge
 8010072:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8010074:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8010076:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8010078:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801007c:	bfac      	ite	ge
 801007e:	eb03 0902 	addge.w	r9, r3, r2
 8010082:	1ad7      	sublt	r7, r2, r3
 8010084:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010086:	eba3 0801 	sub.w	r8, r3, r1
 801008a:	4490      	add	r8, r2
 801008c:	4ba3      	ldr	r3, [pc, #652]	; (801031c <_strtod_l+0x964>)
 801008e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8010092:	4598      	cmp	r8, r3
 8010094:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010098:	f280 80cc 	bge.w	8010234 <_strtod_l+0x87c>
 801009c:	eba3 0308 	sub.w	r3, r3, r8
 80100a0:	2b1f      	cmp	r3, #31
 80100a2:	eba2 0203 	sub.w	r2, r2, r3
 80100a6:	f04f 0101 	mov.w	r1, #1
 80100aa:	f300 80b6 	bgt.w	801021a <_strtod_l+0x862>
 80100ae:	fa01 f303 	lsl.w	r3, r1, r3
 80100b2:	9311      	str	r3, [sp, #68]	; 0x44
 80100b4:	2300      	movs	r3, #0
 80100b6:	930c      	str	r3, [sp, #48]	; 0x30
 80100b8:	eb09 0802 	add.w	r8, r9, r2
 80100bc:	9b04      	ldr	r3, [sp, #16]
 80100be:	45c1      	cmp	r9, r8
 80100c0:	4417      	add	r7, r2
 80100c2:	441f      	add	r7, r3
 80100c4:	464b      	mov	r3, r9
 80100c6:	bfa8      	it	ge
 80100c8:	4643      	movge	r3, r8
 80100ca:	42bb      	cmp	r3, r7
 80100cc:	bfa8      	it	ge
 80100ce:	463b      	movge	r3, r7
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	bfc2      	ittt	gt
 80100d4:	eba8 0803 	subgt.w	r8, r8, r3
 80100d8:	1aff      	subgt	r7, r7, r3
 80100da:	eba9 0903 	subgt.w	r9, r9, r3
 80100de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	dd17      	ble.n	8010114 <_strtod_l+0x75c>
 80100e4:	4631      	mov	r1, r6
 80100e6:	461a      	mov	r2, r3
 80100e8:	4620      	mov	r0, r4
 80100ea:	f002 f9e7 	bl	80124bc <__pow5mult>
 80100ee:	4606      	mov	r6, r0
 80100f0:	2800      	cmp	r0, #0
 80100f2:	f43f aead 	beq.w	800fe50 <_strtod_l+0x498>
 80100f6:	4601      	mov	r1, r0
 80100f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80100fa:	4620      	mov	r0, r4
 80100fc:	f002 f938 	bl	8012370 <__multiply>
 8010100:	900f      	str	r0, [sp, #60]	; 0x3c
 8010102:	2800      	cmp	r0, #0
 8010104:	f43f aea4 	beq.w	800fe50 <_strtod_l+0x498>
 8010108:	991e      	ldr	r1, [sp, #120]	; 0x78
 801010a:	4620      	mov	r0, r4
 801010c:	f002 f814 	bl	8012138 <_Bfree>
 8010110:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010112:	931e      	str	r3, [sp, #120]	; 0x78
 8010114:	f1b8 0f00 	cmp.w	r8, #0
 8010118:	f300 8091 	bgt.w	801023e <_strtod_l+0x886>
 801011c:	9b08      	ldr	r3, [sp, #32]
 801011e:	2b00      	cmp	r3, #0
 8010120:	dd08      	ble.n	8010134 <_strtod_l+0x77c>
 8010122:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010124:	9907      	ldr	r1, [sp, #28]
 8010126:	4620      	mov	r0, r4
 8010128:	f002 f9c8 	bl	80124bc <__pow5mult>
 801012c:	9007      	str	r0, [sp, #28]
 801012e:	2800      	cmp	r0, #0
 8010130:	f43f ae8e 	beq.w	800fe50 <_strtod_l+0x498>
 8010134:	2f00      	cmp	r7, #0
 8010136:	dd08      	ble.n	801014a <_strtod_l+0x792>
 8010138:	9907      	ldr	r1, [sp, #28]
 801013a:	463a      	mov	r2, r7
 801013c:	4620      	mov	r0, r4
 801013e:	f002 fa17 	bl	8012570 <__lshift>
 8010142:	9007      	str	r0, [sp, #28]
 8010144:	2800      	cmp	r0, #0
 8010146:	f43f ae83 	beq.w	800fe50 <_strtod_l+0x498>
 801014a:	f1b9 0f00 	cmp.w	r9, #0
 801014e:	dd08      	ble.n	8010162 <_strtod_l+0x7aa>
 8010150:	4631      	mov	r1, r6
 8010152:	464a      	mov	r2, r9
 8010154:	4620      	mov	r0, r4
 8010156:	f002 fa0b 	bl	8012570 <__lshift>
 801015a:	4606      	mov	r6, r0
 801015c:	2800      	cmp	r0, #0
 801015e:	f43f ae77 	beq.w	800fe50 <_strtod_l+0x498>
 8010162:	9a07      	ldr	r2, [sp, #28]
 8010164:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010166:	4620      	mov	r0, r4
 8010168:	f002 fa8a 	bl	8012680 <__mdiff>
 801016c:	4605      	mov	r5, r0
 801016e:	2800      	cmp	r0, #0
 8010170:	f43f ae6e 	beq.w	800fe50 <_strtod_l+0x498>
 8010174:	68c3      	ldr	r3, [r0, #12]
 8010176:	930f      	str	r3, [sp, #60]	; 0x3c
 8010178:	2300      	movs	r3, #0
 801017a:	60c3      	str	r3, [r0, #12]
 801017c:	4631      	mov	r1, r6
 801017e:	f002 fa63 	bl	8012648 <__mcmp>
 8010182:	2800      	cmp	r0, #0
 8010184:	da65      	bge.n	8010252 <_strtod_l+0x89a>
 8010186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010188:	ea53 030a 	orrs.w	r3, r3, sl
 801018c:	f040 8087 	bne.w	801029e <_strtod_l+0x8e6>
 8010190:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010194:	2b00      	cmp	r3, #0
 8010196:	f040 8082 	bne.w	801029e <_strtod_l+0x8e6>
 801019a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801019e:	0d1b      	lsrs	r3, r3, #20
 80101a0:	051b      	lsls	r3, r3, #20
 80101a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80101a6:	d97a      	bls.n	801029e <_strtod_l+0x8e6>
 80101a8:	696b      	ldr	r3, [r5, #20]
 80101aa:	b913      	cbnz	r3, 80101b2 <_strtod_l+0x7fa>
 80101ac:	692b      	ldr	r3, [r5, #16]
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	dd75      	ble.n	801029e <_strtod_l+0x8e6>
 80101b2:	4629      	mov	r1, r5
 80101b4:	2201      	movs	r2, #1
 80101b6:	4620      	mov	r0, r4
 80101b8:	f002 f9da 	bl	8012570 <__lshift>
 80101bc:	4631      	mov	r1, r6
 80101be:	4605      	mov	r5, r0
 80101c0:	f002 fa42 	bl	8012648 <__mcmp>
 80101c4:	2800      	cmp	r0, #0
 80101c6:	dd6a      	ble.n	801029e <_strtod_l+0x8e6>
 80101c8:	9904      	ldr	r1, [sp, #16]
 80101ca:	4a55      	ldr	r2, [pc, #340]	; (8010320 <_strtod_l+0x968>)
 80101cc:	465b      	mov	r3, fp
 80101ce:	2900      	cmp	r1, #0
 80101d0:	f000 8085 	beq.w	80102de <_strtod_l+0x926>
 80101d4:	ea02 010b 	and.w	r1, r2, fp
 80101d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80101dc:	dc7f      	bgt.n	80102de <_strtod_l+0x926>
 80101de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80101e2:	f77f aeaa 	ble.w	800ff3a <_strtod_l+0x582>
 80101e6:	4a4f      	ldr	r2, [pc, #316]	; (8010324 <_strtod_l+0x96c>)
 80101e8:	2300      	movs	r3, #0
 80101ea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80101ee:	4650      	mov	r0, sl
 80101f0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80101f4:	4659      	mov	r1, fp
 80101f6:	f7f0 fa0f 	bl	8000618 <__aeabi_dmul>
 80101fa:	460b      	mov	r3, r1
 80101fc:	4303      	orrs	r3, r0
 80101fe:	bf08      	it	eq
 8010200:	2322      	moveq	r3, #34	; 0x22
 8010202:	4682      	mov	sl, r0
 8010204:	468b      	mov	fp, r1
 8010206:	bf08      	it	eq
 8010208:	6023      	streq	r3, [r4, #0]
 801020a:	e62b      	b.n	800fe64 <_strtod_l+0x4ac>
 801020c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010210:	fa02 f303 	lsl.w	r3, r2, r3
 8010214:	ea03 0a0a 	and.w	sl, r3, sl
 8010218:	e6de      	b.n	800ffd8 <_strtod_l+0x620>
 801021a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801021e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010222:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010226:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801022a:	fa01 f308 	lsl.w	r3, r1, r8
 801022e:	930c      	str	r3, [sp, #48]	; 0x30
 8010230:	9111      	str	r1, [sp, #68]	; 0x44
 8010232:	e741      	b.n	80100b8 <_strtod_l+0x700>
 8010234:	2300      	movs	r3, #0
 8010236:	930c      	str	r3, [sp, #48]	; 0x30
 8010238:	2301      	movs	r3, #1
 801023a:	9311      	str	r3, [sp, #68]	; 0x44
 801023c:	e73c      	b.n	80100b8 <_strtod_l+0x700>
 801023e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8010240:	4642      	mov	r2, r8
 8010242:	4620      	mov	r0, r4
 8010244:	f002 f994 	bl	8012570 <__lshift>
 8010248:	901e      	str	r0, [sp, #120]	; 0x78
 801024a:	2800      	cmp	r0, #0
 801024c:	f47f af66 	bne.w	801011c <_strtod_l+0x764>
 8010250:	e5fe      	b.n	800fe50 <_strtod_l+0x498>
 8010252:	465f      	mov	r7, fp
 8010254:	d16e      	bne.n	8010334 <_strtod_l+0x97c>
 8010256:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010258:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801025c:	b342      	cbz	r2, 80102b0 <_strtod_l+0x8f8>
 801025e:	4a32      	ldr	r2, [pc, #200]	; (8010328 <_strtod_l+0x970>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d128      	bne.n	80102b6 <_strtod_l+0x8fe>
 8010264:	9b04      	ldr	r3, [sp, #16]
 8010266:	4650      	mov	r0, sl
 8010268:	b1eb      	cbz	r3, 80102a6 <_strtod_l+0x8ee>
 801026a:	4a2d      	ldr	r2, [pc, #180]	; (8010320 <_strtod_l+0x968>)
 801026c:	403a      	ands	r2, r7
 801026e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8010272:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010276:	d819      	bhi.n	80102ac <_strtod_l+0x8f4>
 8010278:	0d12      	lsrs	r2, r2, #20
 801027a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801027e:	fa01 f303 	lsl.w	r3, r1, r3
 8010282:	4298      	cmp	r0, r3
 8010284:	d117      	bne.n	80102b6 <_strtod_l+0x8fe>
 8010286:	4b29      	ldr	r3, [pc, #164]	; (801032c <_strtod_l+0x974>)
 8010288:	429f      	cmp	r7, r3
 801028a:	d102      	bne.n	8010292 <_strtod_l+0x8da>
 801028c:	3001      	adds	r0, #1
 801028e:	f43f addf 	beq.w	800fe50 <_strtod_l+0x498>
 8010292:	4b23      	ldr	r3, [pc, #140]	; (8010320 <_strtod_l+0x968>)
 8010294:	403b      	ands	r3, r7
 8010296:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801029a:	f04f 0a00 	mov.w	sl, #0
 801029e:	9b04      	ldr	r3, [sp, #16]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d1a0      	bne.n	80101e6 <_strtod_l+0x82e>
 80102a4:	e5de      	b.n	800fe64 <_strtod_l+0x4ac>
 80102a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102aa:	e7ea      	b.n	8010282 <_strtod_l+0x8ca>
 80102ac:	460b      	mov	r3, r1
 80102ae:	e7e8      	b.n	8010282 <_strtod_l+0x8ca>
 80102b0:	ea53 030a 	orrs.w	r3, r3, sl
 80102b4:	d088      	beq.n	80101c8 <_strtod_l+0x810>
 80102b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102b8:	b1db      	cbz	r3, 80102f2 <_strtod_l+0x93a>
 80102ba:	423b      	tst	r3, r7
 80102bc:	d0ef      	beq.n	801029e <_strtod_l+0x8e6>
 80102be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102c0:	9a04      	ldr	r2, [sp, #16]
 80102c2:	4650      	mov	r0, sl
 80102c4:	4659      	mov	r1, fp
 80102c6:	b1c3      	cbz	r3, 80102fa <_strtod_l+0x942>
 80102c8:	f7ff fb58 	bl	800f97c <sulp>
 80102cc:	4602      	mov	r2, r0
 80102ce:	460b      	mov	r3, r1
 80102d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80102d4:	f7ef ffea 	bl	80002ac <__adddf3>
 80102d8:	4682      	mov	sl, r0
 80102da:	468b      	mov	fp, r1
 80102dc:	e7df      	b.n	801029e <_strtod_l+0x8e6>
 80102de:	4013      	ands	r3, r2
 80102e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80102e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80102e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80102ec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80102f0:	e7d5      	b.n	801029e <_strtod_l+0x8e6>
 80102f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80102f4:	ea13 0f0a 	tst.w	r3, sl
 80102f8:	e7e0      	b.n	80102bc <_strtod_l+0x904>
 80102fa:	f7ff fb3f 	bl	800f97c <sulp>
 80102fe:	4602      	mov	r2, r0
 8010300:	460b      	mov	r3, r1
 8010302:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010306:	f7ef ffcf 	bl	80002a8 <__aeabi_dsub>
 801030a:	2200      	movs	r2, #0
 801030c:	2300      	movs	r3, #0
 801030e:	4682      	mov	sl, r0
 8010310:	468b      	mov	fp, r1
 8010312:	f7f0 fbe9 	bl	8000ae8 <__aeabi_dcmpeq>
 8010316:	2800      	cmp	r0, #0
 8010318:	d0c1      	beq.n	801029e <_strtod_l+0x8e6>
 801031a:	e60e      	b.n	800ff3a <_strtod_l+0x582>
 801031c:	fffffc02 	.word	0xfffffc02
 8010320:	7ff00000 	.word	0x7ff00000
 8010324:	39500000 	.word	0x39500000
 8010328:	000fffff 	.word	0x000fffff
 801032c:	7fefffff 	.word	0x7fefffff
 8010330:	0813cf70 	.word	0x0813cf70
 8010334:	4631      	mov	r1, r6
 8010336:	4628      	mov	r0, r5
 8010338:	f002 fb02 	bl	8012940 <__ratio>
 801033c:	ec59 8b10 	vmov	r8, r9, d0
 8010340:	ee10 0a10 	vmov	r0, s0
 8010344:	2200      	movs	r2, #0
 8010346:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801034a:	4649      	mov	r1, r9
 801034c:	f7f0 fbe0 	bl	8000b10 <__aeabi_dcmple>
 8010350:	2800      	cmp	r0, #0
 8010352:	d07c      	beq.n	801044e <_strtod_l+0xa96>
 8010354:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010356:	2b00      	cmp	r3, #0
 8010358:	d04c      	beq.n	80103f4 <_strtod_l+0xa3c>
 801035a:	4b95      	ldr	r3, [pc, #596]	; (80105b0 <_strtod_l+0xbf8>)
 801035c:	2200      	movs	r2, #0
 801035e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010362:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80105b0 <_strtod_l+0xbf8>
 8010366:	f04f 0800 	mov.w	r8, #0
 801036a:	4b92      	ldr	r3, [pc, #584]	; (80105b4 <_strtod_l+0xbfc>)
 801036c:	403b      	ands	r3, r7
 801036e:	9311      	str	r3, [sp, #68]	; 0x44
 8010370:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010372:	4b91      	ldr	r3, [pc, #580]	; (80105b8 <_strtod_l+0xc00>)
 8010374:	429a      	cmp	r2, r3
 8010376:	f040 80b2 	bne.w	80104de <_strtod_l+0xb26>
 801037a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801037e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010382:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010386:	ec4b ab10 	vmov	d0, sl, fp
 801038a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801038e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010392:	f002 f9fd 	bl	8012790 <__ulp>
 8010396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801039a:	ec53 2b10 	vmov	r2, r3, d0
 801039e:	f7f0 f93b 	bl	8000618 <__aeabi_dmul>
 80103a2:	4652      	mov	r2, sl
 80103a4:	465b      	mov	r3, fp
 80103a6:	f7ef ff81 	bl	80002ac <__adddf3>
 80103aa:	460b      	mov	r3, r1
 80103ac:	4981      	ldr	r1, [pc, #516]	; (80105b4 <_strtod_l+0xbfc>)
 80103ae:	4a83      	ldr	r2, [pc, #524]	; (80105bc <_strtod_l+0xc04>)
 80103b0:	4019      	ands	r1, r3
 80103b2:	4291      	cmp	r1, r2
 80103b4:	4682      	mov	sl, r0
 80103b6:	d95e      	bls.n	8010476 <_strtod_l+0xabe>
 80103b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80103ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80103be:	4293      	cmp	r3, r2
 80103c0:	d103      	bne.n	80103ca <_strtod_l+0xa12>
 80103c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103c4:	3301      	adds	r3, #1
 80103c6:	f43f ad43 	beq.w	800fe50 <_strtod_l+0x498>
 80103ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80105c8 <_strtod_l+0xc10>
 80103ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80103d2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80103d4:	4620      	mov	r0, r4
 80103d6:	f001 feaf 	bl	8012138 <_Bfree>
 80103da:	9907      	ldr	r1, [sp, #28]
 80103dc:	4620      	mov	r0, r4
 80103de:	f001 feab 	bl	8012138 <_Bfree>
 80103e2:	4631      	mov	r1, r6
 80103e4:	4620      	mov	r0, r4
 80103e6:	f001 fea7 	bl	8012138 <_Bfree>
 80103ea:	4629      	mov	r1, r5
 80103ec:	4620      	mov	r0, r4
 80103ee:	f001 fea3 	bl	8012138 <_Bfree>
 80103f2:	e613      	b.n	801001c <_strtod_l+0x664>
 80103f4:	f1ba 0f00 	cmp.w	sl, #0
 80103f8:	d11b      	bne.n	8010432 <_strtod_l+0xa7a>
 80103fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80103fe:	b9f3      	cbnz	r3, 801043e <_strtod_l+0xa86>
 8010400:	4b6b      	ldr	r3, [pc, #428]	; (80105b0 <_strtod_l+0xbf8>)
 8010402:	2200      	movs	r2, #0
 8010404:	4640      	mov	r0, r8
 8010406:	4649      	mov	r1, r9
 8010408:	f7f0 fb78 	bl	8000afc <__aeabi_dcmplt>
 801040c:	b9d0      	cbnz	r0, 8010444 <_strtod_l+0xa8c>
 801040e:	4640      	mov	r0, r8
 8010410:	4649      	mov	r1, r9
 8010412:	4b6b      	ldr	r3, [pc, #428]	; (80105c0 <_strtod_l+0xc08>)
 8010414:	2200      	movs	r2, #0
 8010416:	f7f0 f8ff 	bl	8000618 <__aeabi_dmul>
 801041a:	4680      	mov	r8, r0
 801041c:	4689      	mov	r9, r1
 801041e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010422:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8010426:	931b      	str	r3, [sp, #108]	; 0x6c
 8010428:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801042c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010430:	e79b      	b.n	801036a <_strtod_l+0x9b2>
 8010432:	f1ba 0f01 	cmp.w	sl, #1
 8010436:	d102      	bne.n	801043e <_strtod_l+0xa86>
 8010438:	2f00      	cmp	r7, #0
 801043a:	f43f ad7e 	beq.w	800ff3a <_strtod_l+0x582>
 801043e:	4b61      	ldr	r3, [pc, #388]	; (80105c4 <_strtod_l+0xc0c>)
 8010440:	2200      	movs	r2, #0
 8010442:	e78c      	b.n	801035e <_strtod_l+0x9a6>
 8010444:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80105c0 <_strtod_l+0xc08>
 8010448:	f04f 0800 	mov.w	r8, #0
 801044c:	e7e7      	b.n	801041e <_strtod_l+0xa66>
 801044e:	4b5c      	ldr	r3, [pc, #368]	; (80105c0 <_strtod_l+0xc08>)
 8010450:	4640      	mov	r0, r8
 8010452:	4649      	mov	r1, r9
 8010454:	2200      	movs	r2, #0
 8010456:	f7f0 f8df 	bl	8000618 <__aeabi_dmul>
 801045a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801045c:	4680      	mov	r8, r0
 801045e:	4689      	mov	r9, r1
 8010460:	b933      	cbnz	r3, 8010470 <_strtod_l+0xab8>
 8010462:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010466:	9012      	str	r0, [sp, #72]	; 0x48
 8010468:	9313      	str	r3, [sp, #76]	; 0x4c
 801046a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801046e:	e7dd      	b.n	801042c <_strtod_l+0xa74>
 8010470:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8010474:	e7f9      	b.n	801046a <_strtod_l+0xab2>
 8010476:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801047a:	9b04      	ldr	r3, [sp, #16]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d1a8      	bne.n	80103d2 <_strtod_l+0xa1a>
 8010480:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010484:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010486:	0d1b      	lsrs	r3, r3, #20
 8010488:	051b      	lsls	r3, r3, #20
 801048a:	429a      	cmp	r2, r3
 801048c:	d1a1      	bne.n	80103d2 <_strtod_l+0xa1a>
 801048e:	4640      	mov	r0, r8
 8010490:	4649      	mov	r1, r9
 8010492:	f7f0 fc35 	bl	8000d00 <__aeabi_d2lz>
 8010496:	f7f0 f891 	bl	80005bc <__aeabi_l2d>
 801049a:	4602      	mov	r2, r0
 801049c:	460b      	mov	r3, r1
 801049e:	4640      	mov	r0, r8
 80104a0:	4649      	mov	r1, r9
 80104a2:	f7ef ff01 	bl	80002a8 <__aeabi_dsub>
 80104a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80104a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80104ac:	ea43 030a 	orr.w	r3, r3, sl
 80104b0:	4313      	orrs	r3, r2
 80104b2:	4680      	mov	r8, r0
 80104b4:	4689      	mov	r9, r1
 80104b6:	d053      	beq.n	8010560 <_strtod_l+0xba8>
 80104b8:	a335      	add	r3, pc, #212	; (adr r3, 8010590 <_strtod_l+0xbd8>)
 80104ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104be:	f7f0 fb1d 	bl	8000afc <__aeabi_dcmplt>
 80104c2:	2800      	cmp	r0, #0
 80104c4:	f47f acce 	bne.w	800fe64 <_strtod_l+0x4ac>
 80104c8:	a333      	add	r3, pc, #204	; (adr r3, 8010598 <_strtod_l+0xbe0>)
 80104ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ce:	4640      	mov	r0, r8
 80104d0:	4649      	mov	r1, r9
 80104d2:	f7f0 fb31 	bl	8000b38 <__aeabi_dcmpgt>
 80104d6:	2800      	cmp	r0, #0
 80104d8:	f43f af7b 	beq.w	80103d2 <_strtod_l+0xa1a>
 80104dc:	e4c2      	b.n	800fe64 <_strtod_l+0x4ac>
 80104de:	9b04      	ldr	r3, [sp, #16]
 80104e0:	b333      	cbz	r3, 8010530 <_strtod_l+0xb78>
 80104e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80104e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80104e8:	d822      	bhi.n	8010530 <_strtod_l+0xb78>
 80104ea:	a32d      	add	r3, pc, #180	; (adr r3, 80105a0 <_strtod_l+0xbe8>)
 80104ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f0:	4640      	mov	r0, r8
 80104f2:	4649      	mov	r1, r9
 80104f4:	f7f0 fb0c 	bl	8000b10 <__aeabi_dcmple>
 80104f8:	b1a0      	cbz	r0, 8010524 <_strtod_l+0xb6c>
 80104fa:	4649      	mov	r1, r9
 80104fc:	4640      	mov	r0, r8
 80104fe:	f7f0 fb63 	bl	8000bc8 <__aeabi_d2uiz>
 8010502:	2801      	cmp	r0, #1
 8010504:	bf38      	it	cc
 8010506:	2001      	movcc	r0, #1
 8010508:	f7f0 f80c 	bl	8000524 <__aeabi_ui2d>
 801050c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801050e:	4680      	mov	r8, r0
 8010510:	4689      	mov	r9, r1
 8010512:	bb13      	cbnz	r3, 801055a <_strtod_l+0xba2>
 8010514:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010518:	9014      	str	r0, [sp, #80]	; 0x50
 801051a:	9315      	str	r3, [sp, #84]	; 0x54
 801051c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010520:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010526:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8010528:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801052c:	1a9b      	subs	r3, r3, r2
 801052e:	930d      	str	r3, [sp, #52]	; 0x34
 8010530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010534:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010538:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801053c:	f002 f928 	bl	8012790 <__ulp>
 8010540:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010544:	ec53 2b10 	vmov	r2, r3, d0
 8010548:	f7f0 f866 	bl	8000618 <__aeabi_dmul>
 801054c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010550:	f7ef feac 	bl	80002ac <__adddf3>
 8010554:	4682      	mov	sl, r0
 8010556:	468b      	mov	fp, r1
 8010558:	e78f      	b.n	801047a <_strtod_l+0xac2>
 801055a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 801055e:	e7dd      	b.n	801051c <_strtod_l+0xb64>
 8010560:	a311      	add	r3, pc, #68	; (adr r3, 80105a8 <_strtod_l+0xbf0>)
 8010562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010566:	f7f0 fac9 	bl	8000afc <__aeabi_dcmplt>
 801056a:	e7b4      	b.n	80104d6 <_strtod_l+0xb1e>
 801056c:	2300      	movs	r3, #0
 801056e:	930e      	str	r3, [sp, #56]	; 0x38
 8010570:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010572:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010574:	6013      	str	r3, [r2, #0]
 8010576:	f7ff ba65 	b.w	800fa44 <_strtod_l+0x8c>
 801057a:	2b65      	cmp	r3, #101	; 0x65
 801057c:	f43f ab5d 	beq.w	800fc3a <_strtod_l+0x282>
 8010580:	2b45      	cmp	r3, #69	; 0x45
 8010582:	f43f ab5a 	beq.w	800fc3a <_strtod_l+0x282>
 8010586:	2201      	movs	r2, #1
 8010588:	f7ff bb92 	b.w	800fcb0 <_strtod_l+0x2f8>
 801058c:	f3af 8000 	nop.w
 8010590:	94a03595 	.word	0x94a03595
 8010594:	3fdfffff 	.word	0x3fdfffff
 8010598:	35afe535 	.word	0x35afe535
 801059c:	3fe00000 	.word	0x3fe00000
 80105a0:	ffc00000 	.word	0xffc00000
 80105a4:	41dfffff 	.word	0x41dfffff
 80105a8:	94a03595 	.word	0x94a03595
 80105ac:	3fcfffff 	.word	0x3fcfffff
 80105b0:	3ff00000 	.word	0x3ff00000
 80105b4:	7ff00000 	.word	0x7ff00000
 80105b8:	7fe00000 	.word	0x7fe00000
 80105bc:	7c9fffff 	.word	0x7c9fffff
 80105c0:	3fe00000 	.word	0x3fe00000
 80105c4:	bff00000 	.word	0xbff00000
 80105c8:	7fefffff 	.word	0x7fefffff

080105cc <_strtod_r>:
 80105cc:	4b01      	ldr	r3, [pc, #4]	; (80105d4 <_strtod_r+0x8>)
 80105ce:	f7ff b9f3 	b.w	800f9b8 <_strtod_l>
 80105d2:	bf00      	nop
 80105d4:	20000af0 	.word	0x20000af0

080105d8 <_strtol_l.isra.0>:
 80105d8:	2b01      	cmp	r3, #1
 80105da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105de:	d001      	beq.n	80105e4 <_strtol_l.isra.0+0xc>
 80105e0:	2b24      	cmp	r3, #36	; 0x24
 80105e2:	d906      	bls.n	80105f2 <_strtol_l.isra.0+0x1a>
 80105e4:	f7fe f8da 	bl	800e79c <__errno>
 80105e8:	2316      	movs	r3, #22
 80105ea:	6003      	str	r3, [r0, #0]
 80105ec:	2000      	movs	r0, #0
 80105ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105f2:	4f3a      	ldr	r7, [pc, #232]	; (80106dc <_strtol_l.isra.0+0x104>)
 80105f4:	468e      	mov	lr, r1
 80105f6:	4676      	mov	r6, lr
 80105f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80105fc:	5de5      	ldrb	r5, [r4, r7]
 80105fe:	f015 0508 	ands.w	r5, r5, #8
 8010602:	d1f8      	bne.n	80105f6 <_strtol_l.isra.0+0x1e>
 8010604:	2c2d      	cmp	r4, #45	; 0x2d
 8010606:	d134      	bne.n	8010672 <_strtol_l.isra.0+0x9a>
 8010608:	f89e 4000 	ldrb.w	r4, [lr]
 801060c:	f04f 0801 	mov.w	r8, #1
 8010610:	f106 0e02 	add.w	lr, r6, #2
 8010614:	2b00      	cmp	r3, #0
 8010616:	d05c      	beq.n	80106d2 <_strtol_l.isra.0+0xfa>
 8010618:	2b10      	cmp	r3, #16
 801061a:	d10c      	bne.n	8010636 <_strtol_l.isra.0+0x5e>
 801061c:	2c30      	cmp	r4, #48	; 0x30
 801061e:	d10a      	bne.n	8010636 <_strtol_l.isra.0+0x5e>
 8010620:	f89e 4000 	ldrb.w	r4, [lr]
 8010624:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010628:	2c58      	cmp	r4, #88	; 0x58
 801062a:	d14d      	bne.n	80106c8 <_strtol_l.isra.0+0xf0>
 801062c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8010630:	2310      	movs	r3, #16
 8010632:	f10e 0e02 	add.w	lr, lr, #2
 8010636:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 801063a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801063e:	2600      	movs	r6, #0
 8010640:	fbbc f9f3 	udiv	r9, ip, r3
 8010644:	4635      	mov	r5, r6
 8010646:	fb03 ca19 	mls	sl, r3, r9, ip
 801064a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801064e:	2f09      	cmp	r7, #9
 8010650:	d818      	bhi.n	8010684 <_strtol_l.isra.0+0xac>
 8010652:	463c      	mov	r4, r7
 8010654:	42a3      	cmp	r3, r4
 8010656:	dd24      	ble.n	80106a2 <_strtol_l.isra.0+0xca>
 8010658:	2e00      	cmp	r6, #0
 801065a:	db1f      	blt.n	801069c <_strtol_l.isra.0+0xc4>
 801065c:	45a9      	cmp	r9, r5
 801065e:	d31d      	bcc.n	801069c <_strtol_l.isra.0+0xc4>
 8010660:	d101      	bne.n	8010666 <_strtol_l.isra.0+0x8e>
 8010662:	45a2      	cmp	sl, r4
 8010664:	db1a      	blt.n	801069c <_strtol_l.isra.0+0xc4>
 8010666:	fb05 4503 	mla	r5, r5, r3, r4
 801066a:	2601      	movs	r6, #1
 801066c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8010670:	e7eb      	b.n	801064a <_strtol_l.isra.0+0x72>
 8010672:	2c2b      	cmp	r4, #43	; 0x2b
 8010674:	bf08      	it	eq
 8010676:	f89e 4000 	ldrbeq.w	r4, [lr]
 801067a:	46a8      	mov	r8, r5
 801067c:	bf08      	it	eq
 801067e:	f106 0e02 	addeq.w	lr, r6, #2
 8010682:	e7c7      	b.n	8010614 <_strtol_l.isra.0+0x3c>
 8010684:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8010688:	2f19      	cmp	r7, #25
 801068a:	d801      	bhi.n	8010690 <_strtol_l.isra.0+0xb8>
 801068c:	3c37      	subs	r4, #55	; 0x37
 801068e:	e7e1      	b.n	8010654 <_strtol_l.isra.0+0x7c>
 8010690:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8010694:	2f19      	cmp	r7, #25
 8010696:	d804      	bhi.n	80106a2 <_strtol_l.isra.0+0xca>
 8010698:	3c57      	subs	r4, #87	; 0x57
 801069a:	e7db      	b.n	8010654 <_strtol_l.isra.0+0x7c>
 801069c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80106a0:	e7e4      	b.n	801066c <_strtol_l.isra.0+0x94>
 80106a2:	2e00      	cmp	r6, #0
 80106a4:	da05      	bge.n	80106b2 <_strtol_l.isra.0+0xda>
 80106a6:	2322      	movs	r3, #34	; 0x22
 80106a8:	6003      	str	r3, [r0, #0]
 80106aa:	4665      	mov	r5, ip
 80106ac:	b942      	cbnz	r2, 80106c0 <_strtol_l.isra.0+0xe8>
 80106ae:	4628      	mov	r0, r5
 80106b0:	e79d      	b.n	80105ee <_strtol_l.isra.0+0x16>
 80106b2:	f1b8 0f00 	cmp.w	r8, #0
 80106b6:	d000      	beq.n	80106ba <_strtol_l.isra.0+0xe2>
 80106b8:	426d      	negs	r5, r5
 80106ba:	2a00      	cmp	r2, #0
 80106bc:	d0f7      	beq.n	80106ae <_strtol_l.isra.0+0xd6>
 80106be:	b10e      	cbz	r6, 80106c4 <_strtol_l.isra.0+0xec>
 80106c0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80106c4:	6011      	str	r1, [r2, #0]
 80106c6:	e7f2      	b.n	80106ae <_strtol_l.isra.0+0xd6>
 80106c8:	2430      	movs	r4, #48	; 0x30
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d1b3      	bne.n	8010636 <_strtol_l.isra.0+0x5e>
 80106ce:	2308      	movs	r3, #8
 80106d0:	e7b1      	b.n	8010636 <_strtol_l.isra.0+0x5e>
 80106d2:	2c30      	cmp	r4, #48	; 0x30
 80106d4:	d0a4      	beq.n	8010620 <_strtol_l.isra.0+0x48>
 80106d6:	230a      	movs	r3, #10
 80106d8:	e7ad      	b.n	8010636 <_strtol_l.isra.0+0x5e>
 80106da:	bf00      	nop
 80106dc:	0813cf99 	.word	0x0813cf99

080106e0 <_strtol_r>:
 80106e0:	f7ff bf7a 	b.w	80105d8 <_strtol_l.isra.0>

080106e4 <__swbuf_r>:
 80106e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106e6:	460e      	mov	r6, r1
 80106e8:	4614      	mov	r4, r2
 80106ea:	4605      	mov	r5, r0
 80106ec:	b118      	cbz	r0, 80106f6 <__swbuf_r+0x12>
 80106ee:	6983      	ldr	r3, [r0, #24]
 80106f0:	b90b      	cbnz	r3, 80106f6 <__swbuf_r+0x12>
 80106f2:	f001 f84b 	bl	801178c <__sinit>
 80106f6:	4b21      	ldr	r3, [pc, #132]	; (801077c <__swbuf_r+0x98>)
 80106f8:	429c      	cmp	r4, r3
 80106fa:	d12b      	bne.n	8010754 <__swbuf_r+0x70>
 80106fc:	686c      	ldr	r4, [r5, #4]
 80106fe:	69a3      	ldr	r3, [r4, #24]
 8010700:	60a3      	str	r3, [r4, #8]
 8010702:	89a3      	ldrh	r3, [r4, #12]
 8010704:	071a      	lsls	r2, r3, #28
 8010706:	d52f      	bpl.n	8010768 <__swbuf_r+0x84>
 8010708:	6923      	ldr	r3, [r4, #16]
 801070a:	b36b      	cbz	r3, 8010768 <__swbuf_r+0x84>
 801070c:	6923      	ldr	r3, [r4, #16]
 801070e:	6820      	ldr	r0, [r4, #0]
 8010710:	1ac0      	subs	r0, r0, r3
 8010712:	6963      	ldr	r3, [r4, #20]
 8010714:	b2f6      	uxtb	r6, r6
 8010716:	4283      	cmp	r3, r0
 8010718:	4637      	mov	r7, r6
 801071a:	dc04      	bgt.n	8010726 <__swbuf_r+0x42>
 801071c:	4621      	mov	r1, r4
 801071e:	4628      	mov	r0, r5
 8010720:	f000 ffa0 	bl	8011664 <_fflush_r>
 8010724:	bb30      	cbnz	r0, 8010774 <__swbuf_r+0x90>
 8010726:	68a3      	ldr	r3, [r4, #8]
 8010728:	3b01      	subs	r3, #1
 801072a:	60a3      	str	r3, [r4, #8]
 801072c:	6823      	ldr	r3, [r4, #0]
 801072e:	1c5a      	adds	r2, r3, #1
 8010730:	6022      	str	r2, [r4, #0]
 8010732:	701e      	strb	r6, [r3, #0]
 8010734:	6963      	ldr	r3, [r4, #20]
 8010736:	3001      	adds	r0, #1
 8010738:	4283      	cmp	r3, r0
 801073a:	d004      	beq.n	8010746 <__swbuf_r+0x62>
 801073c:	89a3      	ldrh	r3, [r4, #12]
 801073e:	07db      	lsls	r3, r3, #31
 8010740:	d506      	bpl.n	8010750 <__swbuf_r+0x6c>
 8010742:	2e0a      	cmp	r6, #10
 8010744:	d104      	bne.n	8010750 <__swbuf_r+0x6c>
 8010746:	4621      	mov	r1, r4
 8010748:	4628      	mov	r0, r5
 801074a:	f000 ff8b 	bl	8011664 <_fflush_r>
 801074e:	b988      	cbnz	r0, 8010774 <__swbuf_r+0x90>
 8010750:	4638      	mov	r0, r7
 8010752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010754:	4b0a      	ldr	r3, [pc, #40]	; (8010780 <__swbuf_r+0x9c>)
 8010756:	429c      	cmp	r4, r3
 8010758:	d101      	bne.n	801075e <__swbuf_r+0x7a>
 801075a:	68ac      	ldr	r4, [r5, #8]
 801075c:	e7cf      	b.n	80106fe <__swbuf_r+0x1a>
 801075e:	4b09      	ldr	r3, [pc, #36]	; (8010784 <__swbuf_r+0xa0>)
 8010760:	429c      	cmp	r4, r3
 8010762:	bf08      	it	eq
 8010764:	68ec      	ldreq	r4, [r5, #12]
 8010766:	e7ca      	b.n	80106fe <__swbuf_r+0x1a>
 8010768:	4621      	mov	r1, r4
 801076a:	4628      	mov	r0, r5
 801076c:	f000 f80c 	bl	8010788 <__swsetup_r>
 8010770:	2800      	cmp	r0, #0
 8010772:	d0cb      	beq.n	801070c <__swbuf_r+0x28>
 8010774:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8010778:	e7ea      	b.n	8010750 <__swbuf_r+0x6c>
 801077a:	bf00      	nop
 801077c:	0813d150 	.word	0x0813d150
 8010780:	0813d170 	.word	0x0813d170
 8010784:	0813d130 	.word	0x0813d130

08010788 <__swsetup_r>:
 8010788:	4b32      	ldr	r3, [pc, #200]	; (8010854 <__swsetup_r+0xcc>)
 801078a:	b570      	push	{r4, r5, r6, lr}
 801078c:	681d      	ldr	r5, [r3, #0]
 801078e:	4606      	mov	r6, r0
 8010790:	460c      	mov	r4, r1
 8010792:	b125      	cbz	r5, 801079e <__swsetup_r+0x16>
 8010794:	69ab      	ldr	r3, [r5, #24]
 8010796:	b913      	cbnz	r3, 801079e <__swsetup_r+0x16>
 8010798:	4628      	mov	r0, r5
 801079a:	f000 fff7 	bl	801178c <__sinit>
 801079e:	4b2e      	ldr	r3, [pc, #184]	; (8010858 <__swsetup_r+0xd0>)
 80107a0:	429c      	cmp	r4, r3
 80107a2:	d10f      	bne.n	80107c4 <__swsetup_r+0x3c>
 80107a4:	686c      	ldr	r4, [r5, #4]
 80107a6:	89a3      	ldrh	r3, [r4, #12]
 80107a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107ac:	0719      	lsls	r1, r3, #28
 80107ae:	d42c      	bmi.n	801080a <__swsetup_r+0x82>
 80107b0:	06dd      	lsls	r5, r3, #27
 80107b2:	d411      	bmi.n	80107d8 <__swsetup_r+0x50>
 80107b4:	2309      	movs	r3, #9
 80107b6:	6033      	str	r3, [r6, #0]
 80107b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107bc:	81a3      	strh	r3, [r4, #12]
 80107be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107c2:	e03e      	b.n	8010842 <__swsetup_r+0xba>
 80107c4:	4b25      	ldr	r3, [pc, #148]	; (801085c <__swsetup_r+0xd4>)
 80107c6:	429c      	cmp	r4, r3
 80107c8:	d101      	bne.n	80107ce <__swsetup_r+0x46>
 80107ca:	68ac      	ldr	r4, [r5, #8]
 80107cc:	e7eb      	b.n	80107a6 <__swsetup_r+0x1e>
 80107ce:	4b24      	ldr	r3, [pc, #144]	; (8010860 <__swsetup_r+0xd8>)
 80107d0:	429c      	cmp	r4, r3
 80107d2:	bf08      	it	eq
 80107d4:	68ec      	ldreq	r4, [r5, #12]
 80107d6:	e7e6      	b.n	80107a6 <__swsetup_r+0x1e>
 80107d8:	0758      	lsls	r0, r3, #29
 80107da:	d512      	bpl.n	8010802 <__swsetup_r+0x7a>
 80107dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107de:	b141      	cbz	r1, 80107f2 <__swsetup_r+0x6a>
 80107e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107e4:	4299      	cmp	r1, r3
 80107e6:	d002      	beq.n	80107ee <__swsetup_r+0x66>
 80107e8:	4630      	mov	r0, r6
 80107ea:	f7fe f81f 	bl	800e82c <_free_r>
 80107ee:	2300      	movs	r3, #0
 80107f0:	6363      	str	r3, [r4, #52]	; 0x34
 80107f2:	89a3      	ldrh	r3, [r4, #12]
 80107f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80107f8:	81a3      	strh	r3, [r4, #12]
 80107fa:	2300      	movs	r3, #0
 80107fc:	6063      	str	r3, [r4, #4]
 80107fe:	6923      	ldr	r3, [r4, #16]
 8010800:	6023      	str	r3, [r4, #0]
 8010802:	89a3      	ldrh	r3, [r4, #12]
 8010804:	f043 0308 	orr.w	r3, r3, #8
 8010808:	81a3      	strh	r3, [r4, #12]
 801080a:	6923      	ldr	r3, [r4, #16]
 801080c:	b94b      	cbnz	r3, 8010822 <__swsetup_r+0x9a>
 801080e:	89a3      	ldrh	r3, [r4, #12]
 8010810:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010818:	d003      	beq.n	8010822 <__swsetup_r+0x9a>
 801081a:	4621      	mov	r1, r4
 801081c:	4630      	mov	r0, r6
 801081e:	f001 fbed 	bl	8011ffc <__smakebuf_r>
 8010822:	89a0      	ldrh	r0, [r4, #12]
 8010824:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010828:	f010 0301 	ands.w	r3, r0, #1
 801082c:	d00a      	beq.n	8010844 <__swsetup_r+0xbc>
 801082e:	2300      	movs	r3, #0
 8010830:	60a3      	str	r3, [r4, #8]
 8010832:	6963      	ldr	r3, [r4, #20]
 8010834:	425b      	negs	r3, r3
 8010836:	61a3      	str	r3, [r4, #24]
 8010838:	6923      	ldr	r3, [r4, #16]
 801083a:	b943      	cbnz	r3, 801084e <__swsetup_r+0xc6>
 801083c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010840:	d1ba      	bne.n	80107b8 <__swsetup_r+0x30>
 8010842:	bd70      	pop	{r4, r5, r6, pc}
 8010844:	0781      	lsls	r1, r0, #30
 8010846:	bf58      	it	pl
 8010848:	6963      	ldrpl	r3, [r4, #20]
 801084a:	60a3      	str	r3, [r4, #8]
 801084c:	e7f4      	b.n	8010838 <__swsetup_r+0xb0>
 801084e:	2000      	movs	r0, #0
 8010850:	e7f7      	b.n	8010842 <__swsetup_r+0xba>
 8010852:	bf00      	nop
 8010854:	20000a88 	.word	0x20000a88
 8010858:	0813d150 	.word	0x0813d150
 801085c:	0813d170 	.word	0x0813d170
 8010860:	0813d130 	.word	0x0813d130

08010864 <quorem>:
 8010864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010868:	6903      	ldr	r3, [r0, #16]
 801086a:	690c      	ldr	r4, [r1, #16]
 801086c:	42a3      	cmp	r3, r4
 801086e:	4607      	mov	r7, r0
 8010870:	f2c0 8081 	blt.w	8010976 <quorem+0x112>
 8010874:	3c01      	subs	r4, #1
 8010876:	f101 0814 	add.w	r8, r1, #20
 801087a:	f100 0514 	add.w	r5, r0, #20
 801087e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010882:	9301      	str	r3, [sp, #4]
 8010884:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801088c:	3301      	adds	r3, #1
 801088e:	429a      	cmp	r2, r3
 8010890:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010894:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010898:	fbb2 f6f3 	udiv	r6, r2, r3
 801089c:	d331      	bcc.n	8010902 <quorem+0x9e>
 801089e:	f04f 0e00 	mov.w	lr, #0
 80108a2:	4640      	mov	r0, r8
 80108a4:	46ac      	mov	ip, r5
 80108a6:	46f2      	mov	sl, lr
 80108a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80108ac:	b293      	uxth	r3, r2
 80108ae:	fb06 e303 	mla	r3, r6, r3, lr
 80108b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	ebaa 0303 	sub.w	r3, sl, r3
 80108bc:	0c12      	lsrs	r2, r2, #16
 80108be:	f8dc a000 	ldr.w	sl, [ip]
 80108c2:	fb06 e202 	mla	r2, r6, r2, lr
 80108c6:	fa13 f38a 	uxtah	r3, r3, sl
 80108ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80108ce:	fa1f fa82 	uxth.w	sl, r2
 80108d2:	f8dc 2000 	ldr.w	r2, [ip]
 80108d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80108da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80108de:	b29b      	uxth	r3, r3
 80108e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80108e4:	4581      	cmp	r9, r0
 80108e6:	f84c 3b04 	str.w	r3, [ip], #4
 80108ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80108ee:	d2db      	bcs.n	80108a8 <quorem+0x44>
 80108f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80108f4:	b92b      	cbnz	r3, 8010902 <quorem+0x9e>
 80108f6:	9b01      	ldr	r3, [sp, #4]
 80108f8:	3b04      	subs	r3, #4
 80108fa:	429d      	cmp	r5, r3
 80108fc:	461a      	mov	r2, r3
 80108fe:	d32e      	bcc.n	801095e <quorem+0xfa>
 8010900:	613c      	str	r4, [r7, #16]
 8010902:	4638      	mov	r0, r7
 8010904:	f001 fea0 	bl	8012648 <__mcmp>
 8010908:	2800      	cmp	r0, #0
 801090a:	db24      	blt.n	8010956 <quorem+0xf2>
 801090c:	3601      	adds	r6, #1
 801090e:	4628      	mov	r0, r5
 8010910:	f04f 0c00 	mov.w	ip, #0
 8010914:	f858 2b04 	ldr.w	r2, [r8], #4
 8010918:	f8d0 e000 	ldr.w	lr, [r0]
 801091c:	b293      	uxth	r3, r2
 801091e:	ebac 0303 	sub.w	r3, ip, r3
 8010922:	0c12      	lsrs	r2, r2, #16
 8010924:	fa13 f38e 	uxtah	r3, r3, lr
 8010928:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801092c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010930:	b29b      	uxth	r3, r3
 8010932:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010936:	45c1      	cmp	r9, r8
 8010938:	f840 3b04 	str.w	r3, [r0], #4
 801093c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010940:	d2e8      	bcs.n	8010914 <quorem+0xb0>
 8010942:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010946:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801094a:	b922      	cbnz	r2, 8010956 <quorem+0xf2>
 801094c:	3b04      	subs	r3, #4
 801094e:	429d      	cmp	r5, r3
 8010950:	461a      	mov	r2, r3
 8010952:	d30a      	bcc.n	801096a <quorem+0x106>
 8010954:	613c      	str	r4, [r7, #16]
 8010956:	4630      	mov	r0, r6
 8010958:	b003      	add	sp, #12
 801095a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801095e:	6812      	ldr	r2, [r2, #0]
 8010960:	3b04      	subs	r3, #4
 8010962:	2a00      	cmp	r2, #0
 8010964:	d1cc      	bne.n	8010900 <quorem+0x9c>
 8010966:	3c01      	subs	r4, #1
 8010968:	e7c7      	b.n	80108fa <quorem+0x96>
 801096a:	6812      	ldr	r2, [r2, #0]
 801096c:	3b04      	subs	r3, #4
 801096e:	2a00      	cmp	r2, #0
 8010970:	d1f0      	bne.n	8010954 <quorem+0xf0>
 8010972:	3c01      	subs	r4, #1
 8010974:	e7eb      	b.n	801094e <quorem+0xea>
 8010976:	2000      	movs	r0, #0
 8010978:	e7ee      	b.n	8010958 <quorem+0xf4>
 801097a:	0000      	movs	r0, r0
 801097c:	0000      	movs	r0, r0
	...

08010980 <_dtoa_r>:
 8010980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010984:	ed2d 8b02 	vpush	{d8}
 8010988:	ec57 6b10 	vmov	r6, r7, d0
 801098c:	b095      	sub	sp, #84	; 0x54
 801098e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010990:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010994:	9105      	str	r1, [sp, #20]
 8010996:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801099a:	4604      	mov	r4, r0
 801099c:	9209      	str	r2, [sp, #36]	; 0x24
 801099e:	930f      	str	r3, [sp, #60]	; 0x3c
 80109a0:	b975      	cbnz	r5, 80109c0 <_dtoa_r+0x40>
 80109a2:	2010      	movs	r0, #16
 80109a4:	f7fd ff24 	bl	800e7f0 <malloc>
 80109a8:	4602      	mov	r2, r0
 80109aa:	6260      	str	r0, [r4, #36]	; 0x24
 80109ac:	b920      	cbnz	r0, 80109b8 <_dtoa_r+0x38>
 80109ae:	4bb2      	ldr	r3, [pc, #712]	; (8010c78 <_dtoa_r+0x2f8>)
 80109b0:	21ea      	movs	r1, #234	; 0xea
 80109b2:	48b2      	ldr	r0, [pc, #712]	; (8010c7c <_dtoa_r+0x2fc>)
 80109b4:	f002 fba4 	bl	8013100 <__assert_func>
 80109b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80109bc:	6005      	str	r5, [r0, #0]
 80109be:	60c5      	str	r5, [r0, #12]
 80109c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109c2:	6819      	ldr	r1, [r3, #0]
 80109c4:	b151      	cbz	r1, 80109dc <_dtoa_r+0x5c>
 80109c6:	685a      	ldr	r2, [r3, #4]
 80109c8:	604a      	str	r2, [r1, #4]
 80109ca:	2301      	movs	r3, #1
 80109cc:	4093      	lsls	r3, r2
 80109ce:	608b      	str	r3, [r1, #8]
 80109d0:	4620      	mov	r0, r4
 80109d2:	f001 fbb1 	bl	8012138 <_Bfree>
 80109d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80109d8:	2200      	movs	r2, #0
 80109da:	601a      	str	r2, [r3, #0]
 80109dc:	1e3b      	subs	r3, r7, #0
 80109de:	bfb9      	ittee	lt
 80109e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80109e4:	9303      	strlt	r3, [sp, #12]
 80109e6:	2300      	movge	r3, #0
 80109e8:	f8c8 3000 	strge.w	r3, [r8]
 80109ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80109f0:	4ba3      	ldr	r3, [pc, #652]	; (8010c80 <_dtoa_r+0x300>)
 80109f2:	bfbc      	itt	lt
 80109f4:	2201      	movlt	r2, #1
 80109f6:	f8c8 2000 	strlt.w	r2, [r8]
 80109fa:	ea33 0309 	bics.w	r3, r3, r9
 80109fe:	d11b      	bne.n	8010a38 <_dtoa_r+0xb8>
 8010a00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010a02:	f242 730f 	movw	r3, #9999	; 0x270f
 8010a06:	6013      	str	r3, [r2, #0]
 8010a08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010a0c:	4333      	orrs	r3, r6
 8010a0e:	f000 857a 	beq.w	8011506 <_dtoa_r+0xb86>
 8010a12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a14:	b963      	cbnz	r3, 8010a30 <_dtoa_r+0xb0>
 8010a16:	4b9b      	ldr	r3, [pc, #620]	; (8010c84 <_dtoa_r+0x304>)
 8010a18:	e024      	b.n	8010a64 <_dtoa_r+0xe4>
 8010a1a:	4b9b      	ldr	r3, [pc, #620]	; (8010c88 <_dtoa_r+0x308>)
 8010a1c:	9300      	str	r3, [sp, #0]
 8010a1e:	3308      	adds	r3, #8
 8010a20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010a22:	6013      	str	r3, [r2, #0]
 8010a24:	9800      	ldr	r0, [sp, #0]
 8010a26:	b015      	add	sp, #84	; 0x54
 8010a28:	ecbd 8b02 	vpop	{d8}
 8010a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a30:	4b94      	ldr	r3, [pc, #592]	; (8010c84 <_dtoa_r+0x304>)
 8010a32:	9300      	str	r3, [sp, #0]
 8010a34:	3303      	adds	r3, #3
 8010a36:	e7f3      	b.n	8010a20 <_dtoa_r+0xa0>
 8010a38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	ec51 0b17 	vmov	r0, r1, d7
 8010a42:	2300      	movs	r3, #0
 8010a44:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010a48:	f7f0 f84e 	bl	8000ae8 <__aeabi_dcmpeq>
 8010a4c:	4680      	mov	r8, r0
 8010a4e:	b158      	cbz	r0, 8010a68 <_dtoa_r+0xe8>
 8010a50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8010a52:	2301      	movs	r3, #1
 8010a54:	6013      	str	r3, [r2, #0]
 8010a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	f000 8551 	beq.w	8011500 <_dtoa_r+0xb80>
 8010a5e:	488b      	ldr	r0, [pc, #556]	; (8010c8c <_dtoa_r+0x30c>)
 8010a60:	6018      	str	r0, [r3, #0]
 8010a62:	1e43      	subs	r3, r0, #1
 8010a64:	9300      	str	r3, [sp, #0]
 8010a66:	e7dd      	b.n	8010a24 <_dtoa_r+0xa4>
 8010a68:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010a6c:	aa12      	add	r2, sp, #72	; 0x48
 8010a6e:	a913      	add	r1, sp, #76	; 0x4c
 8010a70:	4620      	mov	r0, r4
 8010a72:	f001 ff09 	bl	8012888 <__d2b>
 8010a76:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010a7a:	4683      	mov	fp, r0
 8010a7c:	2d00      	cmp	r5, #0
 8010a7e:	d07c      	beq.n	8010b7a <_dtoa_r+0x1fa>
 8010a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a82:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8010a86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a8a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8010a8e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010a92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8010a96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010a9a:	4b7d      	ldr	r3, [pc, #500]	; (8010c90 <_dtoa_r+0x310>)
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	4630      	mov	r0, r6
 8010aa0:	4639      	mov	r1, r7
 8010aa2:	f7ef fc01 	bl	80002a8 <__aeabi_dsub>
 8010aa6:	a36e      	add	r3, pc, #440	; (adr r3, 8010c60 <_dtoa_r+0x2e0>)
 8010aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aac:	f7ef fdb4 	bl	8000618 <__aeabi_dmul>
 8010ab0:	a36d      	add	r3, pc, #436	; (adr r3, 8010c68 <_dtoa_r+0x2e8>)
 8010ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab6:	f7ef fbf9 	bl	80002ac <__adddf3>
 8010aba:	4606      	mov	r6, r0
 8010abc:	4628      	mov	r0, r5
 8010abe:	460f      	mov	r7, r1
 8010ac0:	f7ef fd40 	bl	8000544 <__aeabi_i2d>
 8010ac4:	a36a      	add	r3, pc, #424	; (adr r3, 8010c70 <_dtoa_r+0x2f0>)
 8010ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aca:	f7ef fda5 	bl	8000618 <__aeabi_dmul>
 8010ace:	4602      	mov	r2, r0
 8010ad0:	460b      	mov	r3, r1
 8010ad2:	4630      	mov	r0, r6
 8010ad4:	4639      	mov	r1, r7
 8010ad6:	f7ef fbe9 	bl	80002ac <__adddf3>
 8010ada:	4606      	mov	r6, r0
 8010adc:	460f      	mov	r7, r1
 8010ade:	f7f0 f84b 	bl	8000b78 <__aeabi_d2iz>
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	4682      	mov	sl, r0
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	4630      	mov	r0, r6
 8010aea:	4639      	mov	r1, r7
 8010aec:	f7f0 f806 	bl	8000afc <__aeabi_dcmplt>
 8010af0:	b148      	cbz	r0, 8010b06 <_dtoa_r+0x186>
 8010af2:	4650      	mov	r0, sl
 8010af4:	f7ef fd26 	bl	8000544 <__aeabi_i2d>
 8010af8:	4632      	mov	r2, r6
 8010afa:	463b      	mov	r3, r7
 8010afc:	f7ef fff4 	bl	8000ae8 <__aeabi_dcmpeq>
 8010b00:	b908      	cbnz	r0, 8010b06 <_dtoa_r+0x186>
 8010b02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010b06:	f1ba 0f16 	cmp.w	sl, #22
 8010b0a:	d854      	bhi.n	8010bb6 <_dtoa_r+0x236>
 8010b0c:	4b61      	ldr	r3, [pc, #388]	; (8010c94 <_dtoa_r+0x314>)
 8010b0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010b1a:	f7ef ffef 	bl	8000afc <__aeabi_dcmplt>
 8010b1e:	2800      	cmp	r0, #0
 8010b20:	d04b      	beq.n	8010bba <_dtoa_r+0x23a>
 8010b22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8010b26:	2300      	movs	r3, #0
 8010b28:	930e      	str	r3, [sp, #56]	; 0x38
 8010b2a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b2c:	1b5d      	subs	r5, r3, r5
 8010b2e:	1e6b      	subs	r3, r5, #1
 8010b30:	9304      	str	r3, [sp, #16]
 8010b32:	bf43      	ittte	mi
 8010b34:	2300      	movmi	r3, #0
 8010b36:	f1c5 0801 	rsbmi	r8, r5, #1
 8010b3a:	9304      	strmi	r3, [sp, #16]
 8010b3c:	f04f 0800 	movpl.w	r8, #0
 8010b40:	f1ba 0f00 	cmp.w	sl, #0
 8010b44:	db3b      	blt.n	8010bbe <_dtoa_r+0x23e>
 8010b46:	9b04      	ldr	r3, [sp, #16]
 8010b48:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8010b4c:	4453      	add	r3, sl
 8010b4e:	9304      	str	r3, [sp, #16]
 8010b50:	2300      	movs	r3, #0
 8010b52:	9306      	str	r3, [sp, #24]
 8010b54:	9b05      	ldr	r3, [sp, #20]
 8010b56:	2b09      	cmp	r3, #9
 8010b58:	d869      	bhi.n	8010c2e <_dtoa_r+0x2ae>
 8010b5a:	2b05      	cmp	r3, #5
 8010b5c:	bfc4      	itt	gt
 8010b5e:	3b04      	subgt	r3, #4
 8010b60:	9305      	strgt	r3, [sp, #20]
 8010b62:	9b05      	ldr	r3, [sp, #20]
 8010b64:	f1a3 0302 	sub.w	r3, r3, #2
 8010b68:	bfcc      	ite	gt
 8010b6a:	2500      	movgt	r5, #0
 8010b6c:	2501      	movle	r5, #1
 8010b6e:	2b03      	cmp	r3, #3
 8010b70:	d869      	bhi.n	8010c46 <_dtoa_r+0x2c6>
 8010b72:	e8df f003 	tbb	[pc, r3]
 8010b76:	4e2c      	.short	0x4e2c
 8010b78:	5a4c      	.short	0x5a4c
 8010b7a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8010b7e:	441d      	add	r5, r3
 8010b80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8010b84:	2b20      	cmp	r3, #32
 8010b86:	bfc1      	itttt	gt
 8010b88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010b8c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8010b90:	fa09 f303 	lslgt.w	r3, r9, r3
 8010b94:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010b98:	bfda      	itte	le
 8010b9a:	f1c3 0320 	rsble	r3, r3, #32
 8010b9e:	fa06 f003 	lslle.w	r0, r6, r3
 8010ba2:	4318      	orrgt	r0, r3
 8010ba4:	f7ef fcbe 	bl	8000524 <__aeabi_ui2d>
 8010ba8:	2301      	movs	r3, #1
 8010baa:	4606      	mov	r6, r0
 8010bac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8010bb0:	3d01      	subs	r5, #1
 8010bb2:	9310      	str	r3, [sp, #64]	; 0x40
 8010bb4:	e771      	b.n	8010a9a <_dtoa_r+0x11a>
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	e7b6      	b.n	8010b28 <_dtoa_r+0x1a8>
 8010bba:	900e      	str	r0, [sp, #56]	; 0x38
 8010bbc:	e7b5      	b.n	8010b2a <_dtoa_r+0x1aa>
 8010bbe:	f1ca 0300 	rsb	r3, sl, #0
 8010bc2:	9306      	str	r3, [sp, #24]
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	eba8 080a 	sub.w	r8, r8, sl
 8010bca:	930d      	str	r3, [sp, #52]	; 0x34
 8010bcc:	e7c2      	b.n	8010b54 <_dtoa_r+0x1d4>
 8010bce:	2300      	movs	r3, #0
 8010bd0:	9308      	str	r3, [sp, #32]
 8010bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	dc39      	bgt.n	8010c4c <_dtoa_r+0x2cc>
 8010bd8:	f04f 0901 	mov.w	r9, #1
 8010bdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8010be0:	464b      	mov	r3, r9
 8010be2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8010be6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8010be8:	2200      	movs	r2, #0
 8010bea:	6042      	str	r2, [r0, #4]
 8010bec:	2204      	movs	r2, #4
 8010bee:	f102 0614 	add.w	r6, r2, #20
 8010bf2:	429e      	cmp	r6, r3
 8010bf4:	6841      	ldr	r1, [r0, #4]
 8010bf6:	d92f      	bls.n	8010c58 <_dtoa_r+0x2d8>
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	f001 fa5d 	bl	80120b8 <_Balloc>
 8010bfe:	9000      	str	r0, [sp, #0]
 8010c00:	2800      	cmp	r0, #0
 8010c02:	d14b      	bne.n	8010c9c <_dtoa_r+0x31c>
 8010c04:	4b24      	ldr	r3, [pc, #144]	; (8010c98 <_dtoa_r+0x318>)
 8010c06:	4602      	mov	r2, r0
 8010c08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010c0c:	e6d1      	b.n	80109b2 <_dtoa_r+0x32>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	e7de      	b.n	8010bd0 <_dtoa_r+0x250>
 8010c12:	2300      	movs	r3, #0
 8010c14:	9308      	str	r3, [sp, #32]
 8010c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c18:	eb0a 0903 	add.w	r9, sl, r3
 8010c1c:	f109 0301 	add.w	r3, r9, #1
 8010c20:	2b01      	cmp	r3, #1
 8010c22:	9301      	str	r3, [sp, #4]
 8010c24:	bfb8      	it	lt
 8010c26:	2301      	movlt	r3, #1
 8010c28:	e7dd      	b.n	8010be6 <_dtoa_r+0x266>
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	e7f2      	b.n	8010c14 <_dtoa_r+0x294>
 8010c2e:	2501      	movs	r5, #1
 8010c30:	2300      	movs	r3, #0
 8010c32:	9305      	str	r3, [sp, #20]
 8010c34:	9508      	str	r5, [sp, #32]
 8010c36:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8010c40:	2312      	movs	r3, #18
 8010c42:	9209      	str	r2, [sp, #36]	; 0x24
 8010c44:	e7cf      	b.n	8010be6 <_dtoa_r+0x266>
 8010c46:	2301      	movs	r3, #1
 8010c48:	9308      	str	r3, [sp, #32]
 8010c4a:	e7f4      	b.n	8010c36 <_dtoa_r+0x2b6>
 8010c4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8010c50:	f8cd 9004 	str.w	r9, [sp, #4]
 8010c54:	464b      	mov	r3, r9
 8010c56:	e7c6      	b.n	8010be6 <_dtoa_r+0x266>
 8010c58:	3101      	adds	r1, #1
 8010c5a:	6041      	str	r1, [r0, #4]
 8010c5c:	0052      	lsls	r2, r2, #1
 8010c5e:	e7c6      	b.n	8010bee <_dtoa_r+0x26e>
 8010c60:	636f4361 	.word	0x636f4361
 8010c64:	3fd287a7 	.word	0x3fd287a7
 8010c68:	8b60c8b3 	.word	0x8b60c8b3
 8010c6c:	3fc68a28 	.word	0x3fc68a28
 8010c70:	509f79fb 	.word	0x509f79fb
 8010c74:	3fd34413 	.word	0x3fd34413
 8010c78:	0813d0a6 	.word	0x0813d0a6
 8010c7c:	0813d0bd 	.word	0x0813d0bd
 8010c80:	7ff00000 	.word	0x7ff00000
 8010c84:	0813d0a2 	.word	0x0813d0a2
 8010c88:	0813d099 	.word	0x0813d099
 8010c8c:	0813cf1d 	.word	0x0813cf1d
 8010c90:	3ff80000 	.word	0x3ff80000
 8010c94:	0813d298 	.word	0x0813d298
 8010c98:	0813d11c 	.word	0x0813d11c
 8010c9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c9e:	9a00      	ldr	r2, [sp, #0]
 8010ca0:	601a      	str	r2, [r3, #0]
 8010ca2:	9b01      	ldr	r3, [sp, #4]
 8010ca4:	2b0e      	cmp	r3, #14
 8010ca6:	f200 80ad 	bhi.w	8010e04 <_dtoa_r+0x484>
 8010caa:	2d00      	cmp	r5, #0
 8010cac:	f000 80aa 	beq.w	8010e04 <_dtoa_r+0x484>
 8010cb0:	f1ba 0f00 	cmp.w	sl, #0
 8010cb4:	dd36      	ble.n	8010d24 <_dtoa_r+0x3a4>
 8010cb6:	4ac3      	ldr	r2, [pc, #780]	; (8010fc4 <_dtoa_r+0x644>)
 8010cb8:	f00a 030f 	and.w	r3, sl, #15
 8010cbc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010cc0:	ed93 7b00 	vldr	d7, [r3]
 8010cc4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8010cc8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8010ccc:	eeb0 8a47 	vmov.f32	s16, s14
 8010cd0:	eef0 8a67 	vmov.f32	s17, s15
 8010cd4:	d016      	beq.n	8010d04 <_dtoa_r+0x384>
 8010cd6:	4bbc      	ldr	r3, [pc, #752]	; (8010fc8 <_dtoa_r+0x648>)
 8010cd8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010cdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010ce0:	f7ef fdc4 	bl	800086c <__aeabi_ddiv>
 8010ce4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ce8:	f007 070f 	and.w	r7, r7, #15
 8010cec:	2503      	movs	r5, #3
 8010cee:	4eb6      	ldr	r6, [pc, #728]	; (8010fc8 <_dtoa_r+0x648>)
 8010cf0:	b957      	cbnz	r7, 8010d08 <_dtoa_r+0x388>
 8010cf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cf6:	ec53 2b18 	vmov	r2, r3, d8
 8010cfa:	f7ef fdb7 	bl	800086c <__aeabi_ddiv>
 8010cfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d02:	e029      	b.n	8010d58 <_dtoa_r+0x3d8>
 8010d04:	2502      	movs	r5, #2
 8010d06:	e7f2      	b.n	8010cee <_dtoa_r+0x36e>
 8010d08:	07f9      	lsls	r1, r7, #31
 8010d0a:	d508      	bpl.n	8010d1e <_dtoa_r+0x39e>
 8010d0c:	ec51 0b18 	vmov	r0, r1, d8
 8010d10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010d14:	f7ef fc80 	bl	8000618 <__aeabi_dmul>
 8010d18:	ec41 0b18 	vmov	d8, r0, r1
 8010d1c:	3501      	adds	r5, #1
 8010d1e:	107f      	asrs	r7, r7, #1
 8010d20:	3608      	adds	r6, #8
 8010d22:	e7e5      	b.n	8010cf0 <_dtoa_r+0x370>
 8010d24:	f000 80a6 	beq.w	8010e74 <_dtoa_r+0x4f4>
 8010d28:	f1ca 0600 	rsb	r6, sl, #0
 8010d2c:	4ba5      	ldr	r3, [pc, #660]	; (8010fc4 <_dtoa_r+0x644>)
 8010d2e:	4fa6      	ldr	r7, [pc, #664]	; (8010fc8 <_dtoa_r+0x648>)
 8010d30:	f006 020f 	and.w	r2, r6, #15
 8010d34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010d40:	f7ef fc6a 	bl	8000618 <__aeabi_dmul>
 8010d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d48:	1136      	asrs	r6, r6, #4
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	2502      	movs	r5, #2
 8010d4e:	2e00      	cmp	r6, #0
 8010d50:	f040 8085 	bne.w	8010e5e <_dtoa_r+0x4de>
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d1d2      	bne.n	8010cfe <_dtoa_r+0x37e>
 8010d58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	f000 808c 	beq.w	8010e78 <_dtoa_r+0x4f8>
 8010d60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010d64:	4b99      	ldr	r3, [pc, #612]	; (8010fcc <_dtoa_r+0x64c>)
 8010d66:	2200      	movs	r2, #0
 8010d68:	4630      	mov	r0, r6
 8010d6a:	4639      	mov	r1, r7
 8010d6c:	f7ef fec6 	bl	8000afc <__aeabi_dcmplt>
 8010d70:	2800      	cmp	r0, #0
 8010d72:	f000 8081 	beq.w	8010e78 <_dtoa_r+0x4f8>
 8010d76:	9b01      	ldr	r3, [sp, #4]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d07d      	beq.n	8010e78 <_dtoa_r+0x4f8>
 8010d7c:	f1b9 0f00 	cmp.w	r9, #0
 8010d80:	dd3c      	ble.n	8010dfc <_dtoa_r+0x47c>
 8010d82:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8010d86:	9307      	str	r3, [sp, #28]
 8010d88:	2200      	movs	r2, #0
 8010d8a:	4b91      	ldr	r3, [pc, #580]	; (8010fd0 <_dtoa_r+0x650>)
 8010d8c:	4630      	mov	r0, r6
 8010d8e:	4639      	mov	r1, r7
 8010d90:	f7ef fc42 	bl	8000618 <__aeabi_dmul>
 8010d94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010d98:	3501      	adds	r5, #1
 8010d9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8010d9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010da2:	4628      	mov	r0, r5
 8010da4:	f7ef fbce 	bl	8000544 <__aeabi_i2d>
 8010da8:	4632      	mov	r2, r6
 8010daa:	463b      	mov	r3, r7
 8010dac:	f7ef fc34 	bl	8000618 <__aeabi_dmul>
 8010db0:	4b88      	ldr	r3, [pc, #544]	; (8010fd4 <_dtoa_r+0x654>)
 8010db2:	2200      	movs	r2, #0
 8010db4:	f7ef fa7a 	bl	80002ac <__adddf3>
 8010db8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8010dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010dc0:	9303      	str	r3, [sp, #12]
 8010dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d15c      	bne.n	8010e82 <_dtoa_r+0x502>
 8010dc8:	4b83      	ldr	r3, [pc, #524]	; (8010fd8 <_dtoa_r+0x658>)
 8010dca:	2200      	movs	r2, #0
 8010dcc:	4630      	mov	r0, r6
 8010dce:	4639      	mov	r1, r7
 8010dd0:	f7ef fa6a 	bl	80002a8 <__aeabi_dsub>
 8010dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010dd8:	4606      	mov	r6, r0
 8010dda:	460f      	mov	r7, r1
 8010ddc:	f7ef feac 	bl	8000b38 <__aeabi_dcmpgt>
 8010de0:	2800      	cmp	r0, #0
 8010de2:	f040 8296 	bne.w	8011312 <_dtoa_r+0x992>
 8010de6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010dea:	4630      	mov	r0, r6
 8010dec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010df0:	4639      	mov	r1, r7
 8010df2:	f7ef fe83 	bl	8000afc <__aeabi_dcmplt>
 8010df6:	2800      	cmp	r0, #0
 8010df8:	f040 8288 	bne.w	801130c <_dtoa_r+0x98c>
 8010dfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010e00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010e04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	f2c0 8158 	blt.w	80110bc <_dtoa_r+0x73c>
 8010e0c:	f1ba 0f0e 	cmp.w	sl, #14
 8010e10:	f300 8154 	bgt.w	80110bc <_dtoa_r+0x73c>
 8010e14:	4b6b      	ldr	r3, [pc, #428]	; (8010fc4 <_dtoa_r+0x644>)
 8010e16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010e1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010e1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	f280 80e3 	bge.w	8010fec <_dtoa_r+0x66c>
 8010e26:	9b01      	ldr	r3, [sp, #4]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	f300 80df 	bgt.w	8010fec <_dtoa_r+0x66c>
 8010e2e:	f040 826d 	bne.w	801130c <_dtoa_r+0x98c>
 8010e32:	4b69      	ldr	r3, [pc, #420]	; (8010fd8 <_dtoa_r+0x658>)
 8010e34:	2200      	movs	r2, #0
 8010e36:	4640      	mov	r0, r8
 8010e38:	4649      	mov	r1, r9
 8010e3a:	f7ef fbed 	bl	8000618 <__aeabi_dmul>
 8010e3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010e42:	f7ef fe6f 	bl	8000b24 <__aeabi_dcmpge>
 8010e46:	9e01      	ldr	r6, [sp, #4]
 8010e48:	4637      	mov	r7, r6
 8010e4a:	2800      	cmp	r0, #0
 8010e4c:	f040 8243 	bne.w	80112d6 <_dtoa_r+0x956>
 8010e50:	9d00      	ldr	r5, [sp, #0]
 8010e52:	2331      	movs	r3, #49	; 0x31
 8010e54:	f805 3b01 	strb.w	r3, [r5], #1
 8010e58:	f10a 0a01 	add.w	sl, sl, #1
 8010e5c:	e23f      	b.n	80112de <_dtoa_r+0x95e>
 8010e5e:	07f2      	lsls	r2, r6, #31
 8010e60:	d505      	bpl.n	8010e6e <_dtoa_r+0x4ee>
 8010e62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e66:	f7ef fbd7 	bl	8000618 <__aeabi_dmul>
 8010e6a:	3501      	adds	r5, #1
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	1076      	asrs	r6, r6, #1
 8010e70:	3708      	adds	r7, #8
 8010e72:	e76c      	b.n	8010d4e <_dtoa_r+0x3ce>
 8010e74:	2502      	movs	r5, #2
 8010e76:	e76f      	b.n	8010d58 <_dtoa_r+0x3d8>
 8010e78:	9b01      	ldr	r3, [sp, #4]
 8010e7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8010e7e:	930c      	str	r3, [sp, #48]	; 0x30
 8010e80:	e78d      	b.n	8010d9e <_dtoa_r+0x41e>
 8010e82:	9900      	ldr	r1, [sp, #0]
 8010e84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8010e86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010e88:	4b4e      	ldr	r3, [pc, #312]	; (8010fc4 <_dtoa_r+0x644>)
 8010e8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010e8e:	4401      	add	r1, r0
 8010e90:	9102      	str	r1, [sp, #8]
 8010e92:	9908      	ldr	r1, [sp, #32]
 8010e94:	eeb0 8a47 	vmov.f32	s16, s14
 8010e98:	eef0 8a67 	vmov.f32	s17, s15
 8010e9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010ea0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010ea4:	2900      	cmp	r1, #0
 8010ea6:	d045      	beq.n	8010f34 <_dtoa_r+0x5b4>
 8010ea8:	494c      	ldr	r1, [pc, #304]	; (8010fdc <_dtoa_r+0x65c>)
 8010eaa:	2000      	movs	r0, #0
 8010eac:	f7ef fcde 	bl	800086c <__aeabi_ddiv>
 8010eb0:	ec53 2b18 	vmov	r2, r3, d8
 8010eb4:	f7ef f9f8 	bl	80002a8 <__aeabi_dsub>
 8010eb8:	9d00      	ldr	r5, [sp, #0]
 8010eba:	ec41 0b18 	vmov	d8, r0, r1
 8010ebe:	4639      	mov	r1, r7
 8010ec0:	4630      	mov	r0, r6
 8010ec2:	f7ef fe59 	bl	8000b78 <__aeabi_d2iz>
 8010ec6:	900c      	str	r0, [sp, #48]	; 0x30
 8010ec8:	f7ef fb3c 	bl	8000544 <__aeabi_i2d>
 8010ecc:	4602      	mov	r2, r0
 8010ece:	460b      	mov	r3, r1
 8010ed0:	4630      	mov	r0, r6
 8010ed2:	4639      	mov	r1, r7
 8010ed4:	f7ef f9e8 	bl	80002a8 <__aeabi_dsub>
 8010ed8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010eda:	3330      	adds	r3, #48	; 0x30
 8010edc:	f805 3b01 	strb.w	r3, [r5], #1
 8010ee0:	ec53 2b18 	vmov	r2, r3, d8
 8010ee4:	4606      	mov	r6, r0
 8010ee6:	460f      	mov	r7, r1
 8010ee8:	f7ef fe08 	bl	8000afc <__aeabi_dcmplt>
 8010eec:	2800      	cmp	r0, #0
 8010eee:	d165      	bne.n	8010fbc <_dtoa_r+0x63c>
 8010ef0:	4632      	mov	r2, r6
 8010ef2:	463b      	mov	r3, r7
 8010ef4:	4935      	ldr	r1, [pc, #212]	; (8010fcc <_dtoa_r+0x64c>)
 8010ef6:	2000      	movs	r0, #0
 8010ef8:	f7ef f9d6 	bl	80002a8 <__aeabi_dsub>
 8010efc:	ec53 2b18 	vmov	r2, r3, d8
 8010f00:	f7ef fdfc 	bl	8000afc <__aeabi_dcmplt>
 8010f04:	2800      	cmp	r0, #0
 8010f06:	f040 80b9 	bne.w	801107c <_dtoa_r+0x6fc>
 8010f0a:	9b02      	ldr	r3, [sp, #8]
 8010f0c:	429d      	cmp	r5, r3
 8010f0e:	f43f af75 	beq.w	8010dfc <_dtoa_r+0x47c>
 8010f12:	4b2f      	ldr	r3, [pc, #188]	; (8010fd0 <_dtoa_r+0x650>)
 8010f14:	ec51 0b18 	vmov	r0, r1, d8
 8010f18:	2200      	movs	r2, #0
 8010f1a:	f7ef fb7d 	bl	8000618 <__aeabi_dmul>
 8010f1e:	4b2c      	ldr	r3, [pc, #176]	; (8010fd0 <_dtoa_r+0x650>)
 8010f20:	ec41 0b18 	vmov	d8, r0, r1
 8010f24:	2200      	movs	r2, #0
 8010f26:	4630      	mov	r0, r6
 8010f28:	4639      	mov	r1, r7
 8010f2a:	f7ef fb75 	bl	8000618 <__aeabi_dmul>
 8010f2e:	4606      	mov	r6, r0
 8010f30:	460f      	mov	r7, r1
 8010f32:	e7c4      	b.n	8010ebe <_dtoa_r+0x53e>
 8010f34:	ec51 0b17 	vmov	r0, r1, d7
 8010f38:	f7ef fb6e 	bl	8000618 <__aeabi_dmul>
 8010f3c:	9b02      	ldr	r3, [sp, #8]
 8010f3e:	9d00      	ldr	r5, [sp, #0]
 8010f40:	930c      	str	r3, [sp, #48]	; 0x30
 8010f42:	ec41 0b18 	vmov	d8, r0, r1
 8010f46:	4639      	mov	r1, r7
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f7ef fe15 	bl	8000b78 <__aeabi_d2iz>
 8010f4e:	9011      	str	r0, [sp, #68]	; 0x44
 8010f50:	f7ef faf8 	bl	8000544 <__aeabi_i2d>
 8010f54:	4602      	mov	r2, r0
 8010f56:	460b      	mov	r3, r1
 8010f58:	4630      	mov	r0, r6
 8010f5a:	4639      	mov	r1, r7
 8010f5c:	f7ef f9a4 	bl	80002a8 <__aeabi_dsub>
 8010f60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010f62:	3330      	adds	r3, #48	; 0x30
 8010f64:	f805 3b01 	strb.w	r3, [r5], #1
 8010f68:	9b02      	ldr	r3, [sp, #8]
 8010f6a:	429d      	cmp	r5, r3
 8010f6c:	4606      	mov	r6, r0
 8010f6e:	460f      	mov	r7, r1
 8010f70:	f04f 0200 	mov.w	r2, #0
 8010f74:	d134      	bne.n	8010fe0 <_dtoa_r+0x660>
 8010f76:	4b19      	ldr	r3, [pc, #100]	; (8010fdc <_dtoa_r+0x65c>)
 8010f78:	ec51 0b18 	vmov	r0, r1, d8
 8010f7c:	f7ef f996 	bl	80002ac <__adddf3>
 8010f80:	4602      	mov	r2, r0
 8010f82:	460b      	mov	r3, r1
 8010f84:	4630      	mov	r0, r6
 8010f86:	4639      	mov	r1, r7
 8010f88:	f7ef fdd6 	bl	8000b38 <__aeabi_dcmpgt>
 8010f8c:	2800      	cmp	r0, #0
 8010f8e:	d175      	bne.n	801107c <_dtoa_r+0x6fc>
 8010f90:	ec53 2b18 	vmov	r2, r3, d8
 8010f94:	4911      	ldr	r1, [pc, #68]	; (8010fdc <_dtoa_r+0x65c>)
 8010f96:	2000      	movs	r0, #0
 8010f98:	f7ef f986 	bl	80002a8 <__aeabi_dsub>
 8010f9c:	4602      	mov	r2, r0
 8010f9e:	460b      	mov	r3, r1
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	4639      	mov	r1, r7
 8010fa4:	f7ef fdaa 	bl	8000afc <__aeabi_dcmplt>
 8010fa8:	2800      	cmp	r0, #0
 8010faa:	f43f af27 	beq.w	8010dfc <_dtoa_r+0x47c>
 8010fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010fb0:	1e6b      	subs	r3, r5, #1
 8010fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8010fb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010fb8:	2b30      	cmp	r3, #48	; 0x30
 8010fba:	d0f8      	beq.n	8010fae <_dtoa_r+0x62e>
 8010fbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010fc0:	e04a      	b.n	8011058 <_dtoa_r+0x6d8>
 8010fc2:	bf00      	nop
 8010fc4:	0813d298 	.word	0x0813d298
 8010fc8:	0813d270 	.word	0x0813d270
 8010fcc:	3ff00000 	.word	0x3ff00000
 8010fd0:	40240000 	.word	0x40240000
 8010fd4:	401c0000 	.word	0x401c0000
 8010fd8:	40140000 	.word	0x40140000
 8010fdc:	3fe00000 	.word	0x3fe00000
 8010fe0:	4baf      	ldr	r3, [pc, #700]	; (80112a0 <_dtoa_r+0x920>)
 8010fe2:	f7ef fb19 	bl	8000618 <__aeabi_dmul>
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	460f      	mov	r7, r1
 8010fea:	e7ac      	b.n	8010f46 <_dtoa_r+0x5c6>
 8010fec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010ff0:	9d00      	ldr	r5, [sp, #0]
 8010ff2:	4642      	mov	r2, r8
 8010ff4:	464b      	mov	r3, r9
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	4639      	mov	r1, r7
 8010ffa:	f7ef fc37 	bl	800086c <__aeabi_ddiv>
 8010ffe:	f7ef fdbb 	bl	8000b78 <__aeabi_d2iz>
 8011002:	9002      	str	r0, [sp, #8]
 8011004:	f7ef fa9e 	bl	8000544 <__aeabi_i2d>
 8011008:	4642      	mov	r2, r8
 801100a:	464b      	mov	r3, r9
 801100c:	f7ef fb04 	bl	8000618 <__aeabi_dmul>
 8011010:	4602      	mov	r2, r0
 8011012:	460b      	mov	r3, r1
 8011014:	4630      	mov	r0, r6
 8011016:	4639      	mov	r1, r7
 8011018:	f7ef f946 	bl	80002a8 <__aeabi_dsub>
 801101c:	9e02      	ldr	r6, [sp, #8]
 801101e:	9f01      	ldr	r7, [sp, #4]
 8011020:	3630      	adds	r6, #48	; 0x30
 8011022:	f805 6b01 	strb.w	r6, [r5], #1
 8011026:	9e00      	ldr	r6, [sp, #0]
 8011028:	1bae      	subs	r6, r5, r6
 801102a:	42b7      	cmp	r7, r6
 801102c:	4602      	mov	r2, r0
 801102e:	460b      	mov	r3, r1
 8011030:	d137      	bne.n	80110a2 <_dtoa_r+0x722>
 8011032:	f7ef f93b 	bl	80002ac <__adddf3>
 8011036:	4642      	mov	r2, r8
 8011038:	464b      	mov	r3, r9
 801103a:	4606      	mov	r6, r0
 801103c:	460f      	mov	r7, r1
 801103e:	f7ef fd7b 	bl	8000b38 <__aeabi_dcmpgt>
 8011042:	b9c8      	cbnz	r0, 8011078 <_dtoa_r+0x6f8>
 8011044:	4642      	mov	r2, r8
 8011046:	464b      	mov	r3, r9
 8011048:	4630      	mov	r0, r6
 801104a:	4639      	mov	r1, r7
 801104c:	f7ef fd4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8011050:	b110      	cbz	r0, 8011058 <_dtoa_r+0x6d8>
 8011052:	9b02      	ldr	r3, [sp, #8]
 8011054:	07d9      	lsls	r1, r3, #31
 8011056:	d40f      	bmi.n	8011078 <_dtoa_r+0x6f8>
 8011058:	4620      	mov	r0, r4
 801105a:	4659      	mov	r1, fp
 801105c:	f001 f86c 	bl	8012138 <_Bfree>
 8011060:	2300      	movs	r3, #0
 8011062:	702b      	strb	r3, [r5, #0]
 8011064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011066:	f10a 0001 	add.w	r0, sl, #1
 801106a:	6018      	str	r0, [r3, #0]
 801106c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801106e:	2b00      	cmp	r3, #0
 8011070:	f43f acd8 	beq.w	8010a24 <_dtoa_r+0xa4>
 8011074:	601d      	str	r5, [r3, #0]
 8011076:	e4d5      	b.n	8010a24 <_dtoa_r+0xa4>
 8011078:	f8cd a01c 	str.w	sl, [sp, #28]
 801107c:	462b      	mov	r3, r5
 801107e:	461d      	mov	r5, r3
 8011080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011084:	2a39      	cmp	r2, #57	; 0x39
 8011086:	d108      	bne.n	801109a <_dtoa_r+0x71a>
 8011088:	9a00      	ldr	r2, [sp, #0]
 801108a:	429a      	cmp	r2, r3
 801108c:	d1f7      	bne.n	801107e <_dtoa_r+0x6fe>
 801108e:	9a07      	ldr	r2, [sp, #28]
 8011090:	9900      	ldr	r1, [sp, #0]
 8011092:	3201      	adds	r2, #1
 8011094:	9207      	str	r2, [sp, #28]
 8011096:	2230      	movs	r2, #48	; 0x30
 8011098:	700a      	strb	r2, [r1, #0]
 801109a:	781a      	ldrb	r2, [r3, #0]
 801109c:	3201      	adds	r2, #1
 801109e:	701a      	strb	r2, [r3, #0]
 80110a0:	e78c      	b.n	8010fbc <_dtoa_r+0x63c>
 80110a2:	4b7f      	ldr	r3, [pc, #508]	; (80112a0 <_dtoa_r+0x920>)
 80110a4:	2200      	movs	r2, #0
 80110a6:	f7ef fab7 	bl	8000618 <__aeabi_dmul>
 80110aa:	2200      	movs	r2, #0
 80110ac:	2300      	movs	r3, #0
 80110ae:	4606      	mov	r6, r0
 80110b0:	460f      	mov	r7, r1
 80110b2:	f7ef fd19 	bl	8000ae8 <__aeabi_dcmpeq>
 80110b6:	2800      	cmp	r0, #0
 80110b8:	d09b      	beq.n	8010ff2 <_dtoa_r+0x672>
 80110ba:	e7cd      	b.n	8011058 <_dtoa_r+0x6d8>
 80110bc:	9a08      	ldr	r2, [sp, #32]
 80110be:	2a00      	cmp	r2, #0
 80110c0:	f000 80c4 	beq.w	801124c <_dtoa_r+0x8cc>
 80110c4:	9a05      	ldr	r2, [sp, #20]
 80110c6:	2a01      	cmp	r2, #1
 80110c8:	f300 80a8 	bgt.w	801121c <_dtoa_r+0x89c>
 80110cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80110ce:	2a00      	cmp	r2, #0
 80110d0:	f000 80a0 	beq.w	8011214 <_dtoa_r+0x894>
 80110d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80110d8:	9e06      	ldr	r6, [sp, #24]
 80110da:	4645      	mov	r5, r8
 80110dc:	9a04      	ldr	r2, [sp, #16]
 80110de:	2101      	movs	r1, #1
 80110e0:	441a      	add	r2, r3
 80110e2:	4620      	mov	r0, r4
 80110e4:	4498      	add	r8, r3
 80110e6:	9204      	str	r2, [sp, #16]
 80110e8:	f001 f92c 	bl	8012344 <__i2b>
 80110ec:	4607      	mov	r7, r0
 80110ee:	2d00      	cmp	r5, #0
 80110f0:	dd0b      	ble.n	801110a <_dtoa_r+0x78a>
 80110f2:	9b04      	ldr	r3, [sp, #16]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	dd08      	ble.n	801110a <_dtoa_r+0x78a>
 80110f8:	42ab      	cmp	r3, r5
 80110fa:	9a04      	ldr	r2, [sp, #16]
 80110fc:	bfa8      	it	ge
 80110fe:	462b      	movge	r3, r5
 8011100:	eba8 0803 	sub.w	r8, r8, r3
 8011104:	1aed      	subs	r5, r5, r3
 8011106:	1ad3      	subs	r3, r2, r3
 8011108:	9304      	str	r3, [sp, #16]
 801110a:	9b06      	ldr	r3, [sp, #24]
 801110c:	b1fb      	cbz	r3, 801114e <_dtoa_r+0x7ce>
 801110e:	9b08      	ldr	r3, [sp, #32]
 8011110:	2b00      	cmp	r3, #0
 8011112:	f000 809f 	beq.w	8011254 <_dtoa_r+0x8d4>
 8011116:	2e00      	cmp	r6, #0
 8011118:	dd11      	ble.n	801113e <_dtoa_r+0x7be>
 801111a:	4639      	mov	r1, r7
 801111c:	4632      	mov	r2, r6
 801111e:	4620      	mov	r0, r4
 8011120:	f001 f9cc 	bl	80124bc <__pow5mult>
 8011124:	465a      	mov	r2, fp
 8011126:	4601      	mov	r1, r0
 8011128:	4607      	mov	r7, r0
 801112a:	4620      	mov	r0, r4
 801112c:	f001 f920 	bl	8012370 <__multiply>
 8011130:	4659      	mov	r1, fp
 8011132:	9007      	str	r0, [sp, #28]
 8011134:	4620      	mov	r0, r4
 8011136:	f000 ffff 	bl	8012138 <_Bfree>
 801113a:	9b07      	ldr	r3, [sp, #28]
 801113c:	469b      	mov	fp, r3
 801113e:	9b06      	ldr	r3, [sp, #24]
 8011140:	1b9a      	subs	r2, r3, r6
 8011142:	d004      	beq.n	801114e <_dtoa_r+0x7ce>
 8011144:	4659      	mov	r1, fp
 8011146:	4620      	mov	r0, r4
 8011148:	f001 f9b8 	bl	80124bc <__pow5mult>
 801114c:	4683      	mov	fp, r0
 801114e:	2101      	movs	r1, #1
 8011150:	4620      	mov	r0, r4
 8011152:	f001 f8f7 	bl	8012344 <__i2b>
 8011156:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011158:	2b00      	cmp	r3, #0
 801115a:	4606      	mov	r6, r0
 801115c:	dd7c      	ble.n	8011258 <_dtoa_r+0x8d8>
 801115e:	461a      	mov	r2, r3
 8011160:	4601      	mov	r1, r0
 8011162:	4620      	mov	r0, r4
 8011164:	f001 f9aa 	bl	80124bc <__pow5mult>
 8011168:	9b05      	ldr	r3, [sp, #20]
 801116a:	2b01      	cmp	r3, #1
 801116c:	4606      	mov	r6, r0
 801116e:	dd76      	ble.n	801125e <_dtoa_r+0x8de>
 8011170:	2300      	movs	r3, #0
 8011172:	9306      	str	r3, [sp, #24]
 8011174:	6933      	ldr	r3, [r6, #16]
 8011176:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801117a:	6918      	ldr	r0, [r3, #16]
 801117c:	f001 f892 	bl	80122a4 <__hi0bits>
 8011180:	f1c0 0020 	rsb	r0, r0, #32
 8011184:	9b04      	ldr	r3, [sp, #16]
 8011186:	4418      	add	r0, r3
 8011188:	f010 001f 	ands.w	r0, r0, #31
 801118c:	f000 8086 	beq.w	801129c <_dtoa_r+0x91c>
 8011190:	f1c0 0320 	rsb	r3, r0, #32
 8011194:	2b04      	cmp	r3, #4
 8011196:	dd7f      	ble.n	8011298 <_dtoa_r+0x918>
 8011198:	f1c0 001c 	rsb	r0, r0, #28
 801119c:	9b04      	ldr	r3, [sp, #16]
 801119e:	4403      	add	r3, r0
 80111a0:	4480      	add	r8, r0
 80111a2:	4405      	add	r5, r0
 80111a4:	9304      	str	r3, [sp, #16]
 80111a6:	f1b8 0f00 	cmp.w	r8, #0
 80111aa:	dd05      	ble.n	80111b8 <_dtoa_r+0x838>
 80111ac:	4659      	mov	r1, fp
 80111ae:	4642      	mov	r2, r8
 80111b0:	4620      	mov	r0, r4
 80111b2:	f001 f9dd 	bl	8012570 <__lshift>
 80111b6:	4683      	mov	fp, r0
 80111b8:	9b04      	ldr	r3, [sp, #16]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	dd05      	ble.n	80111ca <_dtoa_r+0x84a>
 80111be:	4631      	mov	r1, r6
 80111c0:	461a      	mov	r2, r3
 80111c2:	4620      	mov	r0, r4
 80111c4:	f001 f9d4 	bl	8012570 <__lshift>
 80111c8:	4606      	mov	r6, r0
 80111ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d069      	beq.n	80112a4 <_dtoa_r+0x924>
 80111d0:	4631      	mov	r1, r6
 80111d2:	4658      	mov	r0, fp
 80111d4:	f001 fa38 	bl	8012648 <__mcmp>
 80111d8:	2800      	cmp	r0, #0
 80111da:	da63      	bge.n	80112a4 <_dtoa_r+0x924>
 80111dc:	2300      	movs	r3, #0
 80111de:	4659      	mov	r1, fp
 80111e0:	220a      	movs	r2, #10
 80111e2:	4620      	mov	r0, r4
 80111e4:	f000 ffca 	bl	801217c <__multadd>
 80111e8:	9b08      	ldr	r3, [sp, #32]
 80111ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80111ee:	4683      	mov	fp, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	f000 818f 	beq.w	8011514 <_dtoa_r+0xb94>
 80111f6:	4639      	mov	r1, r7
 80111f8:	2300      	movs	r3, #0
 80111fa:	220a      	movs	r2, #10
 80111fc:	4620      	mov	r0, r4
 80111fe:	f000 ffbd 	bl	801217c <__multadd>
 8011202:	f1b9 0f00 	cmp.w	r9, #0
 8011206:	4607      	mov	r7, r0
 8011208:	f300 808e 	bgt.w	8011328 <_dtoa_r+0x9a8>
 801120c:	9b05      	ldr	r3, [sp, #20]
 801120e:	2b02      	cmp	r3, #2
 8011210:	dc50      	bgt.n	80112b4 <_dtoa_r+0x934>
 8011212:	e089      	b.n	8011328 <_dtoa_r+0x9a8>
 8011214:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011216:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801121a:	e75d      	b.n	80110d8 <_dtoa_r+0x758>
 801121c:	9b01      	ldr	r3, [sp, #4]
 801121e:	1e5e      	subs	r6, r3, #1
 8011220:	9b06      	ldr	r3, [sp, #24]
 8011222:	42b3      	cmp	r3, r6
 8011224:	bfbf      	itttt	lt
 8011226:	9b06      	ldrlt	r3, [sp, #24]
 8011228:	9606      	strlt	r6, [sp, #24]
 801122a:	1af2      	sublt	r2, r6, r3
 801122c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801122e:	bfb6      	itet	lt
 8011230:	189b      	addlt	r3, r3, r2
 8011232:	1b9e      	subge	r6, r3, r6
 8011234:	930d      	strlt	r3, [sp, #52]	; 0x34
 8011236:	9b01      	ldr	r3, [sp, #4]
 8011238:	bfb8      	it	lt
 801123a:	2600      	movlt	r6, #0
 801123c:	2b00      	cmp	r3, #0
 801123e:	bfb5      	itete	lt
 8011240:	eba8 0503 	sublt.w	r5, r8, r3
 8011244:	9b01      	ldrge	r3, [sp, #4]
 8011246:	2300      	movlt	r3, #0
 8011248:	4645      	movge	r5, r8
 801124a:	e747      	b.n	80110dc <_dtoa_r+0x75c>
 801124c:	9e06      	ldr	r6, [sp, #24]
 801124e:	9f08      	ldr	r7, [sp, #32]
 8011250:	4645      	mov	r5, r8
 8011252:	e74c      	b.n	80110ee <_dtoa_r+0x76e>
 8011254:	9a06      	ldr	r2, [sp, #24]
 8011256:	e775      	b.n	8011144 <_dtoa_r+0x7c4>
 8011258:	9b05      	ldr	r3, [sp, #20]
 801125a:	2b01      	cmp	r3, #1
 801125c:	dc18      	bgt.n	8011290 <_dtoa_r+0x910>
 801125e:	9b02      	ldr	r3, [sp, #8]
 8011260:	b9b3      	cbnz	r3, 8011290 <_dtoa_r+0x910>
 8011262:	9b03      	ldr	r3, [sp, #12]
 8011264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011268:	b9a3      	cbnz	r3, 8011294 <_dtoa_r+0x914>
 801126a:	9b03      	ldr	r3, [sp, #12]
 801126c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011270:	0d1b      	lsrs	r3, r3, #20
 8011272:	051b      	lsls	r3, r3, #20
 8011274:	b12b      	cbz	r3, 8011282 <_dtoa_r+0x902>
 8011276:	9b04      	ldr	r3, [sp, #16]
 8011278:	3301      	adds	r3, #1
 801127a:	9304      	str	r3, [sp, #16]
 801127c:	f108 0801 	add.w	r8, r8, #1
 8011280:	2301      	movs	r3, #1
 8011282:	9306      	str	r3, [sp, #24]
 8011284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011286:	2b00      	cmp	r3, #0
 8011288:	f47f af74 	bne.w	8011174 <_dtoa_r+0x7f4>
 801128c:	2001      	movs	r0, #1
 801128e:	e779      	b.n	8011184 <_dtoa_r+0x804>
 8011290:	2300      	movs	r3, #0
 8011292:	e7f6      	b.n	8011282 <_dtoa_r+0x902>
 8011294:	9b02      	ldr	r3, [sp, #8]
 8011296:	e7f4      	b.n	8011282 <_dtoa_r+0x902>
 8011298:	d085      	beq.n	80111a6 <_dtoa_r+0x826>
 801129a:	4618      	mov	r0, r3
 801129c:	301c      	adds	r0, #28
 801129e:	e77d      	b.n	801119c <_dtoa_r+0x81c>
 80112a0:	40240000 	.word	0x40240000
 80112a4:	9b01      	ldr	r3, [sp, #4]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	dc38      	bgt.n	801131c <_dtoa_r+0x99c>
 80112aa:	9b05      	ldr	r3, [sp, #20]
 80112ac:	2b02      	cmp	r3, #2
 80112ae:	dd35      	ble.n	801131c <_dtoa_r+0x99c>
 80112b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80112b4:	f1b9 0f00 	cmp.w	r9, #0
 80112b8:	d10d      	bne.n	80112d6 <_dtoa_r+0x956>
 80112ba:	4631      	mov	r1, r6
 80112bc:	464b      	mov	r3, r9
 80112be:	2205      	movs	r2, #5
 80112c0:	4620      	mov	r0, r4
 80112c2:	f000 ff5b 	bl	801217c <__multadd>
 80112c6:	4601      	mov	r1, r0
 80112c8:	4606      	mov	r6, r0
 80112ca:	4658      	mov	r0, fp
 80112cc:	f001 f9bc 	bl	8012648 <__mcmp>
 80112d0:	2800      	cmp	r0, #0
 80112d2:	f73f adbd 	bgt.w	8010e50 <_dtoa_r+0x4d0>
 80112d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112d8:	9d00      	ldr	r5, [sp, #0]
 80112da:	ea6f 0a03 	mvn.w	sl, r3
 80112de:	f04f 0800 	mov.w	r8, #0
 80112e2:	4631      	mov	r1, r6
 80112e4:	4620      	mov	r0, r4
 80112e6:	f000 ff27 	bl	8012138 <_Bfree>
 80112ea:	2f00      	cmp	r7, #0
 80112ec:	f43f aeb4 	beq.w	8011058 <_dtoa_r+0x6d8>
 80112f0:	f1b8 0f00 	cmp.w	r8, #0
 80112f4:	d005      	beq.n	8011302 <_dtoa_r+0x982>
 80112f6:	45b8      	cmp	r8, r7
 80112f8:	d003      	beq.n	8011302 <_dtoa_r+0x982>
 80112fa:	4641      	mov	r1, r8
 80112fc:	4620      	mov	r0, r4
 80112fe:	f000 ff1b 	bl	8012138 <_Bfree>
 8011302:	4639      	mov	r1, r7
 8011304:	4620      	mov	r0, r4
 8011306:	f000 ff17 	bl	8012138 <_Bfree>
 801130a:	e6a5      	b.n	8011058 <_dtoa_r+0x6d8>
 801130c:	2600      	movs	r6, #0
 801130e:	4637      	mov	r7, r6
 8011310:	e7e1      	b.n	80112d6 <_dtoa_r+0x956>
 8011312:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011314:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8011318:	4637      	mov	r7, r6
 801131a:	e599      	b.n	8010e50 <_dtoa_r+0x4d0>
 801131c:	9b08      	ldr	r3, [sp, #32]
 801131e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011322:	2b00      	cmp	r3, #0
 8011324:	f000 80fd 	beq.w	8011522 <_dtoa_r+0xba2>
 8011328:	2d00      	cmp	r5, #0
 801132a:	dd05      	ble.n	8011338 <_dtoa_r+0x9b8>
 801132c:	4639      	mov	r1, r7
 801132e:	462a      	mov	r2, r5
 8011330:	4620      	mov	r0, r4
 8011332:	f001 f91d 	bl	8012570 <__lshift>
 8011336:	4607      	mov	r7, r0
 8011338:	9b06      	ldr	r3, [sp, #24]
 801133a:	2b00      	cmp	r3, #0
 801133c:	d05c      	beq.n	80113f8 <_dtoa_r+0xa78>
 801133e:	6879      	ldr	r1, [r7, #4]
 8011340:	4620      	mov	r0, r4
 8011342:	f000 feb9 	bl	80120b8 <_Balloc>
 8011346:	4605      	mov	r5, r0
 8011348:	b928      	cbnz	r0, 8011356 <_dtoa_r+0x9d6>
 801134a:	4b80      	ldr	r3, [pc, #512]	; (801154c <_dtoa_r+0xbcc>)
 801134c:	4602      	mov	r2, r0
 801134e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8011352:	f7ff bb2e 	b.w	80109b2 <_dtoa_r+0x32>
 8011356:	693a      	ldr	r2, [r7, #16]
 8011358:	3202      	adds	r2, #2
 801135a:	0092      	lsls	r2, r2, #2
 801135c:	f107 010c 	add.w	r1, r7, #12
 8011360:	300c      	adds	r0, #12
 8011362:	f7fd fa4d 	bl	800e800 <memcpy>
 8011366:	2201      	movs	r2, #1
 8011368:	4629      	mov	r1, r5
 801136a:	4620      	mov	r0, r4
 801136c:	f001 f900 	bl	8012570 <__lshift>
 8011370:	9b00      	ldr	r3, [sp, #0]
 8011372:	3301      	adds	r3, #1
 8011374:	9301      	str	r3, [sp, #4]
 8011376:	9b00      	ldr	r3, [sp, #0]
 8011378:	444b      	add	r3, r9
 801137a:	9307      	str	r3, [sp, #28]
 801137c:	9b02      	ldr	r3, [sp, #8]
 801137e:	f003 0301 	and.w	r3, r3, #1
 8011382:	46b8      	mov	r8, r7
 8011384:	9306      	str	r3, [sp, #24]
 8011386:	4607      	mov	r7, r0
 8011388:	9b01      	ldr	r3, [sp, #4]
 801138a:	4631      	mov	r1, r6
 801138c:	3b01      	subs	r3, #1
 801138e:	4658      	mov	r0, fp
 8011390:	9302      	str	r3, [sp, #8]
 8011392:	f7ff fa67 	bl	8010864 <quorem>
 8011396:	4603      	mov	r3, r0
 8011398:	3330      	adds	r3, #48	; 0x30
 801139a:	9004      	str	r0, [sp, #16]
 801139c:	4641      	mov	r1, r8
 801139e:	4658      	mov	r0, fp
 80113a0:	9308      	str	r3, [sp, #32]
 80113a2:	f001 f951 	bl	8012648 <__mcmp>
 80113a6:	463a      	mov	r2, r7
 80113a8:	4681      	mov	r9, r0
 80113aa:	4631      	mov	r1, r6
 80113ac:	4620      	mov	r0, r4
 80113ae:	f001 f967 	bl	8012680 <__mdiff>
 80113b2:	68c2      	ldr	r2, [r0, #12]
 80113b4:	9b08      	ldr	r3, [sp, #32]
 80113b6:	4605      	mov	r5, r0
 80113b8:	bb02      	cbnz	r2, 80113fc <_dtoa_r+0xa7c>
 80113ba:	4601      	mov	r1, r0
 80113bc:	4658      	mov	r0, fp
 80113be:	f001 f943 	bl	8012648 <__mcmp>
 80113c2:	9b08      	ldr	r3, [sp, #32]
 80113c4:	4602      	mov	r2, r0
 80113c6:	4629      	mov	r1, r5
 80113c8:	4620      	mov	r0, r4
 80113ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80113ce:	f000 feb3 	bl	8012138 <_Bfree>
 80113d2:	9b05      	ldr	r3, [sp, #20]
 80113d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80113d6:	9d01      	ldr	r5, [sp, #4]
 80113d8:	ea43 0102 	orr.w	r1, r3, r2
 80113dc:	9b06      	ldr	r3, [sp, #24]
 80113de:	430b      	orrs	r3, r1
 80113e0:	9b08      	ldr	r3, [sp, #32]
 80113e2:	d10d      	bne.n	8011400 <_dtoa_r+0xa80>
 80113e4:	2b39      	cmp	r3, #57	; 0x39
 80113e6:	d029      	beq.n	801143c <_dtoa_r+0xabc>
 80113e8:	f1b9 0f00 	cmp.w	r9, #0
 80113ec:	dd01      	ble.n	80113f2 <_dtoa_r+0xa72>
 80113ee:	9b04      	ldr	r3, [sp, #16]
 80113f0:	3331      	adds	r3, #49	; 0x31
 80113f2:	9a02      	ldr	r2, [sp, #8]
 80113f4:	7013      	strb	r3, [r2, #0]
 80113f6:	e774      	b.n	80112e2 <_dtoa_r+0x962>
 80113f8:	4638      	mov	r0, r7
 80113fa:	e7b9      	b.n	8011370 <_dtoa_r+0x9f0>
 80113fc:	2201      	movs	r2, #1
 80113fe:	e7e2      	b.n	80113c6 <_dtoa_r+0xa46>
 8011400:	f1b9 0f00 	cmp.w	r9, #0
 8011404:	db06      	blt.n	8011414 <_dtoa_r+0xa94>
 8011406:	9905      	ldr	r1, [sp, #20]
 8011408:	ea41 0909 	orr.w	r9, r1, r9
 801140c:	9906      	ldr	r1, [sp, #24]
 801140e:	ea59 0101 	orrs.w	r1, r9, r1
 8011412:	d120      	bne.n	8011456 <_dtoa_r+0xad6>
 8011414:	2a00      	cmp	r2, #0
 8011416:	ddec      	ble.n	80113f2 <_dtoa_r+0xa72>
 8011418:	4659      	mov	r1, fp
 801141a:	2201      	movs	r2, #1
 801141c:	4620      	mov	r0, r4
 801141e:	9301      	str	r3, [sp, #4]
 8011420:	f001 f8a6 	bl	8012570 <__lshift>
 8011424:	4631      	mov	r1, r6
 8011426:	4683      	mov	fp, r0
 8011428:	f001 f90e 	bl	8012648 <__mcmp>
 801142c:	2800      	cmp	r0, #0
 801142e:	9b01      	ldr	r3, [sp, #4]
 8011430:	dc02      	bgt.n	8011438 <_dtoa_r+0xab8>
 8011432:	d1de      	bne.n	80113f2 <_dtoa_r+0xa72>
 8011434:	07da      	lsls	r2, r3, #31
 8011436:	d5dc      	bpl.n	80113f2 <_dtoa_r+0xa72>
 8011438:	2b39      	cmp	r3, #57	; 0x39
 801143a:	d1d8      	bne.n	80113ee <_dtoa_r+0xa6e>
 801143c:	9a02      	ldr	r2, [sp, #8]
 801143e:	2339      	movs	r3, #57	; 0x39
 8011440:	7013      	strb	r3, [r2, #0]
 8011442:	462b      	mov	r3, r5
 8011444:	461d      	mov	r5, r3
 8011446:	3b01      	subs	r3, #1
 8011448:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801144c:	2a39      	cmp	r2, #57	; 0x39
 801144e:	d050      	beq.n	80114f2 <_dtoa_r+0xb72>
 8011450:	3201      	adds	r2, #1
 8011452:	701a      	strb	r2, [r3, #0]
 8011454:	e745      	b.n	80112e2 <_dtoa_r+0x962>
 8011456:	2a00      	cmp	r2, #0
 8011458:	dd03      	ble.n	8011462 <_dtoa_r+0xae2>
 801145a:	2b39      	cmp	r3, #57	; 0x39
 801145c:	d0ee      	beq.n	801143c <_dtoa_r+0xabc>
 801145e:	3301      	adds	r3, #1
 8011460:	e7c7      	b.n	80113f2 <_dtoa_r+0xa72>
 8011462:	9a01      	ldr	r2, [sp, #4]
 8011464:	9907      	ldr	r1, [sp, #28]
 8011466:	f802 3c01 	strb.w	r3, [r2, #-1]
 801146a:	428a      	cmp	r2, r1
 801146c:	d02a      	beq.n	80114c4 <_dtoa_r+0xb44>
 801146e:	4659      	mov	r1, fp
 8011470:	2300      	movs	r3, #0
 8011472:	220a      	movs	r2, #10
 8011474:	4620      	mov	r0, r4
 8011476:	f000 fe81 	bl	801217c <__multadd>
 801147a:	45b8      	cmp	r8, r7
 801147c:	4683      	mov	fp, r0
 801147e:	f04f 0300 	mov.w	r3, #0
 8011482:	f04f 020a 	mov.w	r2, #10
 8011486:	4641      	mov	r1, r8
 8011488:	4620      	mov	r0, r4
 801148a:	d107      	bne.n	801149c <_dtoa_r+0xb1c>
 801148c:	f000 fe76 	bl	801217c <__multadd>
 8011490:	4680      	mov	r8, r0
 8011492:	4607      	mov	r7, r0
 8011494:	9b01      	ldr	r3, [sp, #4]
 8011496:	3301      	adds	r3, #1
 8011498:	9301      	str	r3, [sp, #4]
 801149a:	e775      	b.n	8011388 <_dtoa_r+0xa08>
 801149c:	f000 fe6e 	bl	801217c <__multadd>
 80114a0:	4639      	mov	r1, r7
 80114a2:	4680      	mov	r8, r0
 80114a4:	2300      	movs	r3, #0
 80114a6:	220a      	movs	r2, #10
 80114a8:	4620      	mov	r0, r4
 80114aa:	f000 fe67 	bl	801217c <__multadd>
 80114ae:	4607      	mov	r7, r0
 80114b0:	e7f0      	b.n	8011494 <_dtoa_r+0xb14>
 80114b2:	f1b9 0f00 	cmp.w	r9, #0
 80114b6:	9a00      	ldr	r2, [sp, #0]
 80114b8:	bfcc      	ite	gt
 80114ba:	464d      	movgt	r5, r9
 80114bc:	2501      	movle	r5, #1
 80114be:	4415      	add	r5, r2
 80114c0:	f04f 0800 	mov.w	r8, #0
 80114c4:	4659      	mov	r1, fp
 80114c6:	2201      	movs	r2, #1
 80114c8:	4620      	mov	r0, r4
 80114ca:	9301      	str	r3, [sp, #4]
 80114cc:	f001 f850 	bl	8012570 <__lshift>
 80114d0:	4631      	mov	r1, r6
 80114d2:	4683      	mov	fp, r0
 80114d4:	f001 f8b8 	bl	8012648 <__mcmp>
 80114d8:	2800      	cmp	r0, #0
 80114da:	dcb2      	bgt.n	8011442 <_dtoa_r+0xac2>
 80114dc:	d102      	bne.n	80114e4 <_dtoa_r+0xb64>
 80114de:	9b01      	ldr	r3, [sp, #4]
 80114e0:	07db      	lsls	r3, r3, #31
 80114e2:	d4ae      	bmi.n	8011442 <_dtoa_r+0xac2>
 80114e4:	462b      	mov	r3, r5
 80114e6:	461d      	mov	r5, r3
 80114e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80114ec:	2a30      	cmp	r2, #48	; 0x30
 80114ee:	d0fa      	beq.n	80114e6 <_dtoa_r+0xb66>
 80114f0:	e6f7      	b.n	80112e2 <_dtoa_r+0x962>
 80114f2:	9a00      	ldr	r2, [sp, #0]
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d1a5      	bne.n	8011444 <_dtoa_r+0xac4>
 80114f8:	f10a 0a01 	add.w	sl, sl, #1
 80114fc:	2331      	movs	r3, #49	; 0x31
 80114fe:	e779      	b.n	80113f4 <_dtoa_r+0xa74>
 8011500:	4b13      	ldr	r3, [pc, #76]	; (8011550 <_dtoa_r+0xbd0>)
 8011502:	f7ff baaf 	b.w	8010a64 <_dtoa_r+0xe4>
 8011506:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011508:	2b00      	cmp	r3, #0
 801150a:	f47f aa86 	bne.w	8010a1a <_dtoa_r+0x9a>
 801150e:	4b11      	ldr	r3, [pc, #68]	; (8011554 <_dtoa_r+0xbd4>)
 8011510:	f7ff baa8 	b.w	8010a64 <_dtoa_r+0xe4>
 8011514:	f1b9 0f00 	cmp.w	r9, #0
 8011518:	dc03      	bgt.n	8011522 <_dtoa_r+0xba2>
 801151a:	9b05      	ldr	r3, [sp, #20]
 801151c:	2b02      	cmp	r3, #2
 801151e:	f73f aec9 	bgt.w	80112b4 <_dtoa_r+0x934>
 8011522:	9d00      	ldr	r5, [sp, #0]
 8011524:	4631      	mov	r1, r6
 8011526:	4658      	mov	r0, fp
 8011528:	f7ff f99c 	bl	8010864 <quorem>
 801152c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011530:	f805 3b01 	strb.w	r3, [r5], #1
 8011534:	9a00      	ldr	r2, [sp, #0]
 8011536:	1aaa      	subs	r2, r5, r2
 8011538:	4591      	cmp	r9, r2
 801153a:	ddba      	ble.n	80114b2 <_dtoa_r+0xb32>
 801153c:	4659      	mov	r1, fp
 801153e:	2300      	movs	r3, #0
 8011540:	220a      	movs	r2, #10
 8011542:	4620      	mov	r0, r4
 8011544:	f000 fe1a 	bl	801217c <__multadd>
 8011548:	4683      	mov	fp, r0
 801154a:	e7eb      	b.n	8011524 <_dtoa_r+0xba4>
 801154c:	0813d11c 	.word	0x0813d11c
 8011550:	0813cf1c 	.word	0x0813cf1c
 8011554:	0813d099 	.word	0x0813d099

08011558 <__sflush_r>:
 8011558:	898a      	ldrh	r2, [r1, #12]
 801155a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801155e:	4605      	mov	r5, r0
 8011560:	0710      	lsls	r0, r2, #28
 8011562:	460c      	mov	r4, r1
 8011564:	d458      	bmi.n	8011618 <__sflush_r+0xc0>
 8011566:	684b      	ldr	r3, [r1, #4]
 8011568:	2b00      	cmp	r3, #0
 801156a:	dc05      	bgt.n	8011578 <__sflush_r+0x20>
 801156c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801156e:	2b00      	cmp	r3, #0
 8011570:	dc02      	bgt.n	8011578 <__sflush_r+0x20>
 8011572:	2000      	movs	r0, #0
 8011574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011578:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801157a:	2e00      	cmp	r6, #0
 801157c:	d0f9      	beq.n	8011572 <__sflush_r+0x1a>
 801157e:	2300      	movs	r3, #0
 8011580:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011584:	682f      	ldr	r7, [r5, #0]
 8011586:	602b      	str	r3, [r5, #0]
 8011588:	d032      	beq.n	80115f0 <__sflush_r+0x98>
 801158a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801158c:	89a3      	ldrh	r3, [r4, #12]
 801158e:	075a      	lsls	r2, r3, #29
 8011590:	d505      	bpl.n	801159e <__sflush_r+0x46>
 8011592:	6863      	ldr	r3, [r4, #4]
 8011594:	1ac0      	subs	r0, r0, r3
 8011596:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011598:	b10b      	cbz	r3, 801159e <__sflush_r+0x46>
 801159a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801159c:	1ac0      	subs	r0, r0, r3
 801159e:	2300      	movs	r3, #0
 80115a0:	4602      	mov	r2, r0
 80115a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115a4:	6a21      	ldr	r1, [r4, #32]
 80115a6:	4628      	mov	r0, r5
 80115a8:	47b0      	blx	r6
 80115aa:	1c43      	adds	r3, r0, #1
 80115ac:	89a3      	ldrh	r3, [r4, #12]
 80115ae:	d106      	bne.n	80115be <__sflush_r+0x66>
 80115b0:	6829      	ldr	r1, [r5, #0]
 80115b2:	291d      	cmp	r1, #29
 80115b4:	d82c      	bhi.n	8011610 <__sflush_r+0xb8>
 80115b6:	4a2a      	ldr	r2, [pc, #168]	; (8011660 <__sflush_r+0x108>)
 80115b8:	40ca      	lsrs	r2, r1
 80115ba:	07d6      	lsls	r6, r2, #31
 80115bc:	d528      	bpl.n	8011610 <__sflush_r+0xb8>
 80115be:	2200      	movs	r2, #0
 80115c0:	6062      	str	r2, [r4, #4]
 80115c2:	04d9      	lsls	r1, r3, #19
 80115c4:	6922      	ldr	r2, [r4, #16]
 80115c6:	6022      	str	r2, [r4, #0]
 80115c8:	d504      	bpl.n	80115d4 <__sflush_r+0x7c>
 80115ca:	1c42      	adds	r2, r0, #1
 80115cc:	d101      	bne.n	80115d2 <__sflush_r+0x7a>
 80115ce:	682b      	ldr	r3, [r5, #0]
 80115d0:	b903      	cbnz	r3, 80115d4 <__sflush_r+0x7c>
 80115d2:	6560      	str	r0, [r4, #84]	; 0x54
 80115d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80115d6:	602f      	str	r7, [r5, #0]
 80115d8:	2900      	cmp	r1, #0
 80115da:	d0ca      	beq.n	8011572 <__sflush_r+0x1a>
 80115dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80115e0:	4299      	cmp	r1, r3
 80115e2:	d002      	beq.n	80115ea <__sflush_r+0x92>
 80115e4:	4628      	mov	r0, r5
 80115e6:	f7fd f921 	bl	800e82c <_free_r>
 80115ea:	2000      	movs	r0, #0
 80115ec:	6360      	str	r0, [r4, #52]	; 0x34
 80115ee:	e7c1      	b.n	8011574 <__sflush_r+0x1c>
 80115f0:	6a21      	ldr	r1, [r4, #32]
 80115f2:	2301      	movs	r3, #1
 80115f4:	4628      	mov	r0, r5
 80115f6:	47b0      	blx	r6
 80115f8:	1c41      	adds	r1, r0, #1
 80115fa:	d1c7      	bne.n	801158c <__sflush_r+0x34>
 80115fc:	682b      	ldr	r3, [r5, #0]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d0c4      	beq.n	801158c <__sflush_r+0x34>
 8011602:	2b1d      	cmp	r3, #29
 8011604:	d001      	beq.n	801160a <__sflush_r+0xb2>
 8011606:	2b16      	cmp	r3, #22
 8011608:	d101      	bne.n	801160e <__sflush_r+0xb6>
 801160a:	602f      	str	r7, [r5, #0]
 801160c:	e7b1      	b.n	8011572 <__sflush_r+0x1a>
 801160e:	89a3      	ldrh	r3, [r4, #12]
 8011610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011614:	81a3      	strh	r3, [r4, #12]
 8011616:	e7ad      	b.n	8011574 <__sflush_r+0x1c>
 8011618:	690f      	ldr	r7, [r1, #16]
 801161a:	2f00      	cmp	r7, #0
 801161c:	d0a9      	beq.n	8011572 <__sflush_r+0x1a>
 801161e:	0793      	lsls	r3, r2, #30
 8011620:	680e      	ldr	r6, [r1, #0]
 8011622:	bf08      	it	eq
 8011624:	694b      	ldreq	r3, [r1, #20]
 8011626:	600f      	str	r7, [r1, #0]
 8011628:	bf18      	it	ne
 801162a:	2300      	movne	r3, #0
 801162c:	eba6 0807 	sub.w	r8, r6, r7
 8011630:	608b      	str	r3, [r1, #8]
 8011632:	f1b8 0f00 	cmp.w	r8, #0
 8011636:	dd9c      	ble.n	8011572 <__sflush_r+0x1a>
 8011638:	6a21      	ldr	r1, [r4, #32]
 801163a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801163c:	4643      	mov	r3, r8
 801163e:	463a      	mov	r2, r7
 8011640:	4628      	mov	r0, r5
 8011642:	47b0      	blx	r6
 8011644:	2800      	cmp	r0, #0
 8011646:	dc06      	bgt.n	8011656 <__sflush_r+0xfe>
 8011648:	89a3      	ldrh	r3, [r4, #12]
 801164a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801164e:	81a3      	strh	r3, [r4, #12]
 8011650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011654:	e78e      	b.n	8011574 <__sflush_r+0x1c>
 8011656:	4407      	add	r7, r0
 8011658:	eba8 0800 	sub.w	r8, r8, r0
 801165c:	e7e9      	b.n	8011632 <__sflush_r+0xda>
 801165e:	bf00      	nop
 8011660:	20400001 	.word	0x20400001

08011664 <_fflush_r>:
 8011664:	b538      	push	{r3, r4, r5, lr}
 8011666:	690b      	ldr	r3, [r1, #16]
 8011668:	4605      	mov	r5, r0
 801166a:	460c      	mov	r4, r1
 801166c:	b913      	cbnz	r3, 8011674 <_fflush_r+0x10>
 801166e:	2500      	movs	r5, #0
 8011670:	4628      	mov	r0, r5
 8011672:	bd38      	pop	{r3, r4, r5, pc}
 8011674:	b118      	cbz	r0, 801167e <_fflush_r+0x1a>
 8011676:	6983      	ldr	r3, [r0, #24]
 8011678:	b90b      	cbnz	r3, 801167e <_fflush_r+0x1a>
 801167a:	f000 f887 	bl	801178c <__sinit>
 801167e:	4b14      	ldr	r3, [pc, #80]	; (80116d0 <_fflush_r+0x6c>)
 8011680:	429c      	cmp	r4, r3
 8011682:	d11b      	bne.n	80116bc <_fflush_r+0x58>
 8011684:	686c      	ldr	r4, [r5, #4]
 8011686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d0ef      	beq.n	801166e <_fflush_r+0xa>
 801168e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011690:	07d0      	lsls	r0, r2, #31
 8011692:	d404      	bmi.n	801169e <_fflush_r+0x3a>
 8011694:	0599      	lsls	r1, r3, #22
 8011696:	d402      	bmi.n	801169e <_fflush_r+0x3a>
 8011698:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801169a:	f000 fc88 	bl	8011fae <__retarget_lock_acquire_recursive>
 801169e:	4628      	mov	r0, r5
 80116a0:	4621      	mov	r1, r4
 80116a2:	f7ff ff59 	bl	8011558 <__sflush_r>
 80116a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116a8:	07da      	lsls	r2, r3, #31
 80116aa:	4605      	mov	r5, r0
 80116ac:	d4e0      	bmi.n	8011670 <_fflush_r+0xc>
 80116ae:	89a3      	ldrh	r3, [r4, #12]
 80116b0:	059b      	lsls	r3, r3, #22
 80116b2:	d4dd      	bmi.n	8011670 <_fflush_r+0xc>
 80116b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116b6:	f000 fc7b 	bl	8011fb0 <__retarget_lock_release_recursive>
 80116ba:	e7d9      	b.n	8011670 <_fflush_r+0xc>
 80116bc:	4b05      	ldr	r3, [pc, #20]	; (80116d4 <_fflush_r+0x70>)
 80116be:	429c      	cmp	r4, r3
 80116c0:	d101      	bne.n	80116c6 <_fflush_r+0x62>
 80116c2:	68ac      	ldr	r4, [r5, #8]
 80116c4:	e7df      	b.n	8011686 <_fflush_r+0x22>
 80116c6:	4b04      	ldr	r3, [pc, #16]	; (80116d8 <_fflush_r+0x74>)
 80116c8:	429c      	cmp	r4, r3
 80116ca:	bf08      	it	eq
 80116cc:	68ec      	ldreq	r4, [r5, #12]
 80116ce:	e7da      	b.n	8011686 <_fflush_r+0x22>
 80116d0:	0813d150 	.word	0x0813d150
 80116d4:	0813d170 	.word	0x0813d170
 80116d8:	0813d130 	.word	0x0813d130

080116dc <std>:
 80116dc:	2300      	movs	r3, #0
 80116de:	b510      	push	{r4, lr}
 80116e0:	4604      	mov	r4, r0
 80116e2:	e9c0 3300 	strd	r3, r3, [r0]
 80116e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80116ea:	6083      	str	r3, [r0, #8]
 80116ec:	8181      	strh	r1, [r0, #12]
 80116ee:	6643      	str	r3, [r0, #100]	; 0x64
 80116f0:	81c2      	strh	r2, [r0, #14]
 80116f2:	6183      	str	r3, [r0, #24]
 80116f4:	4619      	mov	r1, r3
 80116f6:	2208      	movs	r2, #8
 80116f8:	305c      	adds	r0, #92	; 0x5c
 80116fa:	f7fd f88f 	bl	800e81c <memset>
 80116fe:	4b05      	ldr	r3, [pc, #20]	; (8011714 <std+0x38>)
 8011700:	6263      	str	r3, [r4, #36]	; 0x24
 8011702:	4b05      	ldr	r3, [pc, #20]	; (8011718 <std+0x3c>)
 8011704:	62a3      	str	r3, [r4, #40]	; 0x28
 8011706:	4b05      	ldr	r3, [pc, #20]	; (801171c <std+0x40>)
 8011708:	62e3      	str	r3, [r4, #44]	; 0x2c
 801170a:	4b05      	ldr	r3, [pc, #20]	; (8011720 <std+0x44>)
 801170c:	6224      	str	r4, [r4, #32]
 801170e:	6323      	str	r3, [r4, #48]	; 0x30
 8011710:	bd10      	pop	{r4, pc}
 8011712:	bf00      	nop
 8011714:	08013019 	.word	0x08013019
 8011718:	0801303b 	.word	0x0801303b
 801171c:	08013073 	.word	0x08013073
 8011720:	08013097 	.word	0x08013097

08011724 <_cleanup_r>:
 8011724:	4901      	ldr	r1, [pc, #4]	; (801172c <_cleanup_r+0x8>)
 8011726:	f000 b8af 	b.w	8011888 <_fwalk_reent>
 801172a:	bf00      	nop
 801172c:	08011665 	.word	0x08011665

08011730 <__sfmoreglue>:
 8011730:	b570      	push	{r4, r5, r6, lr}
 8011732:	1e4a      	subs	r2, r1, #1
 8011734:	2568      	movs	r5, #104	; 0x68
 8011736:	4355      	muls	r5, r2
 8011738:	460e      	mov	r6, r1
 801173a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801173e:	f7fd f8c5 	bl	800e8cc <_malloc_r>
 8011742:	4604      	mov	r4, r0
 8011744:	b140      	cbz	r0, 8011758 <__sfmoreglue+0x28>
 8011746:	2100      	movs	r1, #0
 8011748:	e9c0 1600 	strd	r1, r6, [r0]
 801174c:	300c      	adds	r0, #12
 801174e:	60a0      	str	r0, [r4, #8]
 8011750:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011754:	f7fd f862 	bl	800e81c <memset>
 8011758:	4620      	mov	r0, r4
 801175a:	bd70      	pop	{r4, r5, r6, pc}

0801175c <__sfp_lock_acquire>:
 801175c:	4801      	ldr	r0, [pc, #4]	; (8011764 <__sfp_lock_acquire+0x8>)
 801175e:	f000 bc26 	b.w	8011fae <__retarget_lock_acquire_recursive>
 8011762:	bf00      	nop
 8011764:	20009f64 	.word	0x20009f64

08011768 <__sfp_lock_release>:
 8011768:	4801      	ldr	r0, [pc, #4]	; (8011770 <__sfp_lock_release+0x8>)
 801176a:	f000 bc21 	b.w	8011fb0 <__retarget_lock_release_recursive>
 801176e:	bf00      	nop
 8011770:	20009f64 	.word	0x20009f64

08011774 <__sinit_lock_acquire>:
 8011774:	4801      	ldr	r0, [pc, #4]	; (801177c <__sinit_lock_acquire+0x8>)
 8011776:	f000 bc1a 	b.w	8011fae <__retarget_lock_acquire_recursive>
 801177a:	bf00      	nop
 801177c:	20009f5f 	.word	0x20009f5f

08011780 <__sinit_lock_release>:
 8011780:	4801      	ldr	r0, [pc, #4]	; (8011788 <__sinit_lock_release+0x8>)
 8011782:	f000 bc15 	b.w	8011fb0 <__retarget_lock_release_recursive>
 8011786:	bf00      	nop
 8011788:	20009f5f 	.word	0x20009f5f

0801178c <__sinit>:
 801178c:	b510      	push	{r4, lr}
 801178e:	4604      	mov	r4, r0
 8011790:	f7ff fff0 	bl	8011774 <__sinit_lock_acquire>
 8011794:	69a3      	ldr	r3, [r4, #24]
 8011796:	b11b      	cbz	r3, 80117a0 <__sinit+0x14>
 8011798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801179c:	f7ff bff0 	b.w	8011780 <__sinit_lock_release>
 80117a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80117a4:	6523      	str	r3, [r4, #80]	; 0x50
 80117a6:	4b13      	ldr	r3, [pc, #76]	; (80117f4 <__sinit+0x68>)
 80117a8:	4a13      	ldr	r2, [pc, #76]	; (80117f8 <__sinit+0x6c>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80117ae:	42a3      	cmp	r3, r4
 80117b0:	bf04      	itt	eq
 80117b2:	2301      	moveq	r3, #1
 80117b4:	61a3      	streq	r3, [r4, #24]
 80117b6:	4620      	mov	r0, r4
 80117b8:	f000 f820 	bl	80117fc <__sfp>
 80117bc:	6060      	str	r0, [r4, #4]
 80117be:	4620      	mov	r0, r4
 80117c0:	f000 f81c 	bl	80117fc <__sfp>
 80117c4:	60a0      	str	r0, [r4, #8]
 80117c6:	4620      	mov	r0, r4
 80117c8:	f000 f818 	bl	80117fc <__sfp>
 80117cc:	2200      	movs	r2, #0
 80117ce:	60e0      	str	r0, [r4, #12]
 80117d0:	2104      	movs	r1, #4
 80117d2:	6860      	ldr	r0, [r4, #4]
 80117d4:	f7ff ff82 	bl	80116dc <std>
 80117d8:	68a0      	ldr	r0, [r4, #8]
 80117da:	2201      	movs	r2, #1
 80117dc:	2109      	movs	r1, #9
 80117de:	f7ff ff7d 	bl	80116dc <std>
 80117e2:	68e0      	ldr	r0, [r4, #12]
 80117e4:	2202      	movs	r2, #2
 80117e6:	2112      	movs	r1, #18
 80117e8:	f7ff ff78 	bl	80116dc <std>
 80117ec:	2301      	movs	r3, #1
 80117ee:	61a3      	str	r3, [r4, #24]
 80117f0:	e7d2      	b.n	8011798 <__sinit+0xc>
 80117f2:	bf00      	nop
 80117f4:	0813cf08 	.word	0x0813cf08
 80117f8:	08011725 	.word	0x08011725

080117fc <__sfp>:
 80117fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117fe:	4607      	mov	r7, r0
 8011800:	f7ff ffac 	bl	801175c <__sfp_lock_acquire>
 8011804:	4b1e      	ldr	r3, [pc, #120]	; (8011880 <__sfp+0x84>)
 8011806:	681e      	ldr	r6, [r3, #0]
 8011808:	69b3      	ldr	r3, [r6, #24]
 801180a:	b913      	cbnz	r3, 8011812 <__sfp+0x16>
 801180c:	4630      	mov	r0, r6
 801180e:	f7ff ffbd 	bl	801178c <__sinit>
 8011812:	3648      	adds	r6, #72	; 0x48
 8011814:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011818:	3b01      	subs	r3, #1
 801181a:	d503      	bpl.n	8011824 <__sfp+0x28>
 801181c:	6833      	ldr	r3, [r6, #0]
 801181e:	b30b      	cbz	r3, 8011864 <__sfp+0x68>
 8011820:	6836      	ldr	r6, [r6, #0]
 8011822:	e7f7      	b.n	8011814 <__sfp+0x18>
 8011824:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011828:	b9d5      	cbnz	r5, 8011860 <__sfp+0x64>
 801182a:	4b16      	ldr	r3, [pc, #88]	; (8011884 <__sfp+0x88>)
 801182c:	60e3      	str	r3, [r4, #12]
 801182e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011832:	6665      	str	r5, [r4, #100]	; 0x64
 8011834:	f000 fbba 	bl	8011fac <__retarget_lock_init_recursive>
 8011838:	f7ff ff96 	bl	8011768 <__sfp_lock_release>
 801183c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011840:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011844:	6025      	str	r5, [r4, #0]
 8011846:	61a5      	str	r5, [r4, #24]
 8011848:	2208      	movs	r2, #8
 801184a:	4629      	mov	r1, r5
 801184c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011850:	f7fc ffe4 	bl	800e81c <memset>
 8011854:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011858:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801185c:	4620      	mov	r0, r4
 801185e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011860:	3468      	adds	r4, #104	; 0x68
 8011862:	e7d9      	b.n	8011818 <__sfp+0x1c>
 8011864:	2104      	movs	r1, #4
 8011866:	4638      	mov	r0, r7
 8011868:	f7ff ff62 	bl	8011730 <__sfmoreglue>
 801186c:	4604      	mov	r4, r0
 801186e:	6030      	str	r0, [r6, #0]
 8011870:	2800      	cmp	r0, #0
 8011872:	d1d5      	bne.n	8011820 <__sfp+0x24>
 8011874:	f7ff ff78 	bl	8011768 <__sfp_lock_release>
 8011878:	230c      	movs	r3, #12
 801187a:	603b      	str	r3, [r7, #0]
 801187c:	e7ee      	b.n	801185c <__sfp+0x60>
 801187e:	bf00      	nop
 8011880:	0813cf08 	.word	0x0813cf08
 8011884:	ffff0001 	.word	0xffff0001

08011888 <_fwalk_reent>:
 8011888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801188c:	4606      	mov	r6, r0
 801188e:	4688      	mov	r8, r1
 8011890:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011894:	2700      	movs	r7, #0
 8011896:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801189a:	f1b9 0901 	subs.w	r9, r9, #1
 801189e:	d505      	bpl.n	80118ac <_fwalk_reent+0x24>
 80118a0:	6824      	ldr	r4, [r4, #0]
 80118a2:	2c00      	cmp	r4, #0
 80118a4:	d1f7      	bne.n	8011896 <_fwalk_reent+0xe>
 80118a6:	4638      	mov	r0, r7
 80118a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118ac:	89ab      	ldrh	r3, [r5, #12]
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d907      	bls.n	80118c2 <_fwalk_reent+0x3a>
 80118b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80118b6:	3301      	adds	r3, #1
 80118b8:	d003      	beq.n	80118c2 <_fwalk_reent+0x3a>
 80118ba:	4629      	mov	r1, r5
 80118bc:	4630      	mov	r0, r6
 80118be:	47c0      	blx	r8
 80118c0:	4307      	orrs	r7, r0
 80118c2:	3568      	adds	r5, #104	; 0x68
 80118c4:	e7e9      	b.n	801189a <_fwalk_reent+0x12>

080118c6 <rshift>:
 80118c6:	6903      	ldr	r3, [r0, #16]
 80118c8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80118cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118d0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80118d4:	f100 0414 	add.w	r4, r0, #20
 80118d8:	dd45      	ble.n	8011966 <rshift+0xa0>
 80118da:	f011 011f 	ands.w	r1, r1, #31
 80118de:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80118e2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80118e6:	d10c      	bne.n	8011902 <rshift+0x3c>
 80118e8:	f100 0710 	add.w	r7, r0, #16
 80118ec:	4629      	mov	r1, r5
 80118ee:	42b1      	cmp	r1, r6
 80118f0:	d334      	bcc.n	801195c <rshift+0x96>
 80118f2:	1a9b      	subs	r3, r3, r2
 80118f4:	009b      	lsls	r3, r3, #2
 80118f6:	1eea      	subs	r2, r5, #3
 80118f8:	4296      	cmp	r6, r2
 80118fa:	bf38      	it	cc
 80118fc:	2300      	movcc	r3, #0
 80118fe:	4423      	add	r3, r4
 8011900:	e015      	b.n	801192e <rshift+0x68>
 8011902:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011906:	f1c1 0820 	rsb	r8, r1, #32
 801190a:	40cf      	lsrs	r7, r1
 801190c:	f105 0e04 	add.w	lr, r5, #4
 8011910:	46a1      	mov	r9, r4
 8011912:	4576      	cmp	r6, lr
 8011914:	46f4      	mov	ip, lr
 8011916:	d815      	bhi.n	8011944 <rshift+0x7e>
 8011918:	1a9b      	subs	r3, r3, r2
 801191a:	009a      	lsls	r2, r3, #2
 801191c:	3a04      	subs	r2, #4
 801191e:	3501      	adds	r5, #1
 8011920:	42ae      	cmp	r6, r5
 8011922:	bf38      	it	cc
 8011924:	2200      	movcc	r2, #0
 8011926:	18a3      	adds	r3, r4, r2
 8011928:	50a7      	str	r7, [r4, r2]
 801192a:	b107      	cbz	r7, 801192e <rshift+0x68>
 801192c:	3304      	adds	r3, #4
 801192e:	1b1a      	subs	r2, r3, r4
 8011930:	42a3      	cmp	r3, r4
 8011932:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011936:	bf08      	it	eq
 8011938:	2300      	moveq	r3, #0
 801193a:	6102      	str	r2, [r0, #16]
 801193c:	bf08      	it	eq
 801193e:	6143      	streq	r3, [r0, #20]
 8011940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011944:	f8dc c000 	ldr.w	ip, [ip]
 8011948:	fa0c fc08 	lsl.w	ip, ip, r8
 801194c:	ea4c 0707 	orr.w	r7, ip, r7
 8011950:	f849 7b04 	str.w	r7, [r9], #4
 8011954:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011958:	40cf      	lsrs	r7, r1
 801195a:	e7da      	b.n	8011912 <rshift+0x4c>
 801195c:	f851 cb04 	ldr.w	ip, [r1], #4
 8011960:	f847 cf04 	str.w	ip, [r7, #4]!
 8011964:	e7c3      	b.n	80118ee <rshift+0x28>
 8011966:	4623      	mov	r3, r4
 8011968:	e7e1      	b.n	801192e <rshift+0x68>

0801196a <__hexdig_fun>:
 801196a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801196e:	2b09      	cmp	r3, #9
 8011970:	d802      	bhi.n	8011978 <__hexdig_fun+0xe>
 8011972:	3820      	subs	r0, #32
 8011974:	b2c0      	uxtb	r0, r0
 8011976:	4770      	bx	lr
 8011978:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801197c:	2b05      	cmp	r3, #5
 801197e:	d801      	bhi.n	8011984 <__hexdig_fun+0x1a>
 8011980:	3847      	subs	r0, #71	; 0x47
 8011982:	e7f7      	b.n	8011974 <__hexdig_fun+0xa>
 8011984:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011988:	2b05      	cmp	r3, #5
 801198a:	d801      	bhi.n	8011990 <__hexdig_fun+0x26>
 801198c:	3827      	subs	r0, #39	; 0x27
 801198e:	e7f1      	b.n	8011974 <__hexdig_fun+0xa>
 8011990:	2000      	movs	r0, #0
 8011992:	4770      	bx	lr

08011994 <__gethex>:
 8011994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011998:	ed2d 8b02 	vpush	{d8}
 801199c:	b089      	sub	sp, #36	; 0x24
 801199e:	ee08 0a10 	vmov	s16, r0
 80119a2:	9304      	str	r3, [sp, #16]
 80119a4:	4bbc      	ldr	r3, [pc, #752]	; (8011c98 <__gethex+0x304>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	9301      	str	r3, [sp, #4]
 80119aa:	4618      	mov	r0, r3
 80119ac:	468b      	mov	fp, r1
 80119ae:	4690      	mov	r8, r2
 80119b0:	f7ee fc1e 	bl	80001f0 <strlen>
 80119b4:	9b01      	ldr	r3, [sp, #4]
 80119b6:	f8db 2000 	ldr.w	r2, [fp]
 80119ba:	4403      	add	r3, r0
 80119bc:	4682      	mov	sl, r0
 80119be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80119c2:	9305      	str	r3, [sp, #20]
 80119c4:	1c93      	adds	r3, r2, #2
 80119c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80119ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80119ce:	32fe      	adds	r2, #254	; 0xfe
 80119d0:	18d1      	adds	r1, r2, r3
 80119d2:	461f      	mov	r7, r3
 80119d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80119d8:	9100      	str	r1, [sp, #0]
 80119da:	2830      	cmp	r0, #48	; 0x30
 80119dc:	d0f8      	beq.n	80119d0 <__gethex+0x3c>
 80119de:	f7ff ffc4 	bl	801196a <__hexdig_fun>
 80119e2:	4604      	mov	r4, r0
 80119e4:	2800      	cmp	r0, #0
 80119e6:	d13a      	bne.n	8011a5e <__gethex+0xca>
 80119e8:	9901      	ldr	r1, [sp, #4]
 80119ea:	4652      	mov	r2, sl
 80119ec:	4638      	mov	r0, r7
 80119ee:	f001 fb56 	bl	801309e <strncmp>
 80119f2:	4605      	mov	r5, r0
 80119f4:	2800      	cmp	r0, #0
 80119f6:	d168      	bne.n	8011aca <__gethex+0x136>
 80119f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80119fc:	eb07 060a 	add.w	r6, r7, sl
 8011a00:	f7ff ffb3 	bl	801196a <__hexdig_fun>
 8011a04:	2800      	cmp	r0, #0
 8011a06:	d062      	beq.n	8011ace <__gethex+0x13a>
 8011a08:	4633      	mov	r3, r6
 8011a0a:	7818      	ldrb	r0, [r3, #0]
 8011a0c:	2830      	cmp	r0, #48	; 0x30
 8011a0e:	461f      	mov	r7, r3
 8011a10:	f103 0301 	add.w	r3, r3, #1
 8011a14:	d0f9      	beq.n	8011a0a <__gethex+0x76>
 8011a16:	f7ff ffa8 	bl	801196a <__hexdig_fun>
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	fab0 f480 	clz	r4, r0
 8011a20:	0964      	lsrs	r4, r4, #5
 8011a22:	4635      	mov	r5, r6
 8011a24:	9300      	str	r3, [sp, #0]
 8011a26:	463a      	mov	r2, r7
 8011a28:	4616      	mov	r6, r2
 8011a2a:	3201      	adds	r2, #1
 8011a2c:	7830      	ldrb	r0, [r6, #0]
 8011a2e:	f7ff ff9c 	bl	801196a <__hexdig_fun>
 8011a32:	2800      	cmp	r0, #0
 8011a34:	d1f8      	bne.n	8011a28 <__gethex+0x94>
 8011a36:	9901      	ldr	r1, [sp, #4]
 8011a38:	4652      	mov	r2, sl
 8011a3a:	4630      	mov	r0, r6
 8011a3c:	f001 fb2f 	bl	801309e <strncmp>
 8011a40:	b980      	cbnz	r0, 8011a64 <__gethex+0xd0>
 8011a42:	b94d      	cbnz	r5, 8011a58 <__gethex+0xc4>
 8011a44:	eb06 050a 	add.w	r5, r6, sl
 8011a48:	462a      	mov	r2, r5
 8011a4a:	4616      	mov	r6, r2
 8011a4c:	3201      	adds	r2, #1
 8011a4e:	7830      	ldrb	r0, [r6, #0]
 8011a50:	f7ff ff8b 	bl	801196a <__hexdig_fun>
 8011a54:	2800      	cmp	r0, #0
 8011a56:	d1f8      	bne.n	8011a4a <__gethex+0xb6>
 8011a58:	1bad      	subs	r5, r5, r6
 8011a5a:	00ad      	lsls	r5, r5, #2
 8011a5c:	e004      	b.n	8011a68 <__gethex+0xd4>
 8011a5e:	2400      	movs	r4, #0
 8011a60:	4625      	mov	r5, r4
 8011a62:	e7e0      	b.n	8011a26 <__gethex+0x92>
 8011a64:	2d00      	cmp	r5, #0
 8011a66:	d1f7      	bne.n	8011a58 <__gethex+0xc4>
 8011a68:	7833      	ldrb	r3, [r6, #0]
 8011a6a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011a6e:	2b50      	cmp	r3, #80	; 0x50
 8011a70:	d13b      	bne.n	8011aea <__gethex+0x156>
 8011a72:	7873      	ldrb	r3, [r6, #1]
 8011a74:	2b2b      	cmp	r3, #43	; 0x2b
 8011a76:	d02c      	beq.n	8011ad2 <__gethex+0x13e>
 8011a78:	2b2d      	cmp	r3, #45	; 0x2d
 8011a7a:	d02e      	beq.n	8011ada <__gethex+0x146>
 8011a7c:	1c71      	adds	r1, r6, #1
 8011a7e:	f04f 0900 	mov.w	r9, #0
 8011a82:	7808      	ldrb	r0, [r1, #0]
 8011a84:	f7ff ff71 	bl	801196a <__hexdig_fun>
 8011a88:	1e43      	subs	r3, r0, #1
 8011a8a:	b2db      	uxtb	r3, r3
 8011a8c:	2b18      	cmp	r3, #24
 8011a8e:	d82c      	bhi.n	8011aea <__gethex+0x156>
 8011a90:	f1a0 0210 	sub.w	r2, r0, #16
 8011a94:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011a98:	f7ff ff67 	bl	801196a <__hexdig_fun>
 8011a9c:	1e43      	subs	r3, r0, #1
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	2b18      	cmp	r3, #24
 8011aa2:	d91d      	bls.n	8011ae0 <__gethex+0x14c>
 8011aa4:	f1b9 0f00 	cmp.w	r9, #0
 8011aa8:	d000      	beq.n	8011aac <__gethex+0x118>
 8011aaa:	4252      	negs	r2, r2
 8011aac:	4415      	add	r5, r2
 8011aae:	f8cb 1000 	str.w	r1, [fp]
 8011ab2:	b1e4      	cbz	r4, 8011aee <__gethex+0x15a>
 8011ab4:	9b00      	ldr	r3, [sp, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	bf14      	ite	ne
 8011aba:	2700      	movne	r7, #0
 8011abc:	2706      	moveq	r7, #6
 8011abe:	4638      	mov	r0, r7
 8011ac0:	b009      	add	sp, #36	; 0x24
 8011ac2:	ecbd 8b02 	vpop	{d8}
 8011ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aca:	463e      	mov	r6, r7
 8011acc:	4625      	mov	r5, r4
 8011ace:	2401      	movs	r4, #1
 8011ad0:	e7ca      	b.n	8011a68 <__gethex+0xd4>
 8011ad2:	f04f 0900 	mov.w	r9, #0
 8011ad6:	1cb1      	adds	r1, r6, #2
 8011ad8:	e7d3      	b.n	8011a82 <__gethex+0xee>
 8011ada:	f04f 0901 	mov.w	r9, #1
 8011ade:	e7fa      	b.n	8011ad6 <__gethex+0x142>
 8011ae0:	230a      	movs	r3, #10
 8011ae2:	fb03 0202 	mla	r2, r3, r2, r0
 8011ae6:	3a10      	subs	r2, #16
 8011ae8:	e7d4      	b.n	8011a94 <__gethex+0x100>
 8011aea:	4631      	mov	r1, r6
 8011aec:	e7df      	b.n	8011aae <__gethex+0x11a>
 8011aee:	1bf3      	subs	r3, r6, r7
 8011af0:	3b01      	subs	r3, #1
 8011af2:	4621      	mov	r1, r4
 8011af4:	2b07      	cmp	r3, #7
 8011af6:	dc0b      	bgt.n	8011b10 <__gethex+0x17c>
 8011af8:	ee18 0a10 	vmov	r0, s16
 8011afc:	f000 fadc 	bl	80120b8 <_Balloc>
 8011b00:	4604      	mov	r4, r0
 8011b02:	b940      	cbnz	r0, 8011b16 <__gethex+0x182>
 8011b04:	4b65      	ldr	r3, [pc, #404]	; (8011c9c <__gethex+0x308>)
 8011b06:	4602      	mov	r2, r0
 8011b08:	21de      	movs	r1, #222	; 0xde
 8011b0a:	4865      	ldr	r0, [pc, #404]	; (8011ca0 <__gethex+0x30c>)
 8011b0c:	f001 faf8 	bl	8013100 <__assert_func>
 8011b10:	3101      	adds	r1, #1
 8011b12:	105b      	asrs	r3, r3, #1
 8011b14:	e7ee      	b.n	8011af4 <__gethex+0x160>
 8011b16:	f100 0914 	add.w	r9, r0, #20
 8011b1a:	f04f 0b00 	mov.w	fp, #0
 8011b1e:	f1ca 0301 	rsb	r3, sl, #1
 8011b22:	f8cd 9008 	str.w	r9, [sp, #8]
 8011b26:	f8cd b000 	str.w	fp, [sp]
 8011b2a:	9306      	str	r3, [sp, #24]
 8011b2c:	42b7      	cmp	r7, r6
 8011b2e:	d340      	bcc.n	8011bb2 <__gethex+0x21e>
 8011b30:	9802      	ldr	r0, [sp, #8]
 8011b32:	9b00      	ldr	r3, [sp, #0]
 8011b34:	f840 3b04 	str.w	r3, [r0], #4
 8011b38:	eba0 0009 	sub.w	r0, r0, r9
 8011b3c:	1080      	asrs	r0, r0, #2
 8011b3e:	0146      	lsls	r6, r0, #5
 8011b40:	6120      	str	r0, [r4, #16]
 8011b42:	4618      	mov	r0, r3
 8011b44:	f000 fbae 	bl	80122a4 <__hi0bits>
 8011b48:	1a30      	subs	r0, r6, r0
 8011b4a:	f8d8 6000 	ldr.w	r6, [r8]
 8011b4e:	42b0      	cmp	r0, r6
 8011b50:	dd63      	ble.n	8011c1a <__gethex+0x286>
 8011b52:	1b87      	subs	r7, r0, r6
 8011b54:	4639      	mov	r1, r7
 8011b56:	4620      	mov	r0, r4
 8011b58:	f000 ff48 	bl	80129ec <__any_on>
 8011b5c:	4682      	mov	sl, r0
 8011b5e:	b1a8      	cbz	r0, 8011b8c <__gethex+0x1f8>
 8011b60:	1e7b      	subs	r3, r7, #1
 8011b62:	1159      	asrs	r1, r3, #5
 8011b64:	f003 021f 	and.w	r2, r3, #31
 8011b68:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011b6c:	f04f 0a01 	mov.w	sl, #1
 8011b70:	fa0a f202 	lsl.w	r2, sl, r2
 8011b74:	420a      	tst	r2, r1
 8011b76:	d009      	beq.n	8011b8c <__gethex+0x1f8>
 8011b78:	4553      	cmp	r3, sl
 8011b7a:	dd05      	ble.n	8011b88 <__gethex+0x1f4>
 8011b7c:	1eb9      	subs	r1, r7, #2
 8011b7e:	4620      	mov	r0, r4
 8011b80:	f000 ff34 	bl	80129ec <__any_on>
 8011b84:	2800      	cmp	r0, #0
 8011b86:	d145      	bne.n	8011c14 <__gethex+0x280>
 8011b88:	f04f 0a02 	mov.w	sl, #2
 8011b8c:	4639      	mov	r1, r7
 8011b8e:	4620      	mov	r0, r4
 8011b90:	f7ff fe99 	bl	80118c6 <rshift>
 8011b94:	443d      	add	r5, r7
 8011b96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011b9a:	42ab      	cmp	r3, r5
 8011b9c:	da4c      	bge.n	8011c38 <__gethex+0x2a4>
 8011b9e:	ee18 0a10 	vmov	r0, s16
 8011ba2:	4621      	mov	r1, r4
 8011ba4:	f000 fac8 	bl	8012138 <_Bfree>
 8011ba8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011baa:	2300      	movs	r3, #0
 8011bac:	6013      	str	r3, [r2, #0]
 8011bae:	27a3      	movs	r7, #163	; 0xa3
 8011bb0:	e785      	b.n	8011abe <__gethex+0x12a>
 8011bb2:	1e73      	subs	r3, r6, #1
 8011bb4:	9a05      	ldr	r2, [sp, #20]
 8011bb6:	9303      	str	r3, [sp, #12]
 8011bb8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	d019      	beq.n	8011bf4 <__gethex+0x260>
 8011bc0:	f1bb 0f20 	cmp.w	fp, #32
 8011bc4:	d107      	bne.n	8011bd6 <__gethex+0x242>
 8011bc6:	9b02      	ldr	r3, [sp, #8]
 8011bc8:	9a00      	ldr	r2, [sp, #0]
 8011bca:	f843 2b04 	str.w	r2, [r3], #4
 8011bce:	9302      	str	r3, [sp, #8]
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	9300      	str	r3, [sp, #0]
 8011bd4:	469b      	mov	fp, r3
 8011bd6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011bda:	f7ff fec6 	bl	801196a <__hexdig_fun>
 8011bde:	9b00      	ldr	r3, [sp, #0]
 8011be0:	f000 000f 	and.w	r0, r0, #15
 8011be4:	fa00 f00b 	lsl.w	r0, r0, fp
 8011be8:	4303      	orrs	r3, r0
 8011bea:	9300      	str	r3, [sp, #0]
 8011bec:	f10b 0b04 	add.w	fp, fp, #4
 8011bf0:	9b03      	ldr	r3, [sp, #12]
 8011bf2:	e00d      	b.n	8011c10 <__gethex+0x27c>
 8011bf4:	9b03      	ldr	r3, [sp, #12]
 8011bf6:	9a06      	ldr	r2, [sp, #24]
 8011bf8:	4413      	add	r3, r2
 8011bfa:	42bb      	cmp	r3, r7
 8011bfc:	d3e0      	bcc.n	8011bc0 <__gethex+0x22c>
 8011bfe:	4618      	mov	r0, r3
 8011c00:	9901      	ldr	r1, [sp, #4]
 8011c02:	9307      	str	r3, [sp, #28]
 8011c04:	4652      	mov	r2, sl
 8011c06:	f001 fa4a 	bl	801309e <strncmp>
 8011c0a:	9b07      	ldr	r3, [sp, #28]
 8011c0c:	2800      	cmp	r0, #0
 8011c0e:	d1d7      	bne.n	8011bc0 <__gethex+0x22c>
 8011c10:	461e      	mov	r6, r3
 8011c12:	e78b      	b.n	8011b2c <__gethex+0x198>
 8011c14:	f04f 0a03 	mov.w	sl, #3
 8011c18:	e7b8      	b.n	8011b8c <__gethex+0x1f8>
 8011c1a:	da0a      	bge.n	8011c32 <__gethex+0x29e>
 8011c1c:	1a37      	subs	r7, r6, r0
 8011c1e:	4621      	mov	r1, r4
 8011c20:	ee18 0a10 	vmov	r0, s16
 8011c24:	463a      	mov	r2, r7
 8011c26:	f000 fca3 	bl	8012570 <__lshift>
 8011c2a:	1bed      	subs	r5, r5, r7
 8011c2c:	4604      	mov	r4, r0
 8011c2e:	f100 0914 	add.w	r9, r0, #20
 8011c32:	f04f 0a00 	mov.w	sl, #0
 8011c36:	e7ae      	b.n	8011b96 <__gethex+0x202>
 8011c38:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011c3c:	42a8      	cmp	r0, r5
 8011c3e:	dd72      	ble.n	8011d26 <__gethex+0x392>
 8011c40:	1b45      	subs	r5, r0, r5
 8011c42:	42ae      	cmp	r6, r5
 8011c44:	dc36      	bgt.n	8011cb4 <__gethex+0x320>
 8011c46:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011c4a:	2b02      	cmp	r3, #2
 8011c4c:	d02a      	beq.n	8011ca4 <__gethex+0x310>
 8011c4e:	2b03      	cmp	r3, #3
 8011c50:	d02c      	beq.n	8011cac <__gethex+0x318>
 8011c52:	2b01      	cmp	r3, #1
 8011c54:	d115      	bne.n	8011c82 <__gethex+0x2ee>
 8011c56:	42ae      	cmp	r6, r5
 8011c58:	d113      	bne.n	8011c82 <__gethex+0x2ee>
 8011c5a:	2e01      	cmp	r6, #1
 8011c5c:	d10b      	bne.n	8011c76 <__gethex+0x2e2>
 8011c5e:	9a04      	ldr	r2, [sp, #16]
 8011c60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011c64:	6013      	str	r3, [r2, #0]
 8011c66:	2301      	movs	r3, #1
 8011c68:	6123      	str	r3, [r4, #16]
 8011c6a:	f8c9 3000 	str.w	r3, [r9]
 8011c6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011c70:	2762      	movs	r7, #98	; 0x62
 8011c72:	601c      	str	r4, [r3, #0]
 8011c74:	e723      	b.n	8011abe <__gethex+0x12a>
 8011c76:	1e71      	subs	r1, r6, #1
 8011c78:	4620      	mov	r0, r4
 8011c7a:	f000 feb7 	bl	80129ec <__any_on>
 8011c7e:	2800      	cmp	r0, #0
 8011c80:	d1ed      	bne.n	8011c5e <__gethex+0x2ca>
 8011c82:	ee18 0a10 	vmov	r0, s16
 8011c86:	4621      	mov	r1, r4
 8011c88:	f000 fa56 	bl	8012138 <_Bfree>
 8011c8c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011c8e:	2300      	movs	r3, #0
 8011c90:	6013      	str	r3, [r2, #0]
 8011c92:	2750      	movs	r7, #80	; 0x50
 8011c94:	e713      	b.n	8011abe <__gethex+0x12a>
 8011c96:	bf00      	nop
 8011c98:	0813d1f8 	.word	0x0813d1f8
 8011c9c:	0813d11c 	.word	0x0813d11c
 8011ca0:	0813d190 	.word	0x0813d190
 8011ca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d1eb      	bne.n	8011c82 <__gethex+0x2ee>
 8011caa:	e7d8      	b.n	8011c5e <__gethex+0x2ca>
 8011cac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d1d5      	bne.n	8011c5e <__gethex+0x2ca>
 8011cb2:	e7e6      	b.n	8011c82 <__gethex+0x2ee>
 8011cb4:	1e6f      	subs	r7, r5, #1
 8011cb6:	f1ba 0f00 	cmp.w	sl, #0
 8011cba:	d131      	bne.n	8011d20 <__gethex+0x38c>
 8011cbc:	b127      	cbz	r7, 8011cc8 <__gethex+0x334>
 8011cbe:	4639      	mov	r1, r7
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	f000 fe93 	bl	80129ec <__any_on>
 8011cc6:	4682      	mov	sl, r0
 8011cc8:	117b      	asrs	r3, r7, #5
 8011cca:	2101      	movs	r1, #1
 8011ccc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011cd0:	f007 071f 	and.w	r7, r7, #31
 8011cd4:	fa01 f707 	lsl.w	r7, r1, r7
 8011cd8:	421f      	tst	r7, r3
 8011cda:	4629      	mov	r1, r5
 8011cdc:	4620      	mov	r0, r4
 8011cde:	bf18      	it	ne
 8011ce0:	f04a 0a02 	orrne.w	sl, sl, #2
 8011ce4:	1b76      	subs	r6, r6, r5
 8011ce6:	f7ff fdee 	bl	80118c6 <rshift>
 8011cea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011cee:	2702      	movs	r7, #2
 8011cf0:	f1ba 0f00 	cmp.w	sl, #0
 8011cf4:	d048      	beq.n	8011d88 <__gethex+0x3f4>
 8011cf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011cfa:	2b02      	cmp	r3, #2
 8011cfc:	d015      	beq.n	8011d2a <__gethex+0x396>
 8011cfe:	2b03      	cmp	r3, #3
 8011d00:	d017      	beq.n	8011d32 <__gethex+0x39e>
 8011d02:	2b01      	cmp	r3, #1
 8011d04:	d109      	bne.n	8011d1a <__gethex+0x386>
 8011d06:	f01a 0f02 	tst.w	sl, #2
 8011d0a:	d006      	beq.n	8011d1a <__gethex+0x386>
 8011d0c:	f8d9 0000 	ldr.w	r0, [r9]
 8011d10:	ea4a 0a00 	orr.w	sl, sl, r0
 8011d14:	f01a 0f01 	tst.w	sl, #1
 8011d18:	d10e      	bne.n	8011d38 <__gethex+0x3a4>
 8011d1a:	f047 0710 	orr.w	r7, r7, #16
 8011d1e:	e033      	b.n	8011d88 <__gethex+0x3f4>
 8011d20:	f04f 0a01 	mov.w	sl, #1
 8011d24:	e7d0      	b.n	8011cc8 <__gethex+0x334>
 8011d26:	2701      	movs	r7, #1
 8011d28:	e7e2      	b.n	8011cf0 <__gethex+0x35c>
 8011d2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d2c:	f1c3 0301 	rsb	r3, r3, #1
 8011d30:	9315      	str	r3, [sp, #84]	; 0x54
 8011d32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d0f0      	beq.n	8011d1a <__gethex+0x386>
 8011d38:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8011d3c:	f104 0314 	add.w	r3, r4, #20
 8011d40:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011d44:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011d48:	f04f 0c00 	mov.w	ip, #0
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d52:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8011d56:	d01c      	beq.n	8011d92 <__gethex+0x3fe>
 8011d58:	3201      	adds	r2, #1
 8011d5a:	6002      	str	r2, [r0, #0]
 8011d5c:	2f02      	cmp	r7, #2
 8011d5e:	f104 0314 	add.w	r3, r4, #20
 8011d62:	d13f      	bne.n	8011de4 <__gethex+0x450>
 8011d64:	f8d8 2000 	ldr.w	r2, [r8]
 8011d68:	3a01      	subs	r2, #1
 8011d6a:	42b2      	cmp	r2, r6
 8011d6c:	d10a      	bne.n	8011d84 <__gethex+0x3f0>
 8011d6e:	1171      	asrs	r1, r6, #5
 8011d70:	2201      	movs	r2, #1
 8011d72:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d76:	f006 061f 	and.w	r6, r6, #31
 8011d7a:	fa02 f606 	lsl.w	r6, r2, r6
 8011d7e:	421e      	tst	r6, r3
 8011d80:	bf18      	it	ne
 8011d82:	4617      	movne	r7, r2
 8011d84:	f047 0720 	orr.w	r7, r7, #32
 8011d88:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011d8a:	601c      	str	r4, [r3, #0]
 8011d8c:	9b04      	ldr	r3, [sp, #16]
 8011d8e:	601d      	str	r5, [r3, #0]
 8011d90:	e695      	b.n	8011abe <__gethex+0x12a>
 8011d92:	4299      	cmp	r1, r3
 8011d94:	f843 cc04 	str.w	ip, [r3, #-4]
 8011d98:	d8d8      	bhi.n	8011d4c <__gethex+0x3b8>
 8011d9a:	68a3      	ldr	r3, [r4, #8]
 8011d9c:	459b      	cmp	fp, r3
 8011d9e:	db19      	blt.n	8011dd4 <__gethex+0x440>
 8011da0:	6861      	ldr	r1, [r4, #4]
 8011da2:	ee18 0a10 	vmov	r0, s16
 8011da6:	3101      	adds	r1, #1
 8011da8:	f000 f986 	bl	80120b8 <_Balloc>
 8011dac:	4681      	mov	r9, r0
 8011dae:	b918      	cbnz	r0, 8011db8 <__gethex+0x424>
 8011db0:	4b1a      	ldr	r3, [pc, #104]	; (8011e1c <__gethex+0x488>)
 8011db2:	4602      	mov	r2, r0
 8011db4:	2184      	movs	r1, #132	; 0x84
 8011db6:	e6a8      	b.n	8011b0a <__gethex+0x176>
 8011db8:	6922      	ldr	r2, [r4, #16]
 8011dba:	3202      	adds	r2, #2
 8011dbc:	f104 010c 	add.w	r1, r4, #12
 8011dc0:	0092      	lsls	r2, r2, #2
 8011dc2:	300c      	adds	r0, #12
 8011dc4:	f7fc fd1c 	bl	800e800 <memcpy>
 8011dc8:	4621      	mov	r1, r4
 8011dca:	ee18 0a10 	vmov	r0, s16
 8011dce:	f000 f9b3 	bl	8012138 <_Bfree>
 8011dd2:	464c      	mov	r4, r9
 8011dd4:	6923      	ldr	r3, [r4, #16]
 8011dd6:	1c5a      	adds	r2, r3, #1
 8011dd8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011ddc:	6122      	str	r2, [r4, #16]
 8011dde:	2201      	movs	r2, #1
 8011de0:	615a      	str	r2, [r3, #20]
 8011de2:	e7bb      	b.n	8011d5c <__gethex+0x3c8>
 8011de4:	6922      	ldr	r2, [r4, #16]
 8011de6:	455a      	cmp	r2, fp
 8011de8:	dd0b      	ble.n	8011e02 <__gethex+0x46e>
 8011dea:	2101      	movs	r1, #1
 8011dec:	4620      	mov	r0, r4
 8011dee:	f7ff fd6a 	bl	80118c6 <rshift>
 8011df2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011df6:	3501      	adds	r5, #1
 8011df8:	42ab      	cmp	r3, r5
 8011dfa:	f6ff aed0 	blt.w	8011b9e <__gethex+0x20a>
 8011dfe:	2701      	movs	r7, #1
 8011e00:	e7c0      	b.n	8011d84 <__gethex+0x3f0>
 8011e02:	f016 061f 	ands.w	r6, r6, #31
 8011e06:	d0fa      	beq.n	8011dfe <__gethex+0x46a>
 8011e08:	449a      	add	sl, r3
 8011e0a:	f1c6 0620 	rsb	r6, r6, #32
 8011e0e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8011e12:	f000 fa47 	bl	80122a4 <__hi0bits>
 8011e16:	42b0      	cmp	r0, r6
 8011e18:	dbe7      	blt.n	8011dea <__gethex+0x456>
 8011e1a:	e7f0      	b.n	8011dfe <__gethex+0x46a>
 8011e1c:	0813d11c 	.word	0x0813d11c

08011e20 <L_shift>:
 8011e20:	f1c2 0208 	rsb	r2, r2, #8
 8011e24:	0092      	lsls	r2, r2, #2
 8011e26:	b570      	push	{r4, r5, r6, lr}
 8011e28:	f1c2 0620 	rsb	r6, r2, #32
 8011e2c:	6843      	ldr	r3, [r0, #4]
 8011e2e:	6804      	ldr	r4, [r0, #0]
 8011e30:	fa03 f506 	lsl.w	r5, r3, r6
 8011e34:	432c      	orrs	r4, r5
 8011e36:	40d3      	lsrs	r3, r2
 8011e38:	6004      	str	r4, [r0, #0]
 8011e3a:	f840 3f04 	str.w	r3, [r0, #4]!
 8011e3e:	4288      	cmp	r0, r1
 8011e40:	d3f4      	bcc.n	8011e2c <L_shift+0xc>
 8011e42:	bd70      	pop	{r4, r5, r6, pc}

08011e44 <__match>:
 8011e44:	b530      	push	{r4, r5, lr}
 8011e46:	6803      	ldr	r3, [r0, #0]
 8011e48:	3301      	adds	r3, #1
 8011e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e4e:	b914      	cbnz	r4, 8011e56 <__match+0x12>
 8011e50:	6003      	str	r3, [r0, #0]
 8011e52:	2001      	movs	r0, #1
 8011e54:	bd30      	pop	{r4, r5, pc}
 8011e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e5a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011e5e:	2d19      	cmp	r5, #25
 8011e60:	bf98      	it	ls
 8011e62:	3220      	addls	r2, #32
 8011e64:	42a2      	cmp	r2, r4
 8011e66:	d0f0      	beq.n	8011e4a <__match+0x6>
 8011e68:	2000      	movs	r0, #0
 8011e6a:	e7f3      	b.n	8011e54 <__match+0x10>

08011e6c <__hexnan>:
 8011e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e70:	680b      	ldr	r3, [r1, #0]
 8011e72:	6801      	ldr	r1, [r0, #0]
 8011e74:	115e      	asrs	r6, r3, #5
 8011e76:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011e7a:	f013 031f 	ands.w	r3, r3, #31
 8011e7e:	b087      	sub	sp, #28
 8011e80:	bf18      	it	ne
 8011e82:	3604      	addne	r6, #4
 8011e84:	2500      	movs	r5, #0
 8011e86:	1f37      	subs	r7, r6, #4
 8011e88:	4682      	mov	sl, r0
 8011e8a:	4690      	mov	r8, r2
 8011e8c:	9301      	str	r3, [sp, #4]
 8011e8e:	f846 5c04 	str.w	r5, [r6, #-4]
 8011e92:	46b9      	mov	r9, r7
 8011e94:	463c      	mov	r4, r7
 8011e96:	9502      	str	r5, [sp, #8]
 8011e98:	46ab      	mov	fp, r5
 8011e9a:	784a      	ldrb	r2, [r1, #1]
 8011e9c:	1c4b      	adds	r3, r1, #1
 8011e9e:	9303      	str	r3, [sp, #12]
 8011ea0:	b342      	cbz	r2, 8011ef4 <__hexnan+0x88>
 8011ea2:	4610      	mov	r0, r2
 8011ea4:	9105      	str	r1, [sp, #20]
 8011ea6:	9204      	str	r2, [sp, #16]
 8011ea8:	f7ff fd5f 	bl	801196a <__hexdig_fun>
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d14f      	bne.n	8011f50 <__hexnan+0xe4>
 8011eb0:	9a04      	ldr	r2, [sp, #16]
 8011eb2:	9905      	ldr	r1, [sp, #20]
 8011eb4:	2a20      	cmp	r2, #32
 8011eb6:	d818      	bhi.n	8011eea <__hexnan+0x7e>
 8011eb8:	9b02      	ldr	r3, [sp, #8]
 8011eba:	459b      	cmp	fp, r3
 8011ebc:	dd13      	ble.n	8011ee6 <__hexnan+0x7a>
 8011ebe:	454c      	cmp	r4, r9
 8011ec0:	d206      	bcs.n	8011ed0 <__hexnan+0x64>
 8011ec2:	2d07      	cmp	r5, #7
 8011ec4:	dc04      	bgt.n	8011ed0 <__hexnan+0x64>
 8011ec6:	462a      	mov	r2, r5
 8011ec8:	4649      	mov	r1, r9
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f7ff ffa8 	bl	8011e20 <L_shift>
 8011ed0:	4544      	cmp	r4, r8
 8011ed2:	d950      	bls.n	8011f76 <__hexnan+0x10a>
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	f1a4 0904 	sub.w	r9, r4, #4
 8011eda:	f844 3c04 	str.w	r3, [r4, #-4]
 8011ede:	f8cd b008 	str.w	fp, [sp, #8]
 8011ee2:	464c      	mov	r4, r9
 8011ee4:	461d      	mov	r5, r3
 8011ee6:	9903      	ldr	r1, [sp, #12]
 8011ee8:	e7d7      	b.n	8011e9a <__hexnan+0x2e>
 8011eea:	2a29      	cmp	r2, #41	; 0x29
 8011eec:	d156      	bne.n	8011f9c <__hexnan+0x130>
 8011eee:	3102      	adds	r1, #2
 8011ef0:	f8ca 1000 	str.w	r1, [sl]
 8011ef4:	f1bb 0f00 	cmp.w	fp, #0
 8011ef8:	d050      	beq.n	8011f9c <__hexnan+0x130>
 8011efa:	454c      	cmp	r4, r9
 8011efc:	d206      	bcs.n	8011f0c <__hexnan+0xa0>
 8011efe:	2d07      	cmp	r5, #7
 8011f00:	dc04      	bgt.n	8011f0c <__hexnan+0xa0>
 8011f02:	462a      	mov	r2, r5
 8011f04:	4649      	mov	r1, r9
 8011f06:	4620      	mov	r0, r4
 8011f08:	f7ff ff8a 	bl	8011e20 <L_shift>
 8011f0c:	4544      	cmp	r4, r8
 8011f0e:	d934      	bls.n	8011f7a <__hexnan+0x10e>
 8011f10:	f1a8 0204 	sub.w	r2, r8, #4
 8011f14:	4623      	mov	r3, r4
 8011f16:	f853 1b04 	ldr.w	r1, [r3], #4
 8011f1a:	f842 1f04 	str.w	r1, [r2, #4]!
 8011f1e:	429f      	cmp	r7, r3
 8011f20:	d2f9      	bcs.n	8011f16 <__hexnan+0xaa>
 8011f22:	1b3b      	subs	r3, r7, r4
 8011f24:	f023 0303 	bic.w	r3, r3, #3
 8011f28:	3304      	adds	r3, #4
 8011f2a:	3401      	adds	r4, #1
 8011f2c:	3e03      	subs	r6, #3
 8011f2e:	42b4      	cmp	r4, r6
 8011f30:	bf88      	it	hi
 8011f32:	2304      	movhi	r3, #4
 8011f34:	4443      	add	r3, r8
 8011f36:	2200      	movs	r2, #0
 8011f38:	f843 2b04 	str.w	r2, [r3], #4
 8011f3c:	429f      	cmp	r7, r3
 8011f3e:	d2fb      	bcs.n	8011f38 <__hexnan+0xcc>
 8011f40:	683b      	ldr	r3, [r7, #0]
 8011f42:	b91b      	cbnz	r3, 8011f4c <__hexnan+0xe0>
 8011f44:	4547      	cmp	r7, r8
 8011f46:	d127      	bne.n	8011f98 <__hexnan+0x12c>
 8011f48:	2301      	movs	r3, #1
 8011f4a:	603b      	str	r3, [r7, #0]
 8011f4c:	2005      	movs	r0, #5
 8011f4e:	e026      	b.n	8011f9e <__hexnan+0x132>
 8011f50:	3501      	adds	r5, #1
 8011f52:	2d08      	cmp	r5, #8
 8011f54:	f10b 0b01 	add.w	fp, fp, #1
 8011f58:	dd06      	ble.n	8011f68 <__hexnan+0xfc>
 8011f5a:	4544      	cmp	r4, r8
 8011f5c:	d9c3      	bls.n	8011ee6 <__hexnan+0x7a>
 8011f5e:	2300      	movs	r3, #0
 8011f60:	f844 3c04 	str.w	r3, [r4, #-4]
 8011f64:	2501      	movs	r5, #1
 8011f66:	3c04      	subs	r4, #4
 8011f68:	6822      	ldr	r2, [r4, #0]
 8011f6a:	f000 000f 	and.w	r0, r0, #15
 8011f6e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8011f72:	6022      	str	r2, [r4, #0]
 8011f74:	e7b7      	b.n	8011ee6 <__hexnan+0x7a>
 8011f76:	2508      	movs	r5, #8
 8011f78:	e7b5      	b.n	8011ee6 <__hexnan+0x7a>
 8011f7a:	9b01      	ldr	r3, [sp, #4]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d0df      	beq.n	8011f40 <__hexnan+0xd4>
 8011f80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f84:	f1c3 0320 	rsb	r3, r3, #32
 8011f88:	fa22 f303 	lsr.w	r3, r2, r3
 8011f8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011f90:	401a      	ands	r2, r3
 8011f92:	f846 2c04 	str.w	r2, [r6, #-4]
 8011f96:	e7d3      	b.n	8011f40 <__hexnan+0xd4>
 8011f98:	3f04      	subs	r7, #4
 8011f9a:	e7d1      	b.n	8011f40 <__hexnan+0xd4>
 8011f9c:	2004      	movs	r0, #4
 8011f9e:	b007      	add	sp, #28
 8011fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011fa4 <_localeconv_r>:
 8011fa4:	4800      	ldr	r0, [pc, #0]	; (8011fa8 <_localeconv_r+0x4>)
 8011fa6:	4770      	bx	lr
 8011fa8:	20000be0 	.word	0x20000be0

08011fac <__retarget_lock_init_recursive>:
 8011fac:	4770      	bx	lr

08011fae <__retarget_lock_acquire_recursive>:
 8011fae:	4770      	bx	lr

08011fb0 <__retarget_lock_release_recursive>:
 8011fb0:	4770      	bx	lr

08011fb2 <__swhatbuf_r>:
 8011fb2:	b570      	push	{r4, r5, r6, lr}
 8011fb4:	460e      	mov	r6, r1
 8011fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fba:	2900      	cmp	r1, #0
 8011fbc:	b096      	sub	sp, #88	; 0x58
 8011fbe:	4614      	mov	r4, r2
 8011fc0:	461d      	mov	r5, r3
 8011fc2:	da07      	bge.n	8011fd4 <__swhatbuf_r+0x22>
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	602b      	str	r3, [r5, #0]
 8011fc8:	89b3      	ldrh	r3, [r6, #12]
 8011fca:	061a      	lsls	r2, r3, #24
 8011fcc:	d410      	bmi.n	8011ff0 <__swhatbuf_r+0x3e>
 8011fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011fd2:	e00e      	b.n	8011ff2 <__swhatbuf_r+0x40>
 8011fd4:	466a      	mov	r2, sp
 8011fd6:	f001 f8d3 	bl	8013180 <_fstat_r>
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	dbf2      	blt.n	8011fc4 <__swhatbuf_r+0x12>
 8011fde:	9a01      	ldr	r2, [sp, #4]
 8011fe0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011fe4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011fe8:	425a      	negs	r2, r3
 8011fea:	415a      	adcs	r2, r3
 8011fec:	602a      	str	r2, [r5, #0]
 8011fee:	e7ee      	b.n	8011fce <__swhatbuf_r+0x1c>
 8011ff0:	2340      	movs	r3, #64	; 0x40
 8011ff2:	2000      	movs	r0, #0
 8011ff4:	6023      	str	r3, [r4, #0]
 8011ff6:	b016      	add	sp, #88	; 0x58
 8011ff8:	bd70      	pop	{r4, r5, r6, pc}
	...

08011ffc <__smakebuf_r>:
 8011ffc:	898b      	ldrh	r3, [r1, #12]
 8011ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012000:	079d      	lsls	r5, r3, #30
 8012002:	4606      	mov	r6, r0
 8012004:	460c      	mov	r4, r1
 8012006:	d507      	bpl.n	8012018 <__smakebuf_r+0x1c>
 8012008:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801200c:	6023      	str	r3, [r4, #0]
 801200e:	6123      	str	r3, [r4, #16]
 8012010:	2301      	movs	r3, #1
 8012012:	6163      	str	r3, [r4, #20]
 8012014:	b002      	add	sp, #8
 8012016:	bd70      	pop	{r4, r5, r6, pc}
 8012018:	ab01      	add	r3, sp, #4
 801201a:	466a      	mov	r2, sp
 801201c:	f7ff ffc9 	bl	8011fb2 <__swhatbuf_r>
 8012020:	9900      	ldr	r1, [sp, #0]
 8012022:	4605      	mov	r5, r0
 8012024:	4630      	mov	r0, r6
 8012026:	f7fc fc51 	bl	800e8cc <_malloc_r>
 801202a:	b948      	cbnz	r0, 8012040 <__smakebuf_r+0x44>
 801202c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012030:	059a      	lsls	r2, r3, #22
 8012032:	d4ef      	bmi.n	8012014 <__smakebuf_r+0x18>
 8012034:	f023 0303 	bic.w	r3, r3, #3
 8012038:	f043 0302 	orr.w	r3, r3, #2
 801203c:	81a3      	strh	r3, [r4, #12]
 801203e:	e7e3      	b.n	8012008 <__smakebuf_r+0xc>
 8012040:	4b0d      	ldr	r3, [pc, #52]	; (8012078 <__smakebuf_r+0x7c>)
 8012042:	62b3      	str	r3, [r6, #40]	; 0x28
 8012044:	89a3      	ldrh	r3, [r4, #12]
 8012046:	6020      	str	r0, [r4, #0]
 8012048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801204c:	81a3      	strh	r3, [r4, #12]
 801204e:	9b00      	ldr	r3, [sp, #0]
 8012050:	6163      	str	r3, [r4, #20]
 8012052:	9b01      	ldr	r3, [sp, #4]
 8012054:	6120      	str	r0, [r4, #16]
 8012056:	b15b      	cbz	r3, 8012070 <__smakebuf_r+0x74>
 8012058:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801205c:	4630      	mov	r0, r6
 801205e:	f001 f8a1 	bl	80131a4 <_isatty_r>
 8012062:	b128      	cbz	r0, 8012070 <__smakebuf_r+0x74>
 8012064:	89a3      	ldrh	r3, [r4, #12]
 8012066:	f023 0303 	bic.w	r3, r3, #3
 801206a:	f043 0301 	orr.w	r3, r3, #1
 801206e:	81a3      	strh	r3, [r4, #12]
 8012070:	89a0      	ldrh	r0, [r4, #12]
 8012072:	4305      	orrs	r5, r0
 8012074:	81a5      	strh	r5, [r4, #12]
 8012076:	e7cd      	b.n	8012014 <__smakebuf_r+0x18>
 8012078:	08011725 	.word	0x08011725

0801207c <__ascii_mbtowc>:
 801207c:	b082      	sub	sp, #8
 801207e:	b901      	cbnz	r1, 8012082 <__ascii_mbtowc+0x6>
 8012080:	a901      	add	r1, sp, #4
 8012082:	b142      	cbz	r2, 8012096 <__ascii_mbtowc+0x1a>
 8012084:	b14b      	cbz	r3, 801209a <__ascii_mbtowc+0x1e>
 8012086:	7813      	ldrb	r3, [r2, #0]
 8012088:	600b      	str	r3, [r1, #0]
 801208a:	7812      	ldrb	r2, [r2, #0]
 801208c:	1e10      	subs	r0, r2, #0
 801208e:	bf18      	it	ne
 8012090:	2001      	movne	r0, #1
 8012092:	b002      	add	sp, #8
 8012094:	4770      	bx	lr
 8012096:	4610      	mov	r0, r2
 8012098:	e7fb      	b.n	8012092 <__ascii_mbtowc+0x16>
 801209a:	f06f 0001 	mvn.w	r0, #1
 801209e:	e7f8      	b.n	8012092 <__ascii_mbtowc+0x16>

080120a0 <__malloc_lock>:
 80120a0:	4801      	ldr	r0, [pc, #4]	; (80120a8 <__malloc_lock+0x8>)
 80120a2:	f7ff bf84 	b.w	8011fae <__retarget_lock_acquire_recursive>
 80120a6:	bf00      	nop
 80120a8:	20009f60 	.word	0x20009f60

080120ac <__malloc_unlock>:
 80120ac:	4801      	ldr	r0, [pc, #4]	; (80120b4 <__malloc_unlock+0x8>)
 80120ae:	f7ff bf7f 	b.w	8011fb0 <__retarget_lock_release_recursive>
 80120b2:	bf00      	nop
 80120b4:	20009f60 	.word	0x20009f60

080120b8 <_Balloc>:
 80120b8:	b570      	push	{r4, r5, r6, lr}
 80120ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80120bc:	4604      	mov	r4, r0
 80120be:	460d      	mov	r5, r1
 80120c0:	b976      	cbnz	r6, 80120e0 <_Balloc+0x28>
 80120c2:	2010      	movs	r0, #16
 80120c4:	f7fc fb94 	bl	800e7f0 <malloc>
 80120c8:	4602      	mov	r2, r0
 80120ca:	6260      	str	r0, [r4, #36]	; 0x24
 80120cc:	b920      	cbnz	r0, 80120d8 <_Balloc+0x20>
 80120ce:	4b18      	ldr	r3, [pc, #96]	; (8012130 <_Balloc+0x78>)
 80120d0:	4818      	ldr	r0, [pc, #96]	; (8012134 <_Balloc+0x7c>)
 80120d2:	2166      	movs	r1, #102	; 0x66
 80120d4:	f001 f814 	bl	8013100 <__assert_func>
 80120d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120dc:	6006      	str	r6, [r0, #0]
 80120de:	60c6      	str	r6, [r0, #12]
 80120e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80120e2:	68f3      	ldr	r3, [r6, #12]
 80120e4:	b183      	cbz	r3, 8012108 <_Balloc+0x50>
 80120e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80120e8:	68db      	ldr	r3, [r3, #12]
 80120ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80120ee:	b9b8      	cbnz	r0, 8012120 <_Balloc+0x68>
 80120f0:	2101      	movs	r1, #1
 80120f2:	fa01 f605 	lsl.w	r6, r1, r5
 80120f6:	1d72      	adds	r2, r6, #5
 80120f8:	0092      	lsls	r2, r2, #2
 80120fa:	4620      	mov	r0, r4
 80120fc:	f000 fc97 	bl	8012a2e <_calloc_r>
 8012100:	b160      	cbz	r0, 801211c <_Balloc+0x64>
 8012102:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012106:	e00e      	b.n	8012126 <_Balloc+0x6e>
 8012108:	2221      	movs	r2, #33	; 0x21
 801210a:	2104      	movs	r1, #4
 801210c:	4620      	mov	r0, r4
 801210e:	f000 fc8e 	bl	8012a2e <_calloc_r>
 8012112:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012114:	60f0      	str	r0, [r6, #12]
 8012116:	68db      	ldr	r3, [r3, #12]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d1e4      	bne.n	80120e6 <_Balloc+0x2e>
 801211c:	2000      	movs	r0, #0
 801211e:	bd70      	pop	{r4, r5, r6, pc}
 8012120:	6802      	ldr	r2, [r0, #0]
 8012122:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012126:	2300      	movs	r3, #0
 8012128:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801212c:	e7f7      	b.n	801211e <_Balloc+0x66>
 801212e:	bf00      	nop
 8012130:	0813d0a6 	.word	0x0813d0a6
 8012134:	0813d20c 	.word	0x0813d20c

08012138 <_Bfree>:
 8012138:	b570      	push	{r4, r5, r6, lr}
 801213a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801213c:	4605      	mov	r5, r0
 801213e:	460c      	mov	r4, r1
 8012140:	b976      	cbnz	r6, 8012160 <_Bfree+0x28>
 8012142:	2010      	movs	r0, #16
 8012144:	f7fc fb54 	bl	800e7f0 <malloc>
 8012148:	4602      	mov	r2, r0
 801214a:	6268      	str	r0, [r5, #36]	; 0x24
 801214c:	b920      	cbnz	r0, 8012158 <_Bfree+0x20>
 801214e:	4b09      	ldr	r3, [pc, #36]	; (8012174 <_Bfree+0x3c>)
 8012150:	4809      	ldr	r0, [pc, #36]	; (8012178 <_Bfree+0x40>)
 8012152:	218a      	movs	r1, #138	; 0x8a
 8012154:	f000 ffd4 	bl	8013100 <__assert_func>
 8012158:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801215c:	6006      	str	r6, [r0, #0]
 801215e:	60c6      	str	r6, [r0, #12]
 8012160:	b13c      	cbz	r4, 8012172 <_Bfree+0x3a>
 8012162:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012164:	6862      	ldr	r2, [r4, #4]
 8012166:	68db      	ldr	r3, [r3, #12]
 8012168:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801216c:	6021      	str	r1, [r4, #0]
 801216e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012172:	bd70      	pop	{r4, r5, r6, pc}
 8012174:	0813d0a6 	.word	0x0813d0a6
 8012178:	0813d20c 	.word	0x0813d20c

0801217c <__multadd>:
 801217c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012180:	690e      	ldr	r6, [r1, #16]
 8012182:	4607      	mov	r7, r0
 8012184:	4698      	mov	r8, r3
 8012186:	460c      	mov	r4, r1
 8012188:	f101 0014 	add.w	r0, r1, #20
 801218c:	2300      	movs	r3, #0
 801218e:	6805      	ldr	r5, [r0, #0]
 8012190:	b2a9      	uxth	r1, r5
 8012192:	fb02 8101 	mla	r1, r2, r1, r8
 8012196:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801219a:	0c2d      	lsrs	r5, r5, #16
 801219c:	fb02 c505 	mla	r5, r2, r5, ip
 80121a0:	b289      	uxth	r1, r1
 80121a2:	3301      	adds	r3, #1
 80121a4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80121a8:	429e      	cmp	r6, r3
 80121aa:	f840 1b04 	str.w	r1, [r0], #4
 80121ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80121b2:	dcec      	bgt.n	801218e <__multadd+0x12>
 80121b4:	f1b8 0f00 	cmp.w	r8, #0
 80121b8:	d022      	beq.n	8012200 <__multadd+0x84>
 80121ba:	68a3      	ldr	r3, [r4, #8]
 80121bc:	42b3      	cmp	r3, r6
 80121be:	dc19      	bgt.n	80121f4 <__multadd+0x78>
 80121c0:	6861      	ldr	r1, [r4, #4]
 80121c2:	4638      	mov	r0, r7
 80121c4:	3101      	adds	r1, #1
 80121c6:	f7ff ff77 	bl	80120b8 <_Balloc>
 80121ca:	4605      	mov	r5, r0
 80121cc:	b928      	cbnz	r0, 80121da <__multadd+0x5e>
 80121ce:	4602      	mov	r2, r0
 80121d0:	4b0d      	ldr	r3, [pc, #52]	; (8012208 <__multadd+0x8c>)
 80121d2:	480e      	ldr	r0, [pc, #56]	; (801220c <__multadd+0x90>)
 80121d4:	21b5      	movs	r1, #181	; 0xb5
 80121d6:	f000 ff93 	bl	8013100 <__assert_func>
 80121da:	6922      	ldr	r2, [r4, #16]
 80121dc:	3202      	adds	r2, #2
 80121de:	f104 010c 	add.w	r1, r4, #12
 80121e2:	0092      	lsls	r2, r2, #2
 80121e4:	300c      	adds	r0, #12
 80121e6:	f7fc fb0b 	bl	800e800 <memcpy>
 80121ea:	4621      	mov	r1, r4
 80121ec:	4638      	mov	r0, r7
 80121ee:	f7ff ffa3 	bl	8012138 <_Bfree>
 80121f2:	462c      	mov	r4, r5
 80121f4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80121f8:	3601      	adds	r6, #1
 80121fa:	f8c3 8014 	str.w	r8, [r3, #20]
 80121fe:	6126      	str	r6, [r4, #16]
 8012200:	4620      	mov	r0, r4
 8012202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012206:	bf00      	nop
 8012208:	0813d11c 	.word	0x0813d11c
 801220c:	0813d20c 	.word	0x0813d20c

08012210 <__s2b>:
 8012210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012214:	460c      	mov	r4, r1
 8012216:	4615      	mov	r5, r2
 8012218:	461f      	mov	r7, r3
 801221a:	2209      	movs	r2, #9
 801221c:	3308      	adds	r3, #8
 801221e:	4606      	mov	r6, r0
 8012220:	fb93 f3f2 	sdiv	r3, r3, r2
 8012224:	2100      	movs	r1, #0
 8012226:	2201      	movs	r2, #1
 8012228:	429a      	cmp	r2, r3
 801222a:	db09      	blt.n	8012240 <__s2b+0x30>
 801222c:	4630      	mov	r0, r6
 801222e:	f7ff ff43 	bl	80120b8 <_Balloc>
 8012232:	b940      	cbnz	r0, 8012246 <__s2b+0x36>
 8012234:	4602      	mov	r2, r0
 8012236:	4b19      	ldr	r3, [pc, #100]	; (801229c <__s2b+0x8c>)
 8012238:	4819      	ldr	r0, [pc, #100]	; (80122a0 <__s2b+0x90>)
 801223a:	21ce      	movs	r1, #206	; 0xce
 801223c:	f000 ff60 	bl	8013100 <__assert_func>
 8012240:	0052      	lsls	r2, r2, #1
 8012242:	3101      	adds	r1, #1
 8012244:	e7f0      	b.n	8012228 <__s2b+0x18>
 8012246:	9b08      	ldr	r3, [sp, #32]
 8012248:	6143      	str	r3, [r0, #20]
 801224a:	2d09      	cmp	r5, #9
 801224c:	f04f 0301 	mov.w	r3, #1
 8012250:	6103      	str	r3, [r0, #16]
 8012252:	dd16      	ble.n	8012282 <__s2b+0x72>
 8012254:	f104 0909 	add.w	r9, r4, #9
 8012258:	46c8      	mov	r8, r9
 801225a:	442c      	add	r4, r5
 801225c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012260:	4601      	mov	r1, r0
 8012262:	3b30      	subs	r3, #48	; 0x30
 8012264:	220a      	movs	r2, #10
 8012266:	4630      	mov	r0, r6
 8012268:	f7ff ff88 	bl	801217c <__multadd>
 801226c:	45a0      	cmp	r8, r4
 801226e:	d1f5      	bne.n	801225c <__s2b+0x4c>
 8012270:	f1a5 0408 	sub.w	r4, r5, #8
 8012274:	444c      	add	r4, r9
 8012276:	1b2d      	subs	r5, r5, r4
 8012278:	1963      	adds	r3, r4, r5
 801227a:	42bb      	cmp	r3, r7
 801227c:	db04      	blt.n	8012288 <__s2b+0x78>
 801227e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012282:	340a      	adds	r4, #10
 8012284:	2509      	movs	r5, #9
 8012286:	e7f6      	b.n	8012276 <__s2b+0x66>
 8012288:	f814 3b01 	ldrb.w	r3, [r4], #1
 801228c:	4601      	mov	r1, r0
 801228e:	3b30      	subs	r3, #48	; 0x30
 8012290:	220a      	movs	r2, #10
 8012292:	4630      	mov	r0, r6
 8012294:	f7ff ff72 	bl	801217c <__multadd>
 8012298:	e7ee      	b.n	8012278 <__s2b+0x68>
 801229a:	bf00      	nop
 801229c:	0813d11c 	.word	0x0813d11c
 80122a0:	0813d20c 	.word	0x0813d20c

080122a4 <__hi0bits>:
 80122a4:	0c03      	lsrs	r3, r0, #16
 80122a6:	041b      	lsls	r3, r3, #16
 80122a8:	b9d3      	cbnz	r3, 80122e0 <__hi0bits+0x3c>
 80122aa:	0400      	lsls	r0, r0, #16
 80122ac:	2310      	movs	r3, #16
 80122ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80122b2:	bf04      	itt	eq
 80122b4:	0200      	lsleq	r0, r0, #8
 80122b6:	3308      	addeq	r3, #8
 80122b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80122bc:	bf04      	itt	eq
 80122be:	0100      	lsleq	r0, r0, #4
 80122c0:	3304      	addeq	r3, #4
 80122c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80122c6:	bf04      	itt	eq
 80122c8:	0080      	lsleq	r0, r0, #2
 80122ca:	3302      	addeq	r3, #2
 80122cc:	2800      	cmp	r0, #0
 80122ce:	db05      	blt.n	80122dc <__hi0bits+0x38>
 80122d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80122d4:	f103 0301 	add.w	r3, r3, #1
 80122d8:	bf08      	it	eq
 80122da:	2320      	moveq	r3, #32
 80122dc:	4618      	mov	r0, r3
 80122de:	4770      	bx	lr
 80122e0:	2300      	movs	r3, #0
 80122e2:	e7e4      	b.n	80122ae <__hi0bits+0xa>

080122e4 <__lo0bits>:
 80122e4:	6803      	ldr	r3, [r0, #0]
 80122e6:	f013 0207 	ands.w	r2, r3, #7
 80122ea:	4601      	mov	r1, r0
 80122ec:	d00b      	beq.n	8012306 <__lo0bits+0x22>
 80122ee:	07da      	lsls	r2, r3, #31
 80122f0:	d424      	bmi.n	801233c <__lo0bits+0x58>
 80122f2:	0798      	lsls	r0, r3, #30
 80122f4:	bf49      	itett	mi
 80122f6:	085b      	lsrmi	r3, r3, #1
 80122f8:	089b      	lsrpl	r3, r3, #2
 80122fa:	2001      	movmi	r0, #1
 80122fc:	600b      	strmi	r3, [r1, #0]
 80122fe:	bf5c      	itt	pl
 8012300:	600b      	strpl	r3, [r1, #0]
 8012302:	2002      	movpl	r0, #2
 8012304:	4770      	bx	lr
 8012306:	b298      	uxth	r0, r3
 8012308:	b9b0      	cbnz	r0, 8012338 <__lo0bits+0x54>
 801230a:	0c1b      	lsrs	r3, r3, #16
 801230c:	2010      	movs	r0, #16
 801230e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012312:	bf04      	itt	eq
 8012314:	0a1b      	lsreq	r3, r3, #8
 8012316:	3008      	addeq	r0, #8
 8012318:	071a      	lsls	r2, r3, #28
 801231a:	bf04      	itt	eq
 801231c:	091b      	lsreq	r3, r3, #4
 801231e:	3004      	addeq	r0, #4
 8012320:	079a      	lsls	r2, r3, #30
 8012322:	bf04      	itt	eq
 8012324:	089b      	lsreq	r3, r3, #2
 8012326:	3002      	addeq	r0, #2
 8012328:	07da      	lsls	r2, r3, #31
 801232a:	d403      	bmi.n	8012334 <__lo0bits+0x50>
 801232c:	085b      	lsrs	r3, r3, #1
 801232e:	f100 0001 	add.w	r0, r0, #1
 8012332:	d005      	beq.n	8012340 <__lo0bits+0x5c>
 8012334:	600b      	str	r3, [r1, #0]
 8012336:	4770      	bx	lr
 8012338:	4610      	mov	r0, r2
 801233a:	e7e8      	b.n	801230e <__lo0bits+0x2a>
 801233c:	2000      	movs	r0, #0
 801233e:	4770      	bx	lr
 8012340:	2020      	movs	r0, #32
 8012342:	4770      	bx	lr

08012344 <__i2b>:
 8012344:	b510      	push	{r4, lr}
 8012346:	460c      	mov	r4, r1
 8012348:	2101      	movs	r1, #1
 801234a:	f7ff feb5 	bl	80120b8 <_Balloc>
 801234e:	4602      	mov	r2, r0
 8012350:	b928      	cbnz	r0, 801235e <__i2b+0x1a>
 8012352:	4b05      	ldr	r3, [pc, #20]	; (8012368 <__i2b+0x24>)
 8012354:	4805      	ldr	r0, [pc, #20]	; (801236c <__i2b+0x28>)
 8012356:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801235a:	f000 fed1 	bl	8013100 <__assert_func>
 801235e:	2301      	movs	r3, #1
 8012360:	6144      	str	r4, [r0, #20]
 8012362:	6103      	str	r3, [r0, #16]
 8012364:	bd10      	pop	{r4, pc}
 8012366:	bf00      	nop
 8012368:	0813d11c 	.word	0x0813d11c
 801236c:	0813d20c 	.word	0x0813d20c

08012370 <__multiply>:
 8012370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012374:	4614      	mov	r4, r2
 8012376:	690a      	ldr	r2, [r1, #16]
 8012378:	6923      	ldr	r3, [r4, #16]
 801237a:	429a      	cmp	r2, r3
 801237c:	bfb8      	it	lt
 801237e:	460b      	movlt	r3, r1
 8012380:	460d      	mov	r5, r1
 8012382:	bfbc      	itt	lt
 8012384:	4625      	movlt	r5, r4
 8012386:	461c      	movlt	r4, r3
 8012388:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801238c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012390:	68ab      	ldr	r3, [r5, #8]
 8012392:	6869      	ldr	r1, [r5, #4]
 8012394:	eb0a 0709 	add.w	r7, sl, r9
 8012398:	42bb      	cmp	r3, r7
 801239a:	b085      	sub	sp, #20
 801239c:	bfb8      	it	lt
 801239e:	3101      	addlt	r1, #1
 80123a0:	f7ff fe8a 	bl	80120b8 <_Balloc>
 80123a4:	b930      	cbnz	r0, 80123b4 <__multiply+0x44>
 80123a6:	4602      	mov	r2, r0
 80123a8:	4b42      	ldr	r3, [pc, #264]	; (80124b4 <__multiply+0x144>)
 80123aa:	4843      	ldr	r0, [pc, #268]	; (80124b8 <__multiply+0x148>)
 80123ac:	f240 115d 	movw	r1, #349	; 0x15d
 80123b0:	f000 fea6 	bl	8013100 <__assert_func>
 80123b4:	f100 0614 	add.w	r6, r0, #20
 80123b8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80123bc:	4633      	mov	r3, r6
 80123be:	2200      	movs	r2, #0
 80123c0:	4543      	cmp	r3, r8
 80123c2:	d31e      	bcc.n	8012402 <__multiply+0x92>
 80123c4:	f105 0c14 	add.w	ip, r5, #20
 80123c8:	f104 0314 	add.w	r3, r4, #20
 80123cc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80123d0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80123d4:	9202      	str	r2, [sp, #8]
 80123d6:	ebac 0205 	sub.w	r2, ip, r5
 80123da:	3a15      	subs	r2, #21
 80123dc:	f022 0203 	bic.w	r2, r2, #3
 80123e0:	3204      	adds	r2, #4
 80123e2:	f105 0115 	add.w	r1, r5, #21
 80123e6:	458c      	cmp	ip, r1
 80123e8:	bf38      	it	cc
 80123ea:	2204      	movcc	r2, #4
 80123ec:	9201      	str	r2, [sp, #4]
 80123ee:	9a02      	ldr	r2, [sp, #8]
 80123f0:	9303      	str	r3, [sp, #12]
 80123f2:	429a      	cmp	r2, r3
 80123f4:	d808      	bhi.n	8012408 <__multiply+0x98>
 80123f6:	2f00      	cmp	r7, #0
 80123f8:	dc55      	bgt.n	80124a6 <__multiply+0x136>
 80123fa:	6107      	str	r7, [r0, #16]
 80123fc:	b005      	add	sp, #20
 80123fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012402:	f843 2b04 	str.w	r2, [r3], #4
 8012406:	e7db      	b.n	80123c0 <__multiply+0x50>
 8012408:	f8b3 a000 	ldrh.w	sl, [r3]
 801240c:	f1ba 0f00 	cmp.w	sl, #0
 8012410:	d020      	beq.n	8012454 <__multiply+0xe4>
 8012412:	f105 0e14 	add.w	lr, r5, #20
 8012416:	46b1      	mov	r9, r6
 8012418:	2200      	movs	r2, #0
 801241a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801241e:	f8d9 b000 	ldr.w	fp, [r9]
 8012422:	b2a1      	uxth	r1, r4
 8012424:	fa1f fb8b 	uxth.w	fp, fp
 8012428:	fb0a b101 	mla	r1, sl, r1, fp
 801242c:	4411      	add	r1, r2
 801242e:	f8d9 2000 	ldr.w	r2, [r9]
 8012432:	0c24      	lsrs	r4, r4, #16
 8012434:	0c12      	lsrs	r2, r2, #16
 8012436:	fb0a 2404 	mla	r4, sl, r4, r2
 801243a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801243e:	b289      	uxth	r1, r1
 8012440:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8012444:	45f4      	cmp	ip, lr
 8012446:	f849 1b04 	str.w	r1, [r9], #4
 801244a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801244e:	d8e4      	bhi.n	801241a <__multiply+0xaa>
 8012450:	9901      	ldr	r1, [sp, #4]
 8012452:	5072      	str	r2, [r6, r1]
 8012454:	9a03      	ldr	r2, [sp, #12]
 8012456:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801245a:	3304      	adds	r3, #4
 801245c:	f1b9 0f00 	cmp.w	r9, #0
 8012460:	d01f      	beq.n	80124a2 <__multiply+0x132>
 8012462:	6834      	ldr	r4, [r6, #0]
 8012464:	f105 0114 	add.w	r1, r5, #20
 8012468:	46b6      	mov	lr, r6
 801246a:	f04f 0a00 	mov.w	sl, #0
 801246e:	880a      	ldrh	r2, [r1, #0]
 8012470:	f8be b002 	ldrh.w	fp, [lr, #2]
 8012474:	fb09 b202 	mla	r2, r9, r2, fp
 8012478:	4492      	add	sl, r2
 801247a:	b2a4      	uxth	r4, r4
 801247c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8012480:	f84e 4b04 	str.w	r4, [lr], #4
 8012484:	f851 4b04 	ldr.w	r4, [r1], #4
 8012488:	f8be 2000 	ldrh.w	r2, [lr]
 801248c:	0c24      	lsrs	r4, r4, #16
 801248e:	fb09 2404 	mla	r4, r9, r4, r2
 8012492:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8012496:	458c      	cmp	ip, r1
 8012498:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801249c:	d8e7      	bhi.n	801246e <__multiply+0xfe>
 801249e:	9a01      	ldr	r2, [sp, #4]
 80124a0:	50b4      	str	r4, [r6, r2]
 80124a2:	3604      	adds	r6, #4
 80124a4:	e7a3      	b.n	80123ee <__multiply+0x7e>
 80124a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d1a5      	bne.n	80123fa <__multiply+0x8a>
 80124ae:	3f01      	subs	r7, #1
 80124b0:	e7a1      	b.n	80123f6 <__multiply+0x86>
 80124b2:	bf00      	nop
 80124b4:	0813d11c 	.word	0x0813d11c
 80124b8:	0813d20c 	.word	0x0813d20c

080124bc <__pow5mult>:
 80124bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124c0:	4615      	mov	r5, r2
 80124c2:	f012 0203 	ands.w	r2, r2, #3
 80124c6:	4606      	mov	r6, r0
 80124c8:	460f      	mov	r7, r1
 80124ca:	d007      	beq.n	80124dc <__pow5mult+0x20>
 80124cc:	4c25      	ldr	r4, [pc, #148]	; (8012564 <__pow5mult+0xa8>)
 80124ce:	3a01      	subs	r2, #1
 80124d0:	2300      	movs	r3, #0
 80124d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124d6:	f7ff fe51 	bl	801217c <__multadd>
 80124da:	4607      	mov	r7, r0
 80124dc:	10ad      	asrs	r5, r5, #2
 80124de:	d03d      	beq.n	801255c <__pow5mult+0xa0>
 80124e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80124e2:	b97c      	cbnz	r4, 8012504 <__pow5mult+0x48>
 80124e4:	2010      	movs	r0, #16
 80124e6:	f7fc f983 	bl	800e7f0 <malloc>
 80124ea:	4602      	mov	r2, r0
 80124ec:	6270      	str	r0, [r6, #36]	; 0x24
 80124ee:	b928      	cbnz	r0, 80124fc <__pow5mult+0x40>
 80124f0:	4b1d      	ldr	r3, [pc, #116]	; (8012568 <__pow5mult+0xac>)
 80124f2:	481e      	ldr	r0, [pc, #120]	; (801256c <__pow5mult+0xb0>)
 80124f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80124f8:	f000 fe02 	bl	8013100 <__assert_func>
 80124fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012500:	6004      	str	r4, [r0, #0]
 8012502:	60c4      	str	r4, [r0, #12]
 8012504:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012508:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801250c:	b94c      	cbnz	r4, 8012522 <__pow5mult+0x66>
 801250e:	f240 2171 	movw	r1, #625	; 0x271
 8012512:	4630      	mov	r0, r6
 8012514:	f7ff ff16 	bl	8012344 <__i2b>
 8012518:	2300      	movs	r3, #0
 801251a:	f8c8 0008 	str.w	r0, [r8, #8]
 801251e:	4604      	mov	r4, r0
 8012520:	6003      	str	r3, [r0, #0]
 8012522:	f04f 0900 	mov.w	r9, #0
 8012526:	07eb      	lsls	r3, r5, #31
 8012528:	d50a      	bpl.n	8012540 <__pow5mult+0x84>
 801252a:	4639      	mov	r1, r7
 801252c:	4622      	mov	r2, r4
 801252e:	4630      	mov	r0, r6
 8012530:	f7ff ff1e 	bl	8012370 <__multiply>
 8012534:	4639      	mov	r1, r7
 8012536:	4680      	mov	r8, r0
 8012538:	4630      	mov	r0, r6
 801253a:	f7ff fdfd 	bl	8012138 <_Bfree>
 801253e:	4647      	mov	r7, r8
 8012540:	106d      	asrs	r5, r5, #1
 8012542:	d00b      	beq.n	801255c <__pow5mult+0xa0>
 8012544:	6820      	ldr	r0, [r4, #0]
 8012546:	b938      	cbnz	r0, 8012558 <__pow5mult+0x9c>
 8012548:	4622      	mov	r2, r4
 801254a:	4621      	mov	r1, r4
 801254c:	4630      	mov	r0, r6
 801254e:	f7ff ff0f 	bl	8012370 <__multiply>
 8012552:	6020      	str	r0, [r4, #0]
 8012554:	f8c0 9000 	str.w	r9, [r0]
 8012558:	4604      	mov	r4, r0
 801255a:	e7e4      	b.n	8012526 <__pow5mult+0x6a>
 801255c:	4638      	mov	r0, r7
 801255e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012562:	bf00      	nop
 8012564:	0813d360 	.word	0x0813d360
 8012568:	0813d0a6 	.word	0x0813d0a6
 801256c:	0813d20c 	.word	0x0813d20c

08012570 <__lshift>:
 8012570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012574:	460c      	mov	r4, r1
 8012576:	6849      	ldr	r1, [r1, #4]
 8012578:	6923      	ldr	r3, [r4, #16]
 801257a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801257e:	68a3      	ldr	r3, [r4, #8]
 8012580:	4607      	mov	r7, r0
 8012582:	4691      	mov	r9, r2
 8012584:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012588:	f108 0601 	add.w	r6, r8, #1
 801258c:	42b3      	cmp	r3, r6
 801258e:	db0b      	blt.n	80125a8 <__lshift+0x38>
 8012590:	4638      	mov	r0, r7
 8012592:	f7ff fd91 	bl	80120b8 <_Balloc>
 8012596:	4605      	mov	r5, r0
 8012598:	b948      	cbnz	r0, 80125ae <__lshift+0x3e>
 801259a:	4602      	mov	r2, r0
 801259c:	4b28      	ldr	r3, [pc, #160]	; (8012640 <__lshift+0xd0>)
 801259e:	4829      	ldr	r0, [pc, #164]	; (8012644 <__lshift+0xd4>)
 80125a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80125a4:	f000 fdac 	bl	8013100 <__assert_func>
 80125a8:	3101      	adds	r1, #1
 80125aa:	005b      	lsls	r3, r3, #1
 80125ac:	e7ee      	b.n	801258c <__lshift+0x1c>
 80125ae:	2300      	movs	r3, #0
 80125b0:	f100 0114 	add.w	r1, r0, #20
 80125b4:	f100 0210 	add.w	r2, r0, #16
 80125b8:	4618      	mov	r0, r3
 80125ba:	4553      	cmp	r3, sl
 80125bc:	db33      	blt.n	8012626 <__lshift+0xb6>
 80125be:	6920      	ldr	r0, [r4, #16]
 80125c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125c4:	f104 0314 	add.w	r3, r4, #20
 80125c8:	f019 091f 	ands.w	r9, r9, #31
 80125cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125d4:	d02b      	beq.n	801262e <__lshift+0xbe>
 80125d6:	f1c9 0e20 	rsb	lr, r9, #32
 80125da:	468a      	mov	sl, r1
 80125dc:	2200      	movs	r2, #0
 80125de:	6818      	ldr	r0, [r3, #0]
 80125e0:	fa00 f009 	lsl.w	r0, r0, r9
 80125e4:	4302      	orrs	r2, r0
 80125e6:	f84a 2b04 	str.w	r2, [sl], #4
 80125ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80125ee:	459c      	cmp	ip, r3
 80125f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80125f4:	d8f3      	bhi.n	80125de <__lshift+0x6e>
 80125f6:	ebac 0304 	sub.w	r3, ip, r4
 80125fa:	3b15      	subs	r3, #21
 80125fc:	f023 0303 	bic.w	r3, r3, #3
 8012600:	3304      	adds	r3, #4
 8012602:	f104 0015 	add.w	r0, r4, #21
 8012606:	4584      	cmp	ip, r0
 8012608:	bf38      	it	cc
 801260a:	2304      	movcc	r3, #4
 801260c:	50ca      	str	r2, [r1, r3]
 801260e:	b10a      	cbz	r2, 8012614 <__lshift+0xa4>
 8012610:	f108 0602 	add.w	r6, r8, #2
 8012614:	3e01      	subs	r6, #1
 8012616:	4638      	mov	r0, r7
 8012618:	612e      	str	r6, [r5, #16]
 801261a:	4621      	mov	r1, r4
 801261c:	f7ff fd8c 	bl	8012138 <_Bfree>
 8012620:	4628      	mov	r0, r5
 8012622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012626:	f842 0f04 	str.w	r0, [r2, #4]!
 801262a:	3301      	adds	r3, #1
 801262c:	e7c5      	b.n	80125ba <__lshift+0x4a>
 801262e:	3904      	subs	r1, #4
 8012630:	f853 2b04 	ldr.w	r2, [r3], #4
 8012634:	f841 2f04 	str.w	r2, [r1, #4]!
 8012638:	459c      	cmp	ip, r3
 801263a:	d8f9      	bhi.n	8012630 <__lshift+0xc0>
 801263c:	e7ea      	b.n	8012614 <__lshift+0xa4>
 801263e:	bf00      	nop
 8012640:	0813d11c 	.word	0x0813d11c
 8012644:	0813d20c 	.word	0x0813d20c

08012648 <__mcmp>:
 8012648:	b530      	push	{r4, r5, lr}
 801264a:	6902      	ldr	r2, [r0, #16]
 801264c:	690c      	ldr	r4, [r1, #16]
 801264e:	1b12      	subs	r2, r2, r4
 8012650:	d10e      	bne.n	8012670 <__mcmp+0x28>
 8012652:	f100 0314 	add.w	r3, r0, #20
 8012656:	3114      	adds	r1, #20
 8012658:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801265c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012660:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8012664:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8012668:	42a5      	cmp	r5, r4
 801266a:	d003      	beq.n	8012674 <__mcmp+0x2c>
 801266c:	d305      	bcc.n	801267a <__mcmp+0x32>
 801266e:	2201      	movs	r2, #1
 8012670:	4610      	mov	r0, r2
 8012672:	bd30      	pop	{r4, r5, pc}
 8012674:	4283      	cmp	r3, r0
 8012676:	d3f3      	bcc.n	8012660 <__mcmp+0x18>
 8012678:	e7fa      	b.n	8012670 <__mcmp+0x28>
 801267a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801267e:	e7f7      	b.n	8012670 <__mcmp+0x28>

08012680 <__mdiff>:
 8012680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012684:	460c      	mov	r4, r1
 8012686:	4606      	mov	r6, r0
 8012688:	4611      	mov	r1, r2
 801268a:	4620      	mov	r0, r4
 801268c:	4617      	mov	r7, r2
 801268e:	f7ff ffdb 	bl	8012648 <__mcmp>
 8012692:	1e05      	subs	r5, r0, #0
 8012694:	d110      	bne.n	80126b8 <__mdiff+0x38>
 8012696:	4629      	mov	r1, r5
 8012698:	4630      	mov	r0, r6
 801269a:	f7ff fd0d 	bl	80120b8 <_Balloc>
 801269e:	b930      	cbnz	r0, 80126ae <__mdiff+0x2e>
 80126a0:	4b39      	ldr	r3, [pc, #228]	; (8012788 <__mdiff+0x108>)
 80126a2:	4602      	mov	r2, r0
 80126a4:	f240 2132 	movw	r1, #562	; 0x232
 80126a8:	4838      	ldr	r0, [pc, #224]	; (801278c <__mdiff+0x10c>)
 80126aa:	f000 fd29 	bl	8013100 <__assert_func>
 80126ae:	2301      	movs	r3, #1
 80126b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80126b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126b8:	bfa4      	itt	ge
 80126ba:	463b      	movge	r3, r7
 80126bc:	4627      	movge	r7, r4
 80126be:	4630      	mov	r0, r6
 80126c0:	6879      	ldr	r1, [r7, #4]
 80126c2:	bfa6      	itte	ge
 80126c4:	461c      	movge	r4, r3
 80126c6:	2500      	movge	r5, #0
 80126c8:	2501      	movlt	r5, #1
 80126ca:	f7ff fcf5 	bl	80120b8 <_Balloc>
 80126ce:	b920      	cbnz	r0, 80126da <__mdiff+0x5a>
 80126d0:	4b2d      	ldr	r3, [pc, #180]	; (8012788 <__mdiff+0x108>)
 80126d2:	4602      	mov	r2, r0
 80126d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80126d8:	e7e6      	b.n	80126a8 <__mdiff+0x28>
 80126da:	693e      	ldr	r6, [r7, #16]
 80126dc:	60c5      	str	r5, [r0, #12]
 80126de:	6925      	ldr	r5, [r4, #16]
 80126e0:	f107 0114 	add.w	r1, r7, #20
 80126e4:	f104 0914 	add.w	r9, r4, #20
 80126e8:	f100 0e14 	add.w	lr, r0, #20
 80126ec:	f107 0210 	add.w	r2, r7, #16
 80126f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80126f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80126f8:	46f2      	mov	sl, lr
 80126fa:	2700      	movs	r7, #0
 80126fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8012700:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012704:	fa1f f883 	uxth.w	r8, r3
 8012708:	fa17 f78b 	uxtah	r7, r7, fp
 801270c:	0c1b      	lsrs	r3, r3, #16
 801270e:	eba7 0808 	sub.w	r8, r7, r8
 8012712:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012716:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801271a:	fa1f f888 	uxth.w	r8, r8
 801271e:	141f      	asrs	r7, r3, #16
 8012720:	454d      	cmp	r5, r9
 8012722:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012726:	f84a 3b04 	str.w	r3, [sl], #4
 801272a:	d8e7      	bhi.n	80126fc <__mdiff+0x7c>
 801272c:	1b2b      	subs	r3, r5, r4
 801272e:	3b15      	subs	r3, #21
 8012730:	f023 0303 	bic.w	r3, r3, #3
 8012734:	3304      	adds	r3, #4
 8012736:	3415      	adds	r4, #21
 8012738:	42a5      	cmp	r5, r4
 801273a:	bf38      	it	cc
 801273c:	2304      	movcc	r3, #4
 801273e:	4419      	add	r1, r3
 8012740:	4473      	add	r3, lr
 8012742:	469e      	mov	lr, r3
 8012744:	460d      	mov	r5, r1
 8012746:	4565      	cmp	r5, ip
 8012748:	d30e      	bcc.n	8012768 <__mdiff+0xe8>
 801274a:	f10c 0203 	add.w	r2, ip, #3
 801274e:	1a52      	subs	r2, r2, r1
 8012750:	f022 0203 	bic.w	r2, r2, #3
 8012754:	3903      	subs	r1, #3
 8012756:	458c      	cmp	ip, r1
 8012758:	bf38      	it	cc
 801275a:	2200      	movcc	r2, #0
 801275c:	441a      	add	r2, r3
 801275e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8012762:	b17b      	cbz	r3, 8012784 <__mdiff+0x104>
 8012764:	6106      	str	r6, [r0, #16]
 8012766:	e7a5      	b.n	80126b4 <__mdiff+0x34>
 8012768:	f855 8b04 	ldr.w	r8, [r5], #4
 801276c:	fa17 f488 	uxtah	r4, r7, r8
 8012770:	1422      	asrs	r2, r4, #16
 8012772:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8012776:	b2a4      	uxth	r4, r4
 8012778:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801277c:	f84e 4b04 	str.w	r4, [lr], #4
 8012780:	1417      	asrs	r7, r2, #16
 8012782:	e7e0      	b.n	8012746 <__mdiff+0xc6>
 8012784:	3e01      	subs	r6, #1
 8012786:	e7ea      	b.n	801275e <__mdiff+0xde>
 8012788:	0813d11c 	.word	0x0813d11c
 801278c:	0813d20c 	.word	0x0813d20c

08012790 <__ulp>:
 8012790:	b082      	sub	sp, #8
 8012792:	ed8d 0b00 	vstr	d0, [sp]
 8012796:	9b01      	ldr	r3, [sp, #4]
 8012798:	4912      	ldr	r1, [pc, #72]	; (80127e4 <__ulp+0x54>)
 801279a:	4019      	ands	r1, r3
 801279c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80127a0:	2900      	cmp	r1, #0
 80127a2:	dd05      	ble.n	80127b0 <__ulp+0x20>
 80127a4:	2200      	movs	r2, #0
 80127a6:	460b      	mov	r3, r1
 80127a8:	ec43 2b10 	vmov	d0, r2, r3
 80127ac:	b002      	add	sp, #8
 80127ae:	4770      	bx	lr
 80127b0:	4249      	negs	r1, r1
 80127b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80127b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80127ba:	f04f 0200 	mov.w	r2, #0
 80127be:	f04f 0300 	mov.w	r3, #0
 80127c2:	da04      	bge.n	80127ce <__ulp+0x3e>
 80127c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80127c8:	fa41 f300 	asr.w	r3, r1, r0
 80127cc:	e7ec      	b.n	80127a8 <__ulp+0x18>
 80127ce:	f1a0 0114 	sub.w	r1, r0, #20
 80127d2:	291e      	cmp	r1, #30
 80127d4:	bfda      	itte	le
 80127d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80127da:	fa20 f101 	lsrle.w	r1, r0, r1
 80127de:	2101      	movgt	r1, #1
 80127e0:	460a      	mov	r2, r1
 80127e2:	e7e1      	b.n	80127a8 <__ulp+0x18>
 80127e4:	7ff00000 	.word	0x7ff00000

080127e8 <__b2d>:
 80127e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ea:	6905      	ldr	r5, [r0, #16]
 80127ec:	f100 0714 	add.w	r7, r0, #20
 80127f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80127f4:	1f2e      	subs	r6, r5, #4
 80127f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80127fa:	4620      	mov	r0, r4
 80127fc:	f7ff fd52 	bl	80122a4 <__hi0bits>
 8012800:	f1c0 0320 	rsb	r3, r0, #32
 8012804:	280a      	cmp	r0, #10
 8012806:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012884 <__b2d+0x9c>
 801280a:	600b      	str	r3, [r1, #0]
 801280c:	dc14      	bgt.n	8012838 <__b2d+0x50>
 801280e:	f1c0 0e0b 	rsb	lr, r0, #11
 8012812:	fa24 f10e 	lsr.w	r1, r4, lr
 8012816:	42b7      	cmp	r7, r6
 8012818:	ea41 030c 	orr.w	r3, r1, ip
 801281c:	bf34      	ite	cc
 801281e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012822:	2100      	movcs	r1, #0
 8012824:	3015      	adds	r0, #21
 8012826:	fa04 f000 	lsl.w	r0, r4, r0
 801282a:	fa21 f10e 	lsr.w	r1, r1, lr
 801282e:	ea40 0201 	orr.w	r2, r0, r1
 8012832:	ec43 2b10 	vmov	d0, r2, r3
 8012836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012838:	42b7      	cmp	r7, r6
 801283a:	bf3a      	itte	cc
 801283c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012840:	f1a5 0608 	subcc.w	r6, r5, #8
 8012844:	2100      	movcs	r1, #0
 8012846:	380b      	subs	r0, #11
 8012848:	d017      	beq.n	801287a <__b2d+0x92>
 801284a:	f1c0 0c20 	rsb	ip, r0, #32
 801284e:	fa04 f500 	lsl.w	r5, r4, r0
 8012852:	42be      	cmp	r6, r7
 8012854:	fa21 f40c 	lsr.w	r4, r1, ip
 8012858:	ea45 0504 	orr.w	r5, r5, r4
 801285c:	bf8c      	ite	hi
 801285e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012862:	2400      	movls	r4, #0
 8012864:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012868:	fa01 f000 	lsl.w	r0, r1, r0
 801286c:	fa24 f40c 	lsr.w	r4, r4, ip
 8012870:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012874:	ea40 0204 	orr.w	r2, r0, r4
 8012878:	e7db      	b.n	8012832 <__b2d+0x4a>
 801287a:	ea44 030c 	orr.w	r3, r4, ip
 801287e:	460a      	mov	r2, r1
 8012880:	e7d7      	b.n	8012832 <__b2d+0x4a>
 8012882:	bf00      	nop
 8012884:	3ff00000 	.word	0x3ff00000

08012888 <__d2b>:
 8012888:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801288c:	4689      	mov	r9, r1
 801288e:	2101      	movs	r1, #1
 8012890:	ec57 6b10 	vmov	r6, r7, d0
 8012894:	4690      	mov	r8, r2
 8012896:	f7ff fc0f 	bl	80120b8 <_Balloc>
 801289a:	4604      	mov	r4, r0
 801289c:	b930      	cbnz	r0, 80128ac <__d2b+0x24>
 801289e:	4602      	mov	r2, r0
 80128a0:	4b25      	ldr	r3, [pc, #148]	; (8012938 <__d2b+0xb0>)
 80128a2:	4826      	ldr	r0, [pc, #152]	; (801293c <__d2b+0xb4>)
 80128a4:	f240 310a 	movw	r1, #778	; 0x30a
 80128a8:	f000 fc2a 	bl	8013100 <__assert_func>
 80128ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80128b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80128b4:	bb35      	cbnz	r5, 8012904 <__d2b+0x7c>
 80128b6:	2e00      	cmp	r6, #0
 80128b8:	9301      	str	r3, [sp, #4]
 80128ba:	d028      	beq.n	801290e <__d2b+0x86>
 80128bc:	4668      	mov	r0, sp
 80128be:	9600      	str	r6, [sp, #0]
 80128c0:	f7ff fd10 	bl	80122e4 <__lo0bits>
 80128c4:	9900      	ldr	r1, [sp, #0]
 80128c6:	b300      	cbz	r0, 801290a <__d2b+0x82>
 80128c8:	9a01      	ldr	r2, [sp, #4]
 80128ca:	f1c0 0320 	rsb	r3, r0, #32
 80128ce:	fa02 f303 	lsl.w	r3, r2, r3
 80128d2:	430b      	orrs	r3, r1
 80128d4:	40c2      	lsrs	r2, r0
 80128d6:	6163      	str	r3, [r4, #20]
 80128d8:	9201      	str	r2, [sp, #4]
 80128da:	9b01      	ldr	r3, [sp, #4]
 80128dc:	61a3      	str	r3, [r4, #24]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	bf14      	ite	ne
 80128e2:	2202      	movne	r2, #2
 80128e4:	2201      	moveq	r2, #1
 80128e6:	6122      	str	r2, [r4, #16]
 80128e8:	b1d5      	cbz	r5, 8012920 <__d2b+0x98>
 80128ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80128ee:	4405      	add	r5, r0
 80128f0:	f8c9 5000 	str.w	r5, [r9]
 80128f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80128f8:	f8c8 0000 	str.w	r0, [r8]
 80128fc:	4620      	mov	r0, r4
 80128fe:	b003      	add	sp, #12
 8012900:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012908:	e7d5      	b.n	80128b6 <__d2b+0x2e>
 801290a:	6161      	str	r1, [r4, #20]
 801290c:	e7e5      	b.n	80128da <__d2b+0x52>
 801290e:	a801      	add	r0, sp, #4
 8012910:	f7ff fce8 	bl	80122e4 <__lo0bits>
 8012914:	9b01      	ldr	r3, [sp, #4]
 8012916:	6163      	str	r3, [r4, #20]
 8012918:	2201      	movs	r2, #1
 801291a:	6122      	str	r2, [r4, #16]
 801291c:	3020      	adds	r0, #32
 801291e:	e7e3      	b.n	80128e8 <__d2b+0x60>
 8012920:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012924:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012928:	f8c9 0000 	str.w	r0, [r9]
 801292c:	6918      	ldr	r0, [r3, #16]
 801292e:	f7ff fcb9 	bl	80122a4 <__hi0bits>
 8012932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012936:	e7df      	b.n	80128f8 <__d2b+0x70>
 8012938:	0813d11c 	.word	0x0813d11c
 801293c:	0813d20c 	.word	0x0813d20c

08012940 <__ratio>:
 8012940:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012944:	4688      	mov	r8, r1
 8012946:	4669      	mov	r1, sp
 8012948:	4681      	mov	r9, r0
 801294a:	f7ff ff4d 	bl	80127e8 <__b2d>
 801294e:	a901      	add	r1, sp, #4
 8012950:	4640      	mov	r0, r8
 8012952:	ec55 4b10 	vmov	r4, r5, d0
 8012956:	f7ff ff47 	bl	80127e8 <__b2d>
 801295a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801295e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012962:	eba3 0c02 	sub.w	ip, r3, r2
 8012966:	e9dd 3200 	ldrd	r3, r2, [sp]
 801296a:	1a9b      	subs	r3, r3, r2
 801296c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012970:	ec51 0b10 	vmov	r0, r1, d0
 8012974:	2b00      	cmp	r3, #0
 8012976:	bfd6      	itet	le
 8012978:	460a      	movle	r2, r1
 801297a:	462a      	movgt	r2, r5
 801297c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012980:	468b      	mov	fp, r1
 8012982:	462f      	mov	r7, r5
 8012984:	bfd4      	ite	le
 8012986:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801298a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801298e:	4620      	mov	r0, r4
 8012990:	ee10 2a10 	vmov	r2, s0
 8012994:	465b      	mov	r3, fp
 8012996:	4639      	mov	r1, r7
 8012998:	f7ed ff68 	bl	800086c <__aeabi_ddiv>
 801299c:	ec41 0b10 	vmov	d0, r0, r1
 80129a0:	b003      	add	sp, #12
 80129a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080129a6 <__copybits>:
 80129a6:	3901      	subs	r1, #1
 80129a8:	b570      	push	{r4, r5, r6, lr}
 80129aa:	1149      	asrs	r1, r1, #5
 80129ac:	6914      	ldr	r4, [r2, #16]
 80129ae:	3101      	adds	r1, #1
 80129b0:	f102 0314 	add.w	r3, r2, #20
 80129b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80129b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80129bc:	1f05      	subs	r5, r0, #4
 80129be:	42a3      	cmp	r3, r4
 80129c0:	d30c      	bcc.n	80129dc <__copybits+0x36>
 80129c2:	1aa3      	subs	r3, r4, r2
 80129c4:	3b11      	subs	r3, #17
 80129c6:	f023 0303 	bic.w	r3, r3, #3
 80129ca:	3211      	adds	r2, #17
 80129cc:	42a2      	cmp	r2, r4
 80129ce:	bf88      	it	hi
 80129d0:	2300      	movhi	r3, #0
 80129d2:	4418      	add	r0, r3
 80129d4:	2300      	movs	r3, #0
 80129d6:	4288      	cmp	r0, r1
 80129d8:	d305      	bcc.n	80129e6 <__copybits+0x40>
 80129da:	bd70      	pop	{r4, r5, r6, pc}
 80129dc:	f853 6b04 	ldr.w	r6, [r3], #4
 80129e0:	f845 6f04 	str.w	r6, [r5, #4]!
 80129e4:	e7eb      	b.n	80129be <__copybits+0x18>
 80129e6:	f840 3b04 	str.w	r3, [r0], #4
 80129ea:	e7f4      	b.n	80129d6 <__copybits+0x30>

080129ec <__any_on>:
 80129ec:	f100 0214 	add.w	r2, r0, #20
 80129f0:	6900      	ldr	r0, [r0, #16]
 80129f2:	114b      	asrs	r3, r1, #5
 80129f4:	4298      	cmp	r0, r3
 80129f6:	b510      	push	{r4, lr}
 80129f8:	db11      	blt.n	8012a1e <__any_on+0x32>
 80129fa:	dd0a      	ble.n	8012a12 <__any_on+0x26>
 80129fc:	f011 011f 	ands.w	r1, r1, #31
 8012a00:	d007      	beq.n	8012a12 <__any_on+0x26>
 8012a02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012a06:	fa24 f001 	lsr.w	r0, r4, r1
 8012a0a:	fa00 f101 	lsl.w	r1, r0, r1
 8012a0e:	428c      	cmp	r4, r1
 8012a10:	d10b      	bne.n	8012a2a <__any_on+0x3e>
 8012a12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a16:	4293      	cmp	r3, r2
 8012a18:	d803      	bhi.n	8012a22 <__any_on+0x36>
 8012a1a:	2000      	movs	r0, #0
 8012a1c:	bd10      	pop	{r4, pc}
 8012a1e:	4603      	mov	r3, r0
 8012a20:	e7f7      	b.n	8012a12 <__any_on+0x26>
 8012a22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012a26:	2900      	cmp	r1, #0
 8012a28:	d0f5      	beq.n	8012a16 <__any_on+0x2a>
 8012a2a:	2001      	movs	r0, #1
 8012a2c:	e7f6      	b.n	8012a1c <__any_on+0x30>

08012a2e <_calloc_r>:
 8012a2e:	b513      	push	{r0, r1, r4, lr}
 8012a30:	434a      	muls	r2, r1
 8012a32:	4611      	mov	r1, r2
 8012a34:	9201      	str	r2, [sp, #4]
 8012a36:	f7fb ff49 	bl	800e8cc <_malloc_r>
 8012a3a:	4604      	mov	r4, r0
 8012a3c:	b118      	cbz	r0, 8012a46 <_calloc_r+0x18>
 8012a3e:	9a01      	ldr	r2, [sp, #4]
 8012a40:	2100      	movs	r1, #0
 8012a42:	f7fb feeb 	bl	800e81c <memset>
 8012a46:	4620      	mov	r0, r4
 8012a48:	b002      	add	sp, #8
 8012a4a:	bd10      	pop	{r4, pc}

08012a4c <_realloc_r>:
 8012a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a4e:	4607      	mov	r7, r0
 8012a50:	4614      	mov	r4, r2
 8012a52:	460e      	mov	r6, r1
 8012a54:	b921      	cbnz	r1, 8012a60 <_realloc_r+0x14>
 8012a56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012a5a:	4611      	mov	r1, r2
 8012a5c:	f7fb bf36 	b.w	800e8cc <_malloc_r>
 8012a60:	b922      	cbnz	r2, 8012a6c <_realloc_r+0x20>
 8012a62:	f7fb fee3 	bl	800e82c <_free_r>
 8012a66:	4625      	mov	r5, r4
 8012a68:	4628      	mov	r0, r5
 8012a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a6c:	f000 fbd6 	bl	801321c <_malloc_usable_size_r>
 8012a70:	42a0      	cmp	r0, r4
 8012a72:	d20f      	bcs.n	8012a94 <_realloc_r+0x48>
 8012a74:	4621      	mov	r1, r4
 8012a76:	4638      	mov	r0, r7
 8012a78:	f7fb ff28 	bl	800e8cc <_malloc_r>
 8012a7c:	4605      	mov	r5, r0
 8012a7e:	2800      	cmp	r0, #0
 8012a80:	d0f2      	beq.n	8012a68 <_realloc_r+0x1c>
 8012a82:	4631      	mov	r1, r6
 8012a84:	4622      	mov	r2, r4
 8012a86:	f7fb febb 	bl	800e800 <memcpy>
 8012a8a:	4631      	mov	r1, r6
 8012a8c:	4638      	mov	r0, r7
 8012a8e:	f7fb fecd 	bl	800e82c <_free_r>
 8012a92:	e7e9      	b.n	8012a68 <_realloc_r+0x1c>
 8012a94:	4635      	mov	r5, r6
 8012a96:	e7e7      	b.n	8012a68 <_realloc_r+0x1c>

08012a98 <__ssputs_r>:
 8012a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a9c:	688e      	ldr	r6, [r1, #8]
 8012a9e:	429e      	cmp	r6, r3
 8012aa0:	4682      	mov	sl, r0
 8012aa2:	460c      	mov	r4, r1
 8012aa4:	4690      	mov	r8, r2
 8012aa6:	461f      	mov	r7, r3
 8012aa8:	d838      	bhi.n	8012b1c <__ssputs_r+0x84>
 8012aaa:	898a      	ldrh	r2, [r1, #12]
 8012aac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012ab0:	d032      	beq.n	8012b18 <__ssputs_r+0x80>
 8012ab2:	6825      	ldr	r5, [r4, #0]
 8012ab4:	6909      	ldr	r1, [r1, #16]
 8012ab6:	eba5 0901 	sub.w	r9, r5, r1
 8012aba:	6965      	ldr	r5, [r4, #20]
 8012abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012ac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	444b      	add	r3, r9
 8012ac8:	106d      	asrs	r5, r5, #1
 8012aca:	429d      	cmp	r5, r3
 8012acc:	bf38      	it	cc
 8012ace:	461d      	movcc	r5, r3
 8012ad0:	0553      	lsls	r3, r2, #21
 8012ad2:	d531      	bpl.n	8012b38 <__ssputs_r+0xa0>
 8012ad4:	4629      	mov	r1, r5
 8012ad6:	f7fb fef9 	bl	800e8cc <_malloc_r>
 8012ada:	4606      	mov	r6, r0
 8012adc:	b950      	cbnz	r0, 8012af4 <__ssputs_r+0x5c>
 8012ade:	230c      	movs	r3, #12
 8012ae0:	f8ca 3000 	str.w	r3, [sl]
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012aea:	81a3      	strh	r3, [r4, #12]
 8012aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012af4:	6921      	ldr	r1, [r4, #16]
 8012af6:	464a      	mov	r2, r9
 8012af8:	f7fb fe82 	bl	800e800 <memcpy>
 8012afc:	89a3      	ldrh	r3, [r4, #12]
 8012afe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b06:	81a3      	strh	r3, [r4, #12]
 8012b08:	6126      	str	r6, [r4, #16]
 8012b0a:	6165      	str	r5, [r4, #20]
 8012b0c:	444e      	add	r6, r9
 8012b0e:	eba5 0509 	sub.w	r5, r5, r9
 8012b12:	6026      	str	r6, [r4, #0]
 8012b14:	60a5      	str	r5, [r4, #8]
 8012b16:	463e      	mov	r6, r7
 8012b18:	42be      	cmp	r6, r7
 8012b1a:	d900      	bls.n	8012b1e <__ssputs_r+0x86>
 8012b1c:	463e      	mov	r6, r7
 8012b1e:	4632      	mov	r2, r6
 8012b20:	6820      	ldr	r0, [r4, #0]
 8012b22:	4641      	mov	r1, r8
 8012b24:	f000 fb60 	bl	80131e8 <memmove>
 8012b28:	68a3      	ldr	r3, [r4, #8]
 8012b2a:	6822      	ldr	r2, [r4, #0]
 8012b2c:	1b9b      	subs	r3, r3, r6
 8012b2e:	4432      	add	r2, r6
 8012b30:	60a3      	str	r3, [r4, #8]
 8012b32:	6022      	str	r2, [r4, #0]
 8012b34:	2000      	movs	r0, #0
 8012b36:	e7db      	b.n	8012af0 <__ssputs_r+0x58>
 8012b38:	462a      	mov	r2, r5
 8012b3a:	f7ff ff87 	bl	8012a4c <_realloc_r>
 8012b3e:	4606      	mov	r6, r0
 8012b40:	2800      	cmp	r0, #0
 8012b42:	d1e1      	bne.n	8012b08 <__ssputs_r+0x70>
 8012b44:	6921      	ldr	r1, [r4, #16]
 8012b46:	4650      	mov	r0, sl
 8012b48:	f7fb fe70 	bl	800e82c <_free_r>
 8012b4c:	e7c7      	b.n	8012ade <__ssputs_r+0x46>
	...

08012b50 <_svfiprintf_r>:
 8012b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b54:	4698      	mov	r8, r3
 8012b56:	898b      	ldrh	r3, [r1, #12]
 8012b58:	061b      	lsls	r3, r3, #24
 8012b5a:	b09d      	sub	sp, #116	; 0x74
 8012b5c:	4607      	mov	r7, r0
 8012b5e:	460d      	mov	r5, r1
 8012b60:	4614      	mov	r4, r2
 8012b62:	d50e      	bpl.n	8012b82 <_svfiprintf_r+0x32>
 8012b64:	690b      	ldr	r3, [r1, #16]
 8012b66:	b963      	cbnz	r3, 8012b82 <_svfiprintf_r+0x32>
 8012b68:	2140      	movs	r1, #64	; 0x40
 8012b6a:	f7fb feaf 	bl	800e8cc <_malloc_r>
 8012b6e:	6028      	str	r0, [r5, #0]
 8012b70:	6128      	str	r0, [r5, #16]
 8012b72:	b920      	cbnz	r0, 8012b7e <_svfiprintf_r+0x2e>
 8012b74:	230c      	movs	r3, #12
 8012b76:	603b      	str	r3, [r7, #0]
 8012b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b7c:	e0d1      	b.n	8012d22 <_svfiprintf_r+0x1d2>
 8012b7e:	2340      	movs	r3, #64	; 0x40
 8012b80:	616b      	str	r3, [r5, #20]
 8012b82:	2300      	movs	r3, #0
 8012b84:	9309      	str	r3, [sp, #36]	; 0x24
 8012b86:	2320      	movs	r3, #32
 8012b88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012b90:	2330      	movs	r3, #48	; 0x30
 8012b92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8012d3c <_svfiprintf_r+0x1ec>
 8012b96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b9a:	f04f 0901 	mov.w	r9, #1
 8012b9e:	4623      	mov	r3, r4
 8012ba0:	469a      	mov	sl, r3
 8012ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ba6:	b10a      	cbz	r2, 8012bac <_svfiprintf_r+0x5c>
 8012ba8:	2a25      	cmp	r2, #37	; 0x25
 8012baa:	d1f9      	bne.n	8012ba0 <_svfiprintf_r+0x50>
 8012bac:	ebba 0b04 	subs.w	fp, sl, r4
 8012bb0:	d00b      	beq.n	8012bca <_svfiprintf_r+0x7a>
 8012bb2:	465b      	mov	r3, fp
 8012bb4:	4622      	mov	r2, r4
 8012bb6:	4629      	mov	r1, r5
 8012bb8:	4638      	mov	r0, r7
 8012bba:	f7ff ff6d 	bl	8012a98 <__ssputs_r>
 8012bbe:	3001      	adds	r0, #1
 8012bc0:	f000 80aa 	beq.w	8012d18 <_svfiprintf_r+0x1c8>
 8012bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012bc6:	445a      	add	r2, fp
 8012bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8012bca:	f89a 3000 	ldrb.w	r3, [sl]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	f000 80a2 	beq.w	8012d18 <_svfiprintf_r+0x1c8>
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012bde:	f10a 0a01 	add.w	sl, sl, #1
 8012be2:	9304      	str	r3, [sp, #16]
 8012be4:	9307      	str	r3, [sp, #28]
 8012be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012bea:	931a      	str	r3, [sp, #104]	; 0x68
 8012bec:	4654      	mov	r4, sl
 8012bee:	2205      	movs	r2, #5
 8012bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bf4:	4851      	ldr	r0, [pc, #324]	; (8012d3c <_svfiprintf_r+0x1ec>)
 8012bf6:	f7ed fb03 	bl	8000200 <memchr>
 8012bfa:	9a04      	ldr	r2, [sp, #16]
 8012bfc:	b9d8      	cbnz	r0, 8012c36 <_svfiprintf_r+0xe6>
 8012bfe:	06d0      	lsls	r0, r2, #27
 8012c00:	bf44      	itt	mi
 8012c02:	2320      	movmi	r3, #32
 8012c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c08:	0711      	lsls	r1, r2, #28
 8012c0a:	bf44      	itt	mi
 8012c0c:	232b      	movmi	r3, #43	; 0x2b
 8012c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012c12:	f89a 3000 	ldrb.w	r3, [sl]
 8012c16:	2b2a      	cmp	r3, #42	; 0x2a
 8012c18:	d015      	beq.n	8012c46 <_svfiprintf_r+0xf6>
 8012c1a:	9a07      	ldr	r2, [sp, #28]
 8012c1c:	4654      	mov	r4, sl
 8012c1e:	2000      	movs	r0, #0
 8012c20:	f04f 0c0a 	mov.w	ip, #10
 8012c24:	4621      	mov	r1, r4
 8012c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c2a:	3b30      	subs	r3, #48	; 0x30
 8012c2c:	2b09      	cmp	r3, #9
 8012c2e:	d94e      	bls.n	8012cce <_svfiprintf_r+0x17e>
 8012c30:	b1b0      	cbz	r0, 8012c60 <_svfiprintf_r+0x110>
 8012c32:	9207      	str	r2, [sp, #28]
 8012c34:	e014      	b.n	8012c60 <_svfiprintf_r+0x110>
 8012c36:	eba0 0308 	sub.w	r3, r0, r8
 8012c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8012c3e:	4313      	orrs	r3, r2
 8012c40:	9304      	str	r3, [sp, #16]
 8012c42:	46a2      	mov	sl, r4
 8012c44:	e7d2      	b.n	8012bec <_svfiprintf_r+0x9c>
 8012c46:	9b03      	ldr	r3, [sp, #12]
 8012c48:	1d19      	adds	r1, r3, #4
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	9103      	str	r1, [sp, #12]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	bfbb      	ittet	lt
 8012c52:	425b      	neglt	r3, r3
 8012c54:	f042 0202 	orrlt.w	r2, r2, #2
 8012c58:	9307      	strge	r3, [sp, #28]
 8012c5a:	9307      	strlt	r3, [sp, #28]
 8012c5c:	bfb8      	it	lt
 8012c5e:	9204      	strlt	r2, [sp, #16]
 8012c60:	7823      	ldrb	r3, [r4, #0]
 8012c62:	2b2e      	cmp	r3, #46	; 0x2e
 8012c64:	d10c      	bne.n	8012c80 <_svfiprintf_r+0x130>
 8012c66:	7863      	ldrb	r3, [r4, #1]
 8012c68:	2b2a      	cmp	r3, #42	; 0x2a
 8012c6a:	d135      	bne.n	8012cd8 <_svfiprintf_r+0x188>
 8012c6c:	9b03      	ldr	r3, [sp, #12]
 8012c6e:	1d1a      	adds	r2, r3, #4
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	9203      	str	r2, [sp, #12]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	bfb8      	it	lt
 8012c78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012c7c:	3402      	adds	r4, #2
 8012c7e:	9305      	str	r3, [sp, #20]
 8012c80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8012d4c <_svfiprintf_r+0x1fc>
 8012c84:	7821      	ldrb	r1, [r4, #0]
 8012c86:	2203      	movs	r2, #3
 8012c88:	4650      	mov	r0, sl
 8012c8a:	f7ed fab9 	bl	8000200 <memchr>
 8012c8e:	b140      	cbz	r0, 8012ca2 <_svfiprintf_r+0x152>
 8012c90:	2340      	movs	r3, #64	; 0x40
 8012c92:	eba0 000a 	sub.w	r0, r0, sl
 8012c96:	fa03 f000 	lsl.w	r0, r3, r0
 8012c9a:	9b04      	ldr	r3, [sp, #16]
 8012c9c:	4303      	orrs	r3, r0
 8012c9e:	3401      	adds	r4, #1
 8012ca0:	9304      	str	r3, [sp, #16]
 8012ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ca6:	4826      	ldr	r0, [pc, #152]	; (8012d40 <_svfiprintf_r+0x1f0>)
 8012ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012cac:	2206      	movs	r2, #6
 8012cae:	f7ed faa7 	bl	8000200 <memchr>
 8012cb2:	2800      	cmp	r0, #0
 8012cb4:	d038      	beq.n	8012d28 <_svfiprintf_r+0x1d8>
 8012cb6:	4b23      	ldr	r3, [pc, #140]	; (8012d44 <_svfiprintf_r+0x1f4>)
 8012cb8:	bb1b      	cbnz	r3, 8012d02 <_svfiprintf_r+0x1b2>
 8012cba:	9b03      	ldr	r3, [sp, #12]
 8012cbc:	3307      	adds	r3, #7
 8012cbe:	f023 0307 	bic.w	r3, r3, #7
 8012cc2:	3308      	adds	r3, #8
 8012cc4:	9303      	str	r3, [sp, #12]
 8012cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012cc8:	4433      	add	r3, r6
 8012cca:	9309      	str	r3, [sp, #36]	; 0x24
 8012ccc:	e767      	b.n	8012b9e <_svfiprintf_r+0x4e>
 8012cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8012cd2:	460c      	mov	r4, r1
 8012cd4:	2001      	movs	r0, #1
 8012cd6:	e7a5      	b.n	8012c24 <_svfiprintf_r+0xd4>
 8012cd8:	2300      	movs	r3, #0
 8012cda:	3401      	adds	r4, #1
 8012cdc:	9305      	str	r3, [sp, #20]
 8012cde:	4619      	mov	r1, r3
 8012ce0:	f04f 0c0a 	mov.w	ip, #10
 8012ce4:	4620      	mov	r0, r4
 8012ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012cea:	3a30      	subs	r2, #48	; 0x30
 8012cec:	2a09      	cmp	r2, #9
 8012cee:	d903      	bls.n	8012cf8 <_svfiprintf_r+0x1a8>
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d0c5      	beq.n	8012c80 <_svfiprintf_r+0x130>
 8012cf4:	9105      	str	r1, [sp, #20]
 8012cf6:	e7c3      	b.n	8012c80 <_svfiprintf_r+0x130>
 8012cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8012cfc:	4604      	mov	r4, r0
 8012cfe:	2301      	movs	r3, #1
 8012d00:	e7f0      	b.n	8012ce4 <_svfiprintf_r+0x194>
 8012d02:	ab03      	add	r3, sp, #12
 8012d04:	9300      	str	r3, [sp, #0]
 8012d06:	462a      	mov	r2, r5
 8012d08:	4b0f      	ldr	r3, [pc, #60]	; (8012d48 <_svfiprintf_r+0x1f8>)
 8012d0a:	a904      	add	r1, sp, #16
 8012d0c:	4638      	mov	r0, r7
 8012d0e:	f7fb fed7 	bl	800eac0 <_printf_float>
 8012d12:	1c42      	adds	r2, r0, #1
 8012d14:	4606      	mov	r6, r0
 8012d16:	d1d6      	bne.n	8012cc6 <_svfiprintf_r+0x176>
 8012d18:	89ab      	ldrh	r3, [r5, #12]
 8012d1a:	065b      	lsls	r3, r3, #25
 8012d1c:	f53f af2c 	bmi.w	8012b78 <_svfiprintf_r+0x28>
 8012d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012d22:	b01d      	add	sp, #116	; 0x74
 8012d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d28:	ab03      	add	r3, sp, #12
 8012d2a:	9300      	str	r3, [sp, #0]
 8012d2c:	462a      	mov	r2, r5
 8012d2e:	4b06      	ldr	r3, [pc, #24]	; (8012d48 <_svfiprintf_r+0x1f8>)
 8012d30:	a904      	add	r1, sp, #16
 8012d32:	4638      	mov	r0, r7
 8012d34:	f7fc f968 	bl	800f008 <_printf_i>
 8012d38:	e7eb      	b.n	8012d12 <_svfiprintf_r+0x1c2>
 8012d3a:	bf00      	nop
 8012d3c:	0813d36c 	.word	0x0813d36c
 8012d40:	0813d376 	.word	0x0813d376
 8012d44:	0800eac1 	.word	0x0800eac1
 8012d48:	08012a99 	.word	0x08012a99
 8012d4c:	0813d372 	.word	0x0813d372

08012d50 <__sfputc_r>:
 8012d50:	6893      	ldr	r3, [r2, #8]
 8012d52:	3b01      	subs	r3, #1
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	b410      	push	{r4}
 8012d58:	6093      	str	r3, [r2, #8]
 8012d5a:	da08      	bge.n	8012d6e <__sfputc_r+0x1e>
 8012d5c:	6994      	ldr	r4, [r2, #24]
 8012d5e:	42a3      	cmp	r3, r4
 8012d60:	db01      	blt.n	8012d66 <__sfputc_r+0x16>
 8012d62:	290a      	cmp	r1, #10
 8012d64:	d103      	bne.n	8012d6e <__sfputc_r+0x1e>
 8012d66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d6a:	f7fd bcbb 	b.w	80106e4 <__swbuf_r>
 8012d6e:	6813      	ldr	r3, [r2, #0]
 8012d70:	1c58      	adds	r0, r3, #1
 8012d72:	6010      	str	r0, [r2, #0]
 8012d74:	7019      	strb	r1, [r3, #0]
 8012d76:	4608      	mov	r0, r1
 8012d78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d7c:	4770      	bx	lr

08012d7e <__sfputs_r>:
 8012d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d80:	4606      	mov	r6, r0
 8012d82:	460f      	mov	r7, r1
 8012d84:	4614      	mov	r4, r2
 8012d86:	18d5      	adds	r5, r2, r3
 8012d88:	42ac      	cmp	r4, r5
 8012d8a:	d101      	bne.n	8012d90 <__sfputs_r+0x12>
 8012d8c:	2000      	movs	r0, #0
 8012d8e:	e007      	b.n	8012da0 <__sfputs_r+0x22>
 8012d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012d94:	463a      	mov	r2, r7
 8012d96:	4630      	mov	r0, r6
 8012d98:	f7ff ffda 	bl	8012d50 <__sfputc_r>
 8012d9c:	1c43      	adds	r3, r0, #1
 8012d9e:	d1f3      	bne.n	8012d88 <__sfputs_r+0xa>
 8012da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012da4 <_vfiprintf_r>:
 8012da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da8:	460d      	mov	r5, r1
 8012daa:	b09d      	sub	sp, #116	; 0x74
 8012dac:	4614      	mov	r4, r2
 8012dae:	4698      	mov	r8, r3
 8012db0:	4606      	mov	r6, r0
 8012db2:	b118      	cbz	r0, 8012dbc <_vfiprintf_r+0x18>
 8012db4:	6983      	ldr	r3, [r0, #24]
 8012db6:	b90b      	cbnz	r3, 8012dbc <_vfiprintf_r+0x18>
 8012db8:	f7fe fce8 	bl	801178c <__sinit>
 8012dbc:	4b89      	ldr	r3, [pc, #548]	; (8012fe4 <_vfiprintf_r+0x240>)
 8012dbe:	429d      	cmp	r5, r3
 8012dc0:	d11b      	bne.n	8012dfa <_vfiprintf_r+0x56>
 8012dc2:	6875      	ldr	r5, [r6, #4]
 8012dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012dc6:	07d9      	lsls	r1, r3, #31
 8012dc8:	d405      	bmi.n	8012dd6 <_vfiprintf_r+0x32>
 8012dca:	89ab      	ldrh	r3, [r5, #12]
 8012dcc:	059a      	lsls	r2, r3, #22
 8012dce:	d402      	bmi.n	8012dd6 <_vfiprintf_r+0x32>
 8012dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012dd2:	f7ff f8ec 	bl	8011fae <__retarget_lock_acquire_recursive>
 8012dd6:	89ab      	ldrh	r3, [r5, #12]
 8012dd8:	071b      	lsls	r3, r3, #28
 8012dda:	d501      	bpl.n	8012de0 <_vfiprintf_r+0x3c>
 8012ddc:	692b      	ldr	r3, [r5, #16]
 8012dde:	b9eb      	cbnz	r3, 8012e1c <_vfiprintf_r+0x78>
 8012de0:	4629      	mov	r1, r5
 8012de2:	4630      	mov	r0, r6
 8012de4:	f7fd fcd0 	bl	8010788 <__swsetup_r>
 8012de8:	b1c0      	cbz	r0, 8012e1c <_vfiprintf_r+0x78>
 8012dea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012dec:	07dc      	lsls	r4, r3, #31
 8012dee:	d50e      	bpl.n	8012e0e <_vfiprintf_r+0x6a>
 8012df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012df4:	b01d      	add	sp, #116	; 0x74
 8012df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dfa:	4b7b      	ldr	r3, [pc, #492]	; (8012fe8 <_vfiprintf_r+0x244>)
 8012dfc:	429d      	cmp	r5, r3
 8012dfe:	d101      	bne.n	8012e04 <_vfiprintf_r+0x60>
 8012e00:	68b5      	ldr	r5, [r6, #8]
 8012e02:	e7df      	b.n	8012dc4 <_vfiprintf_r+0x20>
 8012e04:	4b79      	ldr	r3, [pc, #484]	; (8012fec <_vfiprintf_r+0x248>)
 8012e06:	429d      	cmp	r5, r3
 8012e08:	bf08      	it	eq
 8012e0a:	68f5      	ldreq	r5, [r6, #12]
 8012e0c:	e7da      	b.n	8012dc4 <_vfiprintf_r+0x20>
 8012e0e:	89ab      	ldrh	r3, [r5, #12]
 8012e10:	0598      	lsls	r0, r3, #22
 8012e12:	d4ed      	bmi.n	8012df0 <_vfiprintf_r+0x4c>
 8012e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012e16:	f7ff f8cb 	bl	8011fb0 <__retarget_lock_release_recursive>
 8012e1a:	e7e9      	b.n	8012df0 <_vfiprintf_r+0x4c>
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8012e20:	2320      	movs	r3, #32
 8012e22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e26:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e2a:	2330      	movs	r3, #48	; 0x30
 8012e2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012ff0 <_vfiprintf_r+0x24c>
 8012e30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012e34:	f04f 0901 	mov.w	r9, #1
 8012e38:	4623      	mov	r3, r4
 8012e3a:	469a      	mov	sl, r3
 8012e3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e40:	b10a      	cbz	r2, 8012e46 <_vfiprintf_r+0xa2>
 8012e42:	2a25      	cmp	r2, #37	; 0x25
 8012e44:	d1f9      	bne.n	8012e3a <_vfiprintf_r+0x96>
 8012e46:	ebba 0b04 	subs.w	fp, sl, r4
 8012e4a:	d00b      	beq.n	8012e64 <_vfiprintf_r+0xc0>
 8012e4c:	465b      	mov	r3, fp
 8012e4e:	4622      	mov	r2, r4
 8012e50:	4629      	mov	r1, r5
 8012e52:	4630      	mov	r0, r6
 8012e54:	f7ff ff93 	bl	8012d7e <__sfputs_r>
 8012e58:	3001      	adds	r0, #1
 8012e5a:	f000 80aa 	beq.w	8012fb2 <_vfiprintf_r+0x20e>
 8012e5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012e60:	445a      	add	r2, fp
 8012e62:	9209      	str	r2, [sp, #36]	; 0x24
 8012e64:	f89a 3000 	ldrb.w	r3, [sl]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	f000 80a2 	beq.w	8012fb2 <_vfiprintf_r+0x20e>
 8012e6e:	2300      	movs	r3, #0
 8012e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012e74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e78:	f10a 0a01 	add.w	sl, sl, #1
 8012e7c:	9304      	str	r3, [sp, #16]
 8012e7e:	9307      	str	r3, [sp, #28]
 8012e80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012e84:	931a      	str	r3, [sp, #104]	; 0x68
 8012e86:	4654      	mov	r4, sl
 8012e88:	2205      	movs	r2, #5
 8012e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e8e:	4858      	ldr	r0, [pc, #352]	; (8012ff0 <_vfiprintf_r+0x24c>)
 8012e90:	f7ed f9b6 	bl	8000200 <memchr>
 8012e94:	9a04      	ldr	r2, [sp, #16]
 8012e96:	b9d8      	cbnz	r0, 8012ed0 <_vfiprintf_r+0x12c>
 8012e98:	06d1      	lsls	r1, r2, #27
 8012e9a:	bf44      	itt	mi
 8012e9c:	2320      	movmi	r3, #32
 8012e9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012ea2:	0713      	lsls	r3, r2, #28
 8012ea4:	bf44      	itt	mi
 8012ea6:	232b      	movmi	r3, #43	; 0x2b
 8012ea8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012eac:	f89a 3000 	ldrb.w	r3, [sl]
 8012eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8012eb2:	d015      	beq.n	8012ee0 <_vfiprintf_r+0x13c>
 8012eb4:	9a07      	ldr	r2, [sp, #28]
 8012eb6:	4654      	mov	r4, sl
 8012eb8:	2000      	movs	r0, #0
 8012eba:	f04f 0c0a 	mov.w	ip, #10
 8012ebe:	4621      	mov	r1, r4
 8012ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ec4:	3b30      	subs	r3, #48	; 0x30
 8012ec6:	2b09      	cmp	r3, #9
 8012ec8:	d94e      	bls.n	8012f68 <_vfiprintf_r+0x1c4>
 8012eca:	b1b0      	cbz	r0, 8012efa <_vfiprintf_r+0x156>
 8012ecc:	9207      	str	r2, [sp, #28]
 8012ece:	e014      	b.n	8012efa <_vfiprintf_r+0x156>
 8012ed0:	eba0 0308 	sub.w	r3, r0, r8
 8012ed4:	fa09 f303 	lsl.w	r3, r9, r3
 8012ed8:	4313      	orrs	r3, r2
 8012eda:	9304      	str	r3, [sp, #16]
 8012edc:	46a2      	mov	sl, r4
 8012ede:	e7d2      	b.n	8012e86 <_vfiprintf_r+0xe2>
 8012ee0:	9b03      	ldr	r3, [sp, #12]
 8012ee2:	1d19      	adds	r1, r3, #4
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	9103      	str	r1, [sp, #12]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	bfbb      	ittet	lt
 8012eec:	425b      	neglt	r3, r3
 8012eee:	f042 0202 	orrlt.w	r2, r2, #2
 8012ef2:	9307      	strge	r3, [sp, #28]
 8012ef4:	9307      	strlt	r3, [sp, #28]
 8012ef6:	bfb8      	it	lt
 8012ef8:	9204      	strlt	r2, [sp, #16]
 8012efa:	7823      	ldrb	r3, [r4, #0]
 8012efc:	2b2e      	cmp	r3, #46	; 0x2e
 8012efe:	d10c      	bne.n	8012f1a <_vfiprintf_r+0x176>
 8012f00:	7863      	ldrb	r3, [r4, #1]
 8012f02:	2b2a      	cmp	r3, #42	; 0x2a
 8012f04:	d135      	bne.n	8012f72 <_vfiprintf_r+0x1ce>
 8012f06:	9b03      	ldr	r3, [sp, #12]
 8012f08:	1d1a      	adds	r2, r3, #4
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	9203      	str	r2, [sp, #12]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	bfb8      	it	lt
 8012f12:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012f16:	3402      	adds	r4, #2
 8012f18:	9305      	str	r3, [sp, #20]
 8012f1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8013000 <_vfiprintf_r+0x25c>
 8012f1e:	7821      	ldrb	r1, [r4, #0]
 8012f20:	2203      	movs	r2, #3
 8012f22:	4650      	mov	r0, sl
 8012f24:	f7ed f96c 	bl	8000200 <memchr>
 8012f28:	b140      	cbz	r0, 8012f3c <_vfiprintf_r+0x198>
 8012f2a:	2340      	movs	r3, #64	; 0x40
 8012f2c:	eba0 000a 	sub.w	r0, r0, sl
 8012f30:	fa03 f000 	lsl.w	r0, r3, r0
 8012f34:	9b04      	ldr	r3, [sp, #16]
 8012f36:	4303      	orrs	r3, r0
 8012f38:	3401      	adds	r4, #1
 8012f3a:	9304      	str	r3, [sp, #16]
 8012f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f40:	482c      	ldr	r0, [pc, #176]	; (8012ff4 <_vfiprintf_r+0x250>)
 8012f42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012f46:	2206      	movs	r2, #6
 8012f48:	f7ed f95a 	bl	8000200 <memchr>
 8012f4c:	2800      	cmp	r0, #0
 8012f4e:	d03f      	beq.n	8012fd0 <_vfiprintf_r+0x22c>
 8012f50:	4b29      	ldr	r3, [pc, #164]	; (8012ff8 <_vfiprintf_r+0x254>)
 8012f52:	bb1b      	cbnz	r3, 8012f9c <_vfiprintf_r+0x1f8>
 8012f54:	9b03      	ldr	r3, [sp, #12]
 8012f56:	3307      	adds	r3, #7
 8012f58:	f023 0307 	bic.w	r3, r3, #7
 8012f5c:	3308      	adds	r3, #8
 8012f5e:	9303      	str	r3, [sp, #12]
 8012f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f62:	443b      	add	r3, r7
 8012f64:	9309      	str	r3, [sp, #36]	; 0x24
 8012f66:	e767      	b.n	8012e38 <_vfiprintf_r+0x94>
 8012f68:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f6c:	460c      	mov	r4, r1
 8012f6e:	2001      	movs	r0, #1
 8012f70:	e7a5      	b.n	8012ebe <_vfiprintf_r+0x11a>
 8012f72:	2300      	movs	r3, #0
 8012f74:	3401      	adds	r4, #1
 8012f76:	9305      	str	r3, [sp, #20]
 8012f78:	4619      	mov	r1, r3
 8012f7a:	f04f 0c0a 	mov.w	ip, #10
 8012f7e:	4620      	mov	r0, r4
 8012f80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f84:	3a30      	subs	r2, #48	; 0x30
 8012f86:	2a09      	cmp	r2, #9
 8012f88:	d903      	bls.n	8012f92 <_vfiprintf_r+0x1ee>
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d0c5      	beq.n	8012f1a <_vfiprintf_r+0x176>
 8012f8e:	9105      	str	r1, [sp, #20]
 8012f90:	e7c3      	b.n	8012f1a <_vfiprintf_r+0x176>
 8012f92:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f96:	4604      	mov	r4, r0
 8012f98:	2301      	movs	r3, #1
 8012f9a:	e7f0      	b.n	8012f7e <_vfiprintf_r+0x1da>
 8012f9c:	ab03      	add	r3, sp, #12
 8012f9e:	9300      	str	r3, [sp, #0]
 8012fa0:	462a      	mov	r2, r5
 8012fa2:	4b16      	ldr	r3, [pc, #88]	; (8012ffc <_vfiprintf_r+0x258>)
 8012fa4:	a904      	add	r1, sp, #16
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	f7fb fd8a 	bl	800eac0 <_printf_float>
 8012fac:	4607      	mov	r7, r0
 8012fae:	1c78      	adds	r0, r7, #1
 8012fb0:	d1d6      	bne.n	8012f60 <_vfiprintf_r+0x1bc>
 8012fb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012fb4:	07d9      	lsls	r1, r3, #31
 8012fb6:	d405      	bmi.n	8012fc4 <_vfiprintf_r+0x220>
 8012fb8:	89ab      	ldrh	r3, [r5, #12]
 8012fba:	059a      	lsls	r2, r3, #22
 8012fbc:	d402      	bmi.n	8012fc4 <_vfiprintf_r+0x220>
 8012fbe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012fc0:	f7fe fff6 	bl	8011fb0 <__retarget_lock_release_recursive>
 8012fc4:	89ab      	ldrh	r3, [r5, #12]
 8012fc6:	065b      	lsls	r3, r3, #25
 8012fc8:	f53f af12 	bmi.w	8012df0 <_vfiprintf_r+0x4c>
 8012fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012fce:	e711      	b.n	8012df4 <_vfiprintf_r+0x50>
 8012fd0:	ab03      	add	r3, sp, #12
 8012fd2:	9300      	str	r3, [sp, #0]
 8012fd4:	462a      	mov	r2, r5
 8012fd6:	4b09      	ldr	r3, [pc, #36]	; (8012ffc <_vfiprintf_r+0x258>)
 8012fd8:	a904      	add	r1, sp, #16
 8012fda:	4630      	mov	r0, r6
 8012fdc:	f7fc f814 	bl	800f008 <_printf_i>
 8012fe0:	e7e4      	b.n	8012fac <_vfiprintf_r+0x208>
 8012fe2:	bf00      	nop
 8012fe4:	0813d150 	.word	0x0813d150
 8012fe8:	0813d170 	.word	0x0813d170
 8012fec:	0813d130 	.word	0x0813d130
 8012ff0:	0813d36c 	.word	0x0813d36c
 8012ff4:	0813d376 	.word	0x0813d376
 8012ff8:	0800eac1 	.word	0x0800eac1
 8012ffc:	08012d7f 	.word	0x08012d7f
 8013000:	0813d372 	.word	0x0813d372
 8013004:	00000000 	.word	0x00000000

08013008 <nan>:
 8013008:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013010 <nan+0x8>
 801300c:	4770      	bx	lr
 801300e:	bf00      	nop
 8013010:	00000000 	.word	0x00000000
 8013014:	7ff80000 	.word	0x7ff80000

08013018 <__sread>:
 8013018:	b510      	push	{r4, lr}
 801301a:	460c      	mov	r4, r1
 801301c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013020:	f000 f904 	bl	801322c <_read_r>
 8013024:	2800      	cmp	r0, #0
 8013026:	bfab      	itete	ge
 8013028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801302a:	89a3      	ldrhlt	r3, [r4, #12]
 801302c:	181b      	addge	r3, r3, r0
 801302e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013032:	bfac      	ite	ge
 8013034:	6563      	strge	r3, [r4, #84]	; 0x54
 8013036:	81a3      	strhlt	r3, [r4, #12]
 8013038:	bd10      	pop	{r4, pc}

0801303a <__swrite>:
 801303a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801303e:	461f      	mov	r7, r3
 8013040:	898b      	ldrh	r3, [r1, #12]
 8013042:	05db      	lsls	r3, r3, #23
 8013044:	4605      	mov	r5, r0
 8013046:	460c      	mov	r4, r1
 8013048:	4616      	mov	r6, r2
 801304a:	d505      	bpl.n	8013058 <__swrite+0x1e>
 801304c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013050:	2302      	movs	r3, #2
 8013052:	2200      	movs	r2, #0
 8013054:	f000 f8b6 	bl	80131c4 <_lseek_r>
 8013058:	89a3      	ldrh	r3, [r4, #12]
 801305a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801305e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013062:	81a3      	strh	r3, [r4, #12]
 8013064:	4632      	mov	r2, r6
 8013066:	463b      	mov	r3, r7
 8013068:	4628      	mov	r0, r5
 801306a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801306e:	f000 b835 	b.w	80130dc <_write_r>

08013072 <__sseek>:
 8013072:	b510      	push	{r4, lr}
 8013074:	460c      	mov	r4, r1
 8013076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801307a:	f000 f8a3 	bl	80131c4 <_lseek_r>
 801307e:	1c43      	adds	r3, r0, #1
 8013080:	89a3      	ldrh	r3, [r4, #12]
 8013082:	bf15      	itete	ne
 8013084:	6560      	strne	r0, [r4, #84]	; 0x54
 8013086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801308a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801308e:	81a3      	strheq	r3, [r4, #12]
 8013090:	bf18      	it	ne
 8013092:	81a3      	strhne	r3, [r4, #12]
 8013094:	bd10      	pop	{r4, pc}

08013096 <__sclose>:
 8013096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801309a:	f000 b84f 	b.w	801313c <_close_r>

0801309e <strncmp>:
 801309e:	b510      	push	{r4, lr}
 80130a0:	b16a      	cbz	r2, 80130be <strncmp+0x20>
 80130a2:	3901      	subs	r1, #1
 80130a4:	1884      	adds	r4, r0, r2
 80130a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80130aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80130ae:	4293      	cmp	r3, r2
 80130b0:	d103      	bne.n	80130ba <strncmp+0x1c>
 80130b2:	42a0      	cmp	r0, r4
 80130b4:	d001      	beq.n	80130ba <strncmp+0x1c>
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d1f5      	bne.n	80130a6 <strncmp+0x8>
 80130ba:	1a98      	subs	r0, r3, r2
 80130bc:	bd10      	pop	{r4, pc}
 80130be:	4610      	mov	r0, r2
 80130c0:	e7fc      	b.n	80130bc <strncmp+0x1e>

080130c2 <__ascii_wctomb>:
 80130c2:	b149      	cbz	r1, 80130d8 <__ascii_wctomb+0x16>
 80130c4:	2aff      	cmp	r2, #255	; 0xff
 80130c6:	bf85      	ittet	hi
 80130c8:	238a      	movhi	r3, #138	; 0x8a
 80130ca:	6003      	strhi	r3, [r0, #0]
 80130cc:	700a      	strbls	r2, [r1, #0]
 80130ce:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80130d2:	bf98      	it	ls
 80130d4:	2001      	movls	r0, #1
 80130d6:	4770      	bx	lr
 80130d8:	4608      	mov	r0, r1
 80130da:	4770      	bx	lr

080130dc <_write_r>:
 80130dc:	b538      	push	{r3, r4, r5, lr}
 80130de:	4d07      	ldr	r5, [pc, #28]	; (80130fc <_write_r+0x20>)
 80130e0:	4604      	mov	r4, r0
 80130e2:	4608      	mov	r0, r1
 80130e4:	4611      	mov	r1, r2
 80130e6:	2200      	movs	r2, #0
 80130e8:	602a      	str	r2, [r5, #0]
 80130ea:	461a      	mov	r2, r3
 80130ec:	f000 f942 	bl	8013374 <_write>
 80130f0:	1c43      	adds	r3, r0, #1
 80130f2:	d102      	bne.n	80130fa <_write_r+0x1e>
 80130f4:	682b      	ldr	r3, [r5, #0]
 80130f6:	b103      	cbz	r3, 80130fa <_write_r+0x1e>
 80130f8:	6023      	str	r3, [r4, #0]
 80130fa:	bd38      	pop	{r3, r4, r5, pc}
 80130fc:	20009f68 	.word	0x20009f68

08013100 <__assert_func>:
 8013100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013102:	4614      	mov	r4, r2
 8013104:	461a      	mov	r2, r3
 8013106:	4b09      	ldr	r3, [pc, #36]	; (801312c <__assert_func+0x2c>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	4605      	mov	r5, r0
 801310c:	68d8      	ldr	r0, [r3, #12]
 801310e:	b14c      	cbz	r4, 8013124 <__assert_func+0x24>
 8013110:	4b07      	ldr	r3, [pc, #28]	; (8013130 <__assert_func+0x30>)
 8013112:	9100      	str	r1, [sp, #0]
 8013114:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013118:	4906      	ldr	r1, [pc, #24]	; (8013134 <__assert_func+0x34>)
 801311a:	462b      	mov	r3, r5
 801311c:	f000 f81e 	bl	801315c <fiprintf>
 8013120:	f000 f896 	bl	8013250 <abort>
 8013124:	4b04      	ldr	r3, [pc, #16]	; (8013138 <__assert_func+0x38>)
 8013126:	461c      	mov	r4, r3
 8013128:	e7f3      	b.n	8013112 <__assert_func+0x12>
 801312a:	bf00      	nop
 801312c:	20000a88 	.word	0x20000a88
 8013130:	0813d37d 	.word	0x0813d37d
 8013134:	0813d38a 	.word	0x0813d38a
 8013138:	0813ce7d 	.word	0x0813ce7d

0801313c <_close_r>:
 801313c:	b538      	push	{r3, r4, r5, lr}
 801313e:	4d06      	ldr	r5, [pc, #24]	; (8013158 <_close_r+0x1c>)
 8013140:	2300      	movs	r3, #0
 8013142:	4604      	mov	r4, r0
 8013144:	4608      	mov	r0, r1
 8013146:	602b      	str	r3, [r5, #0]
 8013148:	f000 f8ce 	bl	80132e8 <_close>
 801314c:	1c43      	adds	r3, r0, #1
 801314e:	d102      	bne.n	8013156 <_close_r+0x1a>
 8013150:	682b      	ldr	r3, [r5, #0]
 8013152:	b103      	cbz	r3, 8013156 <_close_r+0x1a>
 8013154:	6023      	str	r3, [r4, #0]
 8013156:	bd38      	pop	{r3, r4, r5, pc}
 8013158:	20009f68 	.word	0x20009f68

0801315c <fiprintf>:
 801315c:	b40e      	push	{r1, r2, r3}
 801315e:	b503      	push	{r0, r1, lr}
 8013160:	4601      	mov	r1, r0
 8013162:	ab03      	add	r3, sp, #12
 8013164:	4805      	ldr	r0, [pc, #20]	; (801317c <fiprintf+0x20>)
 8013166:	f853 2b04 	ldr.w	r2, [r3], #4
 801316a:	6800      	ldr	r0, [r0, #0]
 801316c:	9301      	str	r3, [sp, #4]
 801316e:	f7ff fe19 	bl	8012da4 <_vfiprintf_r>
 8013172:	b002      	add	sp, #8
 8013174:	f85d eb04 	ldr.w	lr, [sp], #4
 8013178:	b003      	add	sp, #12
 801317a:	4770      	bx	lr
 801317c:	20000a88 	.word	0x20000a88

08013180 <_fstat_r>:
 8013180:	b538      	push	{r3, r4, r5, lr}
 8013182:	4d07      	ldr	r5, [pc, #28]	; (80131a0 <_fstat_r+0x20>)
 8013184:	2300      	movs	r3, #0
 8013186:	4604      	mov	r4, r0
 8013188:	4608      	mov	r0, r1
 801318a:	4611      	mov	r1, r2
 801318c:	602b      	str	r3, [r5, #0]
 801318e:	f000 f8b3 	bl	80132f8 <_fstat>
 8013192:	1c43      	adds	r3, r0, #1
 8013194:	d102      	bne.n	801319c <_fstat_r+0x1c>
 8013196:	682b      	ldr	r3, [r5, #0]
 8013198:	b103      	cbz	r3, 801319c <_fstat_r+0x1c>
 801319a:	6023      	str	r3, [r4, #0]
 801319c:	bd38      	pop	{r3, r4, r5, pc}
 801319e:	bf00      	nop
 80131a0:	20009f68 	.word	0x20009f68

080131a4 <_isatty_r>:
 80131a4:	b538      	push	{r3, r4, r5, lr}
 80131a6:	4d06      	ldr	r5, [pc, #24]	; (80131c0 <_isatty_r+0x1c>)
 80131a8:	2300      	movs	r3, #0
 80131aa:	4604      	mov	r4, r0
 80131ac:	4608      	mov	r0, r1
 80131ae:	602b      	str	r3, [r5, #0]
 80131b0:	f000 f8b2 	bl	8013318 <_isatty>
 80131b4:	1c43      	adds	r3, r0, #1
 80131b6:	d102      	bne.n	80131be <_isatty_r+0x1a>
 80131b8:	682b      	ldr	r3, [r5, #0]
 80131ba:	b103      	cbz	r3, 80131be <_isatty_r+0x1a>
 80131bc:	6023      	str	r3, [r4, #0]
 80131be:	bd38      	pop	{r3, r4, r5, pc}
 80131c0:	20009f68 	.word	0x20009f68

080131c4 <_lseek_r>:
 80131c4:	b538      	push	{r3, r4, r5, lr}
 80131c6:	4d07      	ldr	r5, [pc, #28]	; (80131e4 <_lseek_r+0x20>)
 80131c8:	4604      	mov	r4, r0
 80131ca:	4608      	mov	r0, r1
 80131cc:	4611      	mov	r1, r2
 80131ce:	2200      	movs	r2, #0
 80131d0:	602a      	str	r2, [r5, #0]
 80131d2:	461a      	mov	r2, r3
 80131d4:	f000 f8b0 	bl	8013338 <_lseek>
 80131d8:	1c43      	adds	r3, r0, #1
 80131da:	d102      	bne.n	80131e2 <_lseek_r+0x1e>
 80131dc:	682b      	ldr	r3, [r5, #0]
 80131de:	b103      	cbz	r3, 80131e2 <_lseek_r+0x1e>
 80131e0:	6023      	str	r3, [r4, #0]
 80131e2:	bd38      	pop	{r3, r4, r5, pc}
 80131e4:	20009f68 	.word	0x20009f68

080131e8 <memmove>:
 80131e8:	4288      	cmp	r0, r1
 80131ea:	b510      	push	{r4, lr}
 80131ec:	eb01 0402 	add.w	r4, r1, r2
 80131f0:	d902      	bls.n	80131f8 <memmove+0x10>
 80131f2:	4284      	cmp	r4, r0
 80131f4:	4623      	mov	r3, r4
 80131f6:	d807      	bhi.n	8013208 <memmove+0x20>
 80131f8:	1e43      	subs	r3, r0, #1
 80131fa:	42a1      	cmp	r1, r4
 80131fc:	d008      	beq.n	8013210 <memmove+0x28>
 80131fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013202:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013206:	e7f8      	b.n	80131fa <memmove+0x12>
 8013208:	4402      	add	r2, r0
 801320a:	4601      	mov	r1, r0
 801320c:	428a      	cmp	r2, r1
 801320e:	d100      	bne.n	8013212 <memmove+0x2a>
 8013210:	bd10      	pop	{r4, pc}
 8013212:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013216:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801321a:	e7f7      	b.n	801320c <memmove+0x24>

0801321c <_malloc_usable_size_r>:
 801321c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013220:	1f18      	subs	r0, r3, #4
 8013222:	2b00      	cmp	r3, #0
 8013224:	bfbc      	itt	lt
 8013226:	580b      	ldrlt	r3, [r1, r0]
 8013228:	18c0      	addlt	r0, r0, r3
 801322a:	4770      	bx	lr

0801322c <_read_r>:
 801322c:	b538      	push	{r3, r4, r5, lr}
 801322e:	4d07      	ldr	r5, [pc, #28]	; (801324c <_read_r+0x20>)
 8013230:	4604      	mov	r4, r0
 8013232:	4608      	mov	r0, r1
 8013234:	4611      	mov	r1, r2
 8013236:	2200      	movs	r2, #0
 8013238:	602a      	str	r2, [r5, #0]
 801323a:	461a      	mov	r2, r3
 801323c:	f000 f884 	bl	8013348 <_read>
 8013240:	1c43      	adds	r3, r0, #1
 8013242:	d102      	bne.n	801324a <_read_r+0x1e>
 8013244:	682b      	ldr	r3, [r5, #0]
 8013246:	b103      	cbz	r3, 801324a <_read_r+0x1e>
 8013248:	6023      	str	r3, [r4, #0]
 801324a:	bd38      	pop	{r3, r4, r5, pc}
 801324c:	20009f68 	.word	0x20009f68

08013250 <abort>:
 8013250:	b508      	push	{r3, lr}
 8013252:	2006      	movs	r0, #6
 8013254:	f000 f82c 	bl	80132b0 <raise>
 8013258:	2001      	movs	r0, #1
 801325a:	f000 f893 	bl	8013384 <_exit>

0801325e <_raise_r>:
 801325e:	291f      	cmp	r1, #31
 8013260:	b538      	push	{r3, r4, r5, lr}
 8013262:	4604      	mov	r4, r0
 8013264:	460d      	mov	r5, r1
 8013266:	d904      	bls.n	8013272 <_raise_r+0x14>
 8013268:	2316      	movs	r3, #22
 801326a:	6003      	str	r3, [r0, #0]
 801326c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013270:	bd38      	pop	{r3, r4, r5, pc}
 8013272:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013274:	b112      	cbz	r2, 801327c <_raise_r+0x1e>
 8013276:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801327a:	b94b      	cbnz	r3, 8013290 <_raise_r+0x32>
 801327c:	4620      	mov	r0, r4
 801327e:	f000 f831 	bl	80132e4 <_getpid_r>
 8013282:	462a      	mov	r2, r5
 8013284:	4601      	mov	r1, r0
 8013286:	4620      	mov	r0, r4
 8013288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801328c:	f000 b818 	b.w	80132c0 <_kill_r>
 8013290:	2b01      	cmp	r3, #1
 8013292:	d00a      	beq.n	80132aa <_raise_r+0x4c>
 8013294:	1c59      	adds	r1, r3, #1
 8013296:	d103      	bne.n	80132a0 <_raise_r+0x42>
 8013298:	2316      	movs	r3, #22
 801329a:	6003      	str	r3, [r0, #0]
 801329c:	2001      	movs	r0, #1
 801329e:	e7e7      	b.n	8013270 <_raise_r+0x12>
 80132a0:	2400      	movs	r4, #0
 80132a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80132a6:	4628      	mov	r0, r5
 80132a8:	4798      	blx	r3
 80132aa:	2000      	movs	r0, #0
 80132ac:	e7e0      	b.n	8013270 <_raise_r+0x12>
	...

080132b0 <raise>:
 80132b0:	4b02      	ldr	r3, [pc, #8]	; (80132bc <raise+0xc>)
 80132b2:	4601      	mov	r1, r0
 80132b4:	6818      	ldr	r0, [r3, #0]
 80132b6:	f7ff bfd2 	b.w	801325e <_raise_r>
 80132ba:	bf00      	nop
 80132bc:	20000a88 	.word	0x20000a88

080132c0 <_kill_r>:
 80132c0:	b538      	push	{r3, r4, r5, lr}
 80132c2:	4d07      	ldr	r5, [pc, #28]	; (80132e0 <_kill_r+0x20>)
 80132c4:	2300      	movs	r3, #0
 80132c6:	4604      	mov	r4, r0
 80132c8:	4608      	mov	r0, r1
 80132ca:	4611      	mov	r1, r2
 80132cc:	602b      	str	r3, [r5, #0]
 80132ce:	f000 f82b 	bl	8013328 <_kill>
 80132d2:	1c43      	adds	r3, r0, #1
 80132d4:	d102      	bne.n	80132dc <_kill_r+0x1c>
 80132d6:	682b      	ldr	r3, [r5, #0]
 80132d8:	b103      	cbz	r3, 80132dc <_kill_r+0x1c>
 80132da:	6023      	str	r3, [r4, #0]
 80132dc:	bd38      	pop	{r3, r4, r5, pc}
 80132de:	bf00      	nop
 80132e0:	20009f68 	.word	0x20009f68

080132e4 <_getpid_r>:
 80132e4:	f000 b810 	b.w	8013308 <_getpid>

080132e8 <_close>:
 80132e8:	4b02      	ldr	r3, [pc, #8]	; (80132f4 <_close+0xc>)
 80132ea:	2258      	movs	r2, #88	; 0x58
 80132ec:	601a      	str	r2, [r3, #0]
 80132ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132f2:	4770      	bx	lr
 80132f4:	20009f68 	.word	0x20009f68

080132f8 <_fstat>:
 80132f8:	4b02      	ldr	r3, [pc, #8]	; (8013304 <_fstat+0xc>)
 80132fa:	2258      	movs	r2, #88	; 0x58
 80132fc:	601a      	str	r2, [r3, #0]
 80132fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013302:	4770      	bx	lr
 8013304:	20009f68 	.word	0x20009f68

08013308 <_getpid>:
 8013308:	4b02      	ldr	r3, [pc, #8]	; (8013314 <_getpid+0xc>)
 801330a:	2258      	movs	r2, #88	; 0x58
 801330c:	601a      	str	r2, [r3, #0]
 801330e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013312:	4770      	bx	lr
 8013314:	20009f68 	.word	0x20009f68

08013318 <_isatty>:
 8013318:	4b02      	ldr	r3, [pc, #8]	; (8013324 <_isatty+0xc>)
 801331a:	2258      	movs	r2, #88	; 0x58
 801331c:	601a      	str	r2, [r3, #0]
 801331e:	2000      	movs	r0, #0
 8013320:	4770      	bx	lr
 8013322:	bf00      	nop
 8013324:	20009f68 	.word	0x20009f68

08013328 <_kill>:
 8013328:	4b02      	ldr	r3, [pc, #8]	; (8013334 <_kill+0xc>)
 801332a:	2258      	movs	r2, #88	; 0x58
 801332c:	601a      	str	r2, [r3, #0]
 801332e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013332:	4770      	bx	lr
 8013334:	20009f68 	.word	0x20009f68

08013338 <_lseek>:
 8013338:	4b02      	ldr	r3, [pc, #8]	; (8013344 <_lseek+0xc>)
 801333a:	2258      	movs	r2, #88	; 0x58
 801333c:	601a      	str	r2, [r3, #0]
 801333e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013342:	4770      	bx	lr
 8013344:	20009f68 	.word	0x20009f68

08013348 <_read>:
 8013348:	4b02      	ldr	r3, [pc, #8]	; (8013354 <_read+0xc>)
 801334a:	2258      	movs	r2, #88	; 0x58
 801334c:	601a      	str	r2, [r3, #0]
 801334e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013352:	4770      	bx	lr
 8013354:	20009f68 	.word	0x20009f68

08013358 <_sbrk>:
 8013358:	4b04      	ldr	r3, [pc, #16]	; (801336c <_sbrk+0x14>)
 801335a:	6819      	ldr	r1, [r3, #0]
 801335c:	4602      	mov	r2, r0
 801335e:	b909      	cbnz	r1, 8013364 <_sbrk+0xc>
 8013360:	4903      	ldr	r1, [pc, #12]	; (8013370 <_sbrk+0x18>)
 8013362:	6019      	str	r1, [r3, #0]
 8013364:	6818      	ldr	r0, [r3, #0]
 8013366:	4402      	add	r2, r0
 8013368:	601a      	str	r2, [r3, #0]
 801336a:	4770      	bx	lr
 801336c:	20009ba8 	.word	0x20009ba8
 8013370:	20009f70 	.word	0x20009f70

08013374 <_write>:
 8013374:	4b02      	ldr	r3, [pc, #8]	; (8013380 <_write+0xc>)
 8013376:	2258      	movs	r2, #88	; 0x58
 8013378:	601a      	str	r2, [r3, #0]
 801337a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801337e:	4770      	bx	lr
 8013380:	20009f68 	.word	0x20009f68

08013384 <_exit>:
 8013384:	e7fe      	b.n	8013384 <_exit>
	...

08013388 <_init>:
 8013388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801338a:	bf00      	nop
 801338c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801338e:	bc08      	pop	{r3}
 8013390:	469e      	mov	lr, r3
 8013392:	4770      	bx	lr

08013394 <_fini>:
 8013394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013396:	bf00      	nop
 8013398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801339a:	bc08      	pop	{r3}
 801339c:	469e      	mov	lr, r3
 801339e:	4770      	bx	lr
