
ias0360-final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cad8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00017354  0800cca0  0800cca0  0001cca0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08023ff4  08023ff4  00033ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08023ffc  08023ffc  00033ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08024000  08024000  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000950  20000000  08024004  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00040950  2**0
                  CONTENTS
  8 .bss          0000ac1c  20000960  20000960  00040960  2**5
                  ALLOC
  9 ._user_heap_stack 00006004  2000b57c  2000b57c  00040960  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00040950  2**0
                  CONTENTS, READONLY
 11 .debug_info   00030cb8  00000000  00000000  00040980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000061b3  00000000  00000000  00071638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0001a0cd  00000000  00000000  000777eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  000918b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f78  00000000  00000000  00092fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a15b  00000000  00000000  00094f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cd2c  00000000  00000000  000bf083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6a53  00000000  00000000  000ebdaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000ce  00000000  00000000  001e2802  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f10  00000000  00000000  001e28d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001e87e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001e88ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000960 	.word	0x20000960
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cc70 	.word	0x0800cc70

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000964 	.word	0x20000964
 80001ec:	0800cc70 	.word	0x0800cc70

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 800100c:	20f0      	movs	r0, #240	; 0xf0
 800100e:	4770      	bx	lr

08001010 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8001010:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001014:	4770      	bx	lr

08001016 <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 8001016:	2029      	movs	r0, #41	; 0x29
 8001018:	f000 ba7a 	b.w	8001510 <LCD_IO_WriteReg>

0800101c <ili9341_DisplayOff>:
 800101c:	2028      	movs	r0, #40	; 0x28
 800101e:	f000 ba77 	b.w	8001510 <LCD_IO_WriteReg>

08001022 <ili9341_Init>:
{
 8001022:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8001024:	f000 f9fa 	bl	800141c <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8001028:	20ca      	movs	r0, #202	; 0xca
 800102a:	f000 fa71 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800102e:	20c3      	movs	r0, #195	; 0xc3
 8001030:	f000 fa52 	bl	80014d8 <LCD_IO_WriteData>
 8001034:	2008      	movs	r0, #8
 8001036:	f000 fa4f 	bl	80014d8 <LCD_IO_WriteData>
 800103a:	2050      	movs	r0, #80	; 0x50
 800103c:	f000 fa4c 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001040:	20cf      	movs	r0, #207	; 0xcf
 8001042:	f000 fa65 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001046:	2000      	movs	r0, #0
 8001048:	f000 fa46 	bl	80014d8 <LCD_IO_WriteData>
 800104c:	20c1      	movs	r0, #193	; 0xc1
 800104e:	f000 fa43 	bl	80014d8 <LCD_IO_WriteData>
 8001052:	2030      	movs	r0, #48	; 0x30
 8001054:	f000 fa40 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001058:	20ed      	movs	r0, #237	; 0xed
 800105a:	f000 fa59 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800105e:	2064      	movs	r0, #100	; 0x64
 8001060:	f000 fa3a 	bl	80014d8 <LCD_IO_WriteData>
 8001064:	2003      	movs	r0, #3
 8001066:	f000 fa37 	bl	80014d8 <LCD_IO_WriteData>
 800106a:	2012      	movs	r0, #18
 800106c:	f000 fa34 	bl	80014d8 <LCD_IO_WriteData>
 8001070:	2081      	movs	r0, #129	; 0x81
 8001072:	f000 fa31 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001076:	20e8      	movs	r0, #232	; 0xe8
 8001078:	f000 fa4a 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800107c:	2085      	movs	r0, #133	; 0x85
 800107e:	f000 fa2b 	bl	80014d8 <LCD_IO_WriteData>
 8001082:	2000      	movs	r0, #0
 8001084:	f000 fa28 	bl	80014d8 <LCD_IO_WriteData>
 8001088:	2078      	movs	r0, #120	; 0x78
 800108a:	f000 fa25 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800108e:	20cb      	movs	r0, #203	; 0xcb
 8001090:	f000 fa3e 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001094:	2039      	movs	r0, #57	; 0x39
 8001096:	f000 fa1f 	bl	80014d8 <LCD_IO_WriteData>
 800109a:	202c      	movs	r0, #44	; 0x2c
 800109c:	f000 fa1c 	bl	80014d8 <LCD_IO_WriteData>
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 fa19 	bl	80014d8 <LCD_IO_WriteData>
 80010a6:	2034      	movs	r0, #52	; 0x34
 80010a8:	f000 fa16 	bl	80014d8 <LCD_IO_WriteData>
 80010ac:	2002      	movs	r0, #2
 80010ae:	f000 fa13 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80010b2:	20f7      	movs	r0, #247	; 0xf7
 80010b4:	f000 fa2c 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80010b8:	2020      	movs	r0, #32
 80010ba:	f000 fa0d 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80010be:	20ea      	movs	r0, #234	; 0xea
 80010c0:	f000 fa26 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 fa07 	bl	80014d8 <LCD_IO_WriteData>
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 fa04 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80010d0:	20b1      	movs	r0, #177	; 0xb1
 80010d2:	f000 fa1d 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f9fe 	bl	80014d8 <LCD_IO_WriteData>
 80010dc:	201b      	movs	r0, #27
 80010de:	f000 f9fb 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80010e2:	20b6      	movs	r0, #182	; 0xb6
 80010e4:	f000 fa14 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80010e8:	200a      	movs	r0, #10
 80010ea:	f000 f9f5 	bl	80014d8 <LCD_IO_WriteData>
 80010ee:	20a2      	movs	r0, #162	; 0xa2
 80010f0:	f000 f9f2 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80010f4:	20c0      	movs	r0, #192	; 0xc0
 80010f6:	f000 fa0b 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80010fa:	2010      	movs	r0, #16
 80010fc:	f000 f9ec 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001100:	20c1      	movs	r0, #193	; 0xc1
 8001102:	f000 fa05 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001106:	2010      	movs	r0, #16
 8001108:	f000 f9e6 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800110c:	20c5      	movs	r0, #197	; 0xc5
 800110e:	f000 f9ff 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001112:	2045      	movs	r0, #69	; 0x45
 8001114:	f000 f9e0 	bl	80014d8 <LCD_IO_WriteData>
 8001118:	2015      	movs	r0, #21
 800111a:	f000 f9dd 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800111e:	20c7      	movs	r0, #199	; 0xc7
 8001120:	f000 f9f6 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001124:	2090      	movs	r0, #144	; 0x90
 8001126:	f000 f9d7 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800112a:	2036      	movs	r0, #54	; 0x36
 800112c:	f000 f9f0 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001130:	20c8      	movs	r0, #200	; 0xc8
 8001132:	f000 f9d1 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001136:	20f2      	movs	r0, #242	; 0xf2
 8001138:	f000 f9ea 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800113c:	2000      	movs	r0, #0
 800113e:	f000 f9cb 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001142:	20b0      	movs	r0, #176	; 0xb0
 8001144:	f000 f9e4 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001148:	20c2      	movs	r0, #194	; 0xc2
 800114a:	f000 f9c5 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800114e:	20b6      	movs	r0, #182	; 0xb6
 8001150:	f000 f9de 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001154:	200a      	movs	r0, #10
 8001156:	f000 f9bf 	bl	80014d8 <LCD_IO_WriteData>
 800115a:	20a7      	movs	r0, #167	; 0xa7
 800115c:	f000 f9bc 	bl	80014d8 <LCD_IO_WriteData>
 8001160:	2027      	movs	r0, #39	; 0x27
 8001162:	f000 f9b9 	bl	80014d8 <LCD_IO_WriteData>
 8001166:	2004      	movs	r0, #4
 8001168:	f000 f9b6 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800116c:	202a      	movs	r0, #42	; 0x2a
 800116e:	f000 f9cf 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001172:	2000      	movs	r0, #0
 8001174:	f000 f9b0 	bl	80014d8 <LCD_IO_WriteData>
 8001178:	2000      	movs	r0, #0
 800117a:	f000 f9ad 	bl	80014d8 <LCD_IO_WriteData>
 800117e:	2000      	movs	r0, #0
 8001180:	f000 f9aa 	bl	80014d8 <LCD_IO_WriteData>
 8001184:	20ef      	movs	r0, #239	; 0xef
 8001186:	f000 f9a7 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800118a:	202b      	movs	r0, #43	; 0x2b
 800118c:	f000 f9c0 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8001190:	2000      	movs	r0, #0
 8001192:	f000 f9a1 	bl	80014d8 <LCD_IO_WriteData>
 8001196:	2000      	movs	r0, #0
 8001198:	f000 f99e 	bl	80014d8 <LCD_IO_WriteData>
 800119c:	2001      	movs	r0, #1
 800119e:	f000 f99b 	bl	80014d8 <LCD_IO_WriteData>
 80011a2:	203f      	movs	r0, #63	; 0x3f
 80011a4:	f000 f998 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80011a8:	20f6      	movs	r0, #246	; 0xf6
 80011aa:	f000 f9b1 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f000 f992 	bl	80014d8 <LCD_IO_WriteData>
 80011b4:	2000      	movs	r0, #0
 80011b6:	f000 f98f 	bl	80014d8 <LCD_IO_WriteData>
 80011ba:	2006      	movs	r0, #6
 80011bc:	f000 f98c 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80011c0:	202c      	movs	r0, #44	; 0x2c
 80011c2:	f000 f9a5 	bl	8001510 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80011c6:	20c8      	movs	r0, #200	; 0xc8
 80011c8:	f000 f9f4 	bl	80015b4 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80011cc:	2026      	movs	r0, #38	; 0x26
 80011ce:	f000 f99f 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80011d2:	2001      	movs	r0, #1
 80011d4:	f000 f980 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80011d8:	20e0      	movs	r0, #224	; 0xe0
 80011da:	f000 f999 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80011de:	200f      	movs	r0, #15
 80011e0:	f000 f97a 	bl	80014d8 <LCD_IO_WriteData>
 80011e4:	2029      	movs	r0, #41	; 0x29
 80011e6:	f000 f977 	bl	80014d8 <LCD_IO_WriteData>
 80011ea:	2024      	movs	r0, #36	; 0x24
 80011ec:	f000 f974 	bl	80014d8 <LCD_IO_WriteData>
 80011f0:	200c      	movs	r0, #12
 80011f2:	f000 f971 	bl	80014d8 <LCD_IO_WriteData>
 80011f6:	200e      	movs	r0, #14
 80011f8:	f000 f96e 	bl	80014d8 <LCD_IO_WriteData>
 80011fc:	2009      	movs	r0, #9
 80011fe:	f000 f96b 	bl	80014d8 <LCD_IO_WriteData>
 8001202:	204e      	movs	r0, #78	; 0x4e
 8001204:	f000 f968 	bl	80014d8 <LCD_IO_WriteData>
 8001208:	2078      	movs	r0, #120	; 0x78
 800120a:	f000 f965 	bl	80014d8 <LCD_IO_WriteData>
 800120e:	203c      	movs	r0, #60	; 0x3c
 8001210:	f000 f962 	bl	80014d8 <LCD_IO_WriteData>
 8001214:	2009      	movs	r0, #9
 8001216:	f000 f95f 	bl	80014d8 <LCD_IO_WriteData>
 800121a:	2013      	movs	r0, #19
 800121c:	f000 f95c 	bl	80014d8 <LCD_IO_WriteData>
 8001220:	2005      	movs	r0, #5
 8001222:	f000 f959 	bl	80014d8 <LCD_IO_WriteData>
 8001226:	2017      	movs	r0, #23
 8001228:	f000 f956 	bl	80014d8 <LCD_IO_WriteData>
 800122c:	2011      	movs	r0, #17
 800122e:	f000 f953 	bl	80014d8 <LCD_IO_WriteData>
 8001232:	2000      	movs	r0, #0
 8001234:	f000 f950 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001238:	20e1      	movs	r0, #225	; 0xe1
 800123a:	f000 f969 	bl	8001510 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f94a 	bl	80014d8 <LCD_IO_WriteData>
 8001244:	2016      	movs	r0, #22
 8001246:	f000 f947 	bl	80014d8 <LCD_IO_WriteData>
 800124a:	201b      	movs	r0, #27
 800124c:	f000 f944 	bl	80014d8 <LCD_IO_WriteData>
 8001250:	2004      	movs	r0, #4
 8001252:	f000 f941 	bl	80014d8 <LCD_IO_WriteData>
 8001256:	2011      	movs	r0, #17
 8001258:	f000 f93e 	bl	80014d8 <LCD_IO_WriteData>
 800125c:	2007      	movs	r0, #7
 800125e:	f000 f93b 	bl	80014d8 <LCD_IO_WriteData>
 8001262:	2031      	movs	r0, #49	; 0x31
 8001264:	f000 f938 	bl	80014d8 <LCD_IO_WriteData>
 8001268:	2033      	movs	r0, #51	; 0x33
 800126a:	f000 f935 	bl	80014d8 <LCD_IO_WriteData>
 800126e:	2042      	movs	r0, #66	; 0x42
 8001270:	f000 f932 	bl	80014d8 <LCD_IO_WriteData>
 8001274:	2005      	movs	r0, #5
 8001276:	f000 f92f 	bl	80014d8 <LCD_IO_WriteData>
 800127a:	200c      	movs	r0, #12
 800127c:	f000 f92c 	bl	80014d8 <LCD_IO_WriteData>
 8001280:	200a      	movs	r0, #10
 8001282:	f000 f929 	bl	80014d8 <LCD_IO_WriteData>
 8001286:	2028      	movs	r0, #40	; 0x28
 8001288:	f000 f926 	bl	80014d8 <LCD_IO_WriteData>
 800128c:	202f      	movs	r0, #47	; 0x2f
 800128e:	f000 f923 	bl	80014d8 <LCD_IO_WriteData>
 8001292:	200f      	movs	r0, #15
 8001294:	f000 f920 	bl	80014d8 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8001298:	2011      	movs	r0, #17
 800129a:	f000 f939 	bl	8001510 <LCD_IO_WriteReg>
  LCD_Delay(200);
 800129e:	20c8      	movs	r0, #200	; 0xc8
 80012a0:	f000 f988 	bl	80015b4 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80012a4:	2029      	movs	r0, #41	; 0x29
 80012a6:	f000 f933 	bl	8001510 <LCD_IO_WriteReg>
}
 80012aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 80012ae:	202c      	movs	r0, #44	; 0x2c
 80012b0:	f000 b92e 	b.w	8001510 <LCD_IO_WriteReg>

080012b4 <ili9341_ReadID>:
{
 80012b4:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80012b6:	f000 f8b1 	bl	800141c <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80012ba:	2103      	movs	r1, #3
 80012bc:	20d3      	movs	r0, #211	; 0xd3
 80012be:	f000 f943 	bl	8001548 <LCD_IO_ReadData>
}
 80012c2:	b280      	uxth	r0, r0
 80012c4:	bd08      	pop	{r3, pc}
	...

080012c8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 80012c8:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80012ca:	4c21      	ldr	r4, [pc, #132]	; (8001350 <SPIx_Init+0x88>)
{
 80012cc:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80012ce:	4620      	mov	r0, r4
 80012d0:	f002 fbb2 	bl	8003a38 <HAL_SPI_GetState>
 80012d4:	2800      	cmp	r0, #0
 80012d6:	d138      	bne.n	800134a <SPIx_Init+0x82>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <SPIx_Init+0x8c>)
 80012da:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80012dc:	2318      	movs	r3, #24
 80012de:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 80012e0:	2307      	movs	r3, #7
 80012e2:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80012e4:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80012e8:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80012ec:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80012ee:	f44f 7382 	mov.w	r3, #260	; 0x104
 80012f2:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80012f4:	4b18      	ldr	r3, [pc, #96]	; (8001358 <SPIx_Init+0x90>)
 80012f6:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80012f8:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80012fa:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80012fc:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80012fe:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001300:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 8001302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001304:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001308:	645a      	str	r2, [r3, #68]	; 0x44
 800130a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800130c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001310:	9201      	str	r2, [sp, #4]
 8001312:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001314:	9002      	str	r0, [sp, #8]
 8001316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001318:	f042 0220 	orr.w	r2, r2, #32
 800131c:	631a      	str	r2, [r3, #48]	; 0x30
 800131e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	9302      	str	r3, [sp, #8]
 8001326:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001328:	f44f 7160 	mov.w	r1, #896	; 0x380
 800132c:	2302      	movs	r3, #2
 800132e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001332:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001334:	2001      	movs	r0, #1
 8001336:	2305      	movs	r3, #5
 8001338:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800133c:	a903      	add	r1, sp, #12
 800133e:	4807      	ldr	r0, [pc, #28]	; (800135c <SPIx_Init+0x94>)
 8001340:	f001 f818 	bl	8002374 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8001344:	4620      	mov	r0, r4
 8001346:	f002 f8cd 	bl	80034e4 <HAL_SPI_Init>
}
 800134a:	b008      	add	sp, #32
 800134c:	bd10      	pop	{r4, pc}
 800134e:	bf00      	nop
 8001350:	2000097c 	.word	0x2000097c
 8001354:	40015000 	.word	0x40015000
 8001358:	40023800 	.word	0x40023800
 800135c:	40021400 	.word	0x40021400

08001360 <SPIx_Write>:
{
 8001360:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <SPIx_Write+0x28>)
{
 8001364:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <SPIx_Write+0x2c>)
 800136c:	2201      	movs	r2, #1
 800136e:	f10d 0106 	add.w	r1, sp, #6
 8001372:	f002 f929 	bl	80035c8 <HAL_SPI_Transmit>
  if(status != HAL_OK)
 8001376:	b120      	cbz	r0, 8001382 <SPIx_Write+0x22>
  HAL_SPI_DeInit(&SpiHandle);
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <SPIx_Write+0x2c>)
 800137a:	f002 f90f 	bl	800359c <HAL_SPI_DeInit>
  SPIx_Init();
 800137e:	f7ff ffa3 	bl	80012c8 <SPIx_Init>
}
 8001382:	b003      	add	sp, #12
 8001384:	f85d fb04 	ldr.w	pc, [sp], #4
 8001388:	20000038 	.word	0x20000038
 800138c:	2000097c 	.word	0x2000097c

08001390 <BSP_PB_Init>:
{
 8001390:	b510      	push	{r4, lr}
 8001392:	b086      	sub	sp, #24
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001394:	b950      	cbnz	r0, 80013ac <BSP_PB_Init+0x1c>
 8001396:	4b19      	ldr	r3, [pc, #100]	; (80013fc <BSP_PB_Init+0x6c>)
 8001398:	9000      	str	r0, [sp, #0]
 800139a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800139c:	f042 0201 	orr.w	r2, r2, #1
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	9b00      	ldr	r3, [sp, #0]
  if (ButtonMode == BUTTON_MODE_GPIO)
 80013ac:	b971      	cbnz	r1, 80013cc <BSP_PB_Init+0x3c>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80013ae:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	e9cd 3101 	strd	r3, r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013b4:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80013b6:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <BSP_PB_Init+0x70>)
 80013bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80013c0:	a901      	add	r1, sp, #4
 80013c2:	68c0      	ldr	r0, [r0, #12]
 80013c4:	f000 ffd6 	bl	8002374 <HAL_GPIO_Init>
}
 80013c8:	b006      	add	sp, #24
 80013ca:	bd10      	pop	{r4, pc}
  if (ButtonMode == BUTTON_MODE_EXTI)
 80013cc:	2901      	cmp	r1, #1
 80013ce:	d1fb      	bne.n	80013c8 <BSP_PB_Init+0x38>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 80013d0:	2400      	movs	r4, #0
 80013d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <BSP_PB_Init+0x70>)
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 80013dc:	9101      	str	r1, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 80013de:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80013e2:	a901      	add	r1, sp, #4
 80013e4:	68c0      	ldr	r0, [r0, #12]
 80013e6:	f000 ffc5 	bl	8002374 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80013ea:	4622      	mov	r2, r4
 80013ec:	210f      	movs	r1, #15
 80013ee:	2006      	movs	r0, #6
 80013f0:	f000 fd62 	bl	8001eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80013f4:	2006      	movs	r0, #6
 80013f6:	f000 fd91 	bl	8001f1c <HAL_NVIC_EnableIRQ>
}
 80013fa:	e7e5      	b.n	80013c8 <BSP_PB_Init+0x38>
 80013fc:	40023800 	.word	0x40023800
 8001400:	20000038 	.word	0x20000038

08001404 <BSP_PB_GetState>:
{
 8001404:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001406:	4b04      	ldr	r3, [pc, #16]	; (8001418 <BSP_PB_GetState+0x14>)
 8001408:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800140c:	2101      	movs	r1, #1
 800140e:	68c0      	ldr	r0, [r0, #12]
 8001410:	f001 f938 	bl	8002684 <HAL_GPIO_ReadPin>
}
 8001414:	bd08      	pop	{r3, pc}
 8001416:	bf00      	nop
 8001418:	20000038 	.word	0x20000038

0800141c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800141c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 800141e:	4b2a      	ldr	r3, [pc, #168]	; (80014c8 <LCD_IO_Init+0xac>)
 8001420:	f893 5058 	ldrb.w	r5, [r3, #88]	; 0x58
{
 8001424:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 8001426:	2d00      	cmp	r5, #0
 8001428:	d14b      	bne.n	80014c2 <LCD_IO_Init+0xa6>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 800142a:	4c28      	ldr	r4, [pc, #160]	; (80014cc <LCD_IO_Init+0xb0>)
 800142c:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 800142e:	2601      	movs	r6, #1
 8001430:	f883 6058 	strb.w	r6, [r3, #88]	; 0x58
    LCD_WRX_GPIO_CLK_ENABLE();
 8001434:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001436:	4826      	ldr	r0, [pc, #152]	; (80014d0 <LCD_IO_Init+0xb4>)
    LCD_WRX_GPIO_CLK_ENABLE();
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6323      	str	r3, [r4, #48]	; 0x30
 800143e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001440:	9505      	str	r5, [sp, #20]
    LCD_WRX_GPIO_CLK_ENABLE();
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001448:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 800144a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800144c:	9706      	str	r7, [sp, #24]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800144e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001452:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001454:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001458:	f000 ff8c 	bl	8002374 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800145c:	9501      	str	r5, [sp, #4]
 800145e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001460:	481b      	ldr	r0, [pc, #108]	; (80014d0 <LCD_IO_Init+0xb4>)
    LCD_RDX_GPIO_CLK_ENABLE();
 8001462:	f043 0308 	orr.w	r3, r3, #8
 8001466:	6323      	str	r3, [r4, #48]	; 0x30
 8001468:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001472:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001478:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800147c:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001480:	f000 ff78 	bl	8002374 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001484:	9502      	str	r5, [sp, #8]
 8001486:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001488:	4812      	ldr	r0, [pc, #72]	; (80014d4 <LCD_IO_Init+0xb8>)
    LCD_NCS_GPIO_CLK_ENABLE();
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	6323      	str	r3, [r4, #48]	; 0x30
 8001490:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001492:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001496:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 8001498:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800149a:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 800149c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800149e:	e9cd 4603 	strd	r4, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80014a2:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80014a6:	f000 ff65 	bl	8002374 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 80014aa:	480a      	ldr	r0, [pc, #40]	; (80014d4 <LCD_IO_Init+0xb8>)
 80014ac:	462a      	mov	r2, r5
 80014ae:	4621      	mov	r1, r4
 80014b0:	f001 f8ee 	bl	8002690 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80014b4:	4807      	ldr	r0, [pc, #28]	; (80014d4 <LCD_IO_Init+0xb8>)
 80014b6:	4632      	mov	r2, r6
 80014b8:	4621      	mov	r1, r4
 80014ba:	f001 f8e9 	bl	8002690 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 80014be:	f7ff ff03 	bl	80012c8 <SPIx_Init>
  }
}
 80014c2:	b009      	add	sp, #36	; 0x24
 80014c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000097c 	.word	0x2000097c
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40020c00 	.word	0x40020c00
 80014d4:	40020800 	.word	0x40020800

080014d8 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80014d8:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 80014da:	4d0b      	ldr	r5, [pc, #44]	; (8001508 <LCD_IO_WriteData+0x30>)
{
 80014dc:	4604      	mov	r4, r0
  LCD_WRX_HIGH();
 80014de:	2201      	movs	r2, #1
 80014e0:	480a      	ldr	r0, [pc, #40]	; (800150c <LCD_IO_WriteData+0x34>)
 80014e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014e6:	f001 f8d3 	bl	8002690 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 80014ea:	2200      	movs	r2, #0
 80014ec:	2104      	movs	r1, #4
 80014ee:	4628      	mov	r0, r5
 80014f0:	f001 f8ce 	bl	8002690 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 80014f4:	4620      	mov	r0, r4
 80014f6:	f7ff ff33 	bl	8001360 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80014fa:	4628      	mov	r0, r5
 80014fc:	2201      	movs	r2, #1
}
 80014fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8001502:	2104      	movs	r1, #4
 8001504:	f001 b8c4 	b.w	8002690 <HAL_GPIO_WritePin>
 8001508:	40020800 	.word	0x40020800
 800150c:	40020c00 	.word	0x40020c00

08001510 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001510:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001512:	4d0b      	ldr	r5, [pc, #44]	; (8001540 <LCD_IO_WriteReg+0x30>)
{
 8001514:	4604      	mov	r4, r0
  LCD_WRX_LOW();
 8001516:	2200      	movs	r2, #0
 8001518:	480a      	ldr	r0, [pc, #40]	; (8001544 <LCD_IO_WriteReg+0x34>)
 800151a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800151e:	f001 f8b7 	bl	8002690 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8001522:	2200      	movs	r2, #0
 8001524:	2104      	movs	r1, #4
 8001526:	4628      	mov	r0, r5
 8001528:	f001 f8b2 	bl	8002690 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 800152c:	4620      	mov	r0, r4
 800152e:	f7ff ff17 	bl	8001360 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001532:	4628      	mov	r0, r5
 8001534:	2201      	movs	r2, #1
}
 8001536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 800153a:	2104      	movs	r1, #4
 800153c:	f001 b8a8 	b.w	8002690 <HAL_GPIO_WritePin>
 8001540:	40020800 	.word	0x40020800
 8001544:	40020c00 	.word	0x40020c00

08001548 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800154a:	4605      	mov	r5, r0
 800154c:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800154e:	4815      	ldr	r0, [pc, #84]	; (80015a4 <LCD_IO_ReadData+0x5c>)
 8001550:	2200      	movs	r2, #0
 8001552:	2104      	movs	r1, #4
 8001554:	f001 f89c 	bl	8002690 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001558:	2200      	movs	r2, #0
 800155a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155e:	4812      	ldr	r0, [pc, #72]	; (80015a8 <LCD_IO_ReadData+0x60>)
 8001560:	f001 f896 	bl	8002690 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001564:	4628      	mov	r0, r5
 8001566:	f7ff fefb 	bl	8001360 <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <LCD_IO_ReadData+0x64>)
 800156c:	4810      	ldr	r0, [pc, #64]	; (80015b0 <LCD_IO_ReadData+0x68>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4622      	mov	r2, r4
 8001572:	a901      	add	r1, sp, #4
 8001574:	f002 f9c4 	bl	8003900 <HAL_SPI_Receive>
  if(status != HAL_OK)
 8001578:	b120      	cbz	r0, 8001584 <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 800157a:	480d      	ldr	r0, [pc, #52]	; (80015b0 <LCD_IO_ReadData+0x68>)
 800157c:	f002 f80e 	bl	800359c <HAL_SPI_DeInit>
  SPIx_Init();
 8001580:	f7ff fea2 	bl	80012c8 <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <LCD_IO_ReadData+0x60>)
  return readvalue;
 8001586:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158e:	f001 f87f 	bl	8002690 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <LCD_IO_ReadData+0x5c>)
 8001594:	2201      	movs	r2, #1
 8001596:	2104      	movs	r1, #4
 8001598:	f001 f87a 	bl	8002690 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 800159c:	4620      	mov	r0, r4
 800159e:	b003      	add	sp, #12
 80015a0:	bd30      	pop	{r4, r5, pc}
 80015a2:	bf00      	nop
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	20000038 	.word	0x20000038
 80015b0:	2000097c 	.word	0x2000097c

080015b4 <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80015b4:	f000 bc5a 	b.w	8001e6c <HAL_Delay>

080015b8 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80015b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80015bc:	4c15      	ldr	r4, [pc, #84]	; (8001614 <FillBuffer+0x5c>)
{
 80015be:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80015c2:	4616      	mov	r6, r2
 80015c4:	461f      	mov	r7, r3
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80015c6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80015ca:	2300      	movs	r3, #0
 80015cc:	e9c4 2301 	strd	r2, r3, [r4, #4]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80015d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015d2:	60e3      	str	r3, [r4, #12]
{
 80015d4:	4680      	mov	r8, r0
  
  Dma2dHandler.Instance = DMA2D; 
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <FillBuffer+0x60>)
 80015d8:	6023      	str	r3, [r4, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80015da:	4620      	mov	r0, r4
{
 80015dc:	460d      	mov	r5, r1
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80015de:	f000 fdbd 	bl	800215c <HAL_DMA2D_Init>
 80015e2:	b998      	cbnz	r0, 800160c <FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80015e4:	4641      	mov	r1, r8
 80015e6:	4620      	mov	r0, r4
 80015e8:	f000 fe80 	bl	80022ec <HAL_DMA2D_ConfigLayer>
 80015ec:	b970      	cbnz	r0, 800160c <FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80015ee:	9700      	str	r7, [sp, #0]
 80015f0:	4633      	mov	r3, r6
 80015f2:	462a      	mov	r2, r5
 80015f4:	4649      	mov	r1, r9
 80015f6:	4620      	mov	r0, r4
 80015f8:	f000 fddc 	bl	80021b4 <HAL_DMA2D_Start>
 80015fc:	b930      	cbnz	r0, 800160c <FillBuffer+0x54>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 80015fe:	210a      	movs	r1, #10
 8001600:	4620      	mov	r0, r4
      }
    }
  } 
}
 8001602:	b003      	add	sp, #12
 8001604:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001608:	f000 bdee 	b.w	80021e8 <HAL_DMA2D_PollForTransfer>
}
 800160c:	b003      	add	sp, #12
 800160e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001612:	bf00      	nop
 8001614:	200009d8 	.word	0x200009d8
 8001618:	4002b000 	.word	0x4002b000

0800161c <BSP_LCD_GetXSize>:
{
 800161c:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 800161e:	4b02      	ldr	r3, [pc, #8]	; (8001628 <BSP_LCD_GetXSize+0xc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001624:	4798      	blx	r3
}
 8001626:	bd08      	pop	{r3, pc}
 8001628:	2000b2c0 	.word	0x2000b2c0

0800162c <BSP_LCD_GetYSize>:
{
 800162c:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 800162e:	4b02      	ldr	r3, [pc, #8]	; (8001638 <BSP_LCD_GetYSize+0xc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	4798      	blx	r3
}
 8001636:	bd08      	pop	{r3, pc}
 8001638:	2000b2c0 	.word	0x2000b2c0

0800163c <BSP_LCD_LayerDefaultInit>:
{     
 800163c:	b570      	push	{r4, r5, r6, lr}
 800163e:	b08e      	sub	sp, #56	; 0x38
  Layercfg.WindowX0 = 0;
 8001640:	2500      	movs	r5, #0
{     
 8001642:	460e      	mov	r6, r1
 8001644:	4604      	mov	r4, r0
  Layercfg.WindowX0 = 0;
 8001646:	9501      	str	r5, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001648:	f7ff ffe8 	bl	800161c <BSP_LCD_GetXSize>
  Layercfg.WindowY0 = 0;
 800164c:	e9cd 0502 	strd	r0, r5, [sp, #8]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001650:	f7ff ffec 	bl	800162c <BSP_LCD_GetYSize>
  Layercfg.Alpha = 255;
 8001654:	23ff      	movs	r3, #255	; 0xff
  Layercfg.Alpha0 = 0;
 8001656:	e9cd 3506 	strd	r3, r5, [sp, #24]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800165a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800165e:	2307      	movs	r3, #7
 8001660:	e9cd 2308 	strd	r2, r3, [sp, #32]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001664:	e9cd 0504 	strd	r0, r5, [sp, #16]
  Layercfg.Backcolor.Blue = 0;
 8001668:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
  Layercfg.Backcolor.Red = 0;
 800166c:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  Layercfg.FBStartAdress = FB_Address;
 8001670:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001672:	f7ff ffd3 	bl	800161c <BSP_LCD_GetXSize>
 8001676:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001678:	f7ff ffd8 	bl	800162c <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800167c:	4d0b      	ldr	r5, [pc, #44]	; (80016ac <BSP_LCD_LayerDefaultInit+0x70>)
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800167e:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001680:	4622      	mov	r2, r4
 8001682:	a901      	add	r1, sp, #4
 8001684:	4628      	mov	r0, r5
 8001686:	f001 f9e1 	bl	8002a4c <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800168a:	4809      	ldr	r0, [pc, #36]	; (80016b0 <BSP_LCD_LayerDefaultInit+0x74>)
 800168c:	220c      	movs	r2, #12
 800168e:	fb02 0004 	mla	r0, r2, r4, r0
 8001692:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001696:	6443      	str	r3, [r0, #68]	; 0x44
  DrawProp[LayerIndex].pFont     = &Font24;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <BSP_LCD_LayerDefaultInit+0x78>)
 800169a:	6483      	str	r3, [r0, #72]	; 0x48
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 800169c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80016a0:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_LTDC_EnableDither(&LtdcHandler);
 80016a2:	4628      	mov	r0, r5
 80016a4:	f001 fa34 	bl	8002b10 <HAL_LTDC_EnableDither>
}
 80016a8:	b00e      	add	sp, #56	; 0x38
 80016aa:	bd70      	pop	{r4, r5, r6, pc}
 80016ac:	2000b218 	.word	0x2000b218
 80016b0:	200009d8 	.word	0x200009d8
 80016b4:	2000004c 	.word	0x2000004c

080016b8 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80016b8:	4b01      	ldr	r3, [pc, #4]	; (80016c0 <BSP_LCD_SelectLayer+0x8>)
 80016ba:	6598      	str	r0, [r3, #88]	; 0x58
}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	200009d8 	.word	0x200009d8

080016c4 <BSP_LCD_SetLayerVisible>:
  if(state == ENABLE)
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <BSP_LCD_SetLayerVisible+0x24>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	01c0      	lsls	r0, r0, #7
 80016ca:	f102 0384 	add.w	r3, r2, #132	; 0x84
 80016ce:	2901      	cmp	r1, #1
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 80016d0:	58c1      	ldr	r1, [r0, r3]
 80016d2:	bf0c      	ite	eq
 80016d4:	f041 0101 	orreq.w	r1, r1, #1
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 80016d8:	f021 0101 	bicne.w	r1, r1, #1
 80016dc:	50c1      	str	r1, [r0, r3]
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 80016de:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80016e6:	4770      	bx	lr
 80016e8:	2000b218 	.word	0x2000b218

080016ec <BSP_LCD_SetColorKeying>:
{  
 80016ec:	b538      	push	{r3, r4, r5, lr}
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 80016ee:	4d06      	ldr	r5, [pc, #24]	; (8001708 <BSP_LCD_SetColorKeying+0x1c>)
{  
 80016f0:	4604      	mov	r4, r0
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 80016f2:	4602      	mov	r2, r0
 80016f4:	4628      	mov	r0, r5
 80016f6:	f001 f9d6 	bl	8002aa6 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 80016fa:	4621      	mov	r1, r4
 80016fc:	4628      	mov	r0, r5
}
 80016fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8001702:	f001 b9ed 	b.w	8002ae0 <HAL_LTDC_EnableColorKeying>
 8001706:	bf00      	nop
 8001708:	2000b218 	.word	0x2000b218

0800170c <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 800170c:	4a03      	ldr	r2, [pc, #12]	; (800171c <BSP_LCD_SetTextColor+0x10>)
 800170e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001710:	210c      	movs	r1, #12
 8001712:	fb01 2303 	mla	r3, r1, r3, r2
 8001716:	6418      	str	r0, [r3, #64]	; 0x40
}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200009d8 	.word	0x200009d8

08001720 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8001720:	4a03      	ldr	r2, [pc, #12]	; (8001730 <BSP_LCD_SetBackColor+0x10>)
 8001722:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001724:	210c      	movs	r1, #12
 8001726:	fb01 2303 	mla	r3, r1, r3, r2
 800172a:	6458      	str	r0, [r3, #68]	; 0x44
}
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	200009d8 	.word	0x200009d8

08001734 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 8001734:	4a03      	ldr	r2, [pc, #12]	; (8001744 <BSP_LCD_SetFont+0x10>)
 8001736:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001738:	210c      	movs	r1, #12
 800173a:	fb01 2303 	mla	r3, r1, r3, r2
 800173e:	6498      	str	r0, [r3, #72]	; 0x48
}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	200009d8 	.word	0x200009d8

08001748 <BSP_LCD_Clear>:
{ 
 8001748:	b530      	push	{r4, r5, lr}
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <BSP_LCD_Clear+0x38>)
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <BSP_LCD_Clear+0x3c>)
 800174e:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8001750:	2334      	movs	r3, #52	; 0x34
 8001752:	fb03 2305 	mla	r3, r3, r5, r2
{ 
 8001756:	b085      	sub	sp, #20
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001758:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800175a:	9103      	str	r1, [sp, #12]
{ 
 800175c:	4604      	mov	r4, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800175e:	f7ff ff5d 	bl	800161c <BSP_LCD_GetXSize>
 8001762:	9002      	str	r0, [sp, #8]
 8001764:	f7ff ff62 	bl	800162c <BSP_LCD_GetYSize>
 8001768:	4603      	mov	r3, r0
 800176a:	2000      	movs	r0, #0
 800176c:	9000      	str	r0, [sp, #0]
 800176e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8001772:	9401      	str	r4, [sp, #4]
 8001774:	4628      	mov	r0, r5
 8001776:	f7ff ff1f 	bl	80015b8 <FillBuffer>
}
 800177a:	b005      	add	sp, #20
 800177c:	bd30      	pop	{r4, r5, pc}
 800177e:	bf00      	nop
 8001780:	200009d8 	.word	0x200009d8
 8001784:	2000b218 	.word	0x2000b218

08001788 <BSP_LCD_FillRect>:
{
 8001788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800178c:	4d12      	ldr	r5, [pc, #72]	; (80017d8 <BSP_LCD_FillRect+0x50>)
{
 800178e:	9303      	str	r3, [sp, #12]
 8001790:	4616      	mov	r6, r2
 8001792:	460c      	mov	r4, r1
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001794:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8001796:	4911      	ldr	r1, [pc, #68]	; (80017dc <BSP_LCD_FillRect+0x54>)
{
 8001798:	4681      	mov	r9, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800179a:	2034      	movs	r0, #52	; 0x34
 800179c:	fb00 1202 	mla	r2, r0, r2, r1
 80017a0:	f8d2 805c 	ldr.w	r8, [r2, #92]	; 0x5c
 80017a4:	f7ff ff3a 	bl	800161c <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80017a8:	6daf      	ldr	r7, [r5, #88]	; 0x58
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80017aa:	4682      	mov	sl, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80017ac:	f7ff ff36 	bl	800161c <BSP_LCD_GetXSize>
 80017b0:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80017b2:	9b03      	ldr	r3, [sp, #12]
 80017b4:	210c      	movs	r1, #12
 80017b6:	fb01 5502 	mla	r5, r1, r2, r5
 80017ba:	1b80      	subs	r0, r0, r6
 80017bc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80017be:	9201      	str	r2, [sp, #4]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80017c0:	fb0a 9404 	mla	r4, sl, r4, r9
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80017c4:	9000      	str	r0, [sp, #0]
 80017c6:	4632      	mov	r2, r6
 80017c8:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 80017cc:	4638      	mov	r0, r7
 80017ce:	f7ff fef3 	bl	80015b8 <FillBuffer>
}
 80017d2:	b004      	add	sp, #16
 80017d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80017d8:	200009d8 	.word	0x200009d8
 80017dc:	2000b218 	.word	0x2000b218

080017e0 <BSP_LCD_DisplayOn>:
  if(LcdDrv->DisplayOn != NULL)
 80017e0:	4b02      	ldr	r3, [pc, #8]	; (80017ec <BSP_LCD_DisplayOn+0xc>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	b103      	cbz	r3, 80017ea <BSP_LCD_DisplayOn+0xa>
    LcdDrv->DisplayOn();
 80017e8:	4718      	bx	r3
}
 80017ea:	4770      	bx	lr
 80017ec:	2000b2c0 	.word	0x2000b2c0

080017f0 <BSP_LCD_MspInit>:
{
 80017f0:	b530      	push	{r4, r5, lr}
 80017f2:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 80017f4:	4b49      	ldr	r3, [pc, #292]	; (800191c <BSP_LCD_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017f6:	4d4a      	ldr	r5, [pc, #296]	; (8001920 <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80017f8:	484a      	ldr	r0, [pc, #296]	; (8001924 <BSP_LCD_MspInit+0x134>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80017fa:	4c4b      	ldr	r4, [pc, #300]	; (8001928 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80017fc:	2200      	movs	r2, #0
 80017fe:	9201      	str	r2, [sp, #4]
 8001800:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001802:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001806:	6459      	str	r1, [r3, #68]	; 0x44
 8001808:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800180a:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 800180e:	9101      	str	r1, [sp, #4]
 8001810:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8001812:	9202      	str	r2, [sp, #8]
 8001814:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001816:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800181a:	6319      	str	r1, [r3, #48]	; 0x30
 800181c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800181e:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 8001822:	9102      	str	r1, [sp, #8]
 8001824:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	9203      	str	r2, [sp, #12]
 8001828:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800182a:	f041 0101 	orr.w	r1, r1, #1
 800182e:	6319      	str	r1, [r3, #48]	; 0x30
 8001830:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001832:	f001 0101 	and.w	r1, r1, #1
 8001836:	9103      	str	r1, [sp, #12]
 8001838:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	9204      	str	r2, [sp, #16]
 800183c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800183e:	f041 0102 	orr.w	r1, r1, #2
 8001842:	6319      	str	r1, [r3, #48]	; 0x30
 8001844:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001846:	f001 0102 	and.w	r1, r1, #2
 800184a:	9104      	str	r1, [sp, #16]
 800184c:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184e:	9205      	str	r2, [sp, #20]
 8001850:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001852:	f041 0104 	orr.w	r1, r1, #4
 8001856:	6319      	str	r1, [r3, #48]	; 0x30
 8001858:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800185a:	f001 0104 	and.w	r1, r1, #4
 800185e:	9105      	str	r1, [sp, #20]
 8001860:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001862:	9206      	str	r2, [sp, #24]
 8001864:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001866:	f041 0108 	orr.w	r1, r1, #8
 800186a:	6319      	str	r1, [r3, #48]	; 0x30
 800186c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800186e:	f001 0108 	and.w	r1, r1, #8
 8001872:	9106      	str	r1, [sp, #24]
 8001874:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001876:	9207      	str	r2, [sp, #28]
 8001878:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800187a:	f041 0120 	orr.w	r1, r1, #32
 800187e:	6319      	str	r1, [r3, #48]	; 0x30
 8001880:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001882:	f001 0120 	and.w	r1, r1, #32
 8001886:	9107      	str	r1, [sp, #28]
 8001888:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800188a:	9208      	str	r2, [sp, #32]
 800188c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800188e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001892:	6319      	str	r1, [r3, #48]	; 0x30
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189a:	9308      	str	r3, [sp, #32]
 800189c:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800189e:	f641 0158 	movw	r1, #6232	; 0x1858
 80018a2:	2302      	movs	r3, #2
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80018a4:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80018a8:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80018ac:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80018ae:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80018b0:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80018b2:	f000 fd5f 	bl	8002374 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80018b6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80018ba:	a909      	add	r1, sp, #36	; 0x24
 80018bc:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80018be:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80018c0:	f000 fd58 	bl	8002374 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80018c4:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80018c8:	a909      	add	r1, sp, #36	; 0x24
 80018ca:	4818      	ldr	r0, [pc, #96]	; (800192c <BSP_LCD_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80018cc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80018ce:	f000 fd51 	bl	8002374 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80018d2:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80018d4:	a909      	add	r1, sp, #36	; 0x24
 80018d6:	4816      	ldr	r0, [pc, #88]	; (8001930 <BSP_LCD_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80018d8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80018da:	f000 fd4b 	bl	8002374 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80018de:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80018e2:	a909      	add	r1, sp, #36	; 0x24
 80018e4:	4813      	ldr	r0, [pc, #76]	; (8001934 <BSP_LCD_MspInit+0x144>)
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80018e6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80018e8:	f000 fd44 	bl	8002374 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80018ec:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80018f0:	a909      	add	r1, sp, #36	; 0x24
 80018f2:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80018f4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80018f6:	f000 fd3d 	bl	8002374 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80018fa:	2303      	movs	r3, #3
 80018fc:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80018fe:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001900:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001902:	4628      	mov	r0, r5
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001904:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001906:	f000 fd35 	bl	8002374 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800190a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800190e:	a909      	add	r1, sp, #36	; 0x24
 8001910:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001912:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001914:	f000 fd2e 	bl	8002374 <HAL_GPIO_Init>
}
 8001918:	b00f      	add	sp, #60	; 0x3c
 800191a:	bd30      	pop	{r4, r5, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40020400 	.word	0x40020400
 8001924:	40020000 	.word	0x40020000
 8001928:	40021800 	.word	0x40021800
 800192c:	40020800 	.word	0x40020800
 8001930:	40020c00 	.word	0x40020c00
 8001934:	40021400 	.word	0x40021400

08001938 <BSP_LCD_Init>:
{ 
 8001938:	b570      	push	{r4, r5, r6, lr}
    LtdcHandler.Instance = LTDC;
 800193a:	4c21      	ldr	r4, [pc, #132]	; (80019c0 <BSP_LCD_Init+0x88>)
 800193c:	4b21      	ldr	r3, [pc, #132]	; (80019c4 <BSP_LCD_Init+0x8c>)
 800193e:	6023      	str	r3, [r4, #0]
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001940:	2109      	movs	r1, #9
 8001942:	2301      	movs	r3, #1
 8001944:	e9c4 1305 	strd	r1, r3, [r4, #20]
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001948:	201d      	movs	r0, #29
 800194a:	2303      	movs	r3, #3
 800194c:	e9c4 0307 	strd	r0, r3, [r4, #28]
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001950:	f240 150d 	movw	r5, #269	; 0x10d
 8001954:	f240 1343 	movw	r3, #323	; 0x143
 8001958:	e9c4 5309 	strd	r5, r3, [r4, #36]	; 0x24
    LtdcHandler.Init.TotalHeigh = 327;
 800195c:	f240 1617 	movw	r6, #279	; 0x117
 8001960:	f240 1347 	movw	r3, #327	; 0x147
 8001964:	e9c4 630b 	strd	r6, r3, [r4, #44]	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001968:	4e17      	ldr	r6, [pc, #92]	; (80019c8 <BSP_LCD_Init+0x90>)
 800196a:	2308      	movs	r3, #8
 800196c:	65f3      	str	r3, [r6, #92]	; 0x5c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800196e:	23c0      	movs	r3, #192	; 0xc0
 8001970:	66f3      	str	r3, [r6, #108]	; 0x6c
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001972:	2304      	movs	r3, #4
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001974:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001976:	6773      	str	r3, [r6, #116]	; 0x74
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8001978:	f106 005c 	add.w	r0, r6, #92	; 0x5c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800197c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001980:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
    LtdcHandler.Init.Backcolor.Blue= 0;
 8001984:	86a5      	strh	r5, [r4, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Red= 0;
 8001986:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800198a:	f001 fb8d 	bl	80030a8 <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800198e:	e9c4 5501 	strd	r5, r5, [r4, #4]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001992:	e9c4 5503 	strd	r5, r5, [r4, #12]
    BSP_LCD_MspInit();
 8001996:	f7ff ff2b 	bl	80017f0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800199a:	4620      	mov	r0, r4
 800199c:	f000 ffea 	bl	8002974 <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <BSP_LCD_Init+0x94>)
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <BSP_LCD_Init+0x98>)
 80019a4:	6013      	str	r3, [r2, #0]
    LcdDrv->Init();
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4798      	blx	r3
    BSP_SDRAM_Init();
 80019aa:	f000 f9f5 	bl	8001d98 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = pFonts;
 80019ae:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80019b0:	220c      	movs	r2, #12
 80019b2:	fb02 6603 	mla	r6, r2, r3, r6
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <BSP_LCD_Init+0x9c>)
 80019b8:	64b3      	str	r3, [r6, #72]	; 0x48
}  
 80019ba:	4628      	mov	r0, r5
 80019bc:	bd70      	pop	{r4, r5, r6, pc}
 80019be:	bf00      	nop
 80019c0:	2000b218 	.word	0x2000b218
 80019c4:	40016800 	.word	0x40016800
 80019c8:	200009d8 	.word	0x200009d8
 80019cc:	2000b2c0 	.word	0x2000b2c0
 80019d0:	20000000 	.word	0x20000000
 80019d4:	2000004c 	.word	0x2000004c

080019d8 <BSP_LCD_DrawPixel>:
{
 80019d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <BSP_LCD_DrawPixel+0x24>)
{
 80019dc:	4615      	mov	r5, r2
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <BSP_LCD_DrawPixel+0x28>)
{
 80019e2:	460c      	mov	r4, r1
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80019e4:	2134      	movs	r1, #52	; 0x34
 80019e6:	fb01 2303 	mla	r3, r1, r3, r2
{
 80019ea:	4606      	mov	r6, r0
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80019ec:	6ddf      	ldr	r7, [r3, #92]	; 0x5c
 80019ee:	f7ff fe15 	bl	800161c <BSP_LCD_GetXSize>
 80019f2:	fb00 6004 	mla	r0, r0, r4, r6
 80019f6:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 80019fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019fc:	200009d8 	.word	0x200009d8
 8001a00:	2000b218 	.word	0x2000b218

08001a04 <BSP_LCD_DisplayChar>:
{
 8001a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001a08:	4f2f      	ldr	r7, [pc, #188]	; (8001ac8 <BSP_LCD_DisplayChar+0xc4>)
{
 8001a0a:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
{
 8001a0e:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001a12:	210c      	movs	r1, #12
 8001a14:	fb01 7303 	mla	r3, r1, r3, r7
 8001a18:	f1a2 0520 	sub.w	r5, r2, #32
 8001a1c:	6c99      	ldr	r1, [r3, #72]	; 0x48
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001a1e:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 8001a22:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 8001a26:	680a      	ldr	r2, [r1, #0]
 8001a28:	f10b 0607 	add.w	r6, fp, #7
 8001a2c:	10f6      	asrs	r6, r6, #3
  offset = 8 *((width + 7)/8) -  width ;
 8001a2e:	ebcb 00c6 	rsb	r0, fp, r6, lsl #3
 8001a32:	b2c3      	uxtb	r3, r0
 8001a34:	9300      	str	r3, [sp, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001a36:	fb0a f505 	mul.w	r5, sl, r5
      if(line & (1 << (width- j + offset- 1))) 
 8001a3a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8001a3e:	fb06 2505 	mla	r5, r6, r5, r2
  for(i = 0; i < height; i++)
 8001a42:	f04f 0900 	mov.w	r9, #0
      if(line & (1 << (width- j + offset- 1))) 
 8001a46:	9304      	str	r3, [sp, #16]
 8001a48:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8001a4a:	45d1      	cmp	r9, sl
 8001a4c:	eb03 0109 	add.w	r1, r3, r9
 8001a50:	b289      	uxth	r1, r1
 8001a52:	d302      	bcc.n	8001a5a <BSP_LCD_DisplayChar+0x56>
}
 8001a54:	b007      	add	sp, #28
 8001a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001a5a:	2e01      	cmp	r6, #1
 8001a5c:	782c      	ldrb	r4, [r5, #0]
 8001a5e:	d004      	beq.n	8001a6a <BSP_LCD_DisplayChar+0x66>
 8001a60:	2e02      	cmp	r6, #2
 8001a62:	d10e      	bne.n	8001a82 <BSP_LCD_DisplayChar+0x7e>
      line =  (pchar[0]<< 8) | pchar[1];
 8001a64:	882c      	ldrh	r4, [r5, #0]
 8001a66:	ba64      	rev16	r4, r4
 8001a68:	b2a4      	uxth	r4, r4
      if(line & (1 << (width- j + offset- 1))) 
 8001a6a:	9b04      	ldr	r3, [sp, #16]
 8001a6c:	9a00      	ldr	r2, [sp, #0]
 8001a6e:	4413      	add	r3, r2
    for (j = 0; j < width; j++)
 8001a70:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8001a74:	9303      	str	r3, [sp, #12]
    for (j = 0; j < width; j++)
 8001a76:	45c3      	cmp	fp, r8
 8001a78:	d80a      	bhi.n	8001a90 <BSP_LCD_DisplayChar+0x8c>
  for(i = 0; i < height; i++)
 8001a7a:	f109 0901 	add.w	r9, r9, #1
 8001a7e:	4435      	add	r5, r6
 8001a80:	e7e2      	b.n	8001a48 <BSP_LCD_DisplayChar+0x44>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8001a82:	786a      	ldrb	r2, [r5, #1]
 8001a84:	0424      	lsls	r4, r4, #16
 8001a86:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8001a8a:	78aa      	ldrb	r2, [r5, #2]
 8001a8c:	4314      	orrs	r4, r2
      break;
 8001a8e:	e7ec      	b.n	8001a6a <BSP_LCD_DisplayChar+0x66>
      if(line & (1 << (width- j + offset- 1))) 
 8001a90:	9b01      	ldr	r3, [sp, #4]
 8001a92:	6dba      	ldr	r2, [r7, #88]	; 0x58
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001a94:	9105      	str	r1, [sp, #20]
 8001a96:	eb03 0008 	add.w	r0, r3, r8
      if(line & (1 << (width- j + offset- 1))) 
 8001a9a:	9b03      	ldr	r3, [sp, #12]
 8001a9c:	f04f 0c01 	mov.w	ip, #1
 8001aa0:	eba3 0e08 	sub.w	lr, r3, r8
 8001aa4:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001aa8:	ea1c 0f04 	tst.w	ip, r4
 8001aac:	f04f 0c0c 	mov.w	ip, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8001ab0:	fb0c 7202 	mla	r2, ip, r2, r7
 8001ab4:	b280      	uxth	r0, r0
 8001ab6:	bf14      	ite	ne
 8001ab8:	6c12      	ldrne	r2, [r2, #64]	; 0x40
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001aba:	6c52      	ldreq	r2, [r2, #68]	; 0x44
 8001abc:	f7ff ff8c 	bl	80019d8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8001ac0:	f108 0801 	add.w	r8, r8, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001ac4:	9905      	ldr	r1, [sp, #20]
    for (j = 0; j < width; j++)
 8001ac6:	e7d6      	b.n	8001a76 <BSP_LCD_DisplayChar+0x72>
 8001ac8:	200009d8 	.word	0x200009d8

08001acc <BSP_LCD_DisplayStringAt>:
{
 8001acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	4606      	mov	r6, r0
 8001ad4:	4688      	mov	r8, r1
 8001ad6:	4615      	mov	r5, r2
  uint8_t  *ptr = pText;
 8001ad8:	4613      	mov	r3, r2
 8001ada:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 8001adc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ae0:	2a00      	cmp	r2, #0
 8001ae2:	d1fa      	bne.n	8001ada <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001ae4:	4f23      	ldr	r7, [pc, #140]	; (8001b74 <BSP_LCD_DisplayStringAt+0xa8>)
 8001ae6:	f7ff fd99 	bl	800161c <BSP_LCD_GetXSize>
 8001aea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aec:	220c      	movs	r2, #12
 8001aee:	fb02 7303 	mla	r3, r2, r3, r7
  switch (mode)
 8001af2:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af8:	889a      	ldrh	r2, [r3, #4]
 8001afa:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (mode)
 8001afe:	d01b      	beq.n	8001b38 <BSP_LCD_DisplayStringAt+0x6c>
 8001b00:	f1b9 0f02 	cmp.w	r9, #2
 8001b04:	d01f      	beq.n	8001b46 <BSP_LCD_DisplayStringAt+0x7a>
 8001b06:	3d01      	subs	r5, #1
  uint8_t  *ptr = pText;
 8001b08:	f04f 0900 	mov.w	r9, #0
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8001b0c:	f04f 0a0c 	mov.w	sl, #12
 8001b10:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001b14:	3c00      	subs	r4, #0
 8001b16:	bf18      	it	ne
 8001b18:	2401      	movne	r4, #1
 8001b1a:	f7ff fd7f 	bl	800161c <BSP_LCD_GetXSize>
 8001b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b20:	fb0a 7303 	mla	r3, sl, r3, r7
 8001b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b26:	889b      	ldrh	r3, [r3, #4]
 8001b28:	fb03 0019 	mls	r0, r3, r9, r0
 8001b2c:	b280      	uxth	r0, r0
 8001b2e:	4298      	cmp	r0, r3
 8001b30:	d300      	bcc.n	8001b34 <BSP_LCD_DisplayStringAt+0x68>
 8001b32:	b96c      	cbnz	r4, 8001b50 <BSP_LCD_DisplayStringAt+0x84>
}
 8001b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8001b38:	1b2c      	subs	r4, r5, r4
 8001b3a:	4420      	add	r0, r4
 8001b3c:	4350      	muls	r0, r2
 8001b3e:	eb06 0050 	add.w	r0, r6, r0, lsr #1
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001b42:	b286      	uxth	r6, r0
      break;
 8001b44:	e7df      	b.n	8001b06 <BSP_LCD_DisplayStringAt+0x3a>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001b46:	1b2c      	subs	r4, r5, r4
 8001b48:	4404      	add	r4, r0
 8001b4a:	fb14 6002 	smlabb	r0, r4, r2, r6
 8001b4e:	e7f8      	b.n	8001b42 <BSP_LCD_DisplayStringAt+0x76>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001b50:	4630      	mov	r0, r6
 8001b52:	782a      	ldrb	r2, [r5, #0]
 8001b54:	4641      	mov	r1, r8
 8001b56:	f7ff ff55 	bl	8001a04 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b5c:	fb0a 7303 	mla	r3, sl, r3, r7
    i++;
 8001b60:	f109 0901 	add.w	r9, r9, #1
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b66:	8898      	ldrh	r0, [r3, #4]
 8001b68:	4430      	add	r0, r6
 8001b6a:	b286      	uxth	r6, r0
    i++;
 8001b6c:	fa1f f989 	uxth.w	r9, r9
 8001b70:	e7ce      	b.n	8001b10 <BSP_LCD_DisplayStringAt+0x44>
 8001b72:	bf00      	nop
 8001b74:	200009d8 	.word	0x200009d8

08001b78 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001b78:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001b7c:	4c21      	ldr	r4, [pc, #132]	; (8001c04 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001b7e:	f104 0510 	add.w	r5, r4, #16
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b82:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 8001b84:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b88:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001b8a:	4621      	mov	r1, r4
{
 8001b8c:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001b8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b92:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b94:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 8001b98:	e9c4 6802 	strd	r6, r8, [r4, #8]
  __IO uint32_t tmpmrd =0;
 8001b9c:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001ba0:	f001 fbcc 	bl	800333c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001ba4:	4630      	mov	r0, r6
 8001ba6:	f000 f961 	bl	8001e6c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001baa:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8001bac:	4621      	mov	r1, r4
 8001bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb2:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001bb4:	e9c4 3700 	strd	r3, r7, [r4]
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 8001bb8:	f04f 0a04 	mov.w	sl, #4
  Command.ModeRegisterDefinition  = 0;
 8001bbc:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8001bc0:	f001 fbbc 	bl	800333c <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001bc4:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bcc:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001bce:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 8001bd2:	e9c4 a802 	strd	sl, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001bd6:	f001 fbb1 	bl	800333c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001bda:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001bde:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 8001be0:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber       = 1;
 8001be2:	60a6      	str	r6, [r4, #8]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001be4:	4621      	mov	r1, r4
 8001be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bea:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001bec:	e9c4 a700 	strd	sl, r7, [r4]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001bf0:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001bf2:	f001 fba3 	bl	800333c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001bf6:	4649      	mov	r1, r9
 8001bf8:	4628      	mov	r0, r5
}
 8001bfa:	b002      	add	sp, #8
 8001bfc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001c00:	f001 bbb3 	b.w	800336a <HAL_SDRAM_ProgramRefreshRate>
 8001c04:	20000a64 	.word	0x20000a64

08001c08 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001c08:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001c0a:	4606      	mov	r6, r0
{
 8001c0c:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001c0e:	2800      	cmp	r0, #0
 8001c10:	f000 80ad 	beq.w	8001d6e <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c14:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001c16:	4858      	ldr	r0, [pc, #352]	; (8001d78 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c18:	2400      	movs	r4, #0
 8001c1a:	9401      	str	r4, [sp, #4]
 8001c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	639a      	str	r2, [r3, #56]	; 0x38
 8001c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c26:	f002 0201 	and.w	r2, r2, #1
 8001c2a:	9201      	str	r2, [sp, #4]
 8001c2c:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001c2e:	9402      	str	r4, [sp, #8]
 8001c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c32:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
 8001c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c3a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001c3e:	9202      	str	r2, [sp, #8]
 8001c40:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	9403      	str	r4, [sp, #12]
 8001c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c46:	f042 0202 	orr.w	r2, r2, #2
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c4e:	f002 0202 	and.w	r2, r2, #2
 8001c52:	9203      	str	r2, [sp, #12]
 8001c54:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c56:	9404      	str	r4, [sp, #16]
 8001c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c5a:	f042 0204 	orr.w	r2, r2, #4
 8001c5e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c62:	f002 0204 	and.w	r2, r2, #4
 8001c66:	9204      	str	r2, [sp, #16]
 8001c68:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c6a:	9405      	str	r4, [sp, #20]
 8001c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c6e:	f042 0208 	orr.w	r2, r2, #8
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
 8001c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c76:	f002 0208 	and.w	r2, r2, #8
 8001c7a:	9205      	str	r2, [sp, #20]
 8001c7c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c7e:	9406      	str	r4, [sp, #24]
 8001c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c82:	f042 0210 	orr.w	r2, r2, #16
 8001c86:	631a      	str	r2, [r3, #48]	; 0x30
 8001c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c8a:	f002 0210 	and.w	r2, r2, #16
 8001c8e:	9206      	str	r2, [sp, #24]
 8001c90:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c92:	9407      	str	r4, [sp, #28]
 8001c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c96:	f042 0220 	orr.w	r2, r2, #32
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c9e:	f002 0220 	and.w	r2, r2, #32
 8001ca2:	9207      	str	r2, [sp, #28]
 8001ca4:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ca6:	9408      	str	r4, [sp, #32]
 8001ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb6:	9308      	str	r3, [sp, #32]
 8001cb8:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001cbc:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001cc0:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001cc6:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001cc8:	2360      	movs	r3, #96	; 0x60
 8001cca:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001ccc:	f000 fb52 	bl	8002374 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001cd0:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001cd2:	482a      	ldr	r0, [pc, #168]	; (8001d7c <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001cd4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001cd6:	a909      	add	r1, sp, #36	; 0x24
 8001cd8:	f000 fb4c 	bl	8002374 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001cdc:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001ce0:	4827      	ldr	r0, [pc, #156]	; (8001d80 <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001ce2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001ce4:	a909      	add	r1, sp, #36	; 0x24
 8001ce6:	f000 fb45 	bl	8002374 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001cea:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001cee:	4825      	ldr	r0, [pc, #148]	; (8001d84 <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001cf0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001cf2:	a909      	add	r1, sp, #36	; 0x24
 8001cf4:	f000 fb3e 	bl	8002374 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001cf8:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001cfc:	4822      	ldr	r0, [pc, #136]	; (8001d88 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001cfe:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001d00:	a909      	add	r1, sp, #36	; 0x24
 8001d02:	f000 fb37 	bl	8002374 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001d06:	f248 1333 	movw	r3, #33075	; 0x8133
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d0a:	4820      	ldr	r0, [pc, #128]	; (8001d8c <BSP_SDRAM_MspInit+0x184>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001d0c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d0e:	a909      	add	r1, sp, #36	; 0x24
 8001d10:	f000 fb30 	bl	8002374 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <BSP_SDRAM_MspInit+0x188>)
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001d16:	2180      	movs	r1, #128	; 0x80
 8001d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d1c:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d28:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001d2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001d30:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001d34:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001d38:	461d      	mov	r5, r3
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001d3a:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001d3e:	2203      	movs	r2, #3
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001d40:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001d44:	4a13      	ldr	r2, [pc, #76]	; (8001d94 <BSP_SDRAM_MspInit+0x18c>)
 8001d46:	f845 2f44 	str.w	r2, [r5, #68]!
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001d4a:	675c      	str	r4, [r3, #116]	; 0x74
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001d4c:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001d4e:	6335      	str	r5, [r6, #48]	; 0x30
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001d50:	649c      	str	r4, [r3, #72]	; 0x48
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001d52:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dmaHandle);
 8001d54:	f000 f996 	bl	8002084 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f000 f913 	bl	8001f84 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001d5e:	2038      	movs	r0, #56	; 0x38
 8001d60:	4622      	mov	r2, r4
 8001d62:	210f      	movs	r1, #15
 8001d64:	f000 f8a8 	bl	8001eb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001d68:	2038      	movs	r0, #56	; 0x38
 8001d6a:	f000 f8d7 	bl	8001f1c <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001d6e:	b00e      	add	sp, #56	; 0x38
 8001d70:	bd70      	pop	{r4, r5, r6, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020c00 	.word	0x40020c00
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40021400 	.word	0x40021400
 8001d8c:	40021800 	.word	0x40021800
 8001d90:	20000a64 	.word	0x20000a64
 8001d94:	40026410 	.word	0x40026410

08001d98 <BSP_SDRAM_Init>:
{
 8001d98:	b510      	push	{r4, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001d9a:	4c1b      	ldr	r4, [pc, #108]	; (8001e08 <BSP_SDRAM_Init+0x70>)
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <BSP_SDRAM_Init+0x74>)
 8001d9e:	6123      	str	r3, [r4, #16]
  Timing.SelfRefreshTime      = 4;
 8001da0:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 8001da2:	2302      	movs	r3, #2
 8001da4:	2107      	movs	r1, #7
  Timing.RowCycleDelay        = 7;
 8001da6:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  Timing.ExitSelfRefreshDelay = 7;
 8001daa:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 8001dae:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001db2:	2100      	movs	r1, #0
  Timing.RCDDelay             = 2;
 8001db4:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e9c4 3105 	strd	r3, r1, [r4, #20]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001dbe:	2010      	movs	r0, #16
 8001dc0:	2340      	movs	r3, #64	; 0x40
 8001dc2:	e9c4 0308 	strd	r0, r3, [r4, #32]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001dc6:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001dca:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001dce:	f44f 6300 	mov.w	r3, #2048	; 0x800
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001dd2:	e9c4 310c 	strd	r3, r1, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001dd6:	f104 0010 	add.w	r0, r4, #16
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001dda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001dde:	61e2      	str	r2, [r4, #28]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001de0:	63a3      	str	r3, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001de2:	f7ff ff11 	bl	8001c08 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001de6:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8001dea:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 8001dee:	f001 fa85 	bl	80032fc <HAL_SDRAM_Init>
 8001df2:	4c07      	ldr	r4, [pc, #28]	; (8001e10 <BSP_SDRAM_Init+0x78>)
 8001df4:	3800      	subs	r0, #0
 8001df6:	bf18      	it	ne
 8001df8:	2001      	movne	r0, #1
 8001dfa:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001dfc:	f240 506a 	movw	r0, #1386	; 0x56a
 8001e00:	f7ff feba 	bl	8001b78 <BSP_SDRAM_Initialization_sequence>
}
 8001e04:	7820      	ldrb	r0, [r4, #0]
 8001e06:	bd10      	pop	{r4, pc}
 8001e08:	20000a64 	.word	0x20000a64
 8001e0c:	a0000140 	.word	0xa0000140
 8001e10:	20000074 	.word	0x20000074

08001e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e14:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_Init+0x30>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e1e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e26:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e2e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 f82f 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	2000      	movs	r0, #0
 8001e38:	f003 f846 	bl	8004ec8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f003 f828 	bl	8004e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001e40:	2000      	movs	r0, #0
 8001e42:	bd08      	pop	{r3, pc}
 8001e44:	40023c00 	.word	0x40023c00

08001e48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001e48:	4a03      	ldr	r2, [pc, #12]	; (8001e58 <HAL_IncTick+0x10>)
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <HAL_IncTick+0x14>)
 8001e4c:	6811      	ldr	r1, [r2, #0]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	440b      	add	r3, r1
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	2000b2c4 	.word	0x2000b2c4
 8001e5c:	20000078 	.word	0x20000078

08001e60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e60:	4b01      	ldr	r3, [pc, #4]	; (8001e68 <HAL_GetTick+0x8>)
 8001e62:	6818      	ldr	r0, [r3, #0]
}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	2000b2c4 	.word	0x2000b2c4

08001e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e6c:	b538      	push	{r3, r4, r5, lr}
 8001e6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e70:	f7ff fff6 	bl	8001e60 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e74:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001e76:	bf1c      	itt	ne
 8001e78:	4b05      	ldrne	r3, [pc, #20]	; (8001e90 <HAL_Delay+0x24>)
 8001e7a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001e7e:	bf18      	it	ne
 8001e80:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e82:	f7ff ffed 	bl	8001e60 <HAL_GetTick>
 8001e86:	1b43      	subs	r3, r0, r5
 8001e88:	42a3      	cmp	r3, r4
 8001e8a:	d3fa      	bcc.n	8001e82 <HAL_Delay+0x16>
  {
  }
}
 8001e8c:	bd38      	pop	{r3, r4, r5, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000078 	.word	0x20000078

08001e94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4907      	ldr	r1, [pc, #28]	; (8001eb4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e96:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e98:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e9c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9e:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001eb0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eba:	b530      	push	{r4, r5, lr}
 8001ebc:	68dc      	ldr	r4, [r3, #12]
 8001ebe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec8:	2d04      	cmp	r5, #4
 8001eca:	bf28      	it	cs
 8001ecc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ece:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed4:	bf8c      	ite	hi
 8001ed6:	3c03      	subhi	r4, #3
 8001ed8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eda:	fa03 f505 	lsl.w	r5, r3, r5
 8001ede:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee2:	40a3      	lsls	r3, r4
 8001ee4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee8:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001eea:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	bfac      	ite	ge
 8001ef2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	4a08      	ldrlt	r2, [pc, #32]	; (8001f18 <HAL_NVIC_SetPriority+0x60>)
 8001ef8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001efc:	bfb8      	it	lt
 8001efe:	f000 000f 	andlt.w	r0, r0, #15
 8001f02:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	bfaa      	itet	ge
 8001f06:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f0c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f10:	bd30      	pop	{r4, r5, pc}
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00
 8001f18:	e000ed14 	.word	0xe000ed14

08001f1c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	db08      	blt.n	8001f32 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f20:	0942      	lsrs	r2, r0, #5
 8001f22:	2301      	movs	r3, #1
 8001f24:	f000 001f 	and.w	r0, r0, #31
 8001f28:	fa03 f000 	lsl.w	r0, r3, r0
 8001f2c:	4b01      	ldr	r3, [pc, #4]	; (8001f34 <HAL_NVIC_EnableIRQ+0x18>)
 8001f2e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f32:	4770      	bx	lr
 8001f34:	e000e100 	.word	0xe000e100

08001f38 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f38:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f3a:	4604      	mov	r4, r0
 8001f3c:	b150      	cbz	r0, 8001f54 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f3e:	7943      	ldrb	r3, [r0, #5]
 8001f40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f44:	b913      	cbnz	r3, 8001f4c <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f46:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f48:	f002 f90e 	bl	8004168 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8001f50:	2000      	movs	r0, #0
}
 8001f52:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f54:	2001      	movs	r0, #1
 8001f56:	e7fc      	b.n	8001f52 <HAL_CRC_Init+0x1a>

08001f58 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f58:	6803      	ldr	r3, [r0, #0]
{
 8001f5a:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f5c:	4c08      	ldr	r4, [pc, #32]	; (8001f80 <DMA_CalcBaseAndBitshift+0x28>)
{
 8001f5e:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f60:	b2d9      	uxtb	r1, r3
 8001f62:	3910      	subs	r1, #16
 8001f64:	2018      	movs	r0, #24
 8001f66:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f6a:	5c20      	ldrb	r0, [r4, r0]
 8001f6c:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f6e:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001f72:	f020 0003 	bic.w	r0, r0, #3
 8001f76:	295f      	cmp	r1, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f78:	bf88      	it	hi
 8001f7a:	3004      	addhi	r0, #4
 8001f7c:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001f7e:	bd10      	pop	{r4, pc}
 8001f80:	0801097c 	.word	0x0801097c

08001f84 <HAL_DMA_Init>:
{
 8001f84:	b570      	push	{r4, r5, r6, lr}
 8001f86:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7ff ff6a 	bl	8001e60 <HAL_GetTick>
 8001f8c:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001f8e:	2c00      	cmp	r4, #0
 8001f90:	d073      	beq.n	800207a <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f92:	2302      	movs	r3, #2
 8001f94:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001f98:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001fa0:	6813      	ldr	r3, [r2, #0]
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa8:	6821      	ldr	r1, [r4, #0]
 8001faa:	680b      	ldr	r3, [r1, #0]
 8001fac:	07d8      	lsls	r0, r3, #31
 8001fae:	d42f      	bmi.n	8002010 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8001fb0:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fb2:	4d33      	ldr	r5, [pc, #204]	; (8002080 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb4:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fb6:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fb8:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	68e2      	ldr	r2, [r4, #12]
 8001fc0:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fc2:	6922      	ldr	r2, [r4, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	6962      	ldr	r2, [r4, #20]
 8001fc8:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fca:	69e2      	ldr	r2, [r4, #28]
 8001fcc:	4303      	orrs	r3, r0
 8001fce:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fd0:	6a22      	ldr	r2, [r4, #32]
 8001fd2:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001fd6:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fd8:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fdc:	bf02      	ittt	eq
 8001fde:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001fe2:	4335      	orreq	r5, r6
 8001fe4:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001fe6:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001fe8:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fea:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fec:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001ff0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ff4:	d133      	bne.n	800205e <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8001ff6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ff8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001ffa:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ffc:	b37d      	cbz	r5, 800205e <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ffe:	b990      	cbnz	r0, 8002026 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002000:	2a01      	cmp	r2, #1
 8002002:	d021      	beq.n	8002048 <HAL_DMA_Init+0xc4>
 8002004:	f032 0202 	bics.w	r2, r2, #2
 8002008:	d129      	bne.n	800205e <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800200a:	01ea      	lsls	r2, r5, #7
 800200c:	d527      	bpl.n	800205e <HAL_DMA_Init+0xda>
 800200e:	e01e      	b.n	800204e <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002010:	f7ff ff26 	bl	8001e60 <HAL_GetTick>
 8002014:	1b40      	subs	r0, r0, r5
 8002016:	2805      	cmp	r0, #5
 8002018:	d9c6      	bls.n	8001fa8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800201a:	2320      	movs	r3, #32
 800201c:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800201e:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002020:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002024:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002026:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800202a:	d114      	bne.n	8002056 <HAL_DMA_Init+0xd2>
    switch (tmp)
 800202c:	2a03      	cmp	r2, #3
 800202e:	d816      	bhi.n	800205e <HAL_DMA_Init+0xda>
 8002030:	a001      	add	r0, pc, #4	; (adr r0, 8002038 <HAL_DMA_Init+0xb4>)
 8002032:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002036:	bf00      	nop
 8002038:	0800204f 	.word	0x0800204f
 800203c:	0800200b 	.word	0x0800200b
 8002040:	0800204f 	.word	0x0800204f
 8002044:	08002049 	.word	0x08002049
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002048:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800204c:	d107      	bne.n	800205e <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800204e:	2340      	movs	r3, #64	; 0x40
 8002050:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002052:	2001      	movs	r0, #1
 8002054:	e7e4      	b.n	8002020 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8002056:	2a02      	cmp	r2, #2
 8002058:	d9f9      	bls.n	800204e <HAL_DMA_Init+0xca>
 800205a:	2a03      	cmp	r2, #3
 800205c:	d0d5      	beq.n	800200a <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800205e:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002060:	4620      	mov	r0, r4
 8002062:	f7ff ff79 	bl	8001f58 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002066:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002068:	233f      	movs	r3, #63	; 0x3f
 800206a:	4093      	lsls	r3, r2
 800206c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206e:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002070:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002072:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002074:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002078:	e7d4      	b.n	8002024 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800207a:	2001      	movs	r0, #1
 800207c:	e7d2      	b.n	8002024 <HAL_DMA_Init+0xa0>
 800207e:	bf00      	nop
 8002080:	f010803f 	.word	0xf010803f

08002084 <HAL_DMA_DeInit>:
{
 8002084:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8002086:	4605      	mov	r5, r0
 8002088:	b320      	cbz	r0, 80020d4 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800208a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800208e:	2b02      	cmp	r3, #2
 8002090:	b2dc      	uxtb	r4, r3
 8002092:	d01d      	beq.n	80020d0 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002094:	6803      	ldr	r3, [r0, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 800209c:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 800209e:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 80020a0:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 80020a2:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80020a4:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80020a6:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80020a8:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 80020aa:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 80020ac:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020ae:	f7ff ff53 	bl	8001f58 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020b2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80020b4:	233f      	movs	r3, #63	; 0x3f
 80020b6:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 80020b8:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80020bc:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 80020c0:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020c6:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80020c8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80020cc:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 80020d0:	4620      	mov	r0, r4
 80020d2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80020d4:	2401      	movs	r4, #1
 80020d6:	e7fb      	b.n	80020d0 <HAL_DMA_DeInit+0x4c>

080020d8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80020d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80020da:	6804      	ldr	r4, [r0, #0]
 80020dc:	9d04      	ldr	r5, [sp, #16]
 80020de:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80020e0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80020e4:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 80020e8:	4333      	orrs	r3, r6
 80020ea:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80020ec:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80020ee:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80020f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020f4:	d130      	bne.n	8002158 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80020f6:	6886      	ldr	r6, [r0, #8]
 80020f8:	b11e      	cbz	r6, 8002102 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80020fa:	2e01      	cmp	r6, #1
 80020fc:	d103      	bne.n	8002106 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80020fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002102:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002104:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002106:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002108:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800210c:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002110:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002112:	d107      	bne.n	8002124 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8002114:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 8002116:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002118:	02db      	lsls	r3, r3, #11
 800211a:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 800211e:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8002122:	e7ee      	b.n	8002102 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002124:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002126:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800212a:	d10a      	bne.n	8002142 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 800212c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800212e:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002130:	029b      	lsls	r3, r3, #10
 8002132:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8002136:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 800213a:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800213c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8002140:	e7df      	b.n	8002102 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8002142:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002144:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002146:	0209      	lsls	r1, r1, #8
 8002148:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 800214c:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8002150:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002152:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8002156:	e7d4      	b.n	8002102 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002158:	60e1      	str	r1, [r4, #12]
}
 800215a:	e7d3      	b.n	8002104 <DMA2D_SetConfig+0x2c>

0800215c <HAL_DMA2D_Init>:
{
 800215c:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 800215e:	4604      	mov	r4, r0
 8002160:	b330      	cbz	r0, 80021b0 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002162:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002166:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800216a:	b91b      	cbnz	r3, 8002174 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 800216c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002170:	f002 f832 	bl	80041d8 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002174:	6822      	ldr	r2, [r4, #0]
 8002176:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002178:	2302      	movs	r3, #2
 800217a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002184:	430b      	orrs	r3, r1
 8002186:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002188:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800218a:	68a1      	ldr	r1, [r4, #8]
 800218c:	f023 0307 	bic.w	r3, r3, #7
 8002190:	430b      	orrs	r3, r1
 8002192:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002194:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002196:	68e1      	ldr	r1, [r4, #12]
 8002198:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800219c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80021a4:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80021a6:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80021a8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80021aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80021ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021b0:	2001      	movs	r0, #1
 80021b2:	e7fc      	b.n	80021ae <HAL_DMA2D_Init+0x52>

080021b4 <HAL_DMA2D_Start>:
{
 80021b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80021b6:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 80021ba:	2d01      	cmp	r5, #1
{
 80021bc:	4604      	mov	r4, r0
 80021be:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hdma2d);
 80021c2:	d00f      	beq.n	80021e4 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80021c4:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80021c8:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80021ca:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 80021cc:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80021d0:	9500      	str	r5, [sp, #0]
 80021d2:	f7ff ff81 	bl	80020d8 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80021d6:	6822      	ldr	r2, [r4, #0]
 80021d8:	6813      	ldr	r3, [r2, #0]
 80021da:	4333      	orrs	r3, r6
 80021dc:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80021de:	2000      	movs	r0, #0
}
 80021e0:	b002      	add	sp, #8
 80021e2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80021e4:	4628      	mov	r0, r5
 80021e6:	e7fb      	b.n	80021e0 <HAL_DMA2D_Start+0x2c>

080021e8 <HAL_DMA2D_PollForTransfer>:
{
 80021e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80021ee:	6803      	ldr	r3, [r0, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	07db      	lsls	r3, r3, #31
{
 80021f4:	4604      	mov	r4, r0
 80021f6:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80021f8:	d417      	bmi.n	800222a <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80021fa:	6822      	ldr	r2, [r4, #0]
 80021fc:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80021fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002200:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8002202:	069e      	lsls	r6, r3, #26
 8002204:	d506      	bpl.n	8002214 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8002206:	f7ff fe2b 	bl	8001e60 <HAL_GetTick>
 800220a:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	06d2      	lsls	r2, r2, #27
 8002212:	d543      	bpl.n	800229c <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	2212      	movs	r2, #18
 8002218:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 800221a:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800221c:	2301      	movs	r3, #1
 800221e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002222:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002226:	b002      	add	sp, #8
 8002228:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 800222a:	f7ff fe19 	bl	8001e60 <HAL_GetTick>
 800222e:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002230:	6823      	ldr	r3, [r4, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	0792      	lsls	r2, r2, #30
 8002236:	d4e0      	bmi.n	80021fa <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800223c:	9a01      	ldr	r2, [sp, #4]
 800223e:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002242:	d017      	beq.n	8002274 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002244:	9a01      	ldr	r2, [sp, #4]
 8002246:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002248:	bf42      	ittt	mi
 800224a:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800224c:	f042 0202 	orrmi.w	r2, r2, #2
 8002250:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002252:	9a01      	ldr	r2, [sp, #4]
 8002254:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002256:	bf42      	ittt	mi
 8002258:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800225a:	f042 0201 	orrmi.w	r2, r2, #1
 800225e:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002260:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002262:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002264:	2304      	movs	r3, #4
 8002266:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800226a:	2300      	movs	r3, #0
 800226c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002270:	2001      	movs	r0, #1
 8002272:	e7d8      	b.n	8002226 <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 8002274:	1c69      	adds	r1, r5, #1
 8002276:	d0dc      	beq.n	8002232 <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002278:	f7ff fdf2 	bl	8001e60 <HAL_GetTick>
 800227c:	1b80      	subs	r0, r0, r6
 800227e:	42a8      	cmp	r0, r5
 8002280:	d801      	bhi.n	8002286 <HAL_DMA2D_PollForTransfer+0x9e>
 8002282:	2d00      	cmp	r5, #0
 8002284:	d1d4      	bne.n	8002230 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002286:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002288:	f043 0320 	orr.w	r3, r3, #32
 800228c:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800228e:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8002290:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002292:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8002296:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 800229a:	e7c4      	b.n	8002226 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80022a0:	9a01      	ldr	r2, [sp, #4]
 80022a2:	f012 0f29 	tst.w	r2, #41	; 0x29
 80022a6:	d016      	beq.n	80022d6 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80022a8:	9a01      	ldr	r2, [sp, #4]
 80022aa:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80022ac:	bf42      	ittt	mi
 80022ae:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80022b0:	f042 0204 	orrmi.w	r2, r2, #4
 80022b4:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80022b6:	9a01      	ldr	r2, [sp, #4]
 80022b8:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80022ba:	bf42      	ittt	mi
 80022bc:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80022be:	f042 0202 	orrmi.w	r2, r2, #2
 80022c2:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80022c4:	9a01      	ldr	r2, [sp, #4]
 80022c6:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80022c8:	bf42      	ittt	mi
 80022ca:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80022cc:	f042 0201 	orrmi.w	r2, r2, #1
 80022d0:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80022d2:	2229      	movs	r2, #41	; 0x29
 80022d4:	e7c5      	b.n	8002262 <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 80022d6:	1c69      	adds	r1, r5, #1
 80022d8:	d099      	beq.n	800220e <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022da:	f7ff fdc1 	bl	8001e60 <HAL_GetTick>
 80022de:	1b80      	subs	r0, r0, r6
 80022e0:	42a8      	cmp	r0, r5
 80022e2:	d8d0      	bhi.n	8002286 <HAL_DMA2D_PollForTransfer+0x9e>
 80022e4:	2d00      	cmp	r5, #0
 80022e6:	d191      	bne.n	800220c <HAL_DMA2D_PollForTransfer+0x24>
 80022e8:	e7cd      	b.n	8002286 <HAL_DMA2D_PollForTransfer+0x9e>
	...

080022ec <HAL_DMA2D_ConfigLayer>:
{
 80022ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80022ee:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	f04f 0302 	mov.w	r3, #2
 80022f8:	d02b      	beq.n	8002352 <HAL_DMA2D_ConfigLayer+0x66>
 80022fa:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80022fc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8002300:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002304:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8002308:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 800230c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800230e:	4f18      	ldr	r7, [pc, #96]	; (8002370 <HAL_DMA2D_ConfigLayer+0x84>)
 8002310:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002314:	3c09      	subs	r4, #9
 8002316:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002318:	bf9c      	itt	ls
 800231a:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
 800231e:	431a      	orrls	r2, r3
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002320:	ea4f 1601 	mov.w	r6, r1, lsl #4
 8002324:	6803      	ldr	r3, [r0, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002326:	bf88      	it	hi
 8002328:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800232c:	b999      	cbnz	r1, 8002356 <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800232e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002330:	4039      	ands	r1, r7
 8002332:	430a      	orrs	r2, r1
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002336:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002338:	6982      	ldr	r2, [r0, #24]
 800233a:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800233c:	d803      	bhi.n	8002346 <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800233e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002340:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002344:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002346:	2301      	movs	r3, #1
 8002348:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 800234c:	2300      	movs	r3, #0
 800234e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8002352:	4618      	mov	r0, r3
}
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002356:	69d9      	ldr	r1, [r3, #28]
 8002358:	4039      	ands	r1, r7
 800235a:	430a      	orrs	r2, r1
 800235c:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800235e:	1982      	adds	r2, r0, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002360:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002362:	6992      	ldr	r2, [r2, #24]
 8002364:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002366:	bf9c      	itt	ls
 8002368:	f025 457f 	bicls.w	r5, r5, #4278190080	; 0xff000000
 800236c:	621d      	strls	r5, [r3, #32]
 800236e:	e7ea      	b.n	8002346 <HAL_DMA2D_ConfigLayer+0x5a>
 8002370:	00fcfff0 	.word	0x00fcfff0

08002374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002378:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800253c <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237c:	4a6d      	ldr	r2, [pc, #436]	; (8002534 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800237e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002380:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002382:	2401      	movs	r4, #1
 8002384:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002386:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800238a:	43ac      	bics	r4, r5
 800238c:	f040 80b9 	bne.w	8002502 <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002390:	684d      	ldr	r5, [r1, #4]
 8002392:	f005 0403 	and.w	r4, r5, #3
 8002396:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800239a:	2603      	movs	r6, #3
 800239c:	1e67      	subs	r7, r4, #1
 800239e:	fa06 f608 	lsl.w	r6, r6, r8
 80023a2:	2f01      	cmp	r7, #1
 80023a4:	ea6f 0606 	mvn.w	r6, r6
 80023a8:	d834      	bhi.n	8002414 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80023aa:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023ac:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b0:	68cf      	ldr	r7, [r1, #12]
 80023b2:	fa07 f708 	lsl.w	r7, r7, r8
 80023b6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80023ba:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80023bc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023be:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023c2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80023c6:	409f      	lsls	r7, r3
 80023c8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80023cc:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80023ce:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023d0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d4:	688f      	ldr	r7, [r1, #8]
 80023d6:	fa07 f708 	lsl.w	r7, r7, r8
 80023da:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023de:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80023e0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e2:	d119      	bne.n	8002418 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80023e4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80023e8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ec:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80023f0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80023f8:	f04f 0e0f 	mov.w	lr, #15
 80023fc:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002400:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002404:	690f      	ldr	r7, [r1, #16]
 8002406:	fa07 f70b 	lsl.w	r7, r7, fp
 800240a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800240e:	f8ca 7020 	str.w	r7, [sl, #32]
 8002412:	e001      	b.n	8002418 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002414:	2c03      	cmp	r4, #3
 8002416:	d1da      	bne.n	80023ce <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002418:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800241a:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002420:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002422:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002426:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002428:	d06b      	beq.n	8002502 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	f04f 0a00 	mov.w	sl, #0
 800242e:	f8cd a004 	str.w	sl, [sp, #4]
 8002432:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002436:	4c40      	ldr	r4, [pc, #256]	; (8002538 <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002438:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800243c:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002440:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002444:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002448:	9601      	str	r6, [sp, #4]
 800244a:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800244c:	f023 0603 	bic.w	r6, r3, #3
 8002450:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002454:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002458:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800245c:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002460:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002464:	270f      	movs	r7, #15
 8002466:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800246a:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800246c:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002470:	d04e      	beq.n	8002510 <HAL_GPIO_Init+0x19c>
 8002472:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002476:	42a0      	cmp	r0, r4
 8002478:	d04c      	beq.n	8002514 <HAL_GPIO_Init+0x1a0>
 800247a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800247e:	42a0      	cmp	r0, r4
 8002480:	d04a      	beq.n	8002518 <HAL_GPIO_Init+0x1a4>
 8002482:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002486:	42a0      	cmp	r0, r4
 8002488:	d048      	beq.n	800251c <HAL_GPIO_Init+0x1a8>
 800248a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800248e:	42a0      	cmp	r0, r4
 8002490:	d046      	beq.n	8002520 <HAL_GPIO_Init+0x1ac>
 8002492:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002496:	42a0      	cmp	r0, r4
 8002498:	d044      	beq.n	8002524 <HAL_GPIO_Init+0x1b0>
 800249a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800249e:	42a0      	cmp	r0, r4
 80024a0:	d042      	beq.n	8002528 <HAL_GPIO_Init+0x1b4>
 80024a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024a6:	42a0      	cmp	r0, r4
 80024a8:	d040      	beq.n	800252c <HAL_GPIO_Init+0x1b8>
 80024aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024ae:	42a0      	cmp	r0, r4
 80024b0:	d03e      	beq.n	8002530 <HAL_GPIO_Init+0x1bc>
 80024b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80024b6:	42a0      	cmp	r0, r4
 80024b8:	bf0c      	ite	eq
 80024ba:	2409      	moveq	r4, #9
 80024bc:	240a      	movne	r4, #10
 80024be:	fa04 f40e 	lsl.w	r4, r4, lr
 80024c2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c4:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 80024c6:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024cc:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80024ce:	bf54      	ite	pl
 80024d0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024d2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80024d6:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 80024d8:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024da:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80024dc:	bf54      	ite	pl
 80024de:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024e0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80024e4:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024e6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e8:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80024ea:	bf54      	ite	pl
 80024ec:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024ee:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80024f2:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80024f4:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f6:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80024f8:	bf54      	ite	pl
 80024fa:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024fc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002500:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002502:	3301      	adds	r3, #1
 8002504:	2b10      	cmp	r3, #16
 8002506:	f47f af3b 	bne.w	8002380 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800250a:	b003      	add	sp, #12
 800250c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002510:	4654      	mov	r4, sl
 8002512:	e7d4      	b.n	80024be <HAL_GPIO_Init+0x14a>
 8002514:	2401      	movs	r4, #1
 8002516:	e7d2      	b.n	80024be <HAL_GPIO_Init+0x14a>
 8002518:	2402      	movs	r4, #2
 800251a:	e7d0      	b.n	80024be <HAL_GPIO_Init+0x14a>
 800251c:	2403      	movs	r4, #3
 800251e:	e7ce      	b.n	80024be <HAL_GPIO_Init+0x14a>
 8002520:	2404      	movs	r4, #4
 8002522:	e7cc      	b.n	80024be <HAL_GPIO_Init+0x14a>
 8002524:	2405      	movs	r4, #5
 8002526:	e7ca      	b.n	80024be <HAL_GPIO_Init+0x14a>
 8002528:	2406      	movs	r4, #6
 800252a:	e7c8      	b.n	80024be <HAL_GPIO_Init+0x14a>
 800252c:	2407      	movs	r4, #7
 800252e:	e7c6      	b.n	80024be <HAL_GPIO_Init+0x14a>
 8002530:	2408      	movs	r4, #8
 8002532:	e7c4      	b.n	80024be <HAL_GPIO_Init+0x14a>
 8002534:	40013c00 	.word	0x40013c00
 8002538:	40020000 	.word	0x40020000
 800253c:	40023800 	.word	0x40023800

08002540 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002544:	4c4a      	ldr	r4, [pc, #296]	; (8002670 <HAL_GPIO_DeInit+0x130>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002546:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8002678 <HAL_GPIO_DeInit+0x138>
 800254a:	f8df a130 	ldr.w	sl, [pc, #304]	; 800267c <HAL_GPIO_DeInit+0x13c>
 800254e:	f8df b130 	ldr.w	fp, [pc, #304]	; 8002680 <HAL_GPIO_DeInit+0x140>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8002554:	2301      	movs	r3, #1
 8002556:	fa03 fe02 	lsl.w	lr, r3, r2
    if(iocurrent == ioposition)
 800255a:	ea3e 0301 	bics.w	r3, lr, r1
    iocurrent = (GPIO_Pin) & ioposition;
 800255e:	ea0e 0701 	and.w	r7, lr, r1
    if(iocurrent == ioposition)
 8002562:	d16e      	bne.n	8002642 <HAL_GPIO_DeInit+0x102>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002564:	f022 0503 	bic.w	r5, r2, #3
 8002568:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800256c:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002570:	4b40      	ldr	r3, [pc, #256]	; (8002674 <HAL_GPIO_DeInit+0x134>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002572:	f8d5 8008 	ldr.w	r8, [r5, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002576:	f002 0c03 	and.w	ip, r2, #3
 800257a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800257e:	260f      	movs	r6, #15
 8002580:	fa06 f60c 	lsl.w	r6, r6, ip
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002584:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002586:	ea06 0808 	and.w	r8, r6, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800258a:	d05f      	beq.n	800264c <HAL_GPIO_DeInit+0x10c>
 800258c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002590:	4298      	cmp	r0, r3
 8002592:	d05d      	beq.n	8002650 <HAL_GPIO_DeInit+0x110>
 8002594:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002598:	4298      	cmp	r0, r3
 800259a:	d05b      	beq.n	8002654 <HAL_GPIO_DeInit+0x114>
 800259c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a0:	4298      	cmp	r0, r3
 80025a2:	d059      	beq.n	8002658 <HAL_GPIO_DeInit+0x118>
 80025a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025a8:	4298      	cmp	r0, r3
 80025aa:	d057      	beq.n	800265c <HAL_GPIO_DeInit+0x11c>
 80025ac:	4548      	cmp	r0, r9
 80025ae:	d057      	beq.n	8002660 <HAL_GPIO_DeInit+0x120>
 80025b0:	4550      	cmp	r0, sl
 80025b2:	d057      	beq.n	8002664 <HAL_GPIO_DeInit+0x124>
 80025b4:	4558      	cmp	r0, fp
 80025b6:	d057      	beq.n	8002668 <HAL_GPIO_DeInit+0x128>
 80025b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025bc:	4298      	cmp	r0, r3
 80025be:	d055      	beq.n	800266c <HAL_GPIO_DeInit+0x12c>
 80025c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025c4:	4298      	cmp	r0, r3
 80025c6:	bf0c      	ite	eq
 80025c8:	2309      	moveq	r3, #9
 80025ca:	230a      	movne	r3, #10
 80025cc:	fa03 f30c 	lsl.w	r3, r3, ip
 80025d0:	4543      	cmp	r3, r8
 80025d2:	d113      	bne.n	80025fc <HAL_GPIO_DeInit+0xbc>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	ea23 0307 	bic.w	r3, r3, r7
 80025da:	6023      	str	r3, [r4, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80025dc:	6863      	ldr	r3, [r4, #4]
 80025de:	ea23 0307 	bic.w	r3, r3, r7
 80025e2:	6063      	str	r3, [r4, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80025e4:	68a3      	ldr	r3, [r4, #8]
 80025e6:	ea23 0307 	bic.w	r3, r3, r7
 80025ea:	60a3      	str	r3, [r4, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80025ec:	68e3      	ldr	r3, [r4, #12]
 80025ee:	ea23 0707 	bic.w	r7, r3, r7
 80025f2:	60e7      	str	r7, [r4, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80025f4:	68ab      	ldr	r3, [r5, #8]
 80025f6:	ea23 0606 	bic.w	r6, r3, r6
 80025fa:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025fc:	6805      	ldr	r5, [r0, #0]
 80025fe:	2603      	movs	r6, #3
 8002600:	0053      	lsls	r3, r2, #1
 8002602:	fa06 f303 	lsl.w	r3, r6, r3
 8002606:	ea25 0503 	bic.w	r5, r5, r3
 800260a:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800260c:	fa22 f506 	lsr.w	r5, r2, r6
 8002610:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8002614:	f002 0c07 	and.w	ip, r2, #7
 8002618:	6a2e      	ldr	r6, [r5, #32]
 800261a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800261e:	270f      	movs	r7, #15
 8002620:	fa07 f70c 	lsl.w	r7, r7, ip
 8002624:	ea26 0707 	bic.w	r7, r6, r7
 8002628:	622f      	str	r7, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800262a:	68c5      	ldr	r5, [r0, #12]
 800262c:	ea25 0503 	bic.w	r5, r5, r3
 8002630:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002632:	6845      	ldr	r5, [r0, #4]
 8002634:	ea25 050e 	bic.w	r5, r5, lr
 8002638:	6045      	str	r5, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800263a:	6885      	ldr	r5, [r0, #8]
 800263c:	ea25 0303 	bic.w	r3, r5, r3
 8002640:	6083      	str	r3, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002642:	3201      	adds	r2, #1
 8002644:	2a10      	cmp	r2, #16
 8002646:	d185      	bne.n	8002554 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8002648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800264c:	2300      	movs	r3, #0
 800264e:	e7bd      	b.n	80025cc <HAL_GPIO_DeInit+0x8c>
 8002650:	2301      	movs	r3, #1
 8002652:	e7bb      	b.n	80025cc <HAL_GPIO_DeInit+0x8c>
 8002654:	2302      	movs	r3, #2
 8002656:	e7b9      	b.n	80025cc <HAL_GPIO_DeInit+0x8c>
 8002658:	2303      	movs	r3, #3
 800265a:	e7b7      	b.n	80025cc <HAL_GPIO_DeInit+0x8c>
 800265c:	2304      	movs	r3, #4
 800265e:	e7b5      	b.n	80025cc <HAL_GPIO_DeInit+0x8c>
 8002660:	2305      	movs	r3, #5
 8002662:	e7b3      	b.n	80025cc <HAL_GPIO_DeInit+0x8c>
 8002664:	2306      	movs	r3, #6
 8002666:	e7b1      	b.n	80025cc <HAL_GPIO_DeInit+0x8c>
 8002668:	2307      	movs	r3, #7
 800266a:	e7af      	b.n	80025cc <HAL_GPIO_DeInit+0x8c>
 800266c:	2308      	movs	r3, #8
 800266e:	e7ad      	b.n	80025cc <HAL_GPIO_DeInit+0x8c>
 8002670:	40013c00 	.word	0x40013c00
 8002674:	40020000 	.word	0x40020000
 8002678:	40021400 	.word	0x40021400
 800267c:	40021800 	.word	0x40021800
 8002680:	40021c00 	.word	0x40021c00

08002684 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002684:	6903      	ldr	r3, [r0, #16]
 8002686:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002688:	bf14      	ite	ne
 800268a:	2001      	movne	r0, #1
 800268c:	2000      	moveq	r0, #0
 800268e:	4770      	bx	lr

08002690 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002690:	b10a      	cbz	r2, 8002696 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002692:	6181      	str	r1, [r0, #24]
  }
}
 8002694:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002696:	0409      	lsls	r1, r1, #16
 8002698:	e7fb      	b.n	8002692 <HAL_GPIO_WritePin+0x2>
	...

0800269c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800269c:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800269e:	4604      	mov	r4, r0
 80026a0:	b908      	cbnz	r0, 80026a6 <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80026a2:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 80026a4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80026aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026ae:	b91b      	cbnz	r3, 80026b8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80026b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80026b4:	f001 ff58 	bl	8004568 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026b8:	2324      	movs	r3, #36	; 0x24
 80026ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	f022 0201 	bic.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026d6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026d8:	f000 fca8 	bl	800302c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026dc:	4a3f      	ldr	r2, [pc, #252]	; (80027dc <HAL_I2C_Init+0x140>)
 80026de:	6863      	ldr	r3, [r4, #4]
 80026e0:	4293      	cmp	r3, r2
 80026e2:	bf94      	ite	ls
 80026e4:	4a3e      	ldrls	r2, [pc, #248]	; (80027e0 <HAL_I2C_Init+0x144>)
 80026e6:	4a3f      	ldrhi	r2, [pc, #252]	; (80027e4 <HAL_I2C_Init+0x148>)
 80026e8:	4290      	cmp	r0, r2
 80026ea:	bf8c      	ite	hi
 80026ec:	2200      	movhi	r2, #0
 80026ee:	2201      	movls	r2, #1
 80026f0:	2a00      	cmp	r2, #0
 80026f2:	d1d6      	bne.n	80026a2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026f4:	6821      	ldr	r1, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80026f6:	4e3c      	ldr	r6, [pc, #240]	; (80027e8 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026f8:	684a      	ldr	r2, [r1, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80026fa:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026fe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002702:	4332      	orrs	r2, r6
 8002704:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002706:	4a35      	ldr	r2, [pc, #212]	; (80027dc <HAL_I2C_Init+0x140>)
 8002708:	6a0d      	ldr	r5, [r1, #32]
 800270a:	4293      	cmp	r3, r2
 800270c:	bf84      	itt	hi
 800270e:	f44f 7296 	movhi.w	r2, #300	; 0x12c
 8002712:	4372      	mulhi	r2, r6
 8002714:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002718:	bf91      	iteee	ls
 800271a:	1c72      	addls	r2, r6, #1
 800271c:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002720:	fbb2 f2f6 	udivhi	r2, r2, r6
 8002724:	3201      	addhi	r2, #1
 8002726:	432a      	orrs	r2, r5
 8002728:	620a      	str	r2, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800272a:	69cd      	ldr	r5, [r1, #28]
 800272c:	1e42      	subs	r2, r0, #1
 800272e:	482b      	ldr	r0, [pc, #172]	; (80027dc <HAL_I2C_Init+0x140>)
 8002730:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8002734:	4283      	cmp	r3, r0
 8002736:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800273a:	d832      	bhi.n	80027a2 <HAL_I2C_Init+0x106>
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	f640 72fc 	movw	r2, #4092	; 0xffc
 8002746:	3301      	adds	r3, #1
 8002748:	4213      	tst	r3, r2
 800274a:	d042      	beq.n	80027d2 <HAL_I2C_Init+0x136>
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	432b      	orrs	r3, r5
 8002752:	61cb      	str	r3, [r1, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002754:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002758:	680a      	ldr	r2, [r1, #0]
 800275a:	4303      	orrs	r3, r0
 800275c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002764:	688a      	ldr	r2, [r1, #8]
 8002766:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800276a:	f422 4203 	bic.w	r2, r2, #33536	; 0x8300
 800276e:	4303      	orrs	r3, r0
 8002770:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002774:	4313      	orrs	r3, r2
 8002776:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002778:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 800277c:	68ca      	ldr	r2, [r1, #12]
 800277e:	4303      	orrs	r3, r0
 8002780:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002784:	4313      	orrs	r3, r2
 8002786:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002788:	680b      	ldr	r3, [r1, #0]
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002790:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002792:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002794:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002796:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800279a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800279c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80027a0:	e780      	b.n	80026a4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027a2:	68a0      	ldr	r0, [r4, #8]
 80027a4:	b950      	cbnz	r0, 80027bc <HAL_I2C_Init+0x120>
 80027a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	3301      	adds	r3, #1
 80027b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b4:	b17b      	cbz	r3, 80027d6 <HAL_I2C_Init+0x13a>
 80027b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ba:	e7c9      	b.n	8002750 <HAL_I2C_Init+0xb4>
 80027bc:	2019      	movs	r0, #25
 80027be:	4343      	muls	r3, r0
 80027c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c4:	3301      	adds	r3, #1
 80027c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ca:	b123      	cbz	r3, 80027d6 <HAL_I2C_Init+0x13a>
 80027cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027d0:	e7be      	b.n	8002750 <HAL_I2C_Init+0xb4>
 80027d2:	2304      	movs	r3, #4
 80027d4:	e7bc      	b.n	8002750 <HAL_I2C_Init+0xb4>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e7ba      	b.n	8002750 <HAL_I2C_Init+0xb4>
 80027da:	bf00      	nop
 80027dc:	000186a0 	.word	0x000186a0
 80027e0:	001e847f 	.word	0x001e847f
 80027e4:	003d08ff 	.word	0x003d08ff
 80027e8:	000f4240 	.word	0x000f4240

080027ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027ec:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027f2:	2b20      	cmp	r3, #32
 80027f4:	b2dc      	uxtb	r4, r3
 80027f6:	d116      	bne.n	8002826 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80027f8:	2324      	movs	r3, #36	; 0x24
 80027fa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027fe:	6803      	ldr	r3, [r0, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002808:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800280a:	f022 0210 	bic.w	r2, r2, #16
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002812:	4311      	orrs	r1, r2
 8002814:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800281e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 8002822:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002824:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002826:	2002      	movs	r0, #2
 8002828:	e7fc      	b.n	8002824 <HAL_I2CEx_ConfigAnalogFilter+0x38>

0800282a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800282a:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002830:	2b20      	cmp	r3, #32
 8002832:	b2dc      	uxtb	r4, r3
 8002834:	d116      	bne.n	8002864 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002836:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002838:	2324      	movs	r3, #36	; 0x24
 800283a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 800283e:	6813      	ldr	r3, [r2, #0]
 8002840:	f023 0301 	bic.w	r3, r3, #1
 8002844:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002846:	6a55      	ldr	r5, [r2, #36]	; 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002848:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800284c:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800284e:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002850:	b289      	uxth	r1, r1
 8002852:	6251      	str	r1, [r2, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002854:	6813      	ldr	r3, [r2, #0]
 8002856:	f043 0301 	orr.w	r3, r3, #1
 800285a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800285c:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 8002860:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002862:	bd30      	pop	{r4, r5, pc}
    return HAL_BUSY;
 8002864:	2002      	movs	r0, #2
 8002866:	e7fc      	b.n	8002862 <HAL_I2CEx_ConfigDigitalFilter+0x38>

08002868 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800286c:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800286e:	6804      	ldr	r4, [r0, #0]
 8002870:	684f      	ldr	r7, [r1, #4]
 8002872:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002874:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002878:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800287c:	3284      	adds	r2, #132	; 0x84
 800287e:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002880:	f10c 0601 	add.w	r6, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002884:	6858      	ldr	r0, [r3, #4]
 8002886:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 800288a:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800288c:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800288e:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002892:	f3c0 400b 	ubfx	r0, r0, #16, #12
 8002896:	4430      	add	r0, r6
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002898:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800289a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800289e:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80028a0:	68e0      	ldr	r0, [r4, #12]
 80028a2:	68cd      	ldr	r5, [r1, #12]
 80028a4:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80028a8:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80028aa:	6898      	ldr	r0, [r3, #8]
 80028ac:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80028b0:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80028b2:	68e6      	ldr	r6, [r4, #12]
 80028b4:	6888      	ldr	r0, [r1, #8]
 80028b6:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80028ba:	3001      	adds	r0, #1
 80028bc:	4430      	add	r0, r6
 80028be:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80028c2:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80028c4:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80028c6:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80028c8:	f020 0007 	bic.w	r0, r0, #7
 80028cc:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80028ce:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80028d2:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80028d4:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80028d6:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80028da:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80028de:	f8c3 e018 	str.w	lr, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80028e2:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 80028e6:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80028ea:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80028ee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80028f2:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80028f4:	6958      	ldr	r0, [r3, #20]
 80028f6:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80028fa:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80028fc:	6948      	ldr	r0, [r1, #20]
 80028fe:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002900:	69d8      	ldr	r0, [r3, #28]
 8002902:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8002906:	f020 0007 	bic.w	r0, r0, #7
 800290a:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800290c:	e9d1 5007 	ldrd	r5, r0, [r1, #28]
 8002910:	4305      	orrs	r5, r0
 8002912:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002914:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002916:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002918:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800291c:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800291e:	b31e      	cbz	r6, 8002968 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002920:	2e01      	cmp	r6, #1
 8002922:	d023      	beq.n	800296c <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002924:	1eb0      	subs	r0, r6, #2
 8002926:	2802      	cmp	r0, #2
 8002928:	d922      	bls.n	8002970 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800292a:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 800292c:	bf0c      	ite	eq
 800292e:	2002      	moveq	r0, #2
 8002930:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002932:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8002934:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8002938:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800293a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800293c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800293e:	eba7 070c 	sub.w	r7, r7, ip
 8002942:	4345      	muls	r5, r0
 8002944:	4378      	muls	r0, r7
 8002946:	3003      	adds	r0, #3
 8002948:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800294c:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800294e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002950:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8002954:	f020 0007 	bic.w	r0, r0, #7
 8002958:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800295a:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800295c:	58a3      	ldr	r3, [r4, r2]
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	50a3      	str	r3, [r4, r2]
}
 8002964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8002968:	2004      	movs	r0, #4
 800296a:	e7e2      	b.n	8002932 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800296c:	2003      	movs	r0, #3
 800296e:	e7e0      	b.n	8002932 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8002970:	2002      	movs	r0, #2
 8002972:	e7de      	b.n	8002932 <LTDC_SetConfig+0xca>

08002974 <HAL_LTDC_Init>:
{
 8002974:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8002976:	4604      	mov	r4, r0
 8002978:	2800      	cmp	r0, #0
 800297a:	d063      	beq.n	8002a44 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800297c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8002980:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002984:	b91b      	cbnz	r3, 800298e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8002986:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800298a:	f001 fe95 	bl	80046b8 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800298e:	2302      	movs	r3, #2
 8002990:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800299c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800299e:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80029a2:	4302      	orrs	r2, r0
 80029a4:	68e0      	ldr	r0, [r4, #12]
 80029a6:	6999      	ldr	r1, [r3, #24]
 80029a8:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80029aa:	6920      	ldr	r0, [r4, #16]
 80029ac:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80029ae:	430a      	orrs	r2, r1
 80029b0:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	4924      	ldr	r1, [pc, #144]	; (8002a48 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80029b6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80029b8:	400a      	ands	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80029c2:	69a0      	ldr	r0, [r4, #24]
 80029c4:	4302      	orrs	r2, r0
 80029c6:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80029c8:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80029ca:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80029cc:	400a      	ands	r2, r1
 80029ce:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80029d6:	6a20      	ldr	r0, [r4, #32]
 80029d8:	4302      	orrs	r2, r0
 80029da:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80029dc:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80029de:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80029e0:	400a      	ands	r2, r1
 80029e2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80029ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80029ec:	4302      	orrs	r2, r0
 80029ee:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80029f0:	695a      	ldr	r2, [r3, #20]
 80029f2:	4011      	ands	r1, r2
 80029f4:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80029f6:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80029f8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80029fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80029fe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002a00:	430a      	orrs	r2, r1
 8002a02:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002a04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002a06:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002a0a:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002a0e:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8002a12:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a16:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002a20:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8002a24:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a28:	f042 0206 	orr.w	r2, r2, #6
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	f042 0201 	orr.w	r2, r2, #1
 8002a34:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002a36:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8002a38:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002a3a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8002a3e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8002a42:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
 8002a46:	e7fc      	b.n	8002a42 <HAL_LTDC_Init+0xce>
 8002a48:	f000f800 	.word	0xf000f800

08002a4c <HAL_LTDC_ConfigLayer>:
{
 8002a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8002a50:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002a54:	2b01      	cmp	r3, #1
{
 8002a56:	4606      	mov	r6, r0
 8002a58:	460f      	mov	r7, r1
 8002a5a:	4694      	mov	ip, r2
 8002a5c:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8002a60:	d01f      	beq.n	8002aa2 <HAL_LTDC_ConfigLayer+0x56>
 8002a62:	f04f 0801 	mov.w	r8, #1
 8002a66:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a6a:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002a6e:	2434      	movs	r4, #52	; 0x34
 8002a70:	460d      	mov	r5, r1
 8002a72:	fb04 6402 	mla	r4, r4, r2, r6
 8002a76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a78:	3438      	adds	r4, #56	; 0x38
 8002a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a84:	682b      	ldr	r3, [r5, #0]
 8002a86:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002a88:	4630      	mov	r0, r6
 8002a8a:	4662      	mov	r2, ip
 8002a8c:	4639      	mov	r1, r7
 8002a8e:	f7ff feeb 	bl	8002868 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002a92:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8002a94:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002a96:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002a9a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002a9e:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8002aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002aa6 <HAL_LTDC_ConfigColorKeying>:
{
 8002aa6:	b510      	push	{r4, lr}
  __HAL_LOCK(hltdc);
 8002aa8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	f04f 0302 	mov.w	r3, #2
 8002ab2:	d013      	beq.n	8002adc <HAL_LTDC_ConfigColorKeying+0x36>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8002ab4:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002ab6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8002aba:	eb04 12c2 	add.w	r2, r4, r2, lsl #7
 8002abe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002ac2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002aca:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8002acc:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002ad0:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8002ad2:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8002adc:	4618      	mov	r0, r3
}
 8002ade:	bd10      	pop	{r4, pc}

08002ae0 <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 8002ae0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	f04f 0302 	mov.w	r3, #2
 8002aea:	d00f      	beq.n	8002b0c <HAL_LTDC_EnableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8002aec:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002aee:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8002af2:	3184      	adds	r1, #132	; 0x84
 8002af4:	6803      	ldr	r3, [r0, #0]
 8002af6:	585a      	ldr	r2, [r3, r1]
 8002af8:	f042 0202 	orr.w	r2, r2, #2
 8002afc:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002afe:	2201      	movs	r2, #1
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 8002b02:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8002b04:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002b08:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8002b0c:	4618      	mov	r0, r3
}
 8002b0e:	4770      	bx	lr

08002b10 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8002b10:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	f04f 0302 	mov.w	r3, #2
 8002b1a:	d00c      	beq.n	8002b36 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002b1c:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b1e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8002b22:	6993      	ldr	r3, [r2, #24]
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8002b30:	2300      	movs	r3, #0
 8002b32:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8002b36:	4618      	mov	r0, r3
}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40016800 	.word	0x40016800

08002b40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b44:	4604      	mov	r4, r0
 8002b46:	b340      	cbz	r0, 8002b9a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b48:	6803      	ldr	r3, [r0, #0]
 8002b4a:	07dd      	lsls	r5, r3, #31
 8002b4c:	d410      	bmi.n	8002b70 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	0798      	lsls	r0, r3, #30
 8002b52:	d45e      	bmi.n	8002c12 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b54:	6823      	ldr	r3, [r4, #0]
 8002b56:	071a      	lsls	r2, r3, #28
 8002b58:	f100 80a0 	bmi.w	8002c9c <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	075b      	lsls	r3, r3, #29
 8002b60:	f100 80be 	bmi.w	8002ce0 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b64:	69a0      	ldr	r0, [r4, #24]
 8002b66:	2800      	cmp	r0, #0
 8002b68:	f040 811f 	bne.w	8002daa <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	e02b      	b.n	8002bc8 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b70:	4ba6      	ldr	r3, [pc, #664]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	f002 020c 	and.w	r2, r2, #12
 8002b78:	2a04      	cmp	r2, #4
 8002b7a:	d007      	beq.n	8002b8c <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b82:	2a08      	cmp	r2, #8
 8002b84:	d10b      	bne.n	8002b9e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	0251      	lsls	r1, r2, #9
 8002b8a:	d508      	bpl.n	8002b9e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b8c:	4b9f      	ldr	r3, [pc, #636]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	039a      	lsls	r2, r3, #14
 8002b92:	d5dc      	bpl.n	8002b4e <HAL_RCC_OscConfig+0xe>
 8002b94:	6863      	ldr	r3, [r4, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1d9      	bne.n	8002b4e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002b9a:	2001      	movs	r0, #1
 8002b9c:	e014      	b.n	8002bc8 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b9e:	6862      	ldr	r2, [r4, #4]
 8002ba0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002ba4:	d113      	bne.n	8002bce <HAL_RCC_OscConfig+0x8e>
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002bac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002bae:	f7ff f957 	bl	8001e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb2:	4e96      	ldr	r6, [pc, #600]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002bb4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	6833      	ldr	r3, [r6, #0]
 8002bb8:	039b      	lsls	r3, r3, #14
 8002bba:	d4c8      	bmi.n	8002b4e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7ff f950 	bl	8001e60 <HAL_GetTick>
 8002bc0:	1b40      	subs	r0, r0, r5
 8002bc2:	2864      	cmp	r0, #100	; 0x64
 8002bc4:	d9f7      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002bc6:	2003      	movs	r0, #3
}
 8002bc8:	b002      	add	sp, #8
 8002bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bce:	4d8f      	ldr	r5, [pc, #572]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
 8002bd0:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002bd4:	682b      	ldr	r3, [r5, #0]
 8002bd6:	d107      	bne.n	8002be8 <HAL_RCC_OscConfig+0xa8>
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	602b      	str	r3, [r5, #0]
 8002bde:	682b      	ldr	r3, [r5, #0]
 8002be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be6:	e7e2      	b.n	8002bae <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bec:	602b      	str	r3, [r5, #0]
 8002bee:	682b      	ldr	r3, [r5, #0]
 8002bf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf4:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bf6:	2a00      	cmp	r2, #0
 8002bf8:	d1d9      	bne.n	8002bae <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8002bfa:	f7ff f931 	bl	8001e60 <HAL_GetTick>
 8002bfe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c00:	682b      	ldr	r3, [r5, #0]
 8002c02:	039f      	lsls	r7, r3, #14
 8002c04:	d5a3      	bpl.n	8002b4e <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c06:	f7ff f92b 	bl	8001e60 <HAL_GetTick>
 8002c0a:	1b80      	subs	r0, r0, r6
 8002c0c:	2864      	cmp	r0, #100	; 0x64
 8002c0e:	d9f7      	bls.n	8002c00 <HAL_RCC_OscConfig+0xc0>
 8002c10:	e7d9      	b.n	8002bc6 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c12:	4b7e      	ldr	r3, [pc, #504]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	f012 0f0c 	tst.w	r2, #12
 8002c1a:	d007      	beq.n	8002c2c <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c22:	2a08      	cmp	r2, #8
 8002c24:	d111      	bne.n	8002c4a <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	025e      	lsls	r6, r3, #9
 8002c2a:	d40e      	bmi.n	8002c4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2c:	4b77      	ldr	r3, [pc, #476]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	0795      	lsls	r5, r2, #30
 8002c32:	d502      	bpl.n	8002c3a <HAL_RCC_OscConfig+0xfa>
 8002c34:	68e2      	ldr	r2, [r4, #12]
 8002c36:	2a01      	cmp	r2, #1
 8002c38:	d1af      	bne.n	8002b9a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	6921      	ldr	r1, [r4, #16]
 8002c3e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002c42:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8002c46:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c48:	e784      	b.n	8002b54 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c4a:	68e2      	ldr	r2, [r4, #12]
 8002c4c:	4b70      	ldr	r3, [pc, #448]	; (8002e10 <HAL_RCC_OscConfig+0x2d0>)
 8002c4e:	b1b2      	cbz	r2, 8002c7e <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8002c50:	2201      	movs	r2, #1
 8002c52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c54:	f7ff f904 	bl	8001e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c58:	4d6c      	ldr	r5, [pc, #432]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002c5a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5c:	682b      	ldr	r3, [r5, #0]
 8002c5e:	0798      	lsls	r0, r3, #30
 8002c60:	d507      	bpl.n	8002c72 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	682b      	ldr	r3, [r5, #0]
 8002c64:	6922      	ldr	r2, [r4, #16]
 8002c66:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c6a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002c6e:	602b      	str	r3, [r5, #0]
 8002c70:	e770      	b.n	8002b54 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c72:	f7ff f8f5 	bl	8001e60 <HAL_GetTick>
 8002c76:	1b80      	subs	r0, r0, r6
 8002c78:	2802      	cmp	r0, #2
 8002c7a:	d9ef      	bls.n	8002c5c <HAL_RCC_OscConfig+0x11c>
 8002c7c:	e7a3      	b.n	8002bc6 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8002c7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c80:	f7ff f8ee 	bl	8001e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c84:	4e61      	ldr	r6, [pc, #388]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002c86:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c88:	6833      	ldr	r3, [r6, #0]
 8002c8a:	0799      	lsls	r1, r3, #30
 8002c8c:	f57f af62 	bpl.w	8002b54 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c90:	f7ff f8e6 	bl	8001e60 <HAL_GetTick>
 8002c94:	1b40      	subs	r0, r0, r5
 8002c96:	2802      	cmp	r0, #2
 8002c98:	d9f6      	bls.n	8002c88 <HAL_RCC_OscConfig+0x148>
 8002c9a:	e794      	b.n	8002bc6 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c9c:	6962      	ldr	r2, [r4, #20]
 8002c9e:	4b5d      	ldr	r3, [pc, #372]	; (8002e14 <HAL_RCC_OscConfig+0x2d4>)
 8002ca0:	b17a      	cbz	r2, 8002cc2 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002ca6:	f7ff f8db 	bl	8001e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002caa:	4e58      	ldr	r6, [pc, #352]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8002cac:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cae:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002cb0:	079f      	lsls	r7, r3, #30
 8002cb2:	f53f af53 	bmi.w	8002b5c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7ff f8d3 	bl	8001e60 <HAL_GetTick>
 8002cba:	1b40      	subs	r0, r0, r5
 8002cbc:	2802      	cmp	r0, #2
 8002cbe:	d9f6      	bls.n	8002cae <HAL_RCC_OscConfig+0x16e>
 8002cc0:	e781      	b.n	8002bc6 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002cc2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002cc4:	f7ff f8cc 	bl	8001e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc8:	4e50      	ldr	r6, [pc, #320]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8002cca:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ccc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002cce:	0798      	lsls	r0, r3, #30
 8002cd0:	f57f af44 	bpl.w	8002b5c <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7ff f8c4 	bl	8001e60 <HAL_GetTick>
 8002cd8:	1b40      	subs	r0, r0, r5
 8002cda:	2802      	cmp	r0, #2
 8002cdc:	d9f6      	bls.n	8002ccc <HAL_RCC_OscConfig+0x18c>
 8002cde:	e772      	b.n	8002bc6 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce0:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
 8002ce2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ce4:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002ce8:	d128      	bne.n	8002d3c <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cea:	9201      	str	r2, [sp, #4]
 8002cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002cfe:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4d45      	ldr	r5, [pc, #276]	; (8002e18 <HAL_RCC_OscConfig+0x2d8>)
 8002d02:	682b      	ldr	r3, [r5, #0]
 8002d04:	05d9      	lsls	r1, r3, #23
 8002d06:	d51b      	bpl.n	8002d40 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	68a3      	ldr	r3, [r4, #8]
 8002d0a:	4d40      	ldr	r5, [pc, #256]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d127      	bne.n	8002d60 <HAL_RCC_OscConfig+0x220>
 8002d10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d12:	f043 0301 	orr.w	r3, r3, #1
 8002d16:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002d18:	f7ff f8a2 	bl	8001e60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1c:	4e3b      	ldr	r6, [pc, #236]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8002d1e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d20:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d24:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002d26:	079b      	lsls	r3, r3, #30
 8002d28:	d539      	bpl.n	8002d9e <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8002d2a:	2f00      	cmp	r7, #0
 8002d2c:	f43f af1a 	beq.w	8002b64 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d30:	4a36      	ldr	r2, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
 8002d32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d38:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3a:	e713      	b.n	8002b64 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002d3c:	2700      	movs	r7, #0
 8002d3e:	e7df      	b.n	8002d00 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d40:	682b      	ldr	r3, [r5, #0]
 8002d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d46:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002d48:	f7ff f88a 	bl	8001e60 <HAL_GetTick>
 8002d4c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4e:	682b      	ldr	r3, [r5, #0]
 8002d50:	05da      	lsls	r2, r3, #23
 8002d52:	d4d9      	bmi.n	8002d08 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d54:	f7ff f884 	bl	8001e60 <HAL_GetTick>
 8002d58:	1b80      	subs	r0, r0, r6
 8002d5a:	2802      	cmp	r0, #2
 8002d5c:	d9f7      	bls.n	8002d4e <HAL_RCC_OscConfig+0x20e>
 8002d5e:	e732      	b.n	8002bc6 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d104      	bne.n	8002d6e <HAL_RCC_OscConfig+0x22e>
 8002d64:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	672b      	str	r3, [r5, #112]	; 0x70
 8002d6c:	e7d0      	b.n	8002d10 <HAL_RCC_OscConfig+0x1d0>
 8002d6e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002d70:	f022 0201 	bic.w	r2, r2, #1
 8002d74:	672a      	str	r2, [r5, #112]	; 0x70
 8002d76:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002d78:	f022 0204 	bic.w	r2, r2, #4
 8002d7c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1ca      	bne.n	8002d18 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8002d82:	f7ff f86d 	bl	8001e60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002d8a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d8c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d8e:	0798      	lsls	r0, r3, #30
 8002d90:	d5cb      	bpl.n	8002d2a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d92:	f7ff f865 	bl	8001e60 <HAL_GetTick>
 8002d96:	1b80      	subs	r0, r0, r6
 8002d98:	4540      	cmp	r0, r8
 8002d9a:	d9f7      	bls.n	8002d8c <HAL_RCC_OscConfig+0x24c>
 8002d9c:	e713      	b.n	8002bc6 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7ff f85f 	bl	8001e60 <HAL_GetTick>
 8002da2:	1b40      	subs	r0, r0, r5
 8002da4:	4540      	cmp	r0, r8
 8002da6:	d9bd      	bls.n	8002d24 <HAL_RCC_OscConfig+0x1e4>
 8002da8:	e70d      	b.n	8002bc6 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002daa:	4d18      	ldr	r5, [pc, #96]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
 8002dac:	68ab      	ldr	r3, [r5, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d047      	beq.n	8002e46 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db6:	4e19      	ldr	r6, [pc, #100]	; (8002e1c <HAL_RCC_OscConfig+0x2dc>)
 8002db8:	2300      	movs	r3, #0
 8002dba:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbe:	d135      	bne.n	8002e2c <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8002dc0:	f7ff f84e 	bl	8001e60 <HAL_GetTick>
 8002dc4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	682b      	ldr	r3, [r5, #0]
 8002dc8:	0199      	lsls	r1, r3, #6
 8002dca:	d429      	bmi.n	8002e20 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dcc:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002dd4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002dd8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002dda:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002dde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002de0:	0852      	lsrs	r2, r2, #1
 8002de2:	3a01      	subs	r2, #1
 8002de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002de8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002dea:	2301      	movs	r3, #1
 8002dec:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002dee:	f7ff f837 	bl	8001e60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df2:	4d06      	ldr	r5, [pc, #24]	; (8002e0c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8002df4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	682b      	ldr	r3, [r5, #0]
 8002df8:	019a      	lsls	r2, r3, #6
 8002dfa:	f53f aeb7 	bmi.w	8002b6c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfe:	f7ff f82f 	bl	8001e60 <HAL_GetTick>
 8002e02:	1b00      	subs	r0, r0, r4
 8002e04:	2802      	cmp	r0, #2
 8002e06:	d9f6      	bls.n	8002df6 <HAL_RCC_OscConfig+0x2b6>
 8002e08:	e6dd      	b.n	8002bc6 <HAL_RCC_OscConfig+0x86>
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	42470000 	.word	0x42470000
 8002e14:	42470e80 	.word	0x42470e80
 8002e18:	40007000 	.word	0x40007000
 8002e1c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e20:	f7ff f81e 	bl	8001e60 <HAL_GetTick>
 8002e24:	1bc0      	subs	r0, r0, r7
 8002e26:	2802      	cmp	r0, #2
 8002e28:	d9cd      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x286>
 8002e2a:	e6cc      	b.n	8002bc6 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002e2c:	f7ff f818 	bl	8001e60 <HAL_GetTick>
 8002e30:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e32:	682b      	ldr	r3, [r5, #0]
 8002e34:	019b      	lsls	r3, r3, #6
 8002e36:	f57f ae99 	bpl.w	8002b6c <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e3a:	f7ff f811 	bl	8001e60 <HAL_GetTick>
 8002e3e:	1b00      	subs	r0, r0, r4
 8002e40:	2802      	cmp	r0, #2
 8002e42:	d9f6      	bls.n	8002e32 <HAL_RCC_OscConfig+0x2f2>
 8002e44:	e6bf      	b.n	8002bc6 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e46:	2801      	cmp	r0, #1
 8002e48:	f43f aebe 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8002e4c:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4e:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e50:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e54:	4291      	cmp	r1, r2
 8002e56:	f47f aea0 	bne.w	8002b9a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e60:	428a      	cmp	r2, r1
 8002e62:	f47f ae9a 	bne.w	8002b9a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e66:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e68:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002e72:	f47f ae92 	bne.w	8002b9a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e78:	0852      	lsrs	r2, r2, #1
 8002e7a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002e7e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e80:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002e84:	f47f ae89 	bne.w	8002b9a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e8a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e8e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002e92:	f43f ae6b 	beq.w	8002b6c <HAL_RCC_OscConfig+0x2c>
 8002e96:	e680      	b.n	8002b9a <HAL_RCC_OscConfig+0x5a>

08002e98 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e98:	4913      	ldr	r1, [pc, #76]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002e9a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e9c:	688b      	ldr	r3, [r1, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d01c      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x48>
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d11c      	bne.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eaa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eac:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eae:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eb0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb4:	bf14      	ite	ne
 8002eb6:	480d      	ldrne	r0, [pc, #52]	; (8002eec <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb8:	480d      	ldreq	r0, [pc, #52]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eba:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002ebe:	bf18      	it	ne
 8002ec0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ec2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec6:	fba1 0100 	umull	r0, r1, r1, r0
 8002eca:	f7fd feed 	bl	8000ca8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ece:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <HAL_RCC_GetSysClockFreq+0x50>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002eda:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002ede:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ee0:	4802      	ldr	r0, [pc, #8]	; (8002eec <HAL_RCC_GetSysClockFreq+0x54>)
 8002ee2:	e7fc      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002ee4:	4802      	ldr	r0, [pc, #8]	; (8002ef0 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002ee6:	e7fa      	b.n	8002ede <HAL_RCC_GetSysClockFreq+0x46>
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	007a1200 	.word	0x007a1200
 8002ef0:	00f42400 	.word	0x00f42400

08002ef4 <HAL_RCC_ClockConfig>:
{
 8002ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ef8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002efa:	4604      	mov	r4, r0
 8002efc:	b910      	cbnz	r0, 8002f04 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002efe:	2001      	movs	r0, #1
}
 8002f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f04:	4b44      	ldr	r3, [pc, #272]	; (8003018 <HAL_RCC_ClockConfig+0x124>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	f002 020f 	and.w	r2, r2, #15
 8002f0c:	428a      	cmp	r2, r1
 8002f0e:	d328      	bcc.n	8002f62 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f10:	6822      	ldr	r2, [r4, #0]
 8002f12:	0797      	lsls	r7, r2, #30
 8002f14:	d42d      	bmi.n	8002f72 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f16:	07d0      	lsls	r0, r2, #31
 8002f18:	d441      	bmi.n	8002f9e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1a:	4b3f      	ldr	r3, [pc, #252]	; (8003018 <HAL_RCC_ClockConfig+0x124>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f002 020f 	and.w	r2, r2, #15
 8002f22:	42aa      	cmp	r2, r5
 8002f24:	d866      	bhi.n	8002ff4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f26:	6822      	ldr	r2, [r4, #0]
 8002f28:	0751      	lsls	r1, r2, #29
 8002f2a:	d46c      	bmi.n	8003006 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	0713      	lsls	r3, r2, #28
 8002f2e:	d507      	bpl.n	8002f40 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f30:	4a3a      	ldr	r2, [pc, #232]	; (800301c <HAL_RCC_ClockConfig+0x128>)
 8002f32:	6921      	ldr	r1, [r4, #16]
 8002f34:	6893      	ldr	r3, [r2, #8]
 8002f36:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002f3a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002f3e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f40:	f7ff ffaa 	bl	8002e98 <HAL_RCC_GetSysClockFreq>
 8002f44:	4b35      	ldr	r3, [pc, #212]	; (800301c <HAL_RCC_ClockConfig+0x128>)
 8002f46:	4a36      	ldr	r2, [pc, #216]	; (8003020 <HAL_RCC_ClockConfig+0x12c>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	40d8      	lsrs	r0, r3
 8002f52:	4b34      	ldr	r3, [pc, #208]	; (8003024 <HAL_RCC_ClockConfig+0x130>)
 8002f54:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002f56:	4b34      	ldr	r3, [pc, #208]	; (8003028 <HAL_RCC_ClockConfig+0x134>)
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	f001 ffb5 	bl	8004ec8 <HAL_InitTick>
  return HAL_OK;
 8002f5e:	2000      	movs	r0, #0
 8002f60:	e7ce      	b.n	8002f00 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	b2ca      	uxtb	r2, r1
 8002f64:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	428b      	cmp	r3, r1
 8002f6e:	d1c6      	bne.n	8002efe <HAL_RCC_ClockConfig+0xa>
 8002f70:	e7ce      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f72:	4b2a      	ldr	r3, [pc, #168]	; (800301c <HAL_RCC_ClockConfig+0x128>)
 8002f74:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	bf1e      	ittt	ne
 8002f7a:	6899      	ldrne	r1, [r3, #8]
 8002f7c:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002f80:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f82:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f84:	bf42      	ittt	mi
 8002f86:	6899      	ldrmi	r1, [r3, #8]
 8002f88:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8002f8c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f8e:	4923      	ldr	r1, [pc, #140]	; (800301c <HAL_RCC_ClockConfig+0x128>)
 8002f90:	68a0      	ldr	r0, [r4, #8]
 8002f92:	688b      	ldr	r3, [r1, #8]
 8002f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f98:	4303      	orrs	r3, r0
 8002f9a:	608b      	str	r3, [r1, #8]
 8002f9c:	e7bb      	b.n	8002f16 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9e:	6862      	ldr	r2, [r4, #4]
 8002fa0:	4b1e      	ldr	r3, [pc, #120]	; (800301c <HAL_RCC_ClockConfig+0x128>)
 8002fa2:	2a01      	cmp	r2, #1
 8002fa4:	d11c      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	d0a7      	beq.n	8002efe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fae:	4e1b      	ldr	r6, [pc, #108]	; (800301c <HAL_RCC_ClockConfig+0x128>)
 8002fb0:	68b3      	ldr	r3, [r6, #8]
 8002fb2:	f023 0303 	bic.w	r3, r3, #3
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002fba:	f7fe ff51 	bl	8001e60 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fbe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002fc2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc4:	68b3      	ldr	r3, [r6, #8]
 8002fc6:	6862      	ldr	r2, [r4, #4]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
 8002fcc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002fd0:	d0a3      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd2:	f7fe ff45 	bl	8001e60 <HAL_GetTick>
 8002fd6:	1bc0      	subs	r0, r0, r7
 8002fd8:	4540      	cmp	r0, r8
 8002fda:	d9f3      	bls.n	8002fc4 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002fdc:	2003      	movs	r0, #3
 8002fde:	e78f      	b.n	8002f00 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe0:	1e91      	subs	r1, r2, #2
 8002fe2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fe6:	d802      	bhi.n	8002fee <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fec:	e7de      	b.n	8002fac <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fee:	f013 0f02 	tst.w	r3, #2
 8002ff2:	e7db      	b.n	8002fac <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff4:	b2ea      	uxtb	r2, r5
 8002ff6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	42ab      	cmp	r3, r5
 8003000:	f47f af7d 	bne.w	8002efe <HAL_RCC_ClockConfig+0xa>
 8003004:	e78f      	b.n	8002f26 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003006:	4905      	ldr	r1, [pc, #20]	; (800301c <HAL_RCC_ClockConfig+0x128>)
 8003008:	68e0      	ldr	r0, [r4, #12]
 800300a:	688b      	ldr	r3, [r1, #8]
 800300c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003010:	4303      	orrs	r3, r0
 8003012:	608b      	str	r3, [r1, #8]
 8003014:	e78a      	b.n	8002f2c <HAL_RCC_ClockConfig+0x38>
 8003016:	bf00      	nop
 8003018:	40023c00 	.word	0x40023c00
 800301c:	40023800 	.word	0x40023800
 8003020:	08023948 	.word	0x08023948
 8003024:	20000774 	.word	0x20000774
 8003028:	2000007c 	.word	0x2000007c

0800302c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_RCC_GetPCLK1Freq+0x14>)
 800302e:	4a05      	ldr	r2, [pc, #20]	; (8003044 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003036:	5cd3      	ldrb	r3, [r2, r3]
 8003038:	4a03      	ldr	r2, [pc, #12]	; (8003048 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800303a:	6810      	ldr	r0, [r2, #0]
}
 800303c:	40d8      	lsrs	r0, r3
 800303e:	4770      	bx	lr
 8003040:	40023800 	.word	0x40023800
 8003044:	08023958 	.word	0x08023958
 8003048:	20000774 	.word	0x20000774

0800304c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800304c:	4b04      	ldr	r3, [pc, #16]	; (8003060 <HAL_RCC_GetPCLK2Freq+0x14>)
 800304e:	4a05      	ldr	r2, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003056:	5cd3      	ldrb	r3, [r2, r3]
 8003058:	4a03      	ldr	r2, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800305a:	6810      	ldr	r0, [r2, #0]
}
 800305c:	40d8      	lsrs	r0, r3
 800305e:	4770      	bx	lr
 8003060:	40023800 	.word	0x40023800
 8003064:	08023958 	.word	0x08023958
 8003068:	20000774 	.word	0x20000774

0800306c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800306c:	230f      	movs	r3, #15
 800306e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <HAL_RCC_GetClockConfig+0x34>)
 8003072:	689a      	ldr	r2, [r3, #8]
 8003074:	f002 0203 	and.w	r2, r2, #3
 8003078:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8003080:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8003088:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003092:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003094:	4b03      	ldr	r3, [pc, #12]	; (80030a4 <HAL_RCC_GetClockConfig+0x38>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	600b      	str	r3, [r1, #0]
}
 800309e:	4770      	bx	lr
 80030a0:	40023800 	.word	0x40023800
 80030a4:	40023c00 	.word	0x40023c00

080030a8 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80030a8:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030aa:	f013 0f43 	tst.w	r3, #67	; 0x43
{
 80030ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030b0:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030b2:	f040 808a 	bne.w	80031ca <HAL_RCCEx_PeriphCLKConfig+0x122>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	f013 0f0c 	tst.w	r3, #12
 80030bc:	d044      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030be:	4d89      	ldr	r5, [pc, #548]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030c0:	4e89      	ldr	r6, [pc, #548]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    __HAL_RCC_PLLSAI_DISABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80030c6:	f7fe fecb 	bl	8001e60 <HAL_GetTick>
 80030ca:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030cc:	6833      	ldr	r3, [r6, #0]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	f100 80cc 	bmi.w	800326c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80030d4:	6821      	ldr	r1, [r4, #0]
 80030d6:	074f      	lsls	r7, r1, #29
 80030d8:	d515      	bpl.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030da:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030de:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80030e2:	061b      	lsls	r3, r3, #24
 80030e4:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80030e8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030f2:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80030f6:	6a22      	ldr	r2, [r4, #32]
 80030f8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 80030fc:	3a01      	subs	r2, #1
 80030fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003102:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003106:	070e      	lsls	r6, r1, #28
 8003108:	d514      	bpl.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800310a:	4a77      	ldr	r2, [pc, #476]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800310c:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800310e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003112:	6920      	ldr	r0, [r4, #16]
 8003114:	071b      	lsls	r3, r3, #28
 8003116:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800311a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800311e:	430b      	orrs	r3, r1
 8003120:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003124:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8003128:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800312a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800312e:	430b      	orrs	r3, r1
 8003130:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003134:	2301      	movs	r3, #1
 8003136:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003138:	f7fe fe92 	bl	8001e60 <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800313c:	4e6a      	ldr	r6, [pc, #424]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    tickstart = HAL_GetTick();
 800313e:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003140:	6833      	ldr	r3, [r6, #0]
 8003142:	0098      	lsls	r0, r3, #2
 8003144:	f140 8099 	bpl.w	800327a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003148:	6823      	ldr	r3, [r4, #0]
 800314a:	069a      	lsls	r2, r3, #26
 800314c:	d533      	bpl.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	9301      	str	r3, [sp, #4]
 8003152:	4b65      	ldr	r3, [pc, #404]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003154:	4d65      	ldr	r5, [pc, #404]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x244>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003158:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800315c:	641a      	str	r2, [r3, #64]	; 0x40
 800315e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003168:	682b      	ldr	r3, [r5, #0]
 800316a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800316e:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003170:	f7fe fe76 	bl	8001e60 <HAL_GetTick>
 8003174:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003176:	682b      	ldr	r3, [r5, #0]
 8003178:	05d9      	lsls	r1, r3, #23
 800317a:	f140 8085 	bpl.w	8003288 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800317e:	4d5a      	ldr	r5, [pc, #360]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003180:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003182:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003186:	f040 8086 	bne.w	8003296 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800318a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800318c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8003190:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8003194:	4a54      	ldr	r2, [pc, #336]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003196:	f040 80a0 	bne.w	80032da <HAL_RCCEx_PeriphCLKConfig+0x232>
 800319a:	6891      	ldr	r1, [r2, #8]
 800319c:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80031a0:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80031a4:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80031a8:	4301      	orrs	r1, r0
 80031aa:	6091      	str	r1, [r2, #8]
 80031ac:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80031ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b2:	430b      	orrs	r3, r1
 80031b4:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80031bc:	bf1f      	itttt	ne
 80031be:	4b4c      	ldrne	r3, [pc, #304]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031c0:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 80031c4:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 80031c6:	2000      	movne	r0, #0
 80031c8:	e04e      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    __HAL_RCC_PLLI2S_DISABLE();
 80031ca:	4d4a      	ldr	r5, [pc, #296]	; (80032f4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031cc:	4f46      	ldr	r7, [pc, #280]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    __HAL_RCC_PLLI2S_DISABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80031d2:	f7fe fe45 	bl	8001e60 <HAL_GetTick>
 80031d6:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	011a      	lsls	r2, r3, #4
 80031dc:	d43e      	bmi.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80031de:	6821      	ldr	r1, [r4, #0]
 80031e0:	07cb      	lsls	r3, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80031e2:	bf41      	itttt	mi
 80031e4:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 80031e8:	071b      	lslmi	r3, r3, #28
 80031ea:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 80031ee:	f8c7 3084 	strmi.w	r3, [r7, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80031f2:	078e      	lsls	r6, r1, #30
 80031f4:	d515      	bpl.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031f6:	4a3c      	ldr	r2, [pc, #240]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80031f8:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031fa:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80031fe:	6866      	ldr	r6, [r4, #4]
 8003200:	061b      	lsls	r3, r3, #24
 8003202:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8003206:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
 800320a:	4303      	orrs	r3, r0
 800320c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003210:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8003214:	69e3      	ldr	r3, [r4, #28]
 8003216:	f020 001f 	bic.w	r0, r0, #31
 800321a:	3b01      	subs	r3, #1
 800321c:	4303      	orrs	r3, r0
 800321e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003222:	0648      	lsls	r0, r1, #25
 8003224:	d50a      	bpl.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x194>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003226:	68e3      	ldr	r3, [r4, #12]
 8003228:	6862      	ldr	r2, [r4, #4]
 800322a:	061b      	lsls	r3, r3, #24
 800322c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003230:	68a2      	ldr	r2, [r4, #8]
 8003232:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003236:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003238:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800323c:	2301      	movs	r3, #1
 800323e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8003240:	f7fe fe0e 	bl	8001e60 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003244:	4e28      	ldr	r6, [pc, #160]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
    tickstart = HAL_GetTick();
 8003246:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003248:	6833      	ldr	r3, [r6, #0]
 800324a:	0119      	lsls	r1, r3, #4
 800324c:	f53f af33 	bmi.w	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003250:	f7fe fe06 	bl	8001e60 <HAL_GetTick>
 8003254:	1b40      	subs	r0, r0, r5
 8003256:	2802      	cmp	r0, #2
 8003258:	d9f6      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 800325a:	e004      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800325c:	f7fe fe00 	bl	8001e60 <HAL_GetTick>
 8003260:	1b80      	subs	r0, r0, r6
 8003262:	2802      	cmp	r0, #2
 8003264:	d9b8      	bls.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
        return HAL_TIMEOUT;
 8003266:	2003      	movs	r0, #3
}
 8003268:	b003      	add	sp, #12
 800326a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800326c:	f7fe fdf8 	bl	8001e60 <HAL_GetTick>
 8003270:	1bc0      	subs	r0, r0, r7
 8003272:	2802      	cmp	r0, #2
 8003274:	f67f af2a 	bls.w	80030cc <HAL_RCCEx_PeriphCLKConfig+0x24>
 8003278:	e7f5      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800327a:	f7fe fdf1 	bl	8001e60 <HAL_GetTick>
 800327e:	1b40      	subs	r0, r0, r5
 8003280:	2802      	cmp	r0, #2
 8003282:	f67f af5d 	bls.w	8003140 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003286:	e7ee      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003288:	f7fe fdea 	bl	8001e60 <HAL_GetTick>
 800328c:	1b80      	subs	r0, r0, r6
 800328e:	2802      	cmp	r0, #2
 8003290:	f67f af71 	bls.w	8003176 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003294:	e7e7      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003296:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003298:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800329c:	4293      	cmp	r3, r2
 800329e:	f43f af74 	beq.w	800318a <HAL_RCCEx_PeriphCLKConfig+0xe2>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032a2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a4:	4a14      	ldr	r2, [pc, #80]	; (80032f8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80032a6:	2101      	movs	r1, #1
 80032a8:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ae:	2100      	movs	r1, #0
 80032b0:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80032b2:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032b4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80032b6:	07da      	lsls	r2, r3, #31
 80032b8:	f57f af67 	bpl.w	800318a <HAL_RCCEx_PeriphCLKConfig+0xe2>
        tickstart = HAL_GetTick();
 80032bc:	f7fe fdd0 	bl	8001e60 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c0:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80032c4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80032c8:	079b      	lsls	r3, r3, #30
 80032ca:	f53f af5e 	bmi.w	800318a <HAL_RCCEx_PeriphCLKConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ce:	f7fe fdc7 	bl	8001e60 <HAL_GetTick>
 80032d2:	1b80      	subs	r0, r0, r6
 80032d4:	42b8      	cmp	r0, r7
 80032d6:	d9f6      	bls.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80032d8:	e7c5      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032da:	6891      	ldr	r1, [r2, #8]
 80032dc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80032e0:	e763      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x102>
 80032e2:	bf00      	nop
 80032e4:	42470070 	.word	0x42470070
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40007000 	.word	0x40007000
 80032f0:	424711e0 	.word	0x424711e0
 80032f4:	42470068 	.word	0x42470068
 80032f8:	42470e40 	.word	0x42470e40

080032fc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80032fc:	b538      	push	{r3, r4, r5, lr}
 80032fe:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8003300:	4604      	mov	r4, r0
 8003302:	b1c8      	cbz	r0, 8003338 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003304:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003308:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800330c:	b91b      	cbnz	r3, 8003316 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800330e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003312:	f000 ffab 	bl	800426c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003316:	2302      	movs	r3, #2
 8003318:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800331c:	1d21      	adds	r1, r4, #4
 800331e:	6820      	ldr	r0, [r4, #0]
 8003320:	f000 fe72 	bl	8004008 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8003324:	6862      	ldr	r2, [r4, #4]
 8003326:	6820      	ldr	r0, [r4, #0]
 8003328:	4629      	mov	r1, r5
 800332a:	f000 fea3 	bl	8004074 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800332e:	2301      	movs	r3, #1
 8003330:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8003334:	2000      	movs	r0, #0
}
 8003336:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003338:	2001      	movs	r0, #1
 800333a:	e7fc      	b.n	8003336 <HAL_SDRAM_Init+0x3a>

0800333c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800333c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800333e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003342:	2b02      	cmp	r3, #2
{
 8003344:	4604      	mov	r4, r0
 8003346:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003348:	b2d8      	uxtb	r0, r3
 800334a:	d00d      	beq.n	8003368 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800334c:	2302      	movs	r3, #2
 800334e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003352:	6820      	ldr	r0, [r4, #0]
 8003354:	f000 feca 	bl	80040ec <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003358:	682b      	ldr	r3, [r5, #0]
 800335a:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800335c:	bf0c      	ite	eq
 800335e:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003360:	2301      	movne	r3, #1
 8003362:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003366:	2000      	movs	r0, #0
}
 8003368:	bd38      	pop	{r3, r4, r5, pc}

0800336a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800336a:	b510      	push	{r4, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800336c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8003370:	2b02      	cmp	r3, #2
{
 8003372:	4604      	mov	r4, r0
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003374:	b2d8      	uxtb	r0, r3
 8003376:	d009      	beq.n	800338c <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003378:	2302      	movs	r3, #2
 800337a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800337e:	6820      	ldr	r0, [r4, #0]
 8003380:	f000 fedb 	bl	800413a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8003384:	2301      	movs	r3, #1
 8003386:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 800338a:	2000      	movs	r0, #0
}
 800338c:	bd10      	pop	{r4, pc}
	...

08003390 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003390:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003394:	461d      	mov	r5, r3
 8003396:	4617      	mov	r7, r2
 8003398:	4688      	mov	r8, r1
 800339a:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800339c:	f7fe fd60 	bl	8001e60 <HAL_GetTick>
 80033a0:	443d      	add	r5, r7
 80033a2:	1a2c      	subs	r4, r5, r0
  tmp_tickstart = HAL_GetTick();
 80033a4:	f7fe fd5c 	bl	8001e60 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033a8:	4b22      	ldr	r3, [pc, #136]	; (8003434 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 80033b0:	4605      	mov	r5, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033b2:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033b4:	6832      	ldr	r2, [r6, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80033b6:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033b8:	6893      	ldr	r3, [r2, #8]
 80033ba:	ea38 0303 	bics.w	r3, r8, r3
 80033be:	d001      	beq.n	80033c4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80033c0:	2000      	movs	r0, #0
 80033c2:	e02d      	b.n	8003420 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
    if (Timeout != HAL_MAX_DELAY)
 80033c4:	1c7b      	adds	r3, r7, #1
 80033c6:	d0f7      	beq.n	80033b8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033c8:	f7fe fd4a 	bl	8001e60 <HAL_GetTick>
 80033cc:	1b40      	subs	r0, r0, r5
 80033ce:	42a0      	cmp	r0, r4
 80033d0:	d329      	bcc.n	8003426 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033d2:	6833      	ldr	r3, [r6, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033da:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033dc:	6872      	ldr	r2, [r6, #4]
 80033de:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80033e2:	d10a      	bne.n	80033fa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 80033e4:	68b2      	ldr	r2, [r6, #8]
 80033e6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80033ea:	d002      	beq.n	80033f2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033ec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80033f0:	d103      	bne.n	80033fa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f8:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033fa:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 80033fc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003400:	d107      	bne.n	8003412 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
          SPI_RESET_CRC(hspi);
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003410:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003412:	2301      	movs	r3, #1
 8003414:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003418:	2300      	movs	r3, #0
 800341a:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 800341e:	2003      	movs	r0, #3
}
 8003420:	b002      	add	sp, #8
 8003422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8003426:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003428:	2b00      	cmp	r3, #0
      count--;
 800342a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800342c:	bf08      	it	eq
 800342e:	2400      	moveq	r4, #0
      count--;
 8003430:	3b01      	subs	r3, #1
 8003432:	e7bf      	b.n	80033b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8003434:	20000774 	.word	0x20000774

08003438 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003438:	b538      	push	{r3, r4, r5, lr}
 800343a:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800343c:	6842      	ldr	r2, [r0, #4]
 800343e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8003442:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003444:	d11f      	bne.n	8003486 <SPI_EndRxTransaction+0x4e>
 8003446:	6882      	ldr	r2, [r0, #8]
 8003448:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800344c:	d002      	beq.n	8003454 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800344e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003452:	d107      	bne.n	8003464 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003454:	6825      	ldr	r5, [r4, #0]
 8003456:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003458:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 800345c:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8003460:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003462:	d007      	beq.n	8003474 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003464:	460a      	mov	r2, r1
 8003466:	2180      	movs	r1, #128	; 0x80
 8003468:	4620      	mov	r0, r4
 800346a:	f7ff ff91 	bl	8003390 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800346e:	b920      	cbnz	r0, 800347a <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8003470:	2000      	movs	r0, #0
}
 8003472:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003474:	460a      	mov	r2, r1
 8003476:	2101      	movs	r1, #1
 8003478:	e7f6      	b.n	8003468 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800347a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800347c:	f043 0320 	orr.w	r3, r3, #32
 8003480:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003482:	2003      	movs	r0, #3
 8003484:	e7f5      	b.n	8003472 <SPI_EndRxTransaction+0x3a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003486:	460a      	mov	r2, r1
 8003488:	2101      	movs	r1, #1
 800348a:	e7ee      	b.n	800346a <SPI_EndRxTransaction+0x32>

0800348c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800348c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800348e:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003490:	4a12      	ldr	r2, [pc, #72]	; (80034dc <SPI_EndRxTxTransaction+0x50>)
 8003492:	4d13      	ldr	r5, [pc, #76]	; (80034e0 <SPI_EndRxTxTransaction+0x54>)
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	fbb2 f5f5 	udiv	r5, r2, r5
 800349a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800349e:	436a      	muls	r2, r5
 80034a0:	9201      	str	r2, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034a2:	6842      	ldr	r2, [r0, #4]
 80034a4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80034a8:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034aa:	d10b      	bne.n	80034c4 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034ac:	460a      	mov	r2, r1
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	f7ff ff6e 	bl	8003390 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80034b4:	b178      	cbz	r0, 80034d6 <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034b8:	f043 0320 	orr.w	r3, r3, #32
 80034bc:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80034be:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80034c0:	b003      	add	sp, #12
 80034c2:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 80034c4:	9b01      	ldr	r3, [sp, #4]
 80034c6:	b133      	cbz	r3, 80034d6 <SPI_EndRxTxTransaction+0x4a>
      count--;
 80034c8:	9b01      	ldr	r3, [sp, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034ce:	6823      	ldr	r3, [r4, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	061b      	lsls	r3, r3, #24
 80034d4:	d4f6      	bmi.n	80034c4 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 80034d6:	2000      	movs	r0, #0
 80034d8:	e7f2      	b.n	80034c0 <SPI_EndRxTxTransaction+0x34>
 80034da:	bf00      	nop
 80034dc:	20000774 	.word	0x20000774
 80034e0:	016e3600 	.word	0x016e3600

080034e4 <HAL_SPI_Init>:
{
 80034e4:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80034e6:	4604      	mov	r4, r0
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d055      	beq.n	8003598 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d14e      	bne.n	8003590 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f2:	6842      	ldr	r2, [r0, #4]
 80034f4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80034f8:	d000      	beq.n	80034fc <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034fa:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034fc:	2300      	movs	r3, #0
 80034fe:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003500:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003504:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003508:	b923      	cbnz	r3, 8003514 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 800350a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800350e:	4620      	mov	r0, r4
 8003510:	f001 fc72 	bl	8004df8 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8003514:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003516:	68a0      	ldr	r0, [r4, #8]
 8003518:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800351a:	2302      	movs	r3, #2
 800351c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003520:	680b      	ldr	r3, [r1, #0]
 8003522:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003526:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003528:	6863      	ldr	r3, [r4, #4]
 800352a:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800352e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003532:	4303      	orrs	r3, r0
 8003534:	68e0      	ldr	r0, [r4, #12]
 8003536:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 800353a:	4303      	orrs	r3, r0
 800353c:	6920      	ldr	r0, [r4, #16]
 800353e:	f000 0002 	and.w	r0, r0, #2
 8003542:	4303      	orrs	r3, r0
 8003544:	6960      	ldr	r0, [r4, #20]
 8003546:	f000 0001 	and.w	r0, r0, #1
 800354a:	4303      	orrs	r3, r0
 800354c:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8003550:	4303      	orrs	r3, r0
 8003552:	69e0      	ldr	r0, [r4, #28]
 8003554:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003558:	4303      	orrs	r3, r0
 800355a:	6a20      	ldr	r0, [r4, #32]
 800355c:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003560:	4303      	orrs	r3, r0
 8003562:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003564:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8003568:	4303      	orrs	r3, r0
 800356a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800356c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800356e:	0c12      	lsrs	r2, r2, #16
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	f002 0204 	and.w	r2, r2, #4
 8003578:	431a      	orrs	r2, r3
 800357a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800357c:	69cb      	ldr	r3, [r1, #28]
 800357e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003582:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003584:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003586:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003588:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800358a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800358e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003590:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003592:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003596:	e7b1      	b.n	80034fc <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003598:	2001      	movs	r0, #1
 800359a:	e7f8      	b.n	800358e <HAL_SPI_Init+0xaa>

0800359c <HAL_SPI_DeInit>:
{
 800359c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800359e:	4604      	mov	r4, r0
 80035a0:	b180      	cbz	r0, 80035c4 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 80035a2:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80035a4:	2302      	movs	r3, #2
 80035a6:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80035aa:	6813      	ldr	r3, [r2, #0]
 80035ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035b0:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80035b2:	f001 fc57 	bl	8004e64 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035b6:	2000      	movs	r0, #0
 80035b8:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 80035ba:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 80035be:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 80035c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80035c4:	2001      	movs	r0, #1
 80035c6:	e7fc      	b.n	80035c2 <HAL_SPI_DeInit+0x26>

080035c8 <HAL_SPI_Transmit>:
{
 80035c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80035cc:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 80035ce:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80035d2:	2b01      	cmp	r3, #1
{
 80035d4:	4604      	mov	r4, r0
 80035d6:	460d      	mov	r5, r1
 80035d8:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80035da:	f000 80a0 	beq.w	800371e <HAL_SPI_Transmit+0x156>
 80035de:	2301      	movs	r3, #1
 80035e0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80035e4:	f7fe fc3c 	bl	8001e60 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80035e8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80035ec:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80035ee:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80035f0:	b2d8      	uxtb	r0, r3
 80035f2:	f040 8092 	bne.w	800371a <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 80035f6:	2d00      	cmp	r5, #0
 80035f8:	d061      	beq.n	80036be <HAL_SPI_Transmit+0xf6>
 80035fa:	f1b8 0f00 	cmp.w	r8, #0
 80035fe:	d05e      	beq.n	80036be <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003600:	2303      	movs	r3, #3
 8003602:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003606:	2300      	movs	r3, #0
 8003608:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800360a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800360e:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003612:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003614:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003616:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003618:	68a3      	ldr	r3, [r4, #8]
 800361a:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800361c:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800361e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 8003622:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003626:	d107      	bne.n	8003638 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8003628:	6833      	ldr	r3, [r6, #0]
 800362a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800362e:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8003630:	6833      	ldr	r3, [r6, #0]
 8003632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003636:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003638:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800363a:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800363c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 800363e:	bf5e      	ittt	pl
 8003640:	6833      	ldrpl	r3, [r6, #0]
 8003642:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8003646:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003648:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800364c:	6863      	ldr	r3, [r4, #4]
 800364e:	d13f      	bne.n	80036d0 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003650:	b113      	cbz	r3, 8003658 <HAL_SPI_Transmit+0x90>
 8003652:	f1b8 0f01 	cmp.w	r8, #1
 8003656:	d107      	bne.n	8003668 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003658:	f835 3b02 	ldrh.w	r3, [r5], #2
 800365c:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800365e:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003660:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003662:	3b01      	subs	r3, #1
 8003664:	b29b      	uxth	r3, r3
 8003666:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003668:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800366a:	b29b      	uxth	r3, r3
 800366c:	b9a3      	cbnz	r3, 8003698 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800366e:	464a      	mov	r2, r9
 8003670:	4639      	mov	r1, r7
 8003672:	4620      	mov	r0, r4
 8003674:	f7ff ff0a 	bl	800348c <SPI_EndRxTxTransaction>
 8003678:	2800      	cmp	r0, #0
 800367a:	d14b      	bne.n	8003714 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800367c:	68a3      	ldr	r3, [r4, #8]
 800367e:	b933      	cbnz	r3, 800368e <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003680:	9301      	str	r3, [sp, #4]
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	9201      	str	r2, [sp, #4]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800368e:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003690:	3800      	subs	r0, #0
 8003692:	bf18      	it	ne
 8003694:	2001      	movne	r0, #1
error:
 8003696:	e012      	b.n	80036be <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003698:	6822      	ldr	r2, [r4, #0]
 800369a:	6893      	ldr	r3, [r2, #8]
 800369c:	0798      	lsls	r0, r3, #30
 800369e:	d505      	bpl.n	80036ac <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036a2:	f833 1b02 	ldrh.w	r1, [r3], #2
 80036a6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036a8:	6323      	str	r3, [r4, #48]	; 0x30
 80036aa:	e7d9      	b.n	8003660 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ac:	f7fe fbd8 	bl	8001e60 <HAL_GetTick>
 80036b0:	eba0 0009 	sub.w	r0, r0, r9
 80036b4:	42b8      	cmp	r0, r7
 80036b6:	d3d7      	bcc.n	8003668 <HAL_SPI_Transmit+0xa0>
 80036b8:	1c79      	adds	r1, r7, #1
 80036ba:	d0d5      	beq.n	8003668 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 80036bc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80036be:	2301      	movs	r3, #1
 80036c0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80036c4:	2300      	movs	r3, #0
 80036c6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80036ca:	b003      	add	sp, #12
 80036cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036d0:	b113      	cbz	r3, 80036d8 <HAL_SPI_Transmit+0x110>
 80036d2:	f1b8 0f01 	cmp.w	r8, #1
 80036d6:	d108      	bne.n	80036ea <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036d8:	782b      	ldrb	r3, [r5, #0]
 80036da:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036de:	3301      	adds	r3, #1
 80036e0:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80036e2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80036ea:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0bd      	beq.n	800366e <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	689a      	ldr	r2, [r3, #8]
 80036f6:	0792      	lsls	r2, r2, #30
 80036f8:	d503      	bpl.n	8003702 <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80036fc:	7812      	ldrb	r2, [r2, #0]
 80036fe:	731a      	strb	r2, [r3, #12]
 8003700:	e7ec      	b.n	80036dc <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003702:	f7fe fbad 	bl	8001e60 <HAL_GetTick>
 8003706:	eba0 0009 	sub.w	r0, r0, r9
 800370a:	42b8      	cmp	r0, r7
 800370c:	d3ed      	bcc.n	80036ea <HAL_SPI_Transmit+0x122>
 800370e:	1c7b      	adds	r3, r7, #1
 8003710:	d0eb      	beq.n	80036ea <HAL_SPI_Transmit+0x122>
 8003712:	e7d3      	b.n	80036bc <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003714:	2320      	movs	r3, #32
 8003716:	6563      	str	r3, [r4, #84]	; 0x54
 8003718:	e7b0      	b.n	800367c <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 800371a:	2002      	movs	r0, #2
 800371c:	e7cf      	b.n	80036be <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 800371e:	2002      	movs	r0, #2
 8003720:	e7d3      	b.n	80036ca <HAL_SPI_Transmit+0x102>

08003722 <HAL_SPI_TransmitReceive>:
{
 8003722:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003726:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8003728:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800372c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8003730:	2b01      	cmp	r3, #1
{
 8003732:	4604      	mov	r4, r0
 8003734:	460d      	mov	r5, r1
 8003736:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8003738:	f000 80e0 	beq.w	80038fc <HAL_SPI_TransmitReceive+0x1da>
 800373c:	2301      	movs	r3, #1
 800373e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003742:	f7fe fb8d 	bl	8001e60 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003746:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 800374a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800374c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800374e:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8003750:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003752:	d00a      	beq.n	800376a <HAL_SPI_TransmitReceive+0x48>
 8003754:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003758:	f040 80ce 	bne.w	80038f8 <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800375c:	68a3      	ldr	r3, [r4, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 80ca 	bne.w	80038f8 <HAL_SPI_TransmitReceive+0x1d6>
 8003764:	2904      	cmp	r1, #4
 8003766:	f040 80c7 	bne.w	80038f8 <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800376a:	2d00      	cmp	r5, #0
 800376c:	d03f      	beq.n	80037ee <HAL_SPI_TransmitReceive+0xcc>
 800376e:	f1b9 0f00 	cmp.w	r9, #0
 8003772:	d03c      	beq.n	80037ee <HAL_SPI_TransmitReceive+0xcc>
 8003774:	2e00      	cmp	r6, #0
 8003776:	d03a      	beq.n	80037ee <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003778:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800377c:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003780:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003782:	bf1c      	itt	ne
 8003784:	2305      	movne	r3, #5
 8003786:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800378a:	2300      	movs	r3, #0
 800378c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800378e:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003792:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8003794:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8003796:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003798:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 800379a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800379c:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 800379e:	bf58      	it	pl
 80037a0:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80037a2:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 80037a4:	bf58      	it	pl
 80037a6:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 80037aa:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 80037ac:	bf58      	it	pl
 80037ae:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037b0:	68e1      	ldr	r1, [r4, #12]
 80037b2:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80037b6:	d151      	bne.n	800385c <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037b8:	b10a      	cbz	r2, 80037be <HAL_SPI_TransmitReceive+0x9c>
 80037ba:	2e01      	cmp	r6, #1
 80037bc:	d107      	bne.n	80037ce <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037be:	f835 2b02 	ldrh.w	r2, [r5], #2
 80037c2:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80037c4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037c6:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80037ce:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	b96b      	cbnz	r3, 80037f2 <HAL_SPI_TransmitReceive+0xd0>
 80037d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	b953      	cbnz	r3, 80037f2 <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037dc:	463a      	mov	r2, r7
 80037de:	4641      	mov	r1, r8
 80037e0:	4620      	mov	r0, r4
 80037e2:	f7ff fe53 	bl	800348c <SPI_EndRxTxTransaction>
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d07b      	beq.n	80038e2 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037ea:	2320      	movs	r3, #32
 80037ec:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80037ee:	2001      	movs	r0, #1
 80037f0:	e02b      	b.n	800384a <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037f2:	6821      	ldr	r1, [r4, #0]
 80037f4:	688b      	ldr	r3, [r1, #8]
 80037f6:	079a      	lsls	r2, r3, #30
 80037f8:	d50d      	bpl.n	8003816 <HAL_SPI_TransmitReceive+0xf4>
 80037fa:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	b153      	cbz	r3, 8003816 <HAL_SPI_TransmitReceive+0xf4>
 8003800:	b14d      	cbz	r5, 8003816 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003802:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003804:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003808:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800380a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800380c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800380e:	3b01      	subs	r3, #1
 8003810:	b29b      	uxth	r3, r3
 8003812:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003814:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003816:	688a      	ldr	r2, [r1, #8]
 8003818:	f012 0201 	ands.w	r2, r2, #1
 800381c:	d00c      	beq.n	8003838 <HAL_SPI_TransmitReceive+0x116>
 800381e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003820:	b29b      	uxth	r3, r3
 8003822:	b14b      	cbz	r3, 8003838 <HAL_SPI_TransmitReceive+0x116>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003824:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003826:	68c9      	ldr	r1, [r1, #12]
 8003828:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800382c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800382e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003830:	3b01      	subs	r3, #1
 8003832:	b29b      	uxth	r3, r3
 8003834:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003836:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003838:	f7fe fb12 	bl	8001e60 <HAL_GetTick>
 800383c:	1bc0      	subs	r0, r0, r7
 800383e:	4540      	cmp	r0, r8
 8003840:	d3c6      	bcc.n	80037d0 <HAL_SPI_TransmitReceive+0xae>
 8003842:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8003846:	d0c3      	beq.n	80037d0 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8003848:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800384a:	2301      	movs	r3, #1
 800384c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003850:	2300      	movs	r3, #0
 8003852:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003856:	b003      	add	sp, #12
 8003858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800385c:	b10a      	cbz	r2, 8003862 <HAL_SPI_TransmitReceive+0x140>
 800385e:	2e01      	cmp	r6, #1
 8003860:	d108      	bne.n	8003874 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003862:	782a      	ldrb	r2, [r5, #0]
 8003864:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003866:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003868:	3301      	adds	r3, #1
 800386a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800386c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800386e:	3b01      	subs	r3, #1
 8003870:	b29b      	uxth	r3, r3
 8003872:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003874:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003876:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003878:	b29b      	uxth	r3, r3
 800387a:	b91b      	cbnz	r3, 8003884 <HAL_SPI_TransmitReceive+0x162>
 800387c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800387e:	b29b      	uxth	r3, r3
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ab      	beq.n	80037dc <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003884:	6822      	ldr	r2, [r4, #0]
 8003886:	6893      	ldr	r3, [r2, #8]
 8003888:	079b      	lsls	r3, r3, #30
 800388a:	d50e      	bpl.n	80038aa <HAL_SPI_TransmitReceive+0x188>
 800388c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800388e:	b29b      	uxth	r3, r3
 8003890:	b15b      	cbz	r3, 80038aa <HAL_SPI_TransmitReceive+0x188>
 8003892:	b155      	cbz	r5, 80038aa <HAL_SPI_TransmitReceive+0x188>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003894:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800389a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800389c:	3301      	adds	r3, #1
 800389e:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80038a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80038a8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038aa:	6822      	ldr	r2, [r4, #0]
 80038ac:	6891      	ldr	r1, [r2, #8]
 80038ae:	f011 0101 	ands.w	r1, r1, #1
 80038b2:	d00d      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x1ae>
 80038b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	b153      	cbz	r3, 80038d0 <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038bc:	68d2      	ldr	r2, [r2, #12]
 80038be:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80038c2:	3301      	adds	r3, #1
 80038c4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80038c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80038ce:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038d0:	f7fe fac6 	bl	8001e60 <HAL_GetTick>
 80038d4:	1bc0      	subs	r0, r0, r7
 80038d6:	4540      	cmp	r0, r8
 80038d8:	d3cd      	bcc.n	8003876 <HAL_SPI_TransmitReceive+0x154>
 80038da:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80038de:	d0ca      	beq.n	8003876 <HAL_SPI_TransmitReceive+0x154>
 80038e0:	e7b2      	b.n	8003848 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038e2:	68a3      	ldr	r3, [r4, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1b0      	bne.n	800384a <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	9001      	str	r0, [sp, #4]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	9201      	str	r2, [sp, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	9301      	str	r3, [sp, #4]
 80038f4:	9b01      	ldr	r3, [sp, #4]
 80038f6:	e7a8      	b.n	800384a <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 80038f8:	2002      	movs	r0, #2
 80038fa:	e7a6      	b.n	800384a <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 80038fc:	2002      	movs	r0, #2
 80038fe:	e7aa      	b.n	8003856 <HAL_SPI_TransmitReceive+0x134>

08003900 <HAL_SPI_Receive>:
{
 8003900:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003904:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003906:	6843      	ldr	r3, [r0, #4]
 8003908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 800390c:	4604      	mov	r4, r0
 800390e:	4688      	mov	r8, r1
 8003910:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003912:	d10c      	bne.n	800392e <HAL_SPI_Receive+0x2e>
 8003914:	6883      	ldr	r3, [r0, #8]
 8003916:	b953      	cbnz	r3, 800392e <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003918:	2304      	movs	r3, #4
 800391a:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800391e:	4613      	mov	r3, r2
 8003920:	9500      	str	r5, [sp, #0]
 8003922:	460a      	mov	r2, r1
 8003924:	f7ff fefd 	bl	8003722 <HAL_SPI_TransmitReceive>
}
 8003928:	b002      	add	sp, #8
 800392a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800392e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8003932:	2b01      	cmp	r3, #1
 8003934:	d07e      	beq.n	8003a34 <HAL_SPI_Receive+0x134>
 8003936:	2301      	movs	r3, #1
 8003938:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800393c:	f7fe fa90 	bl	8001e60 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003940:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003944:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8003946:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003948:	b2d8      	uxtb	r0, r3
 800394a:	d171      	bne.n	8003a30 <HAL_SPI_Receive+0x130>
  if ((pData == NULL) || (Size == 0U))
 800394c:	f1b8 0f00 	cmp.w	r8, #0
 8003950:	d05c      	beq.n	8003a0c <HAL_SPI_Receive+0x10c>
 8003952:	2e00      	cmp	r6, #0
 8003954:	d05a      	beq.n	8003a0c <HAL_SPI_Receive+0x10c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003956:	68a2      	ldr	r2, [r4, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003958:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800395c:	2304      	movs	r3, #4
 800395e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003962:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003966:	f04f 0300 	mov.w	r3, #0
 800396a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800396c:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003970:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003972:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003974:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003976:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxXferSize  = Size;
 8003978:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800397a:	6823      	ldr	r3, [r4, #0]
 800397c:	d107      	bne.n	800398e <HAL_SPI_Receive+0x8e>
    __HAL_SPI_DISABLE(hspi);
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003984:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800398c:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003992:	bf5e      	ittt	pl
 8003994:	681a      	ldrpl	r2, [r3, #0]
 8003996:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 800399a:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800399c:	68e3      	ldr	r3, [r4, #12]
 800399e:	b1f3      	cbz	r3, 80039de <HAL_SPI_Receive+0xde>
    while (hspi->RxXferCount > 0U)
 80039a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	b1fb      	cbz	r3, 80039e6 <HAL_SPI_Receive+0xe6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	07d2      	lsls	r2, r2, #31
 80039ac:	d535      	bpl.n	8003a1a <HAL_SPI_Receive+0x11a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039ae:	68da      	ldr	r2, [r3, #12]
 80039b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039b2:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039b6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80039b8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29b      	uxth	r3, r3
 80039be:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80039c0:	e7ee      	b.n	80039a0 <HAL_SPI_Receive+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039c2:	6823      	ldr	r3, [r4, #0]
 80039c4:	689a      	ldr	r2, [r3, #8]
 80039c6:	07d0      	lsls	r0, r2, #31
 80039c8:	d518      	bpl.n	80039fc <HAL_SPI_Receive+0xfc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80039ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80039cc:	7b1b      	ldrb	r3, [r3, #12]
 80039ce:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80039d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80039d2:	3301      	adds	r3, #1
 80039d4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80039d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29b      	uxth	r3, r3
 80039dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 80039de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1ed      	bne.n	80039c2 <HAL_SPI_Receive+0xc2>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039e6:	463a      	mov	r2, r7
 80039e8:	4629      	mov	r1, r5
 80039ea:	4620      	mov	r0, r4
 80039ec:	f7ff fd24 	bl	8003438 <SPI_EndRxTransaction>
 80039f0:	b9d8      	cbnz	r0, 8003a2a <HAL_SPI_Receive+0x12a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80039f4:	3800      	subs	r0, #0
 80039f6:	bf18      	it	ne
 80039f8:	2001      	movne	r0, #1
error :
 80039fa:	e007      	b.n	8003a0c <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039fc:	f7fe fa30 	bl	8001e60 <HAL_GetTick>
 8003a00:	1bc0      	subs	r0, r0, r7
 8003a02:	42a8      	cmp	r0, r5
 8003a04:	d3eb      	bcc.n	80039de <HAL_SPI_Receive+0xde>
 8003a06:	1c69      	adds	r1, r5, #1
 8003a08:	d0e9      	beq.n	80039de <HAL_SPI_Receive+0xde>
          errorcode = HAL_TIMEOUT;
 8003a0a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003a12:	2300      	movs	r3, #0
 8003a14:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8003a18:	e786      	b.n	8003928 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a1a:	f7fe fa21 	bl	8001e60 <HAL_GetTick>
 8003a1e:	1bc0      	subs	r0, r0, r7
 8003a20:	42a8      	cmp	r0, r5
 8003a22:	d3bd      	bcc.n	80039a0 <HAL_SPI_Receive+0xa0>
 8003a24:	1c6b      	adds	r3, r5, #1
 8003a26:	d0bb      	beq.n	80039a0 <HAL_SPI_Receive+0xa0>
 8003a28:	e7ef      	b.n	8003a0a <HAL_SPI_Receive+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a2a:	2320      	movs	r3, #32
 8003a2c:	6563      	str	r3, [r4, #84]	; 0x54
 8003a2e:	e7e0      	b.n	80039f2 <HAL_SPI_Receive+0xf2>
    errorcode = HAL_BUSY;
 8003a30:	2002      	movs	r0, #2
 8003a32:	e7eb      	b.n	8003a0c <HAL_SPI_Receive+0x10c>
  __HAL_LOCK(hspi);
 8003a34:	2002      	movs	r0, #2
 8003a36:	e777      	b.n	8003928 <HAL_SPI_Receive+0x28>

08003a38 <HAL_SPI_GetState>:
  return hspi->State;
 8003a38:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a40:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d130      	bne.n	8003aaa <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a48:	2302      	movs	r3, #2
 8003a4a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a4e:	6803      	ldr	r3, [r0, #0]
 8003a50:	68da      	ldr	r2, [r3, #12]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a58:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <HAL_TIM_Base_Start_IT+0x70>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d01a      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x54>
 8003a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a62:	d017      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x54>
 8003a64:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x54>
 8003a6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00f      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x54>
 8003a74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x54>
 8003a7c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x54>
 8003a84:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <HAL_TIM_Base_Start_IT+0x54>
 8003a8c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d104      	bne.n	8003a9e <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9a:	2a06      	cmp	r2, #6
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	f042 0201 	orr.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa6:	2000      	movs	r0, #0
}
 8003aa8:	4770      	bx	lr
    return HAL_ERROR;
 8003aaa:	2001      	movs	r0, #1
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40010000 	.word	0x40010000

08003ab4 <HAL_TIM_OC_DelayElapsedCallback>:
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_TIM_IC_CaptureCallback>:
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003ab8:	4770      	bx	lr

08003aba <HAL_TIM_TriggerCallback>:
 8003aba:	4770      	bx	lr

08003abc <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003abc:	6803      	ldr	r3, [r0, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	0791      	lsls	r1, r2, #30
{
 8003ac2:	b510      	push	{r4, lr}
 8003ac4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ac6:	d50e      	bpl.n	8003ae6 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ac8:	68da      	ldr	r2, [r3, #12]
 8003aca:	0792      	lsls	r2, r2, #30
 8003acc:	d50b      	bpl.n	8003ae6 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ace:	f06f 0202 	mvn.w	r2, #2
 8003ad2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	079b      	lsls	r3, r3, #30
 8003adc:	d077      	beq.n	8003bce <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ade:	f7ff ffea 	bl	8003ab6 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	691a      	ldr	r2, [r3, #16]
 8003aea:	0750      	lsls	r0, r2, #29
 8003aec:	d510      	bpl.n	8003b10 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	0751      	lsls	r1, r2, #29
 8003af2:	d50d      	bpl.n	8003b10 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003af4:	f06f 0204 	mvn.w	r2, #4
 8003af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003afa:	2202      	movs	r2, #2
 8003afc:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b04:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b06:	d068      	beq.n	8003bda <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b08:	f7ff ffd5 	bl	8003ab6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	0712      	lsls	r2, r2, #28
 8003b16:	d50f      	bpl.n	8003b38 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	0710      	lsls	r0, r2, #28
 8003b1c:	d50c      	bpl.n	8003b38 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b1e:	f06f 0208 	mvn.w	r2, #8
 8003b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b24:	2204      	movs	r2, #4
 8003b26:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b2e:	d05a      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b30:	f7ff ffc1 	bl	8003ab6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b34:	2300      	movs	r3, #0
 8003b36:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	06d2      	lsls	r2, r2, #27
 8003b3e:	d510      	bpl.n	8003b62 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	06d0      	lsls	r0, r2, #27
 8003b44:	d50d      	bpl.n	8003b62 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b46:	f06f 0210 	mvn.w	r2, #16
 8003b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b4c:	2208      	movs	r2, #8
 8003b4e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b56:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b58:	d04b      	beq.n	8003bf2 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	f7ff ffac 	bl	8003ab6 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	07d1      	lsls	r1, r2, #31
 8003b68:	d508      	bpl.n	8003b7c <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	07d2      	lsls	r2, r2, #31
 8003b6e:	d505      	bpl.n	8003b7c <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b70:	f06f 0201 	mvn.w	r2, #1
 8003b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b76:	4620      	mov	r0, r4
 8003b78:	f001 f884 	bl	8004c84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	0610      	lsls	r0, r2, #24
 8003b82:	d508      	bpl.n	8003b96 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	0611      	lsls	r1, r2, #24
 8003b88:	d505      	bpl.n	8003b96 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b90:	4620      	mov	r0, r4
 8003b92:	f000 f9ac 	bl	8003eee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	0652      	lsls	r2, r2, #25
 8003b9c:	d508      	bpl.n	8003bb0 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	0650      	lsls	r0, r2, #25
 8003ba2:	d505      	bpl.n	8003bb0 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ba4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003baa:	4620      	mov	r0, r4
 8003bac:	f7ff ff85 	bl	8003aba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bb0:	6823      	ldr	r3, [r4, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	0691      	lsls	r1, r2, #26
 8003bb6:	d522      	bpl.n	8003bfe <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	0692      	lsls	r2, r2, #26
 8003bbc:	d51f      	bpl.n	8003bfe <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bbe:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bc2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bc4:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003bca:	f000 b98f 	b.w	8003eec <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	f7ff ff71 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	f7ff ff70 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bd8:	e783      	b.n	8003ae2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bda:	f7ff ff6b 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bde:	4620      	mov	r0, r4
 8003be0:	f7ff ff6a 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003be4:	e792      	b.n	8003b0c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	f7ff ff65 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7ff ff64 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bf0:	e7a0      	b.n	8003b34 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bf2:	f7ff ff5f 	bl	8003ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f7ff ff5e 	bl	8003ab8 <HAL_TIM_PWM_PulseFinishedCallback>
 8003bfc:	e7af      	b.n	8003b5e <HAL_TIM_IRQHandler+0xa2>
}
 8003bfe:	bd10      	pop	{r4, pc}

08003c00 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c00:	4a30      	ldr	r2, [pc, #192]	; (8003cc4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003c02:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c04:	4290      	cmp	r0, r2
 8003c06:	d012      	beq.n	8003c2e <TIM_Base_SetConfig+0x2e>
 8003c08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c0c:	d00f      	beq.n	8003c2e <TIM_Base_SetConfig+0x2e>
 8003c0e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003c12:	4290      	cmp	r0, r2
 8003c14:	d00b      	beq.n	8003c2e <TIM_Base_SetConfig+0x2e>
 8003c16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c1a:	4290      	cmp	r0, r2
 8003c1c:	d007      	beq.n	8003c2e <TIM_Base_SetConfig+0x2e>
 8003c1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c22:	4290      	cmp	r0, r2
 8003c24:	d003      	beq.n	8003c2e <TIM_Base_SetConfig+0x2e>
 8003c26:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003c2a:	4290      	cmp	r0, r2
 8003c2c:	d119      	bne.n	8003c62 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8003c2e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003c34:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c36:	4a23      	ldr	r2, [pc, #140]	; (8003cc4 <TIM_Base_SetConfig+0xc4>)
 8003c38:	4290      	cmp	r0, r2
 8003c3a:	d029      	beq.n	8003c90 <TIM_Base_SetConfig+0x90>
 8003c3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003c40:	d026      	beq.n	8003c90 <TIM_Base_SetConfig+0x90>
 8003c42:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003c46:	4290      	cmp	r0, r2
 8003c48:	d022      	beq.n	8003c90 <TIM_Base_SetConfig+0x90>
 8003c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c4e:	4290      	cmp	r0, r2
 8003c50:	d01e      	beq.n	8003c90 <TIM_Base_SetConfig+0x90>
 8003c52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c56:	4290      	cmp	r0, r2
 8003c58:	d01a      	beq.n	8003c90 <TIM_Base_SetConfig+0x90>
 8003c5a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003c5e:	4290      	cmp	r0, r2
 8003c60:	d016      	beq.n	8003c90 <TIM_Base_SetConfig+0x90>
 8003c62:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <TIM_Base_SetConfig+0xc8>)
 8003c64:	4290      	cmp	r0, r2
 8003c66:	d013      	beq.n	8003c90 <TIM_Base_SetConfig+0x90>
 8003c68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c6c:	4290      	cmp	r0, r2
 8003c6e:	d00f      	beq.n	8003c90 <TIM_Base_SetConfig+0x90>
 8003c70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c74:	4290      	cmp	r0, r2
 8003c76:	d00b      	beq.n	8003c90 <TIM_Base_SetConfig+0x90>
 8003c78:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003c7c:	4290      	cmp	r0, r2
 8003c7e:	d007      	beq.n	8003c90 <TIM_Base_SetConfig+0x90>
 8003c80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c84:	4290      	cmp	r0, r2
 8003c86:	d003      	beq.n	8003c90 <TIM_Base_SetConfig+0x90>
 8003c88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c8c:	4290      	cmp	r0, r2
 8003c8e:	d103      	bne.n	8003c98 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c90:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c96:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c98:	694a      	ldr	r2, [r1, #20]
 8003c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003ca0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca2:	688b      	ldr	r3, [r1, #8]
 8003ca4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca6:	680b      	ldr	r3, [r1, #0]
 8003ca8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <TIM_Base_SetConfig+0xc4>)
 8003cac:	4298      	cmp	r0, r3
 8003cae:	d003      	beq.n	8003cb8 <TIM_Base_SetConfig+0xb8>
 8003cb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cb4:	4298      	cmp	r0, r3
 8003cb6:	d101      	bne.n	8003cbc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cb8:	690b      	ldr	r3, [r1, #16]
 8003cba:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	6143      	str	r3, [r0, #20]
}
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40014000 	.word	0x40014000

08003ccc <HAL_TIM_Base_Init>:
{
 8003ccc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003cce:	4604      	mov	r4, r0
 8003cd0:	b330      	cbz	r0, 8003d20 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003cd2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003cd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cda:	b91b      	cbnz	r3, 8003ce4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003cdc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003ce0:	f001 f980 	bl	8004fe4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ce6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cec:	1d21      	adds	r1, r4, #4
 8003cee:	f7ff ff87 	bl	8003c00 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8003cf8:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cfa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003cfe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003d02:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003d06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d12:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003d1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003d1e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003d20:	2001      	movs	r0, #1
 8003d22:	e7fc      	b.n	8003d1e <HAL_TIM_Base_Init+0x52>

08003d24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d24:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d26:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d28:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d2e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8003d32:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d34:	6083      	str	r3, [r0, #8]
}
 8003d36:	bd10      	pop	{r4, pc}

08003d38 <HAL_TIM_ConfigClockSource>:
{
 8003d38:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003d3a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
{
 8003d40:	4604      	mov	r4, r0
 8003d42:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003d46:	f000 8091 	beq.w	8003e6c <HAL_TIM_ConfigClockSource+0x134>
 8003d4a:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8003d50:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003d54:	6800      	ldr	r0, [r0, #0]
 8003d56:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003d60:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8003d62:	680b      	ldr	r3, [r1, #0]
 8003d64:	2b60      	cmp	r3, #96	; 0x60
 8003d66:	d052      	beq.n	8003e0e <HAL_TIM_ConfigClockSource+0xd6>
 8003d68:	d833      	bhi.n	8003dd2 <HAL_TIM_ConfigClockSource+0x9a>
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d067      	beq.n	8003e3e <HAL_TIM_ConfigClockSource+0x106>
 8003d6e:	d816      	bhi.n	8003d9e <HAL_TIM_ConfigClockSource+0x66>
 8003d70:	2b20      	cmp	r3, #32
 8003d72:	d00d      	beq.n	8003d90 <HAL_TIM_ConfigClockSource+0x58>
 8003d74:	d80a      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x54>
 8003d76:	f033 0110 	bics.w	r1, r3, #16
 8003d7a:	d009      	beq.n	8003d90 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003d82:	2300      	movs	r3, #0
 8003d84:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003d88:	4610      	mov	r0, r2
 8003d8a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003d8c:	2b30      	cmp	r3, #48	; 0x30
 8003d8e:	d1f5      	bne.n	8003d7c <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8003d90:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d92:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d96:	4313      	orrs	r3, r2
 8003d98:	f043 0307 	orr.w	r3, r3, #7
 8003d9c:	e017      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8003d9e:	2b50      	cmp	r3, #80	; 0x50
 8003da0:	d1ec      	bne.n	8003d7c <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da2:	684a      	ldr	r2, [r1, #4]
 8003da4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003da6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da8:	6a05      	ldr	r5, [r0, #32]
 8003daa:	f025 0501 	bic.w	r5, r5, #1
 8003dae:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003db2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dba:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003dbe:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003dc0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003dc2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003dc4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003dca:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8003dce:	6083      	str	r3, [r0, #8]
 8003dd0:	e011      	b.n	8003df6 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd6:	d00e      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0xbe>
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	d00d      	beq.n	8003dfa <HAL_TIM_ConfigClockSource+0xc2>
 8003dde:	2b70      	cmp	r3, #112	; 0x70
 8003de0:	d1cc      	bne.n	8003d7c <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003de2:	68cb      	ldr	r3, [r1, #12]
 8003de4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003de8:	f7ff ff9c 	bl	8003d24 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dec:	6822      	ldr	r2, [r4, #0]
 8003dee:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df4:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003df6:	2200      	movs	r2, #0
 8003df8:	e7c0      	b.n	8003d7c <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003dfa:	68cb      	ldr	r3, [r1, #12]
 8003dfc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003e00:	f7ff ff90 	bl	8003d24 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e04:	6822      	ldr	r2, [r4, #0]
 8003e06:	6893      	ldr	r3, [r2, #8]
 8003e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e0c:	e7f2      	b.n	8003df4 <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e0e:	684d      	ldr	r5, [r1, #4]
 8003e10:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e12:	6a01      	ldr	r1, [r0, #32]
 8003e14:	f021 0110 	bic.w	r1, r1, #16
 8003e18:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e1a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003e1c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e1e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e26:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e2a:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003e2e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e30:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003e32:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e38:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003e3c:	e7c7      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3e:	684a      	ldr	r2, [r1, #4]
 8003e40:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003e42:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e44:	6a05      	ldr	r5, [r0, #32]
 8003e46:	f025 0501 	bic.w	r5, r5, #1
 8003e4a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e4c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e4e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e56:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003e5a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003e5c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e5e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003e60:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e66:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003e6a:	e7b0      	b.n	8003dce <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	e78b      	b.n	8003d88 <HAL_TIM_ConfigClockSource+0x50>

08003e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e70:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e72:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	f04f 0302 	mov.w	r3, #2
 8003e7c:	d032      	beq.n	8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e82:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e84:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8003e86:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003e88:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e8a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e8e:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e90:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e92:	4c15      	ldr	r4, [pc, #84]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003e94:	42a3      	cmp	r3, r4
 8003e96:	d01a      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9c:	d017      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003e9e:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8003ea2:	42a3      	cmp	r3, r4
 8003ea4:	d013      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ea6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003eaa:	42a3      	cmp	r3, r4
 8003eac:	d00f      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003eae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003eb2:	42a3      	cmp	r3, r4
 8003eb4:	d00b      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003eb6:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003eba:	42a3      	cmp	r3, r4
 8003ebc:	d007      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ebe:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8003ec2:	42a3      	cmp	r3, r4
 8003ec4:	d003      	beq.n	8003ece <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ec6:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003eca:	42a3      	cmp	r3, r4
 8003ecc:	d104      	bne.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ece:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ed4:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003ee4:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003ee6:	bd30      	pop	{r4, r5, pc}
 8003ee8:	40010000 	.word	0x40010000

08003eec <HAL_TIMEx_CommutCallback>:
 8003eec:	4770      	bx	lr

08003eee <HAL_TIMEx_BreakCallback>:
 8003eee:	4770      	bx	lr

08003ef0 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef0:	6802      	ldr	r2, [r0, #0]
 8003ef2:	68c1      	ldr	r1, [r0, #12]
{
 8003ef4:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef6:	6913      	ldr	r3, [r2, #16]
 8003ef8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6113      	str	r3, [r2, #16]
{
 8003f00:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f02:	6883      	ldr	r3, [r0, #8]
 8003f04:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003f06:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f08:	4303      	orrs	r3, r0
 8003f0a:	6968      	ldr	r0, [r5, #20]
 8003f0c:	4303      	orrs	r3, r0
 8003f0e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003f10:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003f14:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f18:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003f1a:	430b      	orrs	r3, r1
 8003f1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f1e:	6953      	ldr	r3, [r2, #20]
 8003f20:	69a9      	ldr	r1, [r5, #24]
 8003f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f26:	430b      	orrs	r3, r1
 8003f28:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f2a:	4b1f      	ldr	r3, [pc, #124]	; (8003fa8 <UART_SetConfig+0xb8>)
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d003      	beq.n	8003f38 <UART_SetConfig+0x48>
 8003f30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d124      	bne.n	8003f82 <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7ff f888 	bl	800304c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f3c:	69ea      	ldr	r2, [r5, #28]
 8003f3e:	2319      	movs	r3, #25
 8003f40:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003f44:	fba0 0103 	umull	r0, r1, r0, r3
 8003f48:	e9d5 4300 	ldrd	r4, r3, [r5]
 8003f4c:	d11c      	bne.n	8003f88 <UART_SetConfig+0x98>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f4e:	461a      	mov	r2, r3
 8003f50:	1892      	adds	r2, r2, r2
 8003f52:	f04f 0300 	mov.w	r3, #0
 8003f56:	415b      	adcs	r3, r3
 8003f58:	f7fc fea6 	bl	8000ca8 <__aeabi_uldivmod>
 8003f5c:	2164      	movs	r1, #100	; 0x64
 8003f5e:	fbb0 f5f1 	udiv	r5, r0, r1
 8003f62:	fb01 0315 	mls	r3, r1, r5, r0
 8003f66:	00db      	lsls	r3, r3, #3
 8003f68:	3332      	adds	r3, #50	; 0x32
 8003f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f6e:	f003 0207 	and.w	r2, r3, #7
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8003f78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f7c:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f7e:	60a3      	str	r3, [r4, #8]
  }
}
 8003f80:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f82:	f7ff f853 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 8003f86:	e7d9      	b.n	8003f3c <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f88:	009a      	lsls	r2, r3, #2
 8003f8a:	0f9b      	lsrs	r3, r3, #30
 8003f8c:	f7fc fe8c 	bl	8000ca8 <__aeabi_uldivmod>
 8003f90:	2264      	movs	r2, #100	; 0x64
 8003f92:	fbb0 f1f2 	udiv	r1, r0, r2
 8003f96:	fb02 0311 	mls	r3, r2, r1, r0
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	3332      	adds	r3, #50	; 0x32
 8003f9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fa2:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003fa6:	e7ea      	b.n	8003f7e <UART_SetConfig+0x8e>
 8003fa8:	40011000 	.word	0x40011000

08003fac <HAL_UART_Init>:
{
 8003fac:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003fae:	4604      	mov	r4, r0
 8003fb0:	b340      	cbz	r0, 8004004 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003fb2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003fb6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003fba:	b91b      	cbnz	r3, 8003fc4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003fbc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003fc0:	f001 f844 	bl	800504c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003fc4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003fc6:	2324      	movs	r3, #36	; 0x24
 8003fc8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003fcc:	68d3      	ldr	r3, [r2, #12]
 8003fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fd2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f7ff ff8b 	bl	8003ef0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fda:	6823      	ldr	r3, [r4, #0]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fe2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe4:	695a      	ldr	r2, [r3, #20]
 8003fe6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fea:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003fec:	68da      	ldr	r2, [r3, #12]
 8003fee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ff2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003ff6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff8:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ffe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8004002:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004004:	2001      	movs	r0, #1
 8004006:	e7fc      	b.n	8004002 <HAL_UART_Init+0x56>

08004008 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800400c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800400e:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 8004012:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8004016:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 800401a:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800401e:	6809      	ldr	r1, [r1, #0]
 8004020:	2901      	cmp	r1, #1
 8004022:	ea43 0304 	orr.w	r3, r3, r4
 8004026:	4912      	ldr	r1, [pc, #72]	; (8004070 <FMC_SDRAM_Init+0x68>)
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8004028:	6804      	ldr	r4, [r0, #0]
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800402a:	d00f      	beq.n	800404c <FMC_SDRAM_Init+0x44>
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800402c:	431a      	orrs	r2, r3
 800402e:	432a      	orrs	r2, r5
 8004030:	ea42 0308 	orr.w	r3, r2, r8
 8004034:	ea43 030e 	orr.w	r3, r3, lr
 8004038:	ea43 030c 	orr.w	r3, r3, ip
 800403c:	433b      	orrs	r3, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800403e:	4021      	ands	r1, r4
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004040:	4333      	orrs	r3, r6
 8004042:	430b      	orrs	r3, r1
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004044:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8004046:	2000      	movs	r0, #0
 8004048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800404c:	4313      	orrs	r3, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800404e:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004050:	4011      	ands	r1, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004052:	ea45 0208 	orr.w	r2, r5, r8
 8004056:	ea42 020e 	orr.w	r2, r2, lr
 800405a:	ea42 020c 	orr.w	r2, r2, ip
 800405e:	433a      	orrs	r2, r7
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8004060:	f424 44f8 	bic.w	r4, r4, #31744	; 0x7c00
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004064:	4332      	orrs	r2, r6
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8004066:	4323      	orrs	r3, r4
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004068:	430a      	orrs	r2, r1
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800406a:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800406c:	6042      	str	r2, [r0, #4]
 800406e:	e7ea      	b.n	8004046 <FMC_SDRAM_Init+0x3e>
 8004070:	ffff8000 	.word	0xffff8000

08004074 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8004074:	68cb      	ldr	r3, [r1, #12]
{
 8004076:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004078:	680c      	ldr	r4, [r1, #0]
 800407a:	688e      	ldr	r6, [r1, #8]
 800407c:	690d      	ldr	r5, [r1, #16]
 800407e:	1e5f      	subs	r7, r3, #1
 8004080:	694b      	ldr	r3, [r1, #20]
 8004082:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 8004086:	684c      	ldr	r4, [r1, #4]
 8004088:	6989      	ldr	r1, [r1, #24]
 800408a:	3b01      	subs	r3, #1
 800408c:	051b      	lsls	r3, r3, #20
 800408e:	3c01      	subs	r4, #1
 8004090:	3e01      	subs	r6, #1
 8004092:	3d01      	subs	r5, #1
 8004094:	3901      	subs	r1, #1
  if (Bank != FMC_SDRAM_BANK2) 
 8004096:	2a01      	cmp	r2, #1
 8004098:	ea4f 1404 	mov.w	r4, r4, lsl #4
 800409c:	ea4f 2606 	mov.w	r6, r6, lsl #8
 80040a0:	ea4f 4505 	mov.w	r5, r5, lsl #16
 80040a4:	ea4f 6101 	mov.w	r1, r1, lsl #24
 80040a8:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
 80040ac:	d00c      	beq.n	80040c8 <FMC_SDRAM_Timing_Init+0x54>
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80040ae:	ea43 030c 	orr.w	r3, r3, ip
 80040b2:	4323      	orrs	r3, r4
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80040b4:	6882      	ldr	r2, [r0, #8]
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80040b6:	4333      	orrs	r3, r6
 80040b8:	432b      	orrs	r3, r5
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80040ba:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80040be:	430b      	orrs	r3, r1
 80040c0:	4313      	orrs	r3, r2
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
                       (((Timing->RPDelay)-1U) << 20U)             |\
                       (((Timing->RCDDelay)-1U) << 24U));
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80040c2:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 80040c4:	2000      	movs	r0, #0
 80040c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80040c8:	6887      	ldr	r7, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80040ca:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
 80040ce:	f427 4770 	bic.w	r7, r7, #61440	; 0xf000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80040d2:	4334      	orrs	r4, r6
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80040d4:	433b      	orrs	r3, r7
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80040d6:	ea44 020c 	orr.w	r2, r4, ip
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80040da:	68c7      	ldr	r7, [r0, #12]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80040dc:	6083      	str	r3, [r0, #8]
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80040de:	432a      	orrs	r2, r5
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80040e0:	f007 4770 	and.w	r7, r7, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80040e4:	430a      	orrs	r2, r1
 80040e6:	433a      	orrs	r2, r7
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80040e8:	60c2      	str	r2, [r0, #12]
 80040ea:	e7eb      	b.n	80040c4 <FMC_SDRAM_Timing_Init+0x50>

080040ec <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80040ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	9301      	str	r3, [sp, #4]
{
 80040f2:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80040f4:	e9d1 3200 	ldrd	r3, r2, [r1]
 80040f8:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 80040fa:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80040fc:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8004100:	688a      	ldr	r2, [r1, #8]
 8004102:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004104:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8004108:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 800410a:	9b01      	ldr	r3, [sp, #4]
 800410c:	6103      	str	r3, [r0, #16]
{
 800410e:	4604      	mov	r4, r0

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004110:	f7fd fea6 	bl	8001e60 <HAL_GetTick>
 8004114:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004116:	69a3      	ldr	r3, [r4, #24]
 8004118:	f013 0320 	ands.w	r3, r3, #32
 800411c:	d101      	bne.n	8004122 <FMC_SDRAM_SendCommand+0x36>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800411e:	4618      	mov	r0, r3
 8004120:	e003      	b.n	800412a <FMC_SDRAM_SendCommand+0x3e>
    if(Timeout != HAL_MAX_DELAY)
 8004122:	1c6b      	adds	r3, r5, #1
 8004124:	d0f7      	beq.n	8004116 <FMC_SDRAM_SendCommand+0x2a>
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004126:	b915      	cbnz	r5, 800412e <FMC_SDRAM_SendCommand+0x42>
        return HAL_TIMEOUT;
 8004128:	2003      	movs	r0, #3
}
 800412a:	b002      	add	sp, #8
 800412c:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800412e:	f7fd fe97 	bl	8001e60 <HAL_GetTick>
 8004132:	1b80      	subs	r0, r0, r6
 8004134:	42a8      	cmp	r0, r5
 8004136:	d9ee      	bls.n	8004116 <FMC_SDRAM_SendCommand+0x2a>
 8004138:	e7f6      	b.n	8004128 <FMC_SDRAM_SendCommand+0x3c>

0800413a <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 800413a:	6943      	ldr	r3, [r0, #20]
 800413c:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8004140:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8004142:	2000      	movs	r0, #0
 8004144:	4770      	bx	lr
	...

08004148 <MX_CRC_Init>:
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004148:	4805      	ldr	r0, [pc, #20]	; (8004160 <MX_CRC_Init+0x18>)
{
 800414a:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <MX_CRC_Init+0x1c>)
 800414e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004150:	f7fd fef2 	bl	8001f38 <HAL_CRC_Init>
 8004154:	b118      	cbz	r0, 800415e <MX_CRC_Init+0x16>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004156:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800415a:	f000 bd9d 	b.w	8004c98 <Error_Handler>
}
 800415e:	bd08      	pop	{r3, pc}
 8004160:	2000b2c8 	.word	0x2000b2c8
 8004164:	40023000 	.word	0x40023000

08004168 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8004168:	6802      	ldr	r2, [r0, #0]
 800416a:	4b09      	ldr	r3, [pc, #36]	; (8004190 <HAL_CRC_MspInit+0x28>)
 800416c:	429a      	cmp	r2, r3
{
 800416e:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8004170:	d10b      	bne.n	800418a <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004172:	2300      	movs	r3, #0
 8004174:	9301      	str	r3, [sp, #4]
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <HAL_CRC_MspInit+0x2c>)
 8004178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800417a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800418a:	b002      	add	sp, #8
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40023000 	.word	0x40023000
 8004194:	40023800 	.word	0x40023800

08004198 <MX_DMA2D_Init>:
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8004198:	480d      	ldr	r0, [pc, #52]	; (80041d0 <MX_DMA2D_Init+0x38>)
  hdma2d.Init.Mode = DMA2D_M2M;
 800419a:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <MX_DMA2D_Init+0x3c>)
{
 800419c:	b508      	push	{r3, lr}
  hdma2d.Init.Mode = DMA2D_M2M;
 800419e:	2300      	movs	r3, #0
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
  hdma2d.Init.OutputOffset = 0;
  hdma2d.LayerCfg[1].InputOffset = 0;
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80041a0:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80041a4:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_M2M;
 80041a8:	e9c0 2300 	strd	r2, r3, [r0]
  hdma2d.Init.OutputOffset = 0;
 80041ac:	e9c0 3302 	strd	r3, r3, [r0, #8]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80041b0:	f7fd ffd4 	bl	800215c <HAL_DMA2D_Init>
 80041b4:	b108      	cbz	r0, 80041ba <MX_DMA2D_Init+0x22>
  {
    Error_Handler();
 80041b6:	f000 fd6f 	bl	8004c98 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80041ba:	4805      	ldr	r0, [pc, #20]	; (80041d0 <MX_DMA2D_Init+0x38>)
 80041bc:	2101      	movs	r1, #1
 80041be:	f7fe f895 	bl	80022ec <HAL_DMA2D_ConfigLayer>
 80041c2:	b118      	cbz	r0, 80041cc <MX_DMA2D_Init+0x34>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80041c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80041c8:	f000 bd66 	b.w	8004c98 <Error_Handler>
}
 80041cc:	bd08      	pop	{r3, pc}
 80041ce:	bf00      	nop
 80041d0:	2000b2d0 	.word	0x2000b2d0
 80041d4:	4002b000 	.word	0x4002b000

080041d8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{

  if(dma2dHandle->Instance==DMA2D)
 80041d8:	6802      	ldr	r2, [r0, #0]
 80041da:	4b09      	ldr	r3, [pc, #36]	; (8004200 <HAL_DMA2D_MspInit+0x28>)
 80041dc:	429a      	cmp	r2, r3
{
 80041de:	b082      	sub	sp, #8
  if(dma2dHandle->Instance==DMA2D)
 80041e0:	d10b      	bne.n	80041fa <HAL_DMA2D_MspInit+0x22>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	9301      	str	r3, [sp, #4]
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <HAL_DMA2D_MspInit+0x2c>)
 80041e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ea:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80041fa:	b002      	add	sp, #8
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	4002b000 	.word	0x4002b000
 8004204:	40023800 	.word	0x40023800

08004208 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8004208:	4816      	ldr	r0, [pc, #88]	; (8004264 <MX_FMC_Init+0x5c>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800420a:	4a17      	ldr	r2, [pc, #92]	; (8004268 <MX_FMC_Init+0x60>)
{
 800420c:	b500      	push	{lr}
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800420e:	2301      	movs	r3, #1
 8004210:	e9c0 2300 	strd	r2, r3, [r0]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004214:	f04f 0c10 	mov.w	ip, #16
 8004218:	2240      	movs	r2, #64	; 0x40
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800421a:	2300      	movs	r3, #0
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800421c:	e9c0 c204 	strd	ip, r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8004220:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8004224:	2104      	movs	r1, #4
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004226:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800422a:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800422e:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8004232:	e9c0 2308 	strd	r2, r3, [r0, #32]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8004236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 800423a:	b089      	sub	sp, #36	; 0x24
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 7;
 800423c:	2207      	movs	r2, #7
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800423e:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.ExitSelfRefreshDelay = 7;
 8004240:	2302      	movs	r3, #2
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 7;
 8004242:	e9cd 1203 	strd	r1, r2, [sp, #12]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8004246:	e9cd 3201 	strd	r3, r2, [sp, #4]
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800424a:	4469      	add	r1, sp
  SdramTiming.WriteRecoveryTime = 3;
 800424c:	2203      	movs	r2, #3
  SdramTiming.RPDelay = 2;
 800424e:	e9cd 2305 	strd	r2, r3, [sp, #20]
  SdramTiming.RCDDelay = 2;
 8004252:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8004254:	f7ff f852 	bl	80032fc <HAL_SDRAM_Init>
 8004258:	b108      	cbz	r0, 800425e <MX_FMC_Init+0x56>
  {
    Error_Handler( );
 800425a:	f000 fd1d 	bl	8004c98 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800425e:	b009      	add	sp, #36	; 0x24
 8004260:	f85d fb04 	ldr.w	pc, [sp], #4
 8004264:	2000b310 	.word	0x2000b310
 8004268:	a0000140 	.word	0xa0000140

0800426c <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800426c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FMC_Initialized) {
 8004270:	4b2c      	ldr	r3, [pc, #176]	; (8004324 <HAL_SDRAM_MspInit+0xb8>)
 8004272:	681c      	ldr	r4, [r3, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8004274:	b086      	sub	sp, #24
  if (FMC_Initialized) {
 8004276:	2c00      	cmp	r4, #0
 8004278:	d150      	bne.n	800431c <HAL_SDRAM_MspInit+0xb0>
  FMC_Initialized = 1;
 800427a:	f04f 0801 	mov.w	r8, #1
 800427e:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 8004282:	4b29      	ldr	r3, [pc, #164]	; (8004328 <HAL_SDRAM_MspInit+0xbc>)
 8004284:	9400      	str	r4, [sp, #0]
 8004286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004288:	4828      	ldr	r0, [pc, #160]	; (800432c <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800428a:	ea42 0208 	orr.w	r2, r2, r8
 800428e:	639a      	str	r2, [r3, #56]	; 0x38
 8004290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004292:	9403      	str	r4, [sp, #12]
  __HAL_RCC_FMC_CLK_ENABLE();
 8004294:	ea03 0308 	and.w	r3, r3, r8
 8004298:	9300      	str	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429a:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800429c:	2603      	movs	r6, #3
 800429e:	250c      	movs	r5, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80042a0:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042a2:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042a4:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80042a8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80042ac:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80042b0:	f7fe f860 	bl	8002374 <HAL_GPIO_Init>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80042b4:	481e      	ldr	r0, [pc, #120]	; (8004330 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80042b6:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80042b8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ba:	e9cd 8701 	strd	r8, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042be:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80042c2:	f7fe f857 	bl	8002374 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80042c6:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80042ca:	481a      	ldr	r0, [pc, #104]	; (8004334 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80042cc:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80042ce:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d0:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042d4:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80042d8:	f7fe f84c 	bl	8002374 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80042dc:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042e0:	4815      	ldr	r0, [pc, #84]	; (8004338 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80042e2:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042e4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e6:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042ea:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042ee:	f7fe f841 	bl	8002374 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80042f2:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042f6:	4811      	ldr	r0, [pc, #68]	; (800433c <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80042f8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80042fa:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042fc:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004300:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004304:	f7fe f836 	bl	8002374 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8004308:	2360      	movs	r3, #96	; 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800430a:	480d      	ldr	r0, [pc, #52]	; (8004340 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800430c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800430e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004310:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004314:	e9cd 4603 	strd	r4, r6, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004318:	f7fe f82c 	bl	8002374 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800431c:	b006      	add	sp, #24
 800431e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004322:	bf00      	nop
 8004324:	20000b84 	.word	0x20000b84
 8004328:	40023800 	.word	0x40023800
 800432c:	40021400 	.word	0x40021400
 8004330:	40020800 	.word	0x40020800
 8004334:	40021800 	.word	0x40021800
 8004338:	40021000 	.word	0x40021000
 800433c:	40020c00 	.word	0x40020c00
 8004340:	40020400 	.word	0x40020400

08004344 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8004344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004348:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800434a:	2214      	movs	r2, #20
 800434c:	2100      	movs	r1, #0
 800434e:	a809      	add	r0, sp, #36	; 0x24
 8004350:	f003 feda 	bl	8008108 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004354:	2400      	movs	r4, #0
 8004356:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <MX_GPIO_Init+0x1b4>)
 8004358:	9401      	str	r4, [sp, #4]
 800435a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800435c:	4f67      	ldr	r7, [pc, #412]	; (80044fc <MX_GPIO_Init+0x1b8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800435e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004508 <MX_GPIO_Init+0x1c4>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8004362:	4e67      	ldr	r6, [pc, #412]	; (8004500 <MX_GPIO_Init+0x1bc>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8004364:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 800450c <MX_GPIO_Init+0x1c8>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004368:	f042 0204 	orr.w	r2, r2, #4
 800436c:	631a      	str	r2, [r3, #48]	; 0x30
 800436e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004370:	f002 0204 	and.w	r2, r2, #4
 8004374:	9201      	str	r2, [sp, #4]
 8004376:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004378:	9402      	str	r4, [sp, #8]
 800437a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437c:	f042 0220 	orr.w	r2, r2, #32
 8004380:	631a      	str	r2, [r3, #48]	; 0x30
 8004382:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004384:	f002 0220 	and.w	r2, r2, #32
 8004388:	9202      	str	r2, [sp, #8]
 800438a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800438c:	9403      	str	r4, [sp, #12]
 800438e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004390:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
 8004396:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004398:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800439c:	9203      	str	r2, [sp, #12]
 800439e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80043a0:	9404      	str	r4, [sp, #16]
 80043a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	631a      	str	r2, [r3, #48]	; 0x30
 80043aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ac:	f002 0201 	and.w	r2, r2, #1
 80043b0:	9204      	str	r2, [sp, #16]
 80043b2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80043b4:	9405      	str	r4, [sp, #20]
 80043b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b8:	f042 0202 	orr.w	r2, r2, #2
 80043bc:	631a      	str	r2, [r3, #48]	; 0x30
 80043be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c0:	f002 0202 	and.w	r2, r2, #2
 80043c4:	9205      	str	r2, [sp, #20]
 80043c6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80043c8:	9406      	str	r4, [sp, #24]
 80043ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043d0:	631a      	str	r2, [r3, #48]	; 0x30
 80043d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80043d8:	9206      	str	r2, [sp, #24]
 80043da:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80043dc:	9407      	str	r4, [sp, #28]
 80043de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e0:	f042 0210 	orr.w	r2, r2, #16
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
 80043e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e8:	f002 0210 	and.w	r2, r2, #16
 80043ec:	9207      	str	r2, [sp, #28]
 80043ee:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80043f0:	9408      	str	r4, [sp, #32]
 80043f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043f4:	f042 0208 	orr.w	r2, r2, #8
 80043f8:	631a      	str	r2, [r3, #48]	; 0x30
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8004402:	4622      	mov	r2, r4
 8004404:	4638      	mov	r0, r7
 8004406:	2116      	movs	r1, #22
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004408:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800440a:	f7fe f941 	bl	8002690 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800440e:	4622      	mov	r2, r4
 8004410:	4640      	mov	r0, r8
 8004412:	2180      	movs	r1, #128	; 0x80
 8004414:	f7fe f93c 	bl	8002690 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8004418:	4622      	mov	r2, r4
 800441a:	4630      	mov	r0, r6
 800441c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004420:	f7fe f936 	bl	8002690 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8004424:	4622      	mov	r2, r4
 8004426:	4648      	mov	r0, r9
 8004428:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800442c:	f7fe f930 	bl	8002690 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004430:	2501      	movs	r5, #1
 8004432:	2316      	movs	r3, #22
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004434:	a909      	add	r1, sp, #36	; 0x24
 8004436:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004438:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800443c:	f44f 1a90 	mov.w	sl, #1179648	; 0x120000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004440:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004444:	f7fd ff96 	bl	8002374 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004448:	f248 0307 	movw	r3, #32775	; 0x8007
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800444c:	a909      	add	r1, sp, #36	; 0x24
 800444e:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004450:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004454:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004456:	f7fd ff8d 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800445a:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 800445c:	a909      	add	r1, sp, #36	; 0x24
 800445e:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004460:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004464:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8004468:	f7fd ff84 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800446c:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800446e:	a909      	add	r1, sp, #36	; 0x24
 8004470:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8004472:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004476:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8004478:	f7fd ff7c 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800447c:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800447e:	a909      	add	r1, sp, #36	; 0x24
 8004480:	4820      	ldr	r0, [pc, #128]	; (8004504 <MX_GPIO_Init+0x1c0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004482:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004484:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004488:	f7fd ff74 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448c:	f44f 4250 	mov.w	r2, #53248	; 0xd000
 8004490:	2302      	movs	r3, #2
 8004492:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004496:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8004498:	230c      	movs	r3, #12
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449a:	481a      	ldr	r0, [pc, #104]	; (8004504 <MX_GPIO_Init+0x1c0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800449c:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044a2:	f7fd ff67 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80044a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80044aa:	a909      	add	r1, sp, #36	; 0x24
 80044ac:	4815      	ldr	r0, [pc, #84]	; (8004504 <MX_GPIO_Init+0x1c0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ae:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044b0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80044b4:	f7fd ff5e 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 80044b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80044bc:	a909      	add	r1, sp, #36	; 0x24
 80044be:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044c0:	e9cd 3409 	strd	r3, r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80044c6:	f7fd ff55 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80044ca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044ce:	a909      	add	r1, sp, #36	; 0x24
 80044d0:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044d2:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044da:	f7fd ff4b 	bl	8002374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80044de:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044e2:	a909      	add	r1, sp, #36	; 0x24
 80044e4:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e6:	e9cd 3509 	strd	r3, r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ea:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044ee:	f7fd ff41 	bl	8002374 <HAL_GPIO_Init>

}
 80044f2:	b00e      	add	sp, #56	; 0x38
 80044f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f8:	40023800 	.word	0x40023800
 80044fc:	40020800 	.word	0x40020800
 8004500:	40020c00 	.word	0x40020c00
 8004504:	40020400 	.word	0x40020400
 8004508:	40020000 	.word	0x40020000
 800450c:	40021800 	.word	0x40021800

08004510 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8004510:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004512:	4812      	ldr	r0, [pc, #72]	; (800455c <MX_I2C3_Init+0x4c>)
  hi2c3.Init.ClockSpeed = 100000;
 8004514:	4a12      	ldr	r2, [pc, #72]	; (8004560 <MX_I2C3_Init+0x50>)
 8004516:	4b13      	ldr	r3, [pc, #76]	; (8004564 <MX_I2C3_Init+0x54>)
 8004518:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800451c:	2300      	movs	r3, #0
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800451e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.OwnAddress1 = 0;
 8004522:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004526:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800452a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800452e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004530:	f7fe f8b4 	bl	800269c <HAL_I2C_Init>
 8004534:	b108      	cbz	r0, 800453a <MX_I2C3_Init+0x2a>
  {
    Error_Handler();
 8004536:	f000 fbaf 	bl	8004c98 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800453a:	4808      	ldr	r0, [pc, #32]	; (800455c <MX_I2C3_Init+0x4c>)
 800453c:	2100      	movs	r1, #0
 800453e:	f7fe f955 	bl	80027ec <HAL_I2CEx_ConfigAnalogFilter>
 8004542:	b108      	cbz	r0, 8004548 <MX_I2C3_Init+0x38>
  {
    Error_Handler();
 8004544:	f000 fba8 	bl	8004c98 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8004548:	4804      	ldr	r0, [pc, #16]	; (800455c <MX_I2C3_Init+0x4c>)
 800454a:	2100      	movs	r1, #0
 800454c:	f7fe f96d 	bl	800282a <HAL_I2CEx_ConfigDigitalFilter>
 8004550:	b118      	cbz	r0, 800455a <MX_I2C3_Init+0x4a>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004556:	f000 bb9f 	b.w	8004c98 <Error_Handler>
}
 800455a:	bd08      	pop	{r3, pc}
 800455c:	2000b344 	.word	0x2000b344
 8004560:	40005c00 	.word	0x40005c00
 8004564:	000186a0 	.word	0x000186a0

08004568 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800456c:	4604      	mov	r4, r0
 800456e:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004570:	2214      	movs	r2, #20
 8004572:	2100      	movs	r1, #0
 8004574:	a803      	add	r0, sp, #12
 8004576:	f003 fdc7 	bl	8008108 <memset>
  if(i2cHandle->Instance==I2C3)
 800457a:	6822      	ldr	r2, [r4, #0]
 800457c:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <HAL_I2C_MspInit+0x94>)
 800457e:	429a      	cmp	r2, r3
 8004580:	d139      	bne.n	80045f6 <HAL_I2C_MspInit+0x8e>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004582:	4c1f      	ldr	r4, [pc, #124]	; (8004600 <HAL_I2C_MspInit+0x98>)
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8004584:	481f      	ldr	r0, [pc, #124]	; (8004604 <HAL_I2C_MspInit+0x9c>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004586:	2500      	movs	r5, #0
 8004588:	9500      	str	r5, [sp, #0]
 800458a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800458c:	f043 0304 	orr.w	r3, r3, #4
 8004590:	6323      	str	r3, [r4, #48]	; 0x30
 8004592:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	9300      	str	r3, [sp, #0]
 800459a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800459c:	9501      	str	r5, [sp, #4]
 800459e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045a0:	f043 0301 	orr.w	r3, r3, #1
 80045a4:	6323      	str	r3, [r4, #48]	; 0x30
 80045a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	9301      	str	r3, [sp, #4]
 80045ae:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045b0:	f04f 0812 	mov.w	r8, #18
 80045b4:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80045b8:	2701      	movs	r7, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80045ba:	2604      	movs	r6, #4
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80045bc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045be:	e9cd 3803 	strd	r3, r8, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c2:	e9cd 7505 	strd	r7, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80045c6:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80045c8:	f7fd fed4 	bl	8002374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80045cc:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80045d0:	480d      	ldr	r0, [pc, #52]	; (8004608 <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80045d2:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80045d4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80045d6:	e9cd 3803 	strd	r3, r8, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045da:	e9cd 7505 	strd	r7, r5, [sp, #20]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80045de:	f7fd fec9 	bl	8002374 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80045e2:	9502      	str	r5, [sp, #8]
 80045e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045ea:	6423      	str	r3, [r4, #64]	; 0x40
 80045ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045f2:	9302      	str	r3, [sp, #8]
 80045f4:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80045f6:	b008      	add	sp, #32
 80045f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045fc:	40005c00 	.word	0x40005c00
 8004600:	40023800 	.word	0x40023800
 8004604:	40020800 	.word	0x40020800
 8004608:	40020000 	.word	0x40020000

0800460c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800460c:	b510      	push	{r4, lr}
 800460e:	b08e      	sub	sp, #56	; 0x38

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8004610:	2234      	movs	r2, #52	; 0x34
 8004612:	2100      	movs	r1, #0
 8004614:	a801      	add	r0, sp, #4
 8004616:	f003 fd77 	bl	8008108 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800461a:	4825      	ldr	r0, [pc, #148]	; (80046b0 <MX_LTDC_Init+0xa4>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800461c:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <MX_LTDC_Init+0xa8>)
 800461e:	2400      	movs	r4, #0
 8004620:	e9c0 3400 	strd	r3, r4, [r0]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 9;
  hltdc.Init.VerticalSync = 1;
 8004624:	f04f 0c09 	mov.w	ip, #9
 8004628:	2301      	movs	r3, #1
 800462a:	e9c0 c305 	strd	ip, r3, [r0, #20]
  hltdc.Init.AccumulatedHBP = 29;
  hltdc.Init.AccumulatedVBP = 3;
 800462e:	f04f 0e1d 	mov.w	lr, #29
 8004632:	2303      	movs	r3, #3
 8004634:	e9c0 e307 	strd	lr, r3, [r0, #28]
  hltdc.Init.AccumulatedActiveW = 269;
  hltdc.Init.AccumulatedActiveH = 323;
 8004638:	f240 120d 	movw	r2, #269	; 0x10d
 800463c:	f240 1343 	movw	r3, #323	; 0x143
 8004640:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
  hltdc.Init.TotalWidth = 279;
  hltdc.Init.TotalHeigh = 327;
 8004644:	f240 1117 	movw	r1, #279	; 0x117
 8004648:	f240 1347 	movw	r3, #327	; 0x147
  hltdc.Init.Backcolor.Blue = 0;
 800464c:	8684      	strh	r4, [r0, #52]	; 0x34
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800464e:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hltdc.Init.TotalHeigh = 327;
 8004652:	e9c0 130b 	strd	r1, r3, [r0, #44]	; 0x2c
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004656:	6104      	str	r4, [r0, #16]
  hltdc.Init.Backcolor.Green = 0;
  hltdc.Init.Backcolor.Red = 0;
 8004658:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800465c:	f7fe f98a 	bl	8002974 <HAL_LTDC_Init>
 8004660:	b108      	cbz	r0, 8004666 <MX_LTDC_Init+0x5a>
  {
    Error_Handler();
 8004662:	f000 fb19 	bl	8004c98 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 240;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 320;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8004666:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800466a:	2102      	movs	r1, #2
 800466c:	e9cd 3104 	strd	r3, r1, [sp, #16]
  pLayerCfg.Alpha = 255;
 8004670:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8004672:	f44f 60c0 	mov.w	r0, #1536	; 0x600
  pLayerCfg.Alpha0 = 0;
 8004676:	e9cd 1406 	strd	r1, r4, [sp, #24]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800467a:	2107      	movs	r1, #7
  pLayerCfg.WindowX1 = 240;
 800467c:	22f0      	movs	r2, #240	; 0xf0
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800467e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  pLayerCfg.FBStartAdress = 0xD0000000;
 8004682:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
  pLayerCfg.ImageWidth = 240;
 8004686:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  pLayerCfg.WindowY0 = 0;
 800468a:	e9cd 2402 	strd	r2, r4, [sp, #8]
  pLayerCfg.ImageHeight = 320;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800468e:	4808      	ldr	r0, [pc, #32]	; (80046b0 <MX_LTDC_Init+0xa4>)
  pLayerCfg.WindowX0 = 0;
 8004690:	9401      	str	r4, [sp, #4]
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8004692:	2200      	movs	r2, #0
 8004694:	a901      	add	r1, sp, #4
  pLayerCfg.ImageHeight = 320;
 8004696:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8004698:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Red = 0;
 800469c:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80046a0:	f7fe f9d4 	bl	8002a4c <HAL_LTDC_ConfigLayer>
 80046a4:	b108      	cbz	r0, 80046aa <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80046a6:	f000 faf7 	bl	8004c98 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80046aa:	b00e      	add	sp, #56	; 0x38
 80046ac:	bd10      	pop	{r4, pc}
 80046ae:	bf00      	nop
 80046b0:	2000b398 	.word	0x2000b398
 80046b4:	40016800 	.word	0x40016800

080046b8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80046b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046ba:	4604      	mov	r4, r0
 80046bc:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046be:	2214      	movs	r2, #20
 80046c0:	2100      	movs	r1, #0
 80046c2:	a807      	add	r0, sp, #28
 80046c4:	f003 fd20 	bl	8008108 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(ltdcHandle->Instance==LTDC)
 80046c8:	6822      	ldr	r2, [r4, #0]
 80046ca:	4b54      	ldr	r3, [pc, #336]	; (800481c <HAL_LTDC_MspInit+0x164>)
 80046cc:	429a      	cmp	r2, r3
 80046ce:	f040 80a2 	bne.w	8004816 <HAL_LTDC_MspInit+0x15e>
//    {
//      Error_Handler();
//    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80046d2:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 80046d6:	2400      	movs	r4, #0
 80046d8:	9400      	str	r4, [sp, #0]
 80046da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = ENABLE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80046dc:	4850      	ldr	r0, [pc, #320]	; (8004820 <HAL_LTDC_MspInit+0x168>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80046de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80046e2:	645a      	str	r2, [r3, #68]	; 0x44
 80046e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046e6:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80046ea:	9200      	str	r2, [sp, #0]
 80046ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80046ee:	9401      	str	r4, [sp, #4]
 80046f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f2:	f042 0220 	orr.w	r2, r2, #32
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
 80046f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046fa:	f002 0220 	and.w	r2, r2, #32
 80046fe:	9201      	str	r2, [sp, #4]
 8004700:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004702:	9402      	str	r4, [sp, #8]
 8004704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	631a      	str	r2, [r3, #48]	; 0x30
 800470c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800470e:	f002 0201 	and.w	r2, r2, #1
 8004712:	9202      	str	r2, [sp, #8]
 8004714:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004716:	9403      	str	r4, [sp, #12]
 8004718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471a:	f042 0202 	orr.w	r2, r2, #2
 800471e:	631a      	str	r2, [r3, #48]	; 0x30
 8004720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004722:	f002 0202 	and.w	r2, r2, #2
 8004726:	9203      	str	r2, [sp, #12]
 8004728:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800472a:	9404      	str	r4, [sp, #16]
 800472c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
 8004734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004736:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800473a:	9204      	str	r2, [sp, #16]
 800473c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800473e:	9405      	str	r4, [sp, #20]
 8004740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004742:	f042 0204 	orr.w	r2, r2, #4
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
 8004748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800474a:	f002 0204 	and.w	r2, r2, #4
 800474e:	9205      	str	r2, [sp, #20]
 8004750:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004752:	9406      	str	r4, [sp, #24]
 8004754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004756:	f042 0208 	orr.w	r2, r2, #8
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
 800475c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004764:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004766:	260e      	movs	r6, #14
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004768:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800476a:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800476c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004770:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004772:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004776:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800477a:	f7fd fdfb 	bl	8002374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800477e:	f641 0358 	movw	r3, #6232	; 0x1858
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004782:	4828      	ldr	r0, [pc, #160]	; (8004824 <HAL_LTDC_MspInit+0x16c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004784:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004786:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004788:	e9cd 3507 	strd	r3, r5, [sp, #28]

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800478c:	2709      	movs	r7, #9
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800478e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004792:	f7fd fdef 	bl	8002374 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8004796:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004798:	4823      	ldr	r0, [pc, #140]	; (8004828 <HAL_LTDC_MspInit+0x170>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800479a:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800479c:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800479e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047a6:	f7fd fde5 	bl	8002374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80047aa:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ae:	481e      	ldr	r0, [pc, #120]	; (8004828 <HAL_LTDC_MspInit+0x170>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047b0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047b4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047b8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047bc:	f7fd fdda 	bl	8002374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80047c0:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047c4:	4819      	ldr	r0, [pc, #100]	; (800482c <HAL_LTDC_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047c6:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047c8:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ca:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ce:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80047d2:	f7fd fdcf 	bl	8002374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80047d6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047da:	4815      	ldr	r0, [pc, #84]	; (8004830 <HAL_LTDC_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047dc:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047de:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047e0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047e4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047e8:	f7fd fdc4 	bl	8002374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80047ec:	2348      	movs	r3, #72	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047ee:	4811      	ldr	r0, [pc, #68]	; (8004834 <HAL_LTDC_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80047f0:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047f2:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f8:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047fc:	f7fd fdba 	bl	8002374 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8004800:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004804:	4809      	ldr	r0, [pc, #36]	; (800482c <HAL_LTDC_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004806:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004808:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800480a:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004812:	f7fd fdaf 	bl	8002374 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8004816:	b00d      	add	sp, #52	; 0x34
 8004818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800481a:	bf00      	nop
 800481c:	40016800 	.word	0x40016800
 8004820:	40021400 	.word	0x40021400
 8004824:	40020000 	.word	0x40020000
 8004828:	40020400 	.word	0x40020400
 800482c:	40021800 	.word	0x40021800
 8004830:	40020800 	.word	0x40020800
 8004834:	40020c00 	.word	0x40020c00

08004838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004838:	b530      	push	{r4, r5, lr}
 800483a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800483c:	2210      	movs	r2, #16
 800483e:	2100      	movs	r1, #0
 8004840:	a80a      	add	r0, sp, #40	; 0x28
 8004842:	f003 fc61 	bl	8008108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004846:	2214      	movs	r2, #20
 8004848:	2100      	movs	r1, #0
 800484a:	a803      	add	r0, sp, #12
 800484c:	f003 fc5c 	bl	8008108 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004850:	2400      	movs	r4, #0
 8004852:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <SystemClock_Config+0x90>)
 8004854:	9401      	str	r4, [sp, #4]
 8004856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004858:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800485c:	641a      	str	r2, [r3, #64]	; 0x40
 800485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004868:	4b18      	ldr	r3, [pc, #96]	; (80048cc <SystemClock_Config+0x94>)
 800486a:	9402      	str	r4, [sp, #8]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800487a:	9302      	str	r3, [sp, #8]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800487c:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800487e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004880:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004884:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004888:	2502      	movs	r5, #2
 800488a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800488e:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004892:	2104      	movs	r1, #4
 8004894:	23a8      	movs	r3, #168	; 0xa8
 8004896:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800489a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800489c:	2307      	movs	r3, #7
 800489e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80048a0:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80048a2:	f7fe f94d 	bl	8002b40 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80048a6:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80048a8:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80048ac:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80048b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048b4:	e9cd 0306 	strd	r0, r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80048b8:	2105      	movs	r1, #5
 80048ba:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80048bc:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80048be:	f7fe fb19 	bl	8002ef4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80048c2:	b015      	add	sp, #84	; 0x54
 80048c4:	bd30      	pop	{r4, r5, pc}
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40007000 	.word	0x40007000

080048d0 <reset_nn>:

/* USER CODE BEGIN 4 */

// Reset function
void reset_nn(ai_float *in_data, ai_float *out_data,
		pred_probType *_1st_pred, pred_probType *_2nd_pred) {
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	461c      	mov	r4, r3
 80048d4:	460e      	mov	r6, r1
 80048d6:	4615      	mov	r5, r2
	memset(in_data, 0.0, sizeof(in_data[0]) * AI_NETWORK_IN_1_SIZE);
 80048d8:	2100      	movs	r1, #0
 80048da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048de:	f003 fc13 	bl	8008108 <memset>
	memset(out_data, 0.0, sizeof(out_data[0]) * AI_NETWORK_OUT_1_SIZE);
 80048e2:	2300      	movs	r3, #0
	_2nd_pred->label = _2nd_pred->prob = _1st_pred->label = _1st_pred->prob =
 80048e4:	2200      	movs	r2, #0
	memset(out_data, 0.0, sizeof(out_data[0]) * AI_NETWORK_OUT_1_SIZE);
 80048e6:	6033      	str	r3, [r6, #0]
 80048e8:	6073      	str	r3, [r6, #4]
	_2nd_pred->label = _2nd_pred->prob = _1st_pred->label = _1st_pred->prob =
 80048ea:	602a      	str	r2, [r5, #0]
 80048ec:	712b      	strb	r3, [r5, #4]
 80048ee:	6022      	str	r2, [r4, #0]
 80048f0:	7123      	strb	r3, [r4, #4]
			0.0;
}
 80048f2:	bd70      	pop	{r4, r5, r6, pc}

080048f4 <aiInit>:

/*
 * Bootstrap code
 */
int aiInit(void) {
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	ai_error err;

	/* 1 - Create an instance of the model */
	err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG /* or NULL */);
 80048f6:	4d1c      	ldr	r5, [pc, #112]	; (8004968 <aiInit+0x74>)
int aiInit(void) {
 80048f8:	b08d      	sub	sp, #52	; 0x34
	err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG /* or NULL */);
 80048fa:	2100      	movs	r1, #0
 80048fc:	4628      	mov	r0, r5
 80048fe:	f000 f9cf 	bl	8004ca0 <ai_network_create>
	if (err.type != AI_ERROR_NONE) {
 8004902:	f010 04ff 	ands.w	r4, r0, #255	; 0xff
 8004906:	d008      	beq.n	800491a <aiInit+0x26>
		printf("E: AI ai_network_create error - type=%d code=%d\r\n", err.type,
 8004908:	0a02      	lsrs	r2, r0, #8
 800490a:	4818      	ldr	r0, [pc, #96]	; (800496c <aiInit+0x78>)
 800490c:	4621      	mov	r1, r4
			AI_NETWORK_DATA_ACTIVATIONS(activations)
	);

	if (!ai_network_init(network, &params)) {
		err = ai_network_get_error(network);
		printf("E: AI ai_network_init error - type=%d code=%d\r\n", err.type,
 800490e:	f004 fb27 	bl	8008f60 <iprintf>
				err.code);
		return -1;
 8004912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	return 0;
}
 8004916:	b00d      	add	sp, #52	; 0x34
 8004918:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 800491a:	4b15      	ldr	r3, [pc, #84]	; (8004970 <aiInit+0x7c>)
 800491c:	f04f 1701 	mov.w	r7, #65537	; 0x10001
 8004920:	e9cd 3700 	strd	r3, r7, [sp]
 8004924:	2601      	movs	r6, #1
 8004926:	4b13      	ldr	r3, [pc, #76]	; (8004974 <aiInit+0x80>)
 8004928:	9303      	str	r3, [sp, #12]
 800492a:	f8ad 6008 	strh.w	r6, [sp, #8]
 800492e:	f000 fa3d 	bl	8004dac <ai_network_data_weights_get>
 8004932:	4b11      	ldr	r3, [pc, #68]	; (8004978 <aiInit+0x84>)
 8004934:	f8ad 6020 	strh.w	r6, [sp, #32]
 8004938:	e9cd 3706 	strd	r3, r7, [sp, #24]
 800493c:	f249 5380 	movw	r3, #38272	; 0x9580
 8004940:	9309      	str	r3, [sp, #36]	; 0x24
 8004942:	4b0e      	ldr	r3, [pc, #56]	; (800497c <aiInit+0x88>)
 8004944:	e9cd 0404 	strd	r0, r4, [sp, #16]
	if (!ai_network_init(network, &params)) {
 8004948:	4669      	mov	r1, sp
 800494a:	6828      	ldr	r0, [r5, #0]
	const ai_network_params params = AI_NETWORK_PARAMS_INIT(
 800494c:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
	if (!ai_network_init(network, &params)) {
 8004950:	f000 f9b4 	bl	8004cbc <ai_network_init>
 8004954:	b930      	cbnz	r0, 8004964 <aiInit+0x70>
		err = ai_network_get_error(network);
 8004956:	6828      	ldr	r0, [r5, #0]
 8004958:	f000 f99f 	bl	8004c9a <ai_network_get_error>
		printf("E: AI ai_network_init error - type=%d code=%d\r\n", err.type,
 800495c:	0a02      	lsrs	r2, r0, #8
 800495e:	b2c1      	uxtb	r1, r0
 8004960:	4807      	ldr	r0, [pc, #28]	; (8004980 <aiInit+0x8c>)
 8004962:	e7d4      	b.n	800490e <aiInit+0x1a>
	return 0;
 8004964:	4620      	mov	r0, r4
 8004966:	e7d6      	b.n	8004916 <aiInit+0x22>
 8004968:	20000ba0 	.word	0x20000ba0
 800496c:	08023964 	.word	0x08023964
 8004970:	40040440 	.word	0x40040440
 8004974:	00012f48 	.word	0x00012f48
 8004978:	00040440 	.word	0x00040440
 800497c:	20001be0 	.word	0x20001be0
 8004980:	08023996 	.word	0x08023996

08004984 <aiRun>:

/*
 * Run inference code
 */
int aiRun(const void *in_data, void *out_data) {
 8004984:	b5f0      	push	{r4, r5, r6, r7, lr}
	ai_i32 n_batch;
	ai_error err;

	/* 1 - Create the AI buffer IO handlers with the default definition */
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8004986:	4c18      	ldr	r4, [pc, #96]	; (80049e8 <aiRun+0x64>)
int aiRun(const void *in_data, void *out_data) {
 8004988:	4607      	mov	r7, r0
 800498a:	460e      	mov	r6, r1
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 800498c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
int aiRun(const void *in_data, void *out_data) {
 800498e:	b08d      	sub	sp, #52	; 0x34
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 8004990:	466d      	mov	r5, sp
 8004992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004994:	e894 0003 	ldmia.w	r4, {r0, r1}
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 8004998:	3408      	adds	r4, #8
	ai_buffer ai_input[AI_NETWORK_IN_NUM] = AI_NETWORK_IN;
 800499a:	e885 0003 	stmia.w	r5, {r0, r1}
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 800499e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049a0:	ad06      	add	r5, sp, #24
 80049a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049a4:	e894 0003 	ldmia.w	r4, {r0, r1}
	ai_input[0].data = AI_HANDLE_PTR(in_data);
	ai_output[0].n_batches = 1;
	ai_output[0].data = AI_HANDLE_PTR(out_data);

	/* 3 - Perform the inference */
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80049a8:	4c10      	ldr	r4, [pc, #64]	; (80049ec <aiRun+0x68>)
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 80049aa:	9704      	str	r7, [sp, #16]
	ai_buffer ai_output[AI_NETWORK_OUT_NUM] = AI_NETWORK_OUT;
 80049ac:	e885 0003 	stmia.w	r5, {r0, r1}
	ai_input[0].n_batches = 1;
 80049b0:	2301      	movs	r3, #1
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80049b2:	6820      	ldr	r0, [r4, #0]
	ai_input[0].n_batches = 1;
 80049b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80049b8:	aa06      	add	r2, sp, #24
 80049ba:	4669      	mov	r1, sp
	ai_output[0].n_batches = 1;
 80049bc:	f8ad 301c 	strh.w	r3, [sp, #28]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 80049c0:	960a      	str	r6, [sp, #40]	; 0x28
	n_batch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 80049c2:	f000 f9f1 	bl	8004da8 <ai_network_run>
	if (n_batch != 1) {
 80049c6:	2801      	cmp	r0, #1
 80049c8:	d00b      	beq.n	80049e2 <aiRun+0x5e>
		err = ai_network_get_error(network);
 80049ca:	6820      	ldr	r0, [r4, #0]
 80049cc:	f000 f965 	bl	8004c9a <ai_network_get_error>
		printf("E: AI ai_network_run error - type=%d code=%d\r\n", err.type,
 80049d0:	0a02      	lsrs	r2, r0, #8
 80049d2:	b2c1      	uxtb	r1, r0
 80049d4:	4806      	ldr	r0, [pc, #24]	; (80049f0 <aiRun+0x6c>)
 80049d6:	f004 fac3 	bl	8008f60 <iprintf>
				err.code);
		return -1;
 80049da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	};

	return 0;
}
 80049de:	b00d      	add	sp, #52	; 0x34
 80049e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return 0;
 80049e2:	2000      	movs	r0, #0
 80049e4:	e7fb      	b.n	80049de <aiRun+0x5a>
 80049e6:	bf00      	nop
 80049e8:	08010984 	.word	0x08010984
 80049ec:	20000ba0 	.word	0x20000ba0
 80049f0:	080239c6 	.word	0x080239c6

080049f4 <user_interface_init>:
 *
 * @brief: TLCD INIT Implementation
 * @Param: Board Support Package
 *
 */
void user_interface_init(void) {
 80049f4:	b508      	push	{r3, lr}
	// Initialise LCD. Use functions from stm32f429i_discovery_lcd.h
	BSP_LCD_Init();
 80049f6:	f7fc ff9f 	bl	8001938 <BSP_LCD_Init>

	// Initialise LCD Layer 1 (background layer) with FB address that points to layer 1
	BSP_LCD_LayerDefaultInit(LCD_LAYER_1, LCD_FRAME_BUFFER_LAYER1);
 80049fa:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80049fe:	2001      	movs	r0, #1
 8004a00:	f7fc fe1c 	bl	800163c <BSP_LCD_LayerDefaultInit>

	// Select layer 1
	BSP_LCD_SelectLayer(LCD_LAYER_1);
 8004a04:	2001      	movs	r0, #1
 8004a06:	f7fc fe57 	bl	80016b8 <BSP_LCD_SelectLayer>

	// Clear LCD (color red)
	BSP_LCD_Clear(LCD_COLOR_RED);
 8004a0a:	4811      	ldr	r0, [pc, #68]	; (8004a50 <user_interface_init+0x5c>)
 8004a0c:	f7fc fe9c 	bl	8001748 <BSP_LCD_Clear>

	// Set colour keyring for layer 1 (colour dark cyan)
	BSP_LCD_SetColorKeying(LCD_LAYER_1, LCD_COLOR_DARKCYAN);
 8004a10:	4910      	ldr	r1, [pc, #64]	; (8004a54 <user_interface_init+0x60>)
 8004a12:	2001      	movs	r0, #1
 8004a14:	f7fc fe6a 	bl	80016ec <BSP_LCD_SetColorKeying>

	// Set layer 1 visibility to disabled
	BSP_LCD_SetLayerVisible(LCD_LAYER_1, DISABLE);
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	f7fc fe52 	bl	80016c4 <BSP_LCD_SetLayerVisible>

	// Initialise Layer 0 (foreground or visible layer) with FB address that points to layer 0
	BSP_LCD_LayerDefaultInit(LCD_LAYER_0, LCD_FRAME_BUFFER_LAYER0);
 8004a20:	490d      	ldr	r1, [pc, #52]	; (8004a58 <user_interface_init+0x64>)
 8004a22:	2000      	movs	r0, #0
 8004a24:	f7fc fe0a 	bl	800163c <BSP_LCD_LayerDefaultInit>

	// Select Layer 0
	BSP_LCD_SelectLayer(LCD_LAYER_0);
 8004a28:	2000      	movs	r0, #0
 8004a2a:	f7fc fe45 	bl	80016b8 <BSP_LCD_SelectLayer>

	// Switch LCD display on
	BSP_LCD_DisplayOn();
 8004a2e:	f7fc fed7 	bl	80017e0 <BSP_LCD_DisplayOn>

	HAL_Delay(200);
 8004a32:	20c8      	movs	r0, #200	; 0xc8
 8004a34:	f7fd fa1a 	bl	8001e6c <HAL_Delay>

	// Clear the whole LCD with color lightcyan
	BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 8004a38:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8004a3c:	f7fc fe84 	bl	8001748 <BSP_LCD_Clear>

	HAL_Delay(100);
 8004a40:	2064      	movs	r0, #100	; 0x64
 8004a42:	f7fd fa13 	bl	8001e6c <HAL_Delay>

	printf("LCD initialisation completed \r\n");
}
 8004a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf("LCD initialisation completed \r\n");
 8004a4a:	4804      	ldr	r0, [pc, #16]	; (8004a5c <user_interface_init+0x68>)
 8004a4c:	f004 bb0e 	b.w	800906c <puts>
 8004a50:	ffff0000 	.word	0xffff0000
 8004a54:	ff008080 	.word	0xff008080
 8004a58:	d0130000 	.word	0xd0130000
 8004a5c:	080239f5 	.word	0x080239f5

08004a60 <user_interface_reset>:
 *
 * @brief: User Interface Control Function Implementation
 * @Param: Board Support Package
 *
 */
void user_interface_reset(void) {
 8004a60:	b508      	push	{r3, lr}
	// Clear LCD with light cyan color. Possible color definitions in stm32f429i_discovery_lcd.h
	BSP_LCD_Clear(LCD_COLOR_LIGHTCYAN);
 8004a62:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8004a66:	f7fc fe6f 	bl	8001748 <BSP_LCD_Clear>

	// Set background color (lightcyan)
	BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8004a6a:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8004a6e:	f7fc fe57 	bl	8001720 <BSP_LCD_SetBackColor>

	// set font size 16
	BSP_LCD_SetFont(&Font20);
 8004a72:	4816      	ldr	r0, [pc, #88]	; (8004acc <user_interface_reset+0x6c>)
 8004a74:	f7fc fe5e 	bl	8001734 <BSP_LCD_SetFont>
	// Set text color to blue
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8004a78:	4815      	ldr	r0, [pc, #84]	; (8004ad0 <user_interface_reset+0x70>)
 8004a7a:	f7fc fe47 	bl	800170c <BSP_LCD_SetTextColor>
	// Write prediction output string "NN OUTPUT" to position x,y = (5, 255)
	BSP_LCD_DisplayStringAt(15, 5, (uint8_t*) "Thermal Picture ", CENTER_MODE);
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <user_interface_reset+0x74>)
 8004a80:	2301      	movs	r3, #1
 8004a82:	2105      	movs	r1, #5
 8004a84:	200f      	movs	r0, #15
 8004a86:	f7fd f821 	bl	8001acc <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(15, 25, (uint8_t*) "Prediction ", CENTER_MODE);
 8004a8a:	4a13      	ldr	r2, [pc, #76]	; (8004ad8 <user_interface_reset+0x78>)
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	2119      	movs	r1, #25
 8004a90:	200f      	movs	r0, #15
 8004a92:	f7fd f81b 	bl	8001acc <BSP_LCD_DisplayStringAt>

	// Set text color to black
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8004a96:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8004a9a:	f7fc fe37 	bl	800170c <BSP_LCD_SetTextColor>

	// Picture box
	BSP_LCD_FillRect(64, 64, 128, 128);
 8004a9e:	2380      	movs	r3, #128	; 0x80
 8004aa0:	2140      	movs	r1, #64	; 0x40
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	4608      	mov	r0, r1
 8004aa6:	f7fc fe6f 	bl	8001788 <BSP_LCD_FillRect>

	// set font size 16
	BSP_LCD_SetFont(&Font16);
 8004aaa:	480c      	ldr	r0, [pc, #48]	; (8004adc <user_interface_reset+0x7c>)
 8004aac:	f7fc fe42 	bl	8001734 <BSP_LCD_SetFont>
	// Write prediction output string "NN OUTPUT" to position x,y = (5, 255)
	BSP_LCD_DisplayStringAt(5, 220, (uint8_t*) "NN OUTPUT: ", LEFT_MODE);
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <user_interface_reset+0x80>)
 8004ab4:	21dc      	movs	r1, #220	; 0xdc
 8004ab6:	2005      	movs	r0, #5
 8004ab8:	f7fd f808 	bl	8001acc <BSP_LCD_DisplayStringAt>

	// Set text color to blue
	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8004abc:	4809      	ldr	r0, [pc, #36]	; (8004ae4 <user_interface_reset+0x84>)
 8004abe:	f7fc fe25 	bl	800170c <BSP_LCD_SetTextColor>

	// Set text color as black
	// BSP_LCD_SetTextColor(LCD_COLOR_BLACK);

	printf("LCD Interface INIT successful \r\n");
}
 8004ac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf("LCD Interface INIT successful \r\n");
 8004ac6:	4808      	ldr	r0, [pc, #32]	; (8004ae8 <user_interface_reset+0x88>)
 8004ac8:	f004 bad0 	b.w	800906c <puts>
 8004acc:	2000006c 	.word	0x2000006c
 8004ad0:	ffff0000 	.word	0xffff0000
 8004ad4:	08023a14 	.word	0x08023a14
 8004ad8:	08023a25 	.word	0x08023a25
 8004adc:	20000064 	.word	0x20000064
 8004ae0:	08023a31 	.word	0x08023a31
 8004ae4:	ff0000ff 	.word	0xff0000ff
 8004ae8:	08023a3d 	.word	0x08023a3d

08004aec <main>:
{
 8004aec:	b530      	push	{r4, r5, lr}
	setvbuf(stdin, NULL, _IONBF, 0);
 8004aee:	4b5a      	ldr	r3, [pc, #360]	; (8004c58 <main+0x16c>)
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	2300      	movs	r3, #0
{
 8004af4:	b093      	sub	sp, #76	; 0x4c
	setvbuf(stdin, NULL, _IONBF, 0);
 8004af6:	4619      	mov	r1, r3
 8004af8:	2202      	movs	r2, #2
 8004afa:	6840      	ldr	r0, [r0, #4]
 8004afc:	f004 face 	bl	800909c <setvbuf>
  HAL_Init();
 8004b00:	f7fd f988 	bl	8001e14 <HAL_Init>
  SystemClock_Config();
 8004b04:	f7ff fe98 	bl	8004838 <SystemClock_Config>
  MX_GPIO_Init();
 8004b08:	f7ff fc1c 	bl	8004344 <MX_GPIO_Init>
  MX_CRC_Init();
 8004b0c:	f7ff fb1c 	bl	8004148 <MX_CRC_Init>
  MX_DMA2D_Init();
 8004b10:	f7ff fb42 	bl	8004198 <MX_DMA2D_Init>
  MX_FMC_Init();
 8004b14:	f7ff fb78 	bl	8004208 <MX_FMC_Init>
  MX_I2C3_Init();
 8004b18:	f7ff fcfa 	bl	8004510 <MX_I2C3_Init>
  MX_LTDC_Init();
 8004b1c:	f7ff fd76 	bl	800460c <MX_LTDC_Init>
  MX_SPI5_Init();
 8004b20:	f000 f948 	bl	8004db4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8004b24:	f000 fa2a 	bl	8004f7c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8004b28:	f000 fa74 	bl	8005014 <MX_USART1_UART_Init>
	printf("ias0360-final-project running \r\n");
 8004b2c:	484b      	ldr	r0, [pc, #300]	; (8004c5c <main+0x170>)
 8004b2e:	f004 fa9d 	bl	800906c <puts>
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 8004b32:	2100      	movs	r1, #0
 8004b34:	4608      	mov	r0, r1
 8004b36:	f7fc fc2b 	bl	8001390 <BSP_PB_Init>
	user_interface_init();
 8004b3a:	f7ff ff5b 	bl	80049f4 <user_interface_init>
	user_interface_reset();
 8004b3e:	f7ff ff8f 	bl	8004a60 <user_interface_reset>
	_1st_pred.prob = _2nd_pred.prob = 0.0f;
 8004b42:	2300      	movs	r3, #0
	reset_nn(in_data, out_data, &_1st_pred, &_2nd_pred);
 8004b44:	4946      	ldr	r1, [pc, #280]	; (8004c60 <main+0x174>)
 8004b46:	4847      	ldr	r0, [pc, #284]	; (8004c64 <main+0x178>)
	_1st_pred.prob = _2nd_pred.prob = 0.0f;
 8004b48:	9303      	str	r3, [sp, #12]
 8004b4a:	9301      	str	r3, [sp, #4]
	reset_nn(in_data, out_data, &_1st_pred, &_2nd_pred);
 8004b4c:	aa01      	add	r2, sp, #4
 8004b4e:	ab03      	add	r3, sp, #12
 8004b50:	f7ff febe 	bl	80048d0 <reset_nn>
	aiInit();
 8004b54:	f7ff fece 	bl	80048f4 <aiInit>
		if (BSP_PB_GetState(BUTTON_KEY)) {
 8004b58:	2000      	movs	r0, #0
 8004b5a:	f7fc fc53 	bl	8001404 <BSP_PB_GetState>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	d0fa      	beq.n	8004b58 <main+0x6c>
			printf("NN processing...");
 8004b62:	4841      	ldr	r0, [pc, #260]	; (8004c68 <main+0x17c>)
 8004b64:	4d3e      	ldr	r5, [pc, #248]	; (8004c60 <main+0x174>)
 8004b66:	f004 f9fb 	bl	8008f60 <iprintf>
			BSP_LCD_SetTextColor(0xFFFFFF00);
 8004b6a:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8004b6e:	f7fc fdcd 	bl	800170c <BSP_LCD_SetTextColor>
			BSP_LCD_FillRect(64, 64, 16, 16);
 8004b72:	2310      	movs	r3, #16
 8004b74:	2140      	movs	r1, #64	; 0x40
 8004b76:	461a      	mov	r2, r3
 8004b78:	4608      	mov	r0, r1
 8004b7a:	f7fc fe05 	bl	8001788 <BSP_LCD_FillRect>
			aiRun(in_data, out_data);
 8004b7e:	4938      	ldr	r1, [pc, #224]	; (8004c60 <main+0x174>)
 8004b80:	4838      	ldr	r0, [pc, #224]	; (8004c64 <main+0x178>)
 8004b82:	f7ff feff 	bl	8004984 <aiRun>
 8004b86:	2300      	movs	r3, #0
 8004b88:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004b8c:	eddd 7a03 	vldr	s15, [sp, #12]
 8004b90:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004b94:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8004b98:	461c      	mov	r4, r3
			for (int i = 0; i < NUM_CLASSES; i++) {
 8004b9a:	461a      	mov	r2, r3
				if (_1st_pred.prob < out_data[i]) {
 8004b9c:	ecf5 6a01 	vldmia	r5!, {s13}
 8004ba0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba8:	dd4c      	ble.n	8004c44 <main+0x158>
					_1st_pred.label = i;
 8004baa:	2301      	movs	r3, #1
					_2nd_pred.prob = _1st_pred.prob;
 8004bac:	eef0 7a47 	vmov.f32	s15, s14
					_2nd_pred.label = _1st_pred.label;
 8004bb0:	4601      	mov	r1, r0
					_1st_pred.prob = out_data[i];
 8004bb2:	eeb0 7a66 	vmov.f32	s14, s13
					_1st_pred.label = i;
 8004bb6:	b2d0      	uxtb	r0, r2
 8004bb8:	461c      	mov	r4, r3
			for (int i = 0; i < NUM_CLASSES; i++) {
 8004bba:	3201      	adds	r2, #1
 8004bbc:	2a0a      	cmp	r2, #10
 8004bbe:	d1ed      	bne.n	8004b9c <main+0xb0>
 8004bc0:	b11c      	cbz	r4, 8004bca <main+0xde>
 8004bc2:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004bc6:	f88d 0008 	strb.w	r0, [sp, #8]
 8004bca:	b11b      	cbz	r3, 8004bd4 <main+0xe8>
 8004bcc:	f88d 1010 	strb.w	r1, [sp, #16]
 8004bd0:	edcd 7a03 	vstr	s15, [sp, #12]
			printf("NN First Guess: %d  %f \n\r", _1st_pred.label,
 8004bd4:	9801      	ldr	r0, [sp, #4]
 8004bd6:	f7fb fcc7 	bl	8000568 <__aeabi_f2d>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4823      	ldr	r0, [pc, #140]	; (8004c6c <main+0x180>)
 8004be0:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8004be4:	f004 f9bc 	bl	8008f60 <iprintf>
			printf("NN Second Guess: %d  %f \n\r", _2nd_pred.label,
 8004be8:	9803      	ldr	r0, [sp, #12]
 8004bea:	f7fb fcbd 	bl	8000568 <__aeabi_f2d>
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8004bf6:	481e      	ldr	r0, [pc, #120]	; (8004c70 <main+0x184>)
 8004bf8:	f004 f9b2 	bl	8008f60 <iprintf>
			BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8004bfc:	481d      	ldr	r0, [pc, #116]	; (8004c74 <main+0x188>)
 8004bfe:	f7fc fd85 	bl	800170c <BSP_LCD_SetTextColor>
			BSP_LCD_SetFont(&Font20);
 8004c02:	481d      	ldr	r0, [pc, #116]	; (8004c78 <main+0x18c>)
 8004c04:	f7fc fd96 	bl	8001734 <BSP_LCD_SetFont>
			BSP_LCD_SetBackColor(LCD_COLOR_LIGHTCYAN);
 8004c08:	f46f 00fe 	mvn.w	r0, #8323072	; 0x7f0000
 8004c0c:	f7fc fd88 	bl	8001720 <BSP_LCD_SetBackColor>
			sprintf(_1st_pred_str, "Pred.: %d", _1st_pred.label);
 8004c10:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004c14:	4919      	ldr	r1, [pc, #100]	; (8004c7c <main+0x190>)
 8004c16:	a805      	add	r0, sp, #20
 8004c18:	f004 fb06 	bl	8009228 <siprintf>
			BSP_LCD_DisplayStringAt(10, 240, (uint8_t*) _1st_pred_str, CENTER_MODE);
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	aa05      	add	r2, sp, #20
 8004c20:	21f0      	movs	r1, #240	; 0xf0
 8004c22:	200a      	movs	r0, #10
 8004c24:	f7fc ff52 	bl	8001acc <BSP_LCD_DisplayStringAt>
			sprintf(_1st_pred_str, "Truth: %d", _1st_pred.label);
 8004c28:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8004c2c:	4914      	ldr	r1, [pc, #80]	; (8004c80 <main+0x194>)
 8004c2e:	a805      	add	r0, sp, #20
 8004c30:	f004 fafa 	bl	8009228 <siprintf>
			BSP_LCD_DisplayStringAt(10, 260, (uint8_t*) _1st_pred_str, CENTER_MODE);
 8004c34:	2301      	movs	r3, #1
 8004c36:	aa05      	add	r2, sp, #20
 8004c38:	f44f 7182 	mov.w	r1, #260	; 0x104
 8004c3c:	200a      	movs	r0, #10
 8004c3e:	f7fc ff45 	bl	8001acc <BSP_LCD_DisplayStringAt>
 8004c42:	e789      	b.n	8004b58 <main+0x6c>
				} else if (_2nd_pred.prob < out_data[i]) {
 8004c44:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					_2nd_pred.label = i;
 8004c4c:	bfc2      	ittt	gt
 8004c4e:	b2d1      	uxtbgt	r1, r2
					_2nd_pred.prob = out_data[i];
 8004c50:	eef0 7a66 	vmovgt.f32	s15, s13
				} else if (_2nd_pred.prob < out_data[i]) {
 8004c54:	2301      	movgt	r3, #1
 8004c56:	e7b0      	b.n	8004bba <main+0xce>
 8004c58:	2000077c 	.word	0x2000077c
 8004c5c:	08023a5d 	.word	0x08023a5d
 8004c60:	20000bc0 	.word	0x20000bc0
 8004c64:	20000be0 	.word	0x20000be0
 8004c68:	08023a7d 	.word	0x08023a7d
 8004c6c:	08023a8e 	.word	0x08023a8e
 8004c70:	08023aa8 	.word	0x08023aa8
 8004c74:	ffff0000 	.word	0xffff0000
 8004c78:	2000006c 	.word	0x2000006c
 8004c7c:	08023ac3 	.word	0x08023ac3
 8004c80:	08023acd 	.word	0x08023acd

08004c84 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8004c84:	6802      	ldr	r2, [r0, #0]
 8004c86:	4b03      	ldr	r3, [pc, #12]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d101      	bne.n	8004c90 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004c8c:	f7fd b8dc 	b.w	8001e48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40001000 	.word	0x40001000

08004c98 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004c98:	4770      	bx	lr

08004c9a <ai_network_get_error>:
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8004c9a:	f000 baa5 	b.w	80051e8 <ai_platform_network_get_error>
	...

08004ca0 <ai_network_create>:
}

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004ca0:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8004ca2:	2304      	movs	r3, #4
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	e9cd 3200 	strd	r3, r2, [sp]
 8004caa:	4a03      	ldr	r2, [pc, #12]	; (8004cb8 <ai_network_create+0x18>)
 8004cac:	2301      	movs	r3, #1
 8004cae:	f000 fb15 	bl	80052dc <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004cb2:	b003      	add	sp, #12
 8004cb4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cb8:	20000080 	.word	0x20000080

08004cbc <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	9101      	str	r1, [sp, #4]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004cc4:	f000 fbe0 	bl	8005488 <ai_platform_network_init>
  if (!net_ctx) return false;
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	d068      	beq.n	8004d9e <ai_network_init+0xe2>
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004ccc:	9a01      	ldr	r2, [sp, #4]
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8004cce:	2300      	movs	r3, #0
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	a803      	add	r0, sp, #12
  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 8004cd4:	9303      	str	r3, [sp, #12]
  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 8004cd6:	f000 fa1f 	bl	8005118 <ai_platform_get_weights_map>
 8004cda:	9a01      	ldr	r2, [sp, #4]
 8004cdc:	4604      	mov	r4, r0
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d039      	beq.n	8004d56 <ai_network_init+0x9a>
    conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ce2:	4b30      	ldr	r3, [pc, #192]	; (8004da4 <ai_network_init+0xe8>)
    conv2d_weights_array.data = AI_PTR(weights_map[0] + 0);
 8004ce4:	9d03      	ldr	r5, [sp, #12]
    conv2d_weights_array.format |= AI_FMT_FLAG_CONST;
 8004ce6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8004ce8:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004cec:	6499      	str	r1, [r3, #72]	; 0x48
    conv2d_bias_array.format |= AI_FMT_FLAG_CONST;
 8004cee:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8004cf0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004cf4:	6599      	str	r1, [r3, #88]	; 0x58
    conv2d_bias_array.data = AI_PTR(weights_map[0] + 1152);
 8004cf6:	f505 6190 	add.w	r1, r5, #1152	; 0x480
    conv2d_bias_array.data_start = AI_PTR(weights_map[0] + 1152);
 8004cfa:	e9c3 1118 	strd	r1, r1, [r3, #96]	; 0x60
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8004cfe:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8004d00:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004d04:	6699      	str	r1, [r3, #104]	; 0x68
    conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 1280);
 8004d06:	f505 61a0 	add.w	r1, r5, #1280	; 0x500
    conv2d_1_weights_array.data_start = AI_PTR(weights_map[0] + 1280);
 8004d0a:	e9c3 111c 	strd	r1, r1, [r3, #112]	; 0x70
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d0e:	6f99      	ldr	r1, [r3, #120]	; 0x78
 8004d10:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004d14:	6799      	str	r1, [r3, #120]	; 0x78
    conv2d_1_bias_array.data = AI_PTR(weights_map[0] + 75008);
 8004d16:	f505 3192 	add.w	r1, r5, #74752	; 0x12400
 8004d1a:	f501 7180 	add.w	r1, r1, #256	; 0x100
    conv2d_1_bias_array.data_start = AI_PTR(weights_map[0] + 75008);
 8004d1e:	e9c3 1120 	strd	r1, r1, [r3, #128]	; 0x80
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8004d22:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 8004d26:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004d2a:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
    dense_weights_array.data = AI_PTR(weights_map[0] + 75328);
 8004d2e:	f505 3193 	add.w	r1, r5, #75264	; 0x12600
 8004d32:	f101 0040 	add.w	r0, r1, #64	; 0x40
    conv2d_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 8004d36:	e9c3 5514 	strd	r5, r5, [r3, #80]	; 0x50
    dense_bias_array.data = AI_PTR(weights_map[0] + 77632);
 8004d3a:	f505 3597 	add.w	r5, r5, #77312	; 0x12e00
    dense_weights_array.data_start = AI_PTR(weights_map[0] + 75264);
 8004d3e:	e9c3 0124 	strd	r0, r1, [r3, #144]	; 0x90
    dense_bias_array.data = AI_PTR(weights_map[0] + 77632);
 8004d42:	f505 75a0 	add.w	r5, r5, #320	; 0x140
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d46:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    dense_bias_array.data_start = AI_PTR(weights_map[0] + 77632);
 8004d4a:	e9c3 5528 	strd	r5, r5, [r3, #160]	; 0xa0
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004d4e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004d52:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8004d56:	2500      	movs	r5, #0
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8004d58:	2101      	movs	r1, #1
 8004d5a:	a803      	add	r0, sp, #12
  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 8004d5c:	9503      	str	r5, [sp, #12]
  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 8004d5e:	f000 fa0f 	bl	8005180 <ai_platform_get_activations_map>
 8004d62:	4607      	mov	r7, r0
 8004d64:	b1a8      	cbz	r0, 8004d92 <ai_network_init+0xd6>
    conv2d_output_array.data = AI_PTR(activations_map[0] + 1792);
 8004d66:	9a03      	ldr	r2, [sp, #12]
    input_0_output_array.data = AI_PTR(NULL);
 8004d68:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <ai_network_init+0xe8>)
    conv2d_output_array.data = AI_PTR(activations_map[0] + 1792);
 8004d6a:	f502 61e0 	add.w	r1, r2, #1792	; 0x700
    conv2d_output_array.data_start = AI_PTR(activations_map[0] + 1792);
 8004d6e:	e9c3 1130 	strd	r1, r1, [r3, #192]	; 0xc0
    conv2d_1_output_array.data_start = AI_PTR(activations_map[0] + 0);
 8004d72:	e9c3 2234 	strd	r2, r2, [r3, #208]	; 0xd0
    dense_output_array.data = AI_PTR(activations_map[0] + 9216);
 8004d76:	f502 5110 	add.w	r1, r2, #9216	; 0x2400
    conv2d_scratch0_array.data = AI_PTR(activations_map[0] + 30592);
 8004d7a:	f502 42ef 	add.w	r2, r2, #30592	; 0x7780
    input_0_output_array.data_start = AI_PTR(NULL);
 8004d7e:	e9c3 552c 	strd	r5, r5, [r3, #176]	; 0xb0
    dense_output_array.data_start = AI_PTR(activations_map[0] + 9216);
 8004d82:	e9c3 1138 	strd	r1, r1, [r3, #224]	; 0xe0
    dense_nl_output_array.data_start = AI_PTR(NULL);
 8004d86:	e9c3 553c 	strd	r5, r5, [r3, #240]	; 0xf0
    conv2d_scratch0_array.data_start = AI_PTR(activations_map[0] + 30592);
 8004d8a:	e9c3 2240 	strd	r2, r2, [r3, #256]	; 0x100
    conv2d_1_scratch0_array.data_start = AI_PTR(activations_map[0] + 30592);
 8004d8e:	e9c3 2244 	strd	r2, r2, [r3, #272]	; 0x110

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, params);
  ok &= network_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004d92:	4630      	mov	r0, r6
 8004d94:	f000 fc8a 	bl	80056ac <ai_platform_network_post_init>
 8004d98:	4038      	ands	r0, r7
 8004d9a:	4020      	ands	r0, r4
 8004d9c:	b2c0      	uxtb	r0, r0

  return ok;
}
 8004d9e:	b005      	add	sp, #20
 8004da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20000080 	.word	0x20000080

08004da8 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8004da8:	f000 bd14 	b.w	80057d4 <ai_platform_network_process>

08004dac <ai_network_data_weights_get>:
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_network_weights_map);

}
 8004dac:	4800      	ldr	r0, [pc, #0]	; (8004db0 <ai_network_data_weights_get+0x4>)
 8004dae:	4770      	bx	lr
 8004db0:	080109e0 	.word	0x080109e0

08004db4 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8004db4:	480e      	ldr	r0, [pc, #56]	; (8004df0 <MX_SPI5_Init+0x3c>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004db6:	4a0f      	ldr	r2, [pc, #60]	; (8004df4 <MX_SPI5_Init+0x40>)
{
 8004db8:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8004dba:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004dbe:	e9c0 2300 	strd	r2, r3, [r0]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8004dc2:	2300      	movs	r3, #0
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8004dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8004dc8:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004dcc:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dd0:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004dd4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dd8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8004dda:	230a      	movs	r3, #10
 8004ddc:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8004dde:	f7fe fb81 	bl	80034e4 <HAL_SPI_Init>
 8004de2:	b118      	cbz	r0, 8004dec <MX_SPI5_Init+0x38>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8004de4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004de8:	f7ff bf56 	b.w	8004c98 <Error_Handler>
}
 8004dec:	bd08      	pop	{r3, pc}
 8004dee:	bf00      	nop
 8004df0:	2000b440 	.word	0x2000b440
 8004df4:	40015000 	.word	0x40015000

08004df8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004df8:	b510      	push	{r4, lr}
 8004dfa:	4604      	mov	r4, r0
 8004dfc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dfe:	2214      	movs	r2, #20
 8004e00:	2100      	movs	r1, #0
 8004e02:	a803      	add	r0, sp, #12
 8004e04:	f003 f980 	bl	8008108 <memset>
  if(spiHandle->Instance==SPI5)
 8004e08:	6822      	ldr	r2, [r4, #0]
 8004e0a:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <HAL_SPI_MspInit+0x64>)
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d123      	bne.n	8004e58 <HAL_SPI_MspInit+0x60>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004e10:	f503 4368 	add.w	r3, r3, #59392	; 0xe800
 8004e14:	2200      	movs	r2, #0
 8004e16:	9201      	str	r2, [sp, #4]
 8004e18:	6c59      	ldr	r1, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e1a:	4811      	ldr	r0, [pc, #68]	; (8004e60 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8004e1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8004e20:	6459      	str	r1, [r3, #68]	; 0x44
 8004e22:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004e24:	f401 1180 	and.w	r1, r1, #1048576	; 0x100000
 8004e28:	9101      	str	r1, [sp, #4]
 8004e2a:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e2c:	9202      	str	r2, [sp, #8]
 8004e2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e30:	f041 0120 	orr.w	r1, r1, #32
 8004e34:	6319      	str	r1, [r3, #48]	; 0x30
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e3e:	f44f 7160 	mov.w	r1, #896	; 0x380
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e42:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e44:	2302      	movs	r3, #2
 8004e46:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004e4a:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e4c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4e:	e9cd 2205 	strd	r2, r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8004e52:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e54:	f7fd fa8e 	bl	8002374 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8004e58:	b008      	add	sp, #32
 8004e5a:	bd10      	pop	{r4, pc}
 8004e5c:	40015000 	.word	0x40015000
 8004e60:	40021400 	.word	0x40021400

08004e64 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{

  if(spiHandle->Instance==SPI5)
 8004e64:	6802      	ldr	r2, [r0, #0]
 8004e66:	4b07      	ldr	r3, [pc, #28]	; (8004e84 <HAL_SPI_MspDeInit+0x20>)
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d109      	bne.n	8004e80 <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8004e6c:	4a06      	ldr	r2, [pc, #24]	; (8004e88 <HAL_SPI_MspDeInit+0x24>)
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8004e6e:	4807      	ldr	r0, [pc, #28]	; (8004e8c <HAL_SPI_MspDeInit+0x28>)
    __HAL_RCC_SPI5_CLK_DISABLE();
 8004e70:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004e72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004e76:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8004e78:	f44f 7160 	mov.w	r1, #896	; 0x380
 8004e7c:	f7fd bb60 	b.w	8002540 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40015000 	.word	0x40015000
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	40021400 	.word	0x40021400

08004e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004e90:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e92:	4b0c      	ldr	r3, [pc, #48]	; (8004ec4 <HAL_MspInit+0x34>)
 8004e94:	2100      	movs	r1, #0
 8004e96:	9100      	str	r1, [sp, #0]
 8004e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e9e:	645a      	str	r2, [r3, #68]	; 0x44
 8004ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004ea6:	9200      	str	r2, [sp, #0]
 8004ea8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004eaa:	9101      	str	r1, [sp, #4]
 8004eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004eb2:	641a      	str	r2, [r3, #64]	; 0x40
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ebe:	b002      	add	sp, #8
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40023800 	.word	0x40023800

08004ec8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ec8:	b530      	push	{r4, r5, lr}
 8004eca:	4601      	mov	r1, r0
 8004ecc:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2036      	movs	r0, #54	; 0x36
 8004ed2:	f7fc fff1 	bl	8001eb8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ed6:	2036      	movs	r0, #54	; 0x36
 8004ed8:	f7fd f820 	bl	8001f1c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004edc:	2500      	movs	r5, #0
 8004ede:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <HAL_InitTick+0x6c>)
 8004ee0:	9502      	str	r5, [sp, #8]
 8004ee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004ee4:	4c14      	ldr	r4, [pc, #80]	; (8004f38 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004ee6:	f042 0210 	orr.w	r2, r2, #16
 8004eea:	641a      	str	r2, [r3, #64]	; 0x40
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	f003 0310 	and.w	r3, r3, #16
 8004ef2:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004ef4:	a901      	add	r1, sp, #4
 8004ef6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004ef8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004efa:	f7fe f8b7 	bl	800306c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004efe:	f7fe f895 	bl	800302c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8004f02:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <HAL_InitTick+0x74>)
 8004f04:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004f06:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004f0a:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004f0c:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <HAL_InitTick+0x78>)
 8004f10:	fbb0 f0f3 	udiv	r0, r0, r3
 8004f14:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8004f16:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004f18:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8004f1a:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f1c:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004f1e:	f7fe fed5 	bl	8003ccc <HAL_TIM_Base_Init>
 8004f22:	b920      	cbnz	r0, 8004f2e <HAL_InitTick+0x66>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004f24:	4620      	mov	r0, r4
 8004f26:	f7fe fd8b 	bl	8003a40 <HAL_TIM_Base_Start_IT>
  }

  /* Return function status */
  return HAL_ERROR;
}
 8004f2a:	b009      	add	sp, #36	; 0x24
 8004f2c:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8004f2e:	2001      	movs	r0, #1
 8004f30:	e7fb      	b.n	8004f2a <HAL_InitTick+0x62>
 8004f32:	bf00      	nop
 8004f34:	40023800 	.word	0x40023800
 8004f38:	2000b498 	.word	0x2000b498
 8004f3c:	40001000 	.word	0x40001000
 8004f40:	000f4240 	.word	0x000f4240

08004f44 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004f44:	4770      	bx	lr

08004f46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f46:	e7fe      	b.n	8004f46 <HardFault_Handler>

08004f48 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f48:	e7fe      	b.n	8004f48 <MemManage_Handler>

08004f4a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f4a:	e7fe      	b.n	8004f4a <BusFault_Handler>

08004f4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f4c:	e7fe      	b.n	8004f4c <UsageFault_Handler>

08004f4e <SVC_Handler>:
 8004f4e:	4770      	bx	lr

08004f50 <DebugMon_Handler>:
 8004f50:	4770      	bx	lr

08004f52 <PendSV_Handler>:
 8004f52:	4770      	bx	lr

08004f54 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004f54:	4801      	ldr	r0, [pc, #4]	; (8004f5c <TIM6_DAC_IRQHandler+0x8>)
 8004f56:	f7fe bdb1 	b.w	8003abc <HAL_TIM_IRQHandler>
 8004f5a:	bf00      	nop
 8004f5c:	2000b498 	.word	0x2000b498

08004f60 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f60:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <SystemInit+0x18>)
 8004f62:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004f66:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004f6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004f72:	609a      	str	r2, [r3, #8]
#endif
}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	e000ed00 	.word	0xe000ed00

08004f7c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004f7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f7e:	2210      	movs	r2, #16
 8004f80:	2100      	movs	r1, #0
 8004f82:	a802      	add	r0, sp, #8
 8004f84:	f003 f8c0 	bl	8008108 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004f88:	4814      	ldr	r0, [pc, #80]	; (8004fdc <MX_TIM1_Init+0x60>)
 8004f8a:	4a15      	ldr	r2, [pc, #84]	; (8004fe0 <MX_TIM1_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f8c:	2300      	movs	r3, #0
  htim1.Init.Prescaler = 0;
 8004f8e:	e9c0 2300 	strd	r2, r3, [r0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 65535;
 8004f92:	f64f 72ff 	movw	r2, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f96:	e9cd 3300 	strd	r3, r3, [sp]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f9a:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f9e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fa2:	6083      	str	r3, [r0, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004fa4:	f7fe fe92 	bl	8003ccc <HAL_TIM_Base_Init>
 8004fa8:	b108      	cbz	r0, 8004fae <MX_TIM1_Init+0x32>
  {
    Error_Handler();
 8004faa:	f7ff fe75 	bl	8004c98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004fb2:	480a      	ldr	r0, [pc, #40]	; (8004fdc <MX_TIM1_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004fb4:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004fb6:	a902      	add	r1, sp, #8
 8004fb8:	f7fe febe 	bl	8003d38 <HAL_TIM_ConfigClockSource>
 8004fbc:	b108      	cbz	r0, 8004fc2 <MX_TIM1_Init+0x46>
  {
    Error_Handler();
 8004fbe:	f7ff fe6b 	bl	8004c98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fc2:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004fc4:	4805      	ldr	r0, [pc, #20]	; (8004fdc <MX_TIM1_Init+0x60>)
 8004fc6:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fc8:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004fcc:	f7fe ff50 	bl	8003e70 <HAL_TIMEx_MasterConfigSynchronization>
 8004fd0:	b108      	cbz	r0, 8004fd6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004fd2:	f7ff fe61 	bl	8004c98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004fd6:	b007      	add	sp, #28
 8004fd8:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fdc:	2000b4e0 	.word	0x2000b4e0
 8004fe0:	40010000 	.word	0x40010000

08004fe4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM1)
 8004fe4:	6802      	ldr	r2, [r0, #0]
 8004fe6:	4b09      	ldr	r3, [pc, #36]	; (800500c <HAL_TIM_Base_MspInit+0x28>)
 8004fe8:	429a      	cmp	r2, r3
{
 8004fea:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM1)
 8004fec:	d10b      	bne.n	8005006 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	9301      	str	r3, [sp, #4]
 8004ff2:	4b07      	ldr	r3, [pc, #28]	; (8005010 <HAL_TIM_Base_MspInit+0x2c>)
 8004ff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	645a      	str	r2, [r3, #68]	; 0x44
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	9301      	str	r3, [sp, #4]
 8005004:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005006:	b002      	add	sp, #8
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40010000 	.word	0x40010000
 8005010:	40023800 	.word	0x40023800

08005014 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005014:	480b      	ldr	r0, [pc, #44]	; (8005044 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 8005016:	4a0c      	ldr	r2, [pc, #48]	; (8005048 <MX_USART1_UART_Init+0x34>)
{
 8005018:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 115200;
 800501a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800501e:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005022:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005024:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005026:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800502a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800502e:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005030:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005032:	f7fe ffbb 	bl	8003fac <HAL_UART_Init>
 8005036:	b118      	cbz	r0, 8005040 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005038:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800503c:	f7ff be2c 	b.w	8004c98 <Error_Handler>
}
 8005040:	bd08      	pop	{r3, pc}
 8005042:	bf00      	nop
 8005044:	2000b528 	.word	0x2000b528
 8005048:	40011000 	.word	0x40011000

0800504c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800504c:	b510      	push	{r4, lr}
 800504e:	4604      	mov	r4, r0
 8005050:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005052:	2214      	movs	r2, #20
 8005054:	2100      	movs	r1, #0
 8005056:	a803      	add	r0, sp, #12
 8005058:	f003 f856 	bl	8008108 <memset>
  if(uartHandle->Instance==USART1)
 800505c:	6822      	ldr	r2, [r4, #0]
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <HAL_UART_MspInit+0x68>)
 8005060:	429a      	cmp	r2, r3
 8005062:	d124      	bne.n	80050ae <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005064:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8005068:	2200      	movs	r2, #0
 800506a:	9201      	str	r2, [sp, #4]
 800506c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800506e:	f041 0110 	orr.w	r1, r1, #16
 8005072:	6459      	str	r1, [r3, #68]	; 0x44
 8005074:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005076:	f001 0110 	and.w	r1, r1, #16
 800507a:	9101      	str	r1, [sp, #4]
 800507c:	9901      	ldr	r1, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800507e:	9202      	str	r2, [sp, #8]
 8005080:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005082:	f041 0101 	orr.w	r1, r1, #1
 8005086:	6319      	str	r1, [r3, #48]	; 0x30
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508a:	9205      	str	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005092:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005096:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005098:	2302      	movs	r3, #2
 800509a:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800509e:	2003      	movs	r0, #3
 80050a0:	2307      	movs	r3, #7
 80050a2:	e9cd 0306 	strd	r0, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050a6:	a903      	add	r1, sp, #12
 80050a8:	4803      	ldr	r0, [pc, #12]	; (80050b8 <HAL_UART_MspInit+0x6c>)
 80050aa:	f7fd f963 	bl	8002374 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80050ae:	b008      	add	sp, #32
 80050b0:	bd10      	pop	{r4, pc}
 80050b2:	bf00      	nop
 80050b4:	40011000 	.word	0x40011000
 80050b8:	40020000 	.word	0x40020000

080050bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80050bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050f4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80050c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80050c2:	e003      	b.n	80050cc <LoopCopyDataInit>

080050c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80050c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80050c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80050ca:	3104      	adds	r1, #4

080050cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80050cc:	480b      	ldr	r0, [pc, #44]	; (80050fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80050ce:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80050d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80050d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80050d4:	d3f6      	bcc.n	80050c4 <CopyDataInit>
  ldr  r2, =_sbss
 80050d6:	4a0b      	ldr	r2, [pc, #44]	; (8005104 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80050d8:	e002      	b.n	80050e0 <LoopFillZerobss>

080050da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80050da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80050dc:	f842 3b04 	str.w	r3, [r2], #4

080050e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80050e0:	4b09      	ldr	r3, [pc, #36]	; (8005108 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80050e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80050e4:	d3f9      	bcc.n	80050da <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80050e6:	f7ff ff3b 	bl	8004f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050ea:	f002 ffd3 	bl	8008094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050ee:	f7ff fcfd 	bl	8004aec <main>
  bx  lr    
 80050f2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80050f4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80050f8:	08024004 	.word	0x08024004
  ldr  r0, =_sdata
 80050fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005100:	20000950 	.word	0x20000950
  ldr  r2, =_sbss
 8005104:	20000960 	.word	0x20000960
  ldr  r3, = _ebss
 8005108:	2000b57c 	.word	0x2000b57c

0800510c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800510c:	e7fe      	b.n	800510c <ADC_IRQHandler>
	...

08005110 <_ai_platform_acquire_crc>:
 8005110:	2001      	movs	r0, #1
 8005112:	4770      	bx	lr

08005114 <_ai_platform_release_crc>:
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop

08005118 <ai_platform_get_weights_map>:
 8005118:	b132      	cbz	r2, 8005128 <ai_platform_get_weights_map+0x10>
 800511a:	6912      	ldr	r2, [r2, #16]
 800511c:	b122      	cbz	r2, 8005128 <ai_platform_get_weights_map+0x10>
 800511e:	b110      	cbz	r0, 8005126 <ai_platform_get_weights_map+0xe>
 8005120:	b921      	cbnz	r1, 800512c <ai_platform_get_weights_map+0x14>
 8005122:	4608      	mov	r0, r1
 8005124:	4770      	bx	lr
 8005126:	4770      	bx	lr
 8005128:	4610      	mov	r0, r2
 800512a:	4770      	bx	lr
 800512c:	b470      	push	{r4, r5, r6}
 800512e:	4b13      	ldr	r3, [pc, #76]	; (800517c <ai_platform_get_weights_map+0x64>)
 8005130:	6815      	ldr	r5, [r2, #0]
 8005132:	429d      	cmp	r5, r3
 8005134:	d007      	beq.n	8005146 <ai_platform_get_weights_map+0x2e>
 8005136:	6002      	str	r2, [r0, #0]
 8005138:	f1a1 0001 	sub.w	r0, r1, #1
 800513c:	fab0 f080 	clz	r0, r0
 8005140:	0940      	lsrs	r0, r0, #5
 8005142:	bc70      	pop	{r4, r5, r6}
 8005144:	4770      	bx	lr
 8005146:	6854      	ldr	r4, [r2, #4]
 8005148:	42ac      	cmp	r4, r5
 800514a:	f102 0204 	add.w	r2, r2, #4
 800514e:	d011      	beq.n	8005174 <ai_platform_get_weights_map+0x5c>
 8005150:	1f03      	subs	r3, r0, #4
 8005152:	4616      	mov	r6, r2
 8005154:	2000      	movs	r0, #0
 8005156:	e003      	b.n	8005160 <ai_platform_get_weights_map+0x48>
 8005158:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800515c:	42ac      	cmp	r4, r5
 800515e:	d009      	beq.n	8005174 <ai_platform_get_weights_map+0x5c>
 8005160:	3001      	adds	r0, #1
 8005162:	4281      	cmp	r1, r0
 8005164:	f843 4f04 	str.w	r4, [r3, #4]!
 8005168:	d1f6      	bne.n	8005158 <ai_platform_get_weights_map+0x40>
 800516a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800516e:	4b03      	ldr	r3, [pc, #12]	; (800517c <ai_platform_get_weights_map+0x64>)
 8005170:	429a      	cmp	r2, r3
 8005172:	d001      	beq.n	8005178 <ai_platform_get_weights_map+0x60>
 8005174:	2000      	movs	r0, #0
 8005176:	e7e4      	b.n	8005142 <ai_platform_get_weights_map+0x2a>
 8005178:	2001      	movs	r0, #1
 800517a:	e7e2      	b.n	8005142 <ai_platform_get_weights_map+0x2a>
 800517c:	a1facade 	.word	0xa1facade

08005180 <ai_platform_get_activations_map>:
 8005180:	b132      	cbz	r2, 8005190 <ai_platform_get_activations_map+0x10>
 8005182:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005184:	b122      	cbz	r2, 8005190 <ai_platform_get_activations_map+0x10>
 8005186:	b110      	cbz	r0, 800518e <ai_platform_get_activations_map+0xe>
 8005188:	b921      	cbnz	r1, 8005194 <ai_platform_get_activations_map+0x14>
 800518a:	4608      	mov	r0, r1
 800518c:	4770      	bx	lr
 800518e:	4770      	bx	lr
 8005190:	4610      	mov	r0, r2
 8005192:	4770      	bx	lr
 8005194:	b470      	push	{r4, r5, r6}
 8005196:	4b13      	ldr	r3, [pc, #76]	; (80051e4 <ai_platform_get_activations_map+0x64>)
 8005198:	6815      	ldr	r5, [r2, #0]
 800519a:	429d      	cmp	r5, r3
 800519c:	d007      	beq.n	80051ae <ai_platform_get_activations_map+0x2e>
 800519e:	6002      	str	r2, [r0, #0]
 80051a0:	f1a1 0001 	sub.w	r0, r1, #1
 80051a4:	fab0 f080 	clz	r0, r0
 80051a8:	0940      	lsrs	r0, r0, #5
 80051aa:	bc70      	pop	{r4, r5, r6}
 80051ac:	4770      	bx	lr
 80051ae:	6854      	ldr	r4, [r2, #4]
 80051b0:	42ac      	cmp	r4, r5
 80051b2:	f102 0204 	add.w	r2, r2, #4
 80051b6:	d011      	beq.n	80051dc <ai_platform_get_activations_map+0x5c>
 80051b8:	1f03      	subs	r3, r0, #4
 80051ba:	4616      	mov	r6, r2
 80051bc:	2000      	movs	r0, #0
 80051be:	e003      	b.n	80051c8 <ai_platform_get_activations_map+0x48>
 80051c0:	f856 4f04 	ldr.w	r4, [r6, #4]!
 80051c4:	42ac      	cmp	r4, r5
 80051c6:	d009      	beq.n	80051dc <ai_platform_get_activations_map+0x5c>
 80051c8:	3001      	adds	r0, #1
 80051ca:	4281      	cmp	r1, r0
 80051cc:	f843 4f04 	str.w	r4, [r3, #4]!
 80051d0:	d1f6      	bne.n	80051c0 <ai_platform_get_activations_map+0x40>
 80051d2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80051d6:	4b03      	ldr	r3, [pc, #12]	; (80051e4 <ai_platform_get_activations_map+0x64>)
 80051d8:	429a      	cmp	r2, r3
 80051da:	d001      	beq.n	80051e0 <ai_platform_get_activations_map+0x60>
 80051dc:	2000      	movs	r0, #0
 80051de:	e7e4      	b.n	80051aa <ai_platform_get_activations_map+0x2a>
 80051e0:	2001      	movs	r0, #1
 80051e2:	e7e2      	b.n	80051aa <ai_platform_get_activations_map+0x2a>
 80051e4:	a1facade 	.word	0xa1facade

080051e8 <ai_platform_network_get_error>:
 80051e8:	b510      	push	{r4, lr}
 80051ea:	b120      	cbz	r0, 80051f6 <ai_platform_network_get_error+0xe>
 80051ec:	4b32      	ldr	r3, [pc, #200]	; (80052b8 <ai_platform_network_get_error+0xd0>)
 80051ee:	6802      	ldr	r2, [r0, #0]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	4604      	mov	r4, r0
 80051f4:	d02e      	beq.n	8005254 <ai_platform_network_get_error+0x6c>
 80051f6:	4a31      	ldr	r2, [pc, #196]	; (80052bc <ai_platform_network_get_error+0xd4>)
 80051f8:	6813      	ldr	r3, [r2, #0]
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	f7ff ff86 	bl	8005110 <_ai_platform_acquire_crc>
 8005204:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <ai_platform_network_get_error+0xd8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800520c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005210:	d00d      	beq.n	800522e <ai_platform_network_get_error+0x46>
 8005212:	4b2c      	ldr	r3, [pc, #176]	; (80052c4 <ai_platform_network_get_error+0xdc>)
 8005214:	2201      	movs	r2, #1
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	2a00      	cmp	r2, #0
 800521c:	d1fc      	bne.n	8005218 <ai_platform_network_get_error+0x30>
 800521e:	4b2a      	ldr	r3, [pc, #168]	; (80052c8 <ai_platform_network_get_error+0xe0>)
 8005220:	4a2a      	ldr	r2, [pc, #168]	; (80052cc <ai_platform_network_get_error+0xe4>)
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	4b2a      	ldr	r3, [pc, #168]	; (80052d0 <ai_platform_network_get_error+0xe8>)
 8005228:	429a      	cmp	r2, r3
 800522a:	d00d      	beq.n	8005248 <ai_platform_network_get_error+0x60>
 800522c:	e7fe      	b.n	800522c <ai_platform_network_get_error+0x44>
 800522e:	4b29      	ldr	r3, [pc, #164]	; (80052d4 <ai_platform_network_get_error+0xec>)
 8005230:	2201      	movs	r2, #1
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	2a00      	cmp	r2, #0
 8005238:	d1fc      	bne.n	8005234 <ai_platform_network_get_error+0x4c>
 800523a:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <ai_platform_network_get_error+0xf0>)
 800523c:	4a23      	ldr	r2, [pc, #140]	; (80052cc <ai_platform_network_get_error+0xe4>)
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	4b23      	ldr	r3, [pc, #140]	; (80052d0 <ai_platform_network_get_error+0xe8>)
 8005244:	429a      	cmp	r2, r3
 8005246:	d104      	bne.n	8005252 <ai_platform_network_get_error+0x6a>
 8005248:	f7ff ff64 	bl	8005114 <_ai_platform_release_crc>
 800524c:	f241 0010 	movw	r0, #4112	; 0x1010
 8005250:	bd10      	pop	{r4, pc}
 8005252:	e7fe      	b.n	8005252 <ai_platform_network_get_error+0x6a>
 8005254:	4a19      	ldr	r2, [pc, #100]	; (80052bc <ai_platform_network_get_error+0xd4>)
 8005256:	6813      	ldr	r3, [r2, #0]
 8005258:	f023 0301 	bic.w	r3, r3, #1
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	f7ff ff57 	bl	8005110 <_ai_platform_acquire_crc>
 8005262:	4b17      	ldr	r3, [pc, #92]	; (80052c0 <ai_platform_network_get_error+0xd8>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800526a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800526e:	d00d      	beq.n	800528c <ai_platform_network_get_error+0xa4>
 8005270:	4b14      	ldr	r3, [pc, #80]	; (80052c4 <ai_platform_network_get_error+0xdc>)
 8005272:	2201      	movs	r2, #1
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	2a00      	cmp	r2, #0
 800527a:	d1fc      	bne.n	8005276 <ai_platform_network_get_error+0x8e>
 800527c:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <ai_platform_network_get_error+0xe0>)
 800527e:	4a13      	ldr	r2, [pc, #76]	; (80052cc <ai_platform_network_get_error+0xe4>)
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <ai_platform_network_get_error+0xe8>)
 8005286:	429a      	cmp	r2, r3
 8005288:	d00e      	beq.n	80052a8 <ai_platform_network_get_error+0xc0>
 800528a:	e7fe      	b.n	800528a <ai_platform_network_get_error+0xa2>
 800528c:	4b11      	ldr	r3, [pc, #68]	; (80052d4 <ai_platform_network_get_error+0xec>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	2a00      	cmp	r2, #0
 8005296:	d1fc      	bne.n	8005292 <ai_platform_network_get_error+0xaa>
 8005298:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <ai_platform_network_get_error+0xf0>)
 800529a:	4a0c      	ldr	r2, [pc, #48]	; (80052cc <ai_platform_network_get_error+0xe4>)
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <ai_platform_network_get_error+0xe8>)
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d000      	beq.n	80052a8 <ai_platform_network_get_error+0xc0>
 80052a6:	e7fe      	b.n	80052a6 <ai_platform_network_get_error+0xbe>
 80052a8:	f7ff ff34 	bl	8005114 <_ai_platform_release_crc>
 80052ac:	f104 0010 	add.w	r0, r4, #16
 80052b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b4:	f000 bd0e 	b.w	8005cd4 <core_get_error>
 80052b8:	a1c00100 	.word	0xa1c00100
 80052bc:	e0002000 	.word	0xe0002000
 80052c0:	e0042000 	.word	0xe0042000
 80052c4:	58024c08 	.word	0x58024c08
 80052c8:	58024c00 	.word	0x58024c00
 80052cc:	f407a5c2 	.word	0xf407a5c2
 80052d0:	b5e8b5cd 	.word	0xb5e8b5cd
 80052d4:	40023008 	.word	0x40023008
 80052d8:	40023000 	.word	0x40023000

080052dc <ai_platform_network_create>:
 80052dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	4607      	mov	r7, r0
 80052e4:	4616      	mov	r6, r2
 80052e6:	461d      	mov	r5, r3
 80052e8:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80052ec:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 80052f0:	f7ff ff0e 	bl	8005110 <_ai_platform_acquire_crc>
 80052f4:	b178      	cbz	r0, 8005316 <ai_platform_network_create+0x3a>
 80052f6:	4b5a      	ldr	r3, [pc, #360]	; (8005460 <ai_platform_network_create+0x184>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80052fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005302:	4602      	mov	r2, r0
 8005304:	d00c      	beq.n	8005320 <ai_platform_network_create+0x44>
 8005306:	4b57      	ldr	r3, [pc, #348]	; (8005464 <ai_platform_network_create+0x188>)
 8005308:	2118      	movs	r1, #24
 800530a:	6019      	str	r1, [r3, #0]
 800530c:	6819      	ldr	r1, [r3, #0]
 800530e:	2918      	cmp	r1, #24
 8005310:	d034      	beq.n	800537c <ai_platform_network_create+0xa0>
 8005312:	f7ff feff 	bl	8005114 <_ai_platform_release_crc>
 8005316:	f241 0033 	movw	r0, #4147	; 0x1033
 800531a:	b002      	add	sp, #8
 800531c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005320:	4b51      	ldr	r3, [pc, #324]	; (8005468 <ai_platform_network_create+0x18c>)
 8005322:	2101      	movs	r1, #1
 8005324:	6019      	str	r1, [r3, #0]
 8005326:	2114      	movs	r1, #20
 8005328:	e001      	b.n	800532e <ai_platform_network_create+0x52>
 800532a:	3901      	subs	r1, #1
 800532c:	d002      	beq.n	8005334 <ai_platform_network_create+0x58>
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	2800      	cmp	r0, #0
 8005332:	d1fa      	bne.n	800532a <ai_platform_network_create+0x4e>
 8005334:	4b4c      	ldr	r3, [pc, #304]	; (8005468 <ai_platform_network_create+0x18c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	b9f3      	cbnz	r3, 8005378 <ai_platform_network_create+0x9c>
 800533a:	4610      	mov	r0, r2
 800533c:	f7ff feea 	bl	8005114 <_ai_platform_release_crc>
 8005340:	4a4a      	ldr	r2, [pc, #296]	; (800546c <ai_platform_network_create+0x190>)
 8005342:	6813      	ldr	r3, [r2, #0]
 8005344:	f023 0301 	bic.w	r3, r3, #1
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	f7ff fee1 	bl	8005110 <_ai_platform_acquire_crc>
 800534e:	4b44      	ldr	r3, [pc, #272]	; (8005460 <ai_platform_network_create+0x184>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535a:	d015      	beq.n	8005388 <ai_platform_network_create+0xac>
 800535c:	4b41      	ldr	r3, [pc, #260]	; (8005464 <ai_platform_network_create+0x188>)
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	2a00      	cmp	r2, #0
 8005366:	d1fc      	bne.n	8005362 <ai_platform_network_create+0x86>
 8005368:	4b41      	ldr	r3, [pc, #260]	; (8005470 <ai_platform_network_create+0x194>)
 800536a:	4a42      	ldr	r2, [pc, #264]	; (8005474 <ai_platform_network_create+0x198>)
 800536c:	601a      	str	r2, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4b41      	ldr	r3, [pc, #260]	; (8005478 <ai_platform_network_create+0x19c>)
 8005372:	429a      	cmp	r2, r3
 8005374:	d016      	beq.n	80053a4 <ai_platform_network_create+0xc8>
 8005376:	e7fe      	b.n	8005376 <ai_platform_network_create+0x9a>
 8005378:	4610      	mov	r0, r2
 800537a:	e7ca      	b.n	8005312 <ai_platform_network_create+0x36>
 800537c:	2101      	movs	r1, #1
 800537e:	6019      	str	r1, [r3, #0]
 8005380:	6819      	ldr	r1, [r3, #0]
 8005382:	2900      	cmp	r1, #0
 8005384:	d1fc      	bne.n	8005380 <ai_platform_network_create+0xa4>
 8005386:	e7d8      	b.n	800533a <ai_platform_network_create+0x5e>
 8005388:	4b37      	ldr	r3, [pc, #220]	; (8005468 <ai_platform_network_create+0x18c>)
 800538a:	2201      	movs	r2, #1
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	2a00      	cmp	r2, #0
 8005392:	d1fc      	bne.n	800538e <ai_platform_network_create+0xb2>
 8005394:	4b39      	ldr	r3, [pc, #228]	; (800547c <ai_platform_network_create+0x1a0>)
 8005396:	4a37      	ldr	r2, [pc, #220]	; (8005474 <ai_platform_network_create+0x198>)
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	4b36      	ldr	r3, [pc, #216]	; (8005478 <ai_platform_network_create+0x19c>)
 800539e:	429a      	cmp	r2, r3
 80053a0:	d000      	beq.n	80053a4 <ai_platform_network_create+0xc8>
 80053a2:	e7fe      	b.n	80053a2 <ai_platform_network_create+0xc6>
 80053a4:	f7ff feb6 	bl	8005114 <_ai_platform_release_crc>
 80053a8:	b1af      	cbz	r7, 80053d6 <ai_platform_network_create+0xfa>
 80053aa:	4b35      	ldr	r3, [pc, #212]	; (8005480 <ai_platform_network_create+0x1a4>)
 80053ac:	6033      	str	r3, [r6, #0]
 80053ae:	603e      	str	r6, [r7, #0]
 80053b0:	f000 fc8e 	bl	8005cd0 <core_init>
 80053b4:	b990      	cbnz	r0, 80053dc <ai_platform_network_create+0x100>
 80053b6:	062d      	lsls	r5, r5, #24
 80053b8:	0424      	lsls	r4, r4, #16
 80053ba:	2230      	movs	r2, #48	; 0x30
 80053bc:	2300      	movs	r3, #0
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	2110      	movs	r1, #16
 80053c2:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 80053c6:	2000      	movs	r0, #0
 80053c8:	432b      	orrs	r3, r5
 80053ca:	f362 0007 	bfi	r0, r2, #0, #8
 80053ce:	6473      	str	r3, [r6, #68]	; 0x44
 80053d0:	f361 201f 	bfi	r0, r1, #8, #24
 80053d4:	e7a1      	b.n	800531a <ai_platform_network_create+0x3e>
 80053d6:	f241 0010 	movw	r0, #4112	; 0x1010
 80053da:	e79e      	b.n	800531a <ai_platform_network_create+0x3e>
 80053dc:	4a23      	ldr	r2, [pc, #140]	; (800546c <ai_platform_network_create+0x190>)
 80053de:	6813      	ldr	r3, [r2, #0]
 80053e0:	f023 0301 	bic.w	r3, r3, #1
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	f7ff fe93 	bl	8005110 <_ai_platform_acquire_crc>
 80053ea:	4b1d      	ldr	r3, [pc, #116]	; (8005460 <ai_platform_network_create+0x184>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f6:	d00d      	beq.n	8005414 <ai_platform_network_create+0x138>
 80053f8:	4b1a      	ldr	r3, [pc, #104]	; (8005464 <ai_platform_network_create+0x188>)
 80053fa:	2201      	movs	r2, #1
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	2a00      	cmp	r2, #0
 8005402:	d1fc      	bne.n	80053fe <ai_platform_network_create+0x122>
 8005404:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <ai_platform_network_create+0x194>)
 8005406:	4a1b      	ldr	r2, [pc, #108]	; (8005474 <ai_platform_network_create+0x198>)
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	4b1a      	ldr	r3, [pc, #104]	; (8005478 <ai_platform_network_create+0x19c>)
 800540e:	429a      	cmp	r2, r3
 8005410:	d00e      	beq.n	8005430 <ai_platform_network_create+0x154>
 8005412:	e7fe      	b.n	8005412 <ai_platform_network_create+0x136>
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <ai_platform_network_create+0x18c>)
 8005416:	2201      	movs	r2, #1
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	2a00      	cmp	r2, #0
 800541e:	d1fc      	bne.n	800541a <ai_platform_network_create+0x13e>
 8005420:	4b16      	ldr	r3, [pc, #88]	; (800547c <ai_platform_network_create+0x1a0>)
 8005422:	4a14      	ldr	r2, [pc, #80]	; (8005474 <ai_platform_network_create+0x198>)
 8005424:	601a      	str	r2, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	4b13      	ldr	r3, [pc, #76]	; (8005478 <ai_platform_network_create+0x19c>)
 800542a:	429a      	cmp	r2, r3
 800542c:	d000      	beq.n	8005430 <ai_platform_network_create+0x154>
 800542e:	e7fe      	b.n	800542e <ai_platform_network_create+0x152>
 8005430:	062d      	lsls	r5, r5, #24
 8005432:	0424      	lsls	r4, r4, #16
 8005434:	f7ff fe6e 	bl	8005114 <_ai_platform_release_crc>
 8005438:	ea45 0304 	orr.w	r3, r5, r4
 800543c:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8005440:	d001      	beq.n	8005446 <ai_platform_network_create+0x16a>
 8005442:	2201      	movs	r2, #1
 8005444:	e7ba      	b.n	80053bc <ai_platform_network_create+0xe0>
 8005446:	a802      	add	r0, sp, #8
 8005448:	4b0e      	ldr	r3, [pc, #56]	; (8005484 <ai_platform_network_create+0x1a8>)
 800544a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800544e:	f002 fbd7 	bl	8007c00 <ai_check_custom_types>
 8005452:	b110      	cbz	r0, 800545a <ai_platform_network_create+0x17e>
 8005454:	2100      	movs	r1, #0
 8005456:	460a      	mov	r2, r1
 8005458:	e7b3      	b.n	80053c2 <ai_platform_network_create+0xe6>
 800545a:	2202      	movs	r2, #2
 800545c:	e7ae      	b.n	80053bc <ai_platform_network_create+0xe0>
 800545e:	bf00      	nop
 8005460:	e0042000 	.word	0xe0042000
 8005464:	58024c08 	.word	0x58024c08
 8005468:	40023008 	.word	0x40023008
 800546c:	e0002000 	.word	0xe0002000
 8005470:	58024c00 	.word	0x58024c00
 8005474:	f407a5c2 	.word	0xf407a5c2
 8005478:	b5e8b5cd 	.word	0xb5e8b5cd
 800547c:	40023000 	.word	0x40023000
 8005480:	a1c00100 	.word	0xa1c00100
 8005484:	84048403 	.word	0x84048403

08005488 <ai_platform_network_init>:
 8005488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	2800      	cmp	r0, #0
 800548e:	d04d      	beq.n	800552c <ai_platform_network_init+0xa4>
 8005490:	4b7c      	ldr	r3, [pc, #496]	; (8005684 <ai_platform_network_init+0x1fc>)
 8005492:	6802      	ldr	r2, [r0, #0]
 8005494:	429a      	cmp	r2, r3
 8005496:	4604      	mov	r4, r0
 8005498:	d148      	bne.n	800552c <ai_platform_network_init+0xa4>
 800549a:	4a7b      	ldr	r2, [pc, #492]	; (8005688 <ai_platform_network_init+0x200>)
 800549c:	6813      	ldr	r3, [r2, #0]
 800549e:	f023 0301 	bic.w	r3, r3, #1
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	460d      	mov	r5, r1
 80054a6:	f7ff fe33 	bl	8005110 <_ai_platform_acquire_crc>
 80054aa:	4b78      	ldr	r3, [pc, #480]	; (800568c <ai_platform_network_init+0x204>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b6:	d00d      	beq.n	80054d4 <ai_platform_network_init+0x4c>
 80054b8:	4b75      	ldr	r3, [pc, #468]	; (8005690 <ai_platform_network_init+0x208>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	2a00      	cmp	r2, #0
 80054c2:	d1fc      	bne.n	80054be <ai_platform_network_init+0x36>
 80054c4:	4b73      	ldr	r3, [pc, #460]	; (8005694 <ai_platform_network_init+0x20c>)
 80054c6:	4a74      	ldr	r2, [pc, #464]	; (8005698 <ai_platform_network_init+0x210>)
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4b73      	ldr	r3, [pc, #460]	; (800569c <ai_platform_network_init+0x214>)
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d00d      	beq.n	80054ee <ai_platform_network_init+0x66>
 80054d2:	e7fe      	b.n	80054d2 <ai_platform_network_init+0x4a>
 80054d4:	4b72      	ldr	r3, [pc, #456]	; (80056a0 <ai_platform_network_init+0x218>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	2a00      	cmp	r2, #0
 80054de:	d1fc      	bne.n	80054da <ai_platform_network_init+0x52>
 80054e0:	4b70      	ldr	r3, [pc, #448]	; (80056a4 <ai_platform_network_init+0x21c>)
 80054e2:	4a6d      	ldr	r2, [pc, #436]	; (8005698 <ai_platform_network_init+0x210>)
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	4b6c      	ldr	r3, [pc, #432]	; (800569c <ai_platform_network_init+0x214>)
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d11d      	bne.n	800552a <ai_platform_network_init+0xa2>
 80054ee:	f7ff fe11 	bl	8005114 <_ai_platform_release_crc>
 80054f2:	2d00      	cmp	r5, #0
 80054f4:	d076      	beq.n	80055e4 <ai_platform_network_init+0x15c>
 80054f6:	4b6c      	ldr	r3, [pc, #432]	; (80056a8 <ai_platform_network_init+0x220>)
 80054f8:	682a      	ldr	r2, [r5, #0]
 80054fa:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d030      	beq.n	8005564 <ai_platform_network_init+0xdc>
 8005502:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8005504:	46a9      	mov	r9, r5
 8005506:	f105 0118 	add.w	r1, r5, #24
 800550a:	2e00      	cmp	r6, #0
 800550c:	f000 8095 	beq.w	800563a <ai_platform_network_init+0x1b2>
 8005510:	f1bc 0f00 	cmp.w	ip, #0
 8005514:	f000 80a4 	beq.w	8005660 <ai_platform_network_init+0x1d8>
 8005518:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 800551c:	f1b8 0f01 	cmp.w	r8, #1
 8005520:	d16a      	bne.n	80055f8 <ai_platform_network_init+0x170>
 8005522:	2700      	movs	r7, #0
 8005524:	468c      	mov	ip, r1
 8005526:	83a7      	strh	r7, [r4, #28]
 8005528:	e028      	b.n	800557c <ai_platform_network_init+0xf4>
 800552a:	e7fe      	b.n	800552a <ai_platform_network_init+0xa2>
 800552c:	4a56      	ldr	r2, [pc, #344]	; (8005688 <ai_platform_network_init+0x200>)
 800552e:	6813      	ldr	r3, [r2, #0]
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	f7ff fdeb 	bl	8005110 <_ai_platform_acquire_crc>
 800553a:	4b54      	ldr	r3, [pc, #336]	; (800568c <ai_platform_network_init+0x204>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005546:	d067      	beq.n	8005618 <ai_platform_network_init+0x190>
 8005548:	4b51      	ldr	r3, [pc, #324]	; (8005690 <ai_platform_network_init+0x208>)
 800554a:	2201      	movs	r2, #1
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	2a00      	cmp	r2, #0
 8005552:	d1fc      	bne.n	800554e <ai_platform_network_init+0xc6>
 8005554:	4b4f      	ldr	r3, [pc, #316]	; (8005694 <ai_platform_network_init+0x20c>)
 8005556:	4a50      	ldr	r2, [pc, #320]	; (8005698 <ai_platform_network_init+0x210>)
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	4b4f      	ldr	r3, [pc, #316]	; (800569c <ai_platform_network_init+0x214>)
 800555e:	429a      	cmp	r2, r3
 8005560:	d067      	beq.n	8005632 <ai_platform_network_init+0x1aa>
 8005562:	e7fe      	b.n	8005562 <ai_platform_network_init+0xda>
 8005564:	8be1      	ldrh	r1, [r4, #30]
 8005566:	88eb      	ldrh	r3, [r5, #6]
 8005568:	89af      	ldrh	r7, [r5, #12]
 800556a:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 800556e:	88aa      	ldrh	r2, [r5, #4]
 8005570:	f8d5 9008 	ldr.w	r9, [r5, #8]
 8005574:	428b      	cmp	r3, r1
 8005576:	d13f      	bne.n	80055f8 <ai_platform_network_init+0x170>
 8005578:	83a2      	strh	r2, [r4, #28]
 800557a:	b19b      	cbz	r3, 80055a4 <ai_platform_network_init+0x11c>
 800557c:	f04f 0e00 	mov.w	lr, #0
 8005580:	46f2      	mov	sl, lr
 8005582:	eb09 060e 	add.w	r6, r9, lr
 8005586:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8005588:	6a25      	ldr	r5, [r4, #32]
 800558a:	4475      	add	r5, lr
 800558c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800558e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8005592:	e885 0003 	stmia.w	r5, {r0, r1}
 8005596:	8be3      	ldrh	r3, [r4, #30]
 8005598:	f10a 0a01 	add.w	sl, sl, #1
 800559c:	459a      	cmp	sl, r3
 800559e:	f10e 0e18 	add.w	lr, lr, #24
 80055a2:	d3ee      	bcc.n	8005582 <ai_platform_network_init+0xfa>
 80055a4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80055a6:	4598      	cmp	r8, r3
 80055a8:	d12e      	bne.n	8005608 <ai_platform_network_init+0x180>
 80055aa:	84a7      	strh	r7, [r4, #36]	; 0x24
 80055ac:	f1b8 0f00 	cmp.w	r8, #0
 80055b0:	d012      	beq.n	80055d8 <ai_platform_network_init+0x150>
 80055b2:	2700      	movs	r7, #0
 80055b4:	46be      	mov	lr, r7
 80055b6:	eb0c 0607 	add.w	r6, ip, r7
 80055ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80055bc:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80055be:	443d      	add	r5, r7
 80055c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055c2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80055c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80055ca:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80055cc:	f10e 0e01 	add.w	lr, lr, #1
 80055d0:	459e      	cmp	lr, r3
 80055d2:	f107 0718 	add.w	r7, r7, #24
 80055d6:	d3ee      	bcc.n	80055b6 <ai_platform_network_init+0x12e>
 80055d8:	2303      	movs	r3, #3
 80055da:	60e3      	str	r3, [r4, #12]
 80055dc:	4620      	mov	r0, r4
 80055de:	f002 fb39 	bl	8007c54 <ai_layers_init_all>
 80055e2:	e006      	b.n	80055f2 <ai_platform_network_init+0x16a>
 80055e4:	f104 0010 	add.w	r0, r4, #16
 80055e8:	2211      	movs	r2, #17
 80055ea:	2110      	movs	r1, #16
 80055ec:	462c      	mov	r4, r5
 80055ee:	f000 fb77 	bl	8005ce0 <core_set_error>
 80055f2:	4620      	mov	r0, r4
 80055f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f8:	f104 0010 	add.w	r0, r4, #16
 80055fc:	2212      	movs	r2, #18
 80055fe:	2116      	movs	r1, #22
 8005600:	f000 fb6e 	bl	8005ce0 <core_set_error>
 8005604:	2400      	movs	r4, #0
 8005606:	e7f4      	b.n	80055f2 <ai_platform_network_init+0x16a>
 8005608:	f104 0010 	add.w	r0, r4, #16
 800560c:	2213      	movs	r2, #19
 800560e:	2116      	movs	r1, #22
 8005610:	f000 fb66 	bl	8005ce0 <core_set_error>
 8005614:	2400      	movs	r4, #0
 8005616:	e7ec      	b.n	80055f2 <ai_platform_network_init+0x16a>
 8005618:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <ai_platform_network_init+0x218>)
 800561a:	2201      	movs	r2, #1
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2a00      	cmp	r2, #0
 8005622:	d1fc      	bne.n	800561e <ai_platform_network_init+0x196>
 8005624:	4b1f      	ldr	r3, [pc, #124]	; (80056a4 <ai_platform_network_init+0x21c>)
 8005626:	4a1c      	ldr	r2, [pc, #112]	; (8005698 <ai_platform_network_init+0x210>)
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b1b      	ldr	r3, [pc, #108]	; (800569c <ai_platform_network_init+0x214>)
 800562e:	429a      	cmp	r2, r3
 8005630:	d115      	bne.n	800565e <ai_platform_network_init+0x1d6>
 8005632:	f7ff fd6f 	bl	8005114 <_ai_platform_release_crc>
 8005636:	2400      	movs	r4, #0
 8005638:	e7db      	b.n	80055f2 <ai_platform_network_init+0x16a>
 800563a:	8c28      	ldrh	r0, [r5, #32]
 800563c:	8bea      	ldrh	r2, [r5, #30]
 800563e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005640:	fb02 f200 	mul.w	r2, r2, r0
 8005644:	fb03 f302 	mul.w	r3, r3, r2
 8005648:	2b00      	cmp	r3, #0
 800564a:	f43f af61 	beq.w	8005510 <ai_platform_network_init+0x88>
 800564e:	f104 0010 	add.w	r0, r4, #16
 8005652:	2213      	movs	r2, #19
 8005654:	2110      	movs	r1, #16
 8005656:	4634      	mov	r4, r6
 8005658:	f000 fb42 	bl	8005ce0 <core_set_error>
 800565c:	e7c9      	b.n	80055f2 <ai_platform_network_init+0x16a>
 800565e:	e7fe      	b.n	800565e <ai_platform_network_init+0x1d6>
 8005660:	8928      	ldrh	r0, [r5, #8]
 8005662:	88ea      	ldrh	r2, [r5, #6]
 8005664:	68eb      	ldr	r3, [r5, #12]
 8005666:	fb02 f200 	mul.w	r2, r2, r0
 800566a:	fb03 f302 	mul.w	r3, r3, r2
 800566e:	2b00      	cmp	r3, #0
 8005670:	f43f af52 	beq.w	8005518 <ai_platform_network_init+0x90>
 8005674:	f104 0010 	add.w	r0, r4, #16
 8005678:	2212      	movs	r2, #18
 800567a:	2110      	movs	r1, #16
 800567c:	4664      	mov	r4, ip
 800567e:	f000 fb2f 	bl	8005ce0 <core_set_error>
 8005682:	e7b6      	b.n	80055f2 <ai_platform_network_init+0x16a>
 8005684:	a1c00100 	.word	0xa1c00100
 8005688:	e0002000 	.word	0xe0002000
 800568c:	e0042000 	.word	0xe0042000
 8005690:	58024c08 	.word	0x58024c08
 8005694:	58024c00 	.word	0x58024c00
 8005698:	f407a5c2 	.word	0xf407a5c2
 800569c:	b5e8b5cd 	.word	0xb5e8b5cd
 80056a0:	40023008 	.word	0x40023008
 80056a4:	40023000 	.word	0x40023000
 80056a8:	a1facade 	.word	0xa1facade

080056ac <ai_platform_network_post_init>:
 80056ac:	b538      	push	{r3, r4, r5, lr}
 80056ae:	b120      	cbz	r0, 80056ba <ai_platform_network_post_init+0xe>
 80056b0:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <ai_platform_network_post_init+0x104>)
 80056b2:	6802      	ldr	r2, [r0, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	4604      	mov	r4, r0
 80056b8:	d02d      	beq.n	8005716 <ai_platform_network_post_init+0x6a>
 80056ba:	4a3e      	ldr	r2, [pc, #248]	; (80057b4 <ai_platform_network_post_init+0x108>)
 80056bc:	6813      	ldr	r3, [r2, #0]
 80056be:	f023 0301 	bic.w	r3, r3, #1
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	f7ff fd24 	bl	8005110 <_ai_platform_acquire_crc>
 80056c8:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <ai_platform_network_post_init+0x10c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d4:	d00d      	beq.n	80056f2 <ai_platform_network_post_init+0x46>
 80056d6:	4b39      	ldr	r3, [pc, #228]	; (80057bc <ai_platform_network_post_init+0x110>)
 80056d8:	2201      	movs	r2, #1
 80056da:	601a      	str	r2, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	2a00      	cmp	r2, #0
 80056e0:	d1fc      	bne.n	80056dc <ai_platform_network_post_init+0x30>
 80056e2:	4b37      	ldr	r3, [pc, #220]	; (80057c0 <ai_platform_network_post_init+0x114>)
 80056e4:	4a37      	ldr	r2, [pc, #220]	; (80057c4 <ai_platform_network_post_init+0x118>)
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b37      	ldr	r3, [pc, #220]	; (80057c8 <ai_platform_network_post_init+0x11c>)
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d00d      	beq.n	800570c <ai_platform_network_post_init+0x60>
 80056f0:	e7fe      	b.n	80056f0 <ai_platform_network_post_init+0x44>
 80056f2:	4b36      	ldr	r3, [pc, #216]	; (80057cc <ai_platform_network_post_init+0x120>)
 80056f4:	2201      	movs	r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	2a00      	cmp	r2, #0
 80056fc:	d1fc      	bne.n	80056f8 <ai_platform_network_post_init+0x4c>
 80056fe:	4b34      	ldr	r3, [pc, #208]	; (80057d0 <ai_platform_network_post_init+0x124>)
 8005700:	4a30      	ldr	r2, [pc, #192]	; (80057c4 <ai_platform_network_post_init+0x118>)
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	4b30      	ldr	r3, [pc, #192]	; (80057c8 <ai_platform_network_post_init+0x11c>)
 8005708:	429a      	cmp	r2, r3
 800570a:	d103      	bne.n	8005714 <ai_platform_network_post_init+0x68>
 800570c:	f7ff fd02 	bl	8005114 <_ai_platform_release_crc>
 8005710:	2000      	movs	r0, #0
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	e7fe      	b.n	8005714 <ai_platform_network_post_init+0x68>
 8005716:	4a27      	ldr	r2, [pc, #156]	; (80057b4 <ai_platform_network_post_init+0x108>)
 8005718:	6813      	ldr	r3, [r2, #0]
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	6013      	str	r3, [r2, #0]
 8005720:	f7ff fcf6 	bl	8005110 <_ai_platform_acquire_crc>
 8005724:	4b24      	ldr	r3, [pc, #144]	; (80057b8 <ai_platform_network_post_init+0x10c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800572c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005730:	d00d      	beq.n	800574e <ai_platform_network_post_init+0xa2>
 8005732:	4b22      	ldr	r3, [pc, #136]	; (80057bc <ai_platform_network_post_init+0x110>)
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	2a00      	cmp	r2, #0
 800573c:	d1fc      	bne.n	8005738 <ai_platform_network_post_init+0x8c>
 800573e:	4b20      	ldr	r3, [pc, #128]	; (80057c0 <ai_platform_network_post_init+0x114>)
 8005740:	4a20      	ldr	r2, [pc, #128]	; (80057c4 <ai_platform_network_post_init+0x118>)
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b20      	ldr	r3, [pc, #128]	; (80057c8 <ai_platform_network_post_init+0x11c>)
 8005748:	429a      	cmp	r2, r3
 800574a:	d00e      	beq.n	800576a <ai_platform_network_post_init+0xbe>
 800574c:	e7fe      	b.n	800574c <ai_platform_network_post_init+0xa0>
 800574e:	4b1f      	ldr	r3, [pc, #124]	; (80057cc <ai_platform_network_post_init+0x120>)
 8005750:	2201      	movs	r2, #1
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	2a00      	cmp	r2, #0
 8005758:	d1fc      	bne.n	8005754 <ai_platform_network_post_init+0xa8>
 800575a:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <ai_platform_network_post_init+0x124>)
 800575c:	4a19      	ldr	r2, [pc, #100]	; (80057c4 <ai_platform_network_post_init+0x118>)
 800575e:	601a      	str	r2, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4b19      	ldr	r3, [pc, #100]	; (80057c8 <ai_platform_network_post_init+0x11c>)
 8005764:	429a      	cmp	r2, r3
 8005766:	d000      	beq.n	800576a <ai_platform_network_post_init+0xbe>
 8005768:	e7fe      	b.n	8005768 <ai_platform_network_post_init+0xbc>
 800576a:	f7ff fcd3 	bl	8005114 <_ai_platform_release_crc>
 800576e:	68e3      	ldr	r3, [r4, #12]
 8005770:	f013 0502 	ands.w	r5, r3, #2
 8005774:	d011      	beq.n	800579a <ai_platform_network_post_init+0xee>
 8005776:	4620      	mov	r0, r4
 8005778:	f002 fa80 	bl	8007c7c <ai_layers_post_init_all>
 800577c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800577e:	b1a3      	cbz	r3, 80057aa <ai_platform_network_post_init+0xfe>
 8005780:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005782:	b195      	cbz	r5, 80057aa <ai_platform_network_post_init+0xfe>
 8005784:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005786:	4629      	mov	r1, r5
 8005788:	2000      	movs	r0, #0
 800578a:	4798      	blx	r3
 800578c:	692b      	ldr	r3, [r5, #16]
 800578e:	42ab      	cmp	r3, r5
 8005790:	d00b      	beq.n	80057aa <ai_platform_network_post_init+0xfe>
 8005792:	461d      	mov	r5, r3
 8005794:	b14b      	cbz	r3, 80057aa <ai_platform_network_post_init+0xfe>
 8005796:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005798:	e7f4      	b.n	8005784 <ai_platform_network_post_init+0xd8>
 800579a:	f104 0010 	add.w	r0, r4, #16
 800579e:	2210      	movs	r2, #16
 80057a0:	2111      	movs	r1, #17
 80057a2:	f000 fa9d 	bl	8005ce0 <core_set_error>
 80057a6:	4628      	mov	r0, r5
 80057a8:	bd38      	pop	{r3, r4, r5, pc}
 80057aa:	2001      	movs	r0, #1
 80057ac:	bd38      	pop	{r3, r4, r5, pc}
 80057ae:	bf00      	nop
 80057b0:	a1c00100 	.word	0xa1c00100
 80057b4:	e0002000 	.word	0xe0002000
 80057b8:	e0042000 	.word	0xe0042000
 80057bc:	58024c08 	.word	0x58024c08
 80057c0:	58024c00 	.word	0x58024c00
 80057c4:	f407a5c2 	.word	0xf407a5c2
 80057c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80057cc:	40023008 	.word	0x40023008
 80057d0:	40023000 	.word	0x40023000

080057d4 <ai_platform_network_process>:
 80057d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d8:	b085      	sub	sp, #20
 80057da:	460d      	mov	r5, r1
 80057dc:	9202      	str	r2, [sp, #8]
 80057de:	4604      	mov	r4, r0
 80057e0:	b120      	cbz	r0, 80057ec <ai_platform_network_process+0x18>
 80057e2:	4b7b      	ldr	r3, [pc, #492]	; (80059d0 <ai_platform_network_process+0x1fc>)
 80057e4:	6802      	ldr	r2, [r0, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	bf18      	it	ne
 80057ea:	2400      	movne	r4, #0
 80057ec:	4a79      	ldr	r2, [pc, #484]	; (80059d4 <ai_platform_network_process+0x200>)
 80057ee:	6813      	ldr	r3, [r2, #0]
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	f7ff fc8b 	bl	8005110 <_ai_platform_acquire_crc>
 80057fa:	4b77      	ldr	r3, [pc, #476]	; (80059d8 <ai_platform_network_process+0x204>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005806:	d00d      	beq.n	8005824 <ai_platform_network_process+0x50>
 8005808:	4b74      	ldr	r3, [pc, #464]	; (80059dc <ai_platform_network_process+0x208>)
 800580a:	2201      	movs	r2, #1
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	2a00      	cmp	r2, #0
 8005812:	d1fc      	bne.n	800580e <ai_platform_network_process+0x3a>
 8005814:	4b72      	ldr	r3, [pc, #456]	; (80059e0 <ai_platform_network_process+0x20c>)
 8005816:	4a73      	ldr	r2, [pc, #460]	; (80059e4 <ai_platform_network_process+0x210>)
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	4b72      	ldr	r3, [pc, #456]	; (80059e8 <ai_platform_network_process+0x214>)
 800581e:	429a      	cmp	r2, r3
 8005820:	d00e      	beq.n	8005840 <ai_platform_network_process+0x6c>
 8005822:	e7fe      	b.n	8005822 <ai_platform_network_process+0x4e>
 8005824:	4b71      	ldr	r3, [pc, #452]	; (80059ec <ai_platform_network_process+0x218>)
 8005826:	2201      	movs	r2, #1
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	2a00      	cmp	r2, #0
 800582e:	d1fc      	bne.n	800582a <ai_platform_network_process+0x56>
 8005830:	4b6f      	ldr	r3, [pc, #444]	; (80059f0 <ai_platform_network_process+0x21c>)
 8005832:	4a6c      	ldr	r2, [pc, #432]	; (80059e4 <ai_platform_network_process+0x210>)
 8005834:	601a      	str	r2, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	4b6b      	ldr	r3, [pc, #428]	; (80059e8 <ai_platform_network_process+0x214>)
 800583a:	429a      	cmp	r2, r3
 800583c:	d000      	beq.n	8005840 <ai_platform_network_process+0x6c>
 800583e:	e7fe      	b.n	800583e <ai_platform_network_process+0x6a>
 8005840:	f7ff fc68 	bl	8005114 <_ai_platform_release_crc>
 8005844:	2c00      	cmp	r4, #0
 8005846:	f000 808e 	beq.w	8005966 <ai_platform_network_process+0x192>
 800584a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800584c:	2f00      	cmp	r7, #0
 800584e:	f040 823c 	bne.w	8005cca <ai_platform_network_process+0x4f6>
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	f003 0303 	and.w	r3, r3, #3
 8005858:	f04f 0b00 	mov.w	fp, #0
 800585c:	2b03      	cmp	r3, #3
 800585e:	f8c4 b014 	str.w	fp, [r4, #20]
 8005862:	f040 822b 	bne.w	8005cbc <ai_platform_network_process+0x4e8>
 8005866:	2d00      	cmp	r5, #0
 8005868:	f000 80a8 	beq.w	80059bc <ai_platform_network_process+0x1e8>
 800586c:	2f00      	cmp	r7, #0
 800586e:	f000 80a5 	beq.w	80059bc <ai_platform_network_process+0x1e8>
 8005872:	883b      	ldrh	r3, [r7, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 80a1 	beq.w	80059bc <ai_platform_network_process+0x1e8>
 800587a:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 800587e:	9401      	str	r4, [sp, #4]
 8005880:	46d8      	mov	r8, fp
 8005882:	4598      	cmp	r8, r3
 8005884:	f080 80b6 	bcs.w	80059f4 <ai_platform_network_process+0x220>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 80b2 	beq.w	80059f4 <ai_platform_network_process+0x220>
 8005890:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8005894:	2e00      	cmp	r6, #0
 8005896:	f000 80ad 	beq.w	80059f4 <ai_platform_network_process+0x220>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	9303      	str	r3, [sp, #12]
 80058a0:	ea4f 1408 	mov.w	r4, r8, lsl #4
 80058a4:	eb13 0a04 	adds.w	sl, r3, r4
 80058a8:	f000 8087 	beq.w	80059ba <ai_platform_network_process+0x1e6>
 80058ac:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 80058b0:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 80058b4:	69b0      	ldr	r0, [r6, #24]
 80058b6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80058ba:	6841      	ldr	r1, [r0, #4]
 80058bc:	fb0b f30e 	mul.w	r3, fp, lr
 80058c0:	fb0c f303 	mul.w	r3, ip, r3
 80058c4:	4299      	cmp	r1, r3
 80058c6:	d36e      	bcc.n	80059a6 <ai_platform_network_process+0x1d2>
 80058c8:	68f3      	ldr	r3, [r6, #12]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	455a      	cmp	r2, fp
 80058ce:	d16a      	bne.n	80059a6 <ai_platform_network_process+0x1d2>
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	4572      	cmp	r2, lr
 80058d4:	d167      	bne.n	80059a6 <ai_platform_network_process+0x1d2>
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	459c      	cmp	ip, r3
 80058da:	d164      	bne.n	80059a6 <ai_platform_network_process+0x1d2>
 80058dc:	6800      	ldr	r0, [r0, #0]
 80058de:	f002 fa8b 	bl	8007df8 <ai_array_get_byte_size>
 80058e2:	68f2      	ldr	r2, [r6, #12]
 80058e4:	6973      	ldr	r3, [r6, #20]
 80058e6:	68d2      	ldr	r2, [r2, #12]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	fb03 f302 	mul.w	r3, r3, r2
 80058ee:	4298      	cmp	r0, r3
 80058f0:	d359      	bcc.n	80059a6 <ai_platform_network_process+0x1d2>
 80058f2:	69b3      	ldr	r3, [r6, #24]
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	f002 fa27 	bl	8007d48 <ai_array_to_buffer_fmt>
 80058fa:	682b      	ldr	r3, [r5, #0]
 80058fc:	4043      	eors	r3, r0
 80058fe:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005902:	d146      	bne.n	8005992 <ai_platform_network_process+0x1be>
 8005904:	692b      	ldr	r3, [r5, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d03a      	beq.n	8005980 <ai_platform_network_process+0x1ac>
 800590a:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800590e:	f1bb 0f00 	cmp.w	fp, #0
 8005912:	d02d      	beq.n	8005970 <ai_platform_network_process+0x19c>
 8005914:	68f2      	ldr	r2, [r6, #12]
 8005916:	6973      	ldr	r3, [r6, #20]
 8005918:	68d1      	ldr	r1, [r2, #12]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	fb02 f201 	mul.w	r2, r2, r1
 8005920:	f8ca 2008 	str.w	r2, [sl, #8]
 8005924:	88ab      	ldrh	r3, [r5, #4]
 8005926:	fb02 f203 	mul.w	r2, r2, r3
 800592a:	f8ca 200c 	str.w	r2, [sl, #12]
 800592e:	6929      	ldr	r1, [r5, #16]
 8005930:	f8ca 1004 	str.w	r1, [sl, #4]
 8005934:	692b      	ldr	r3, [r5, #16]
 8005936:	4413      	add	r3, r2
 8005938:	9a03      	ldr	r2, [sp, #12]
 800593a:	5113      	str	r3, [r2, r4]
 800593c:	69b0      	ldr	r0, [r6, #24]
 800593e:	6803      	ldr	r3, [r0, #0]
 8005940:	45d9      	cmp	r9, fp
 8005942:	bf38      	it	cc
 8005944:	46d9      	movcc	r9, fp
 8005946:	009a      	lsls	r2, r3, #2
 8005948:	d408      	bmi.n	800595c <ai_platform_network_process+0x188>
 800594a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	4419      	add	r1, r3
 8005952:	6081      	str	r1, [r0, #8]
 8005954:	69b3      	ldr	r3, [r6, #24]
 8005956:	f8da 2004 	ldr.w	r2, [sl, #4]
 800595a:	60da      	str	r2, [r3, #12]
 800595c:	883b      	ldrh	r3, [r7, #0]
 800595e:	f108 0801 	add.w	r8, r8, #1
 8005962:	3518      	adds	r5, #24
 8005964:	e78d      	b.n	8005882 <ai_platform_network_process+0xae>
 8005966:	46a3      	mov	fp, r4
 8005968:	4658      	mov	r0, fp
 800596a:	b005      	add	sp, #20
 800596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005970:	9c01      	ldr	r4, [sp, #4]
 8005972:	2221      	movs	r2, #33	; 0x21
 8005974:	f104 0010 	add.w	r0, r4, #16
 8005978:	2112      	movs	r1, #18
 800597a:	f000 f9b1 	bl	8005ce0 <core_set_error>
 800597e:	e7f3      	b.n	8005968 <ai_platform_network_process+0x194>
 8005980:	9c01      	ldr	r4, [sp, #4]
 8005982:	2217      	movs	r2, #23
 8005984:	f104 0010 	add.w	r0, r4, #16
 8005988:	2112      	movs	r1, #18
 800598a:	469b      	mov	fp, r3
 800598c:	f000 f9a8 	bl	8005ce0 <core_set_error>
 8005990:	e7ea      	b.n	8005968 <ai_platform_network_process+0x194>
 8005992:	9c01      	ldr	r4, [sp, #4]
 8005994:	2219      	movs	r2, #25
 8005996:	f104 0010 	add.w	r0, r4, #16
 800599a:	2112      	movs	r1, #18
 800599c:	f000 f9a0 	bl	8005ce0 <core_set_error>
 80059a0:	f04f 0b00 	mov.w	fp, #0
 80059a4:	e7e0      	b.n	8005968 <ai_platform_network_process+0x194>
 80059a6:	9c01      	ldr	r4, [sp, #4]
 80059a8:	2218      	movs	r2, #24
 80059aa:	f104 0010 	add.w	r0, r4, #16
 80059ae:	2112      	movs	r1, #18
 80059b0:	f000 f996 	bl	8005ce0 <core_set_error>
 80059b4:	f04f 0b00 	mov.w	fp, #0
 80059b8:	e7d6      	b.n	8005968 <ai_platform_network_process+0x194>
 80059ba:	9c01      	ldr	r4, [sp, #4]
 80059bc:	f104 0010 	add.w	r0, r4, #16
 80059c0:	2217      	movs	r2, #23
 80059c2:	2112      	movs	r1, #18
 80059c4:	f000 f98c 	bl	8005ce0 <core_set_error>
 80059c8:	f04f 0b00 	mov.w	fp, #0
 80059cc:	e7cc      	b.n	8005968 <ai_platform_network_process+0x194>
 80059ce:	bf00      	nop
 80059d0:	a1c00100 	.word	0xa1c00100
 80059d4:	e0002000 	.word	0xe0002000
 80059d8:	e0042000 	.word	0xe0042000
 80059dc:	58024c08 	.word	0x58024c08
 80059e0:	58024c00 	.word	0x58024c00
 80059e4:	f407a5c2 	.word	0xf407a5c2
 80059e8:	b5e8b5cd 	.word	0xb5e8b5cd
 80059ec:	40023008 	.word	0x40023008
 80059f0:	40023000 	.word	0x40023000
 80059f4:	9c01      	ldr	r4, [sp, #4]
 80059f6:	9a02      	ldr	r2, [sp, #8]
 80059f8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 80059fa:	2a00      	cmp	r2, #0
 80059fc:	f000 80a9 	beq.w	8005b52 <ai_platform_network_process+0x37e>
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	f240 809b 	bls.w	8005b3c <ai_platform_network_process+0x368>
 8005a06:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 8005a0a:	f11a 0f0c 	cmn.w	sl, #12
 8005a0e:	f000 8095 	beq.w	8005b3c <ai_platform_network_process+0x368>
 8005a12:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f000 8090 	beq.w	8005b3c <ai_platform_network_process+0x368>
 8005a1c:	9d02      	ldr	r5, [sp, #8]
 8005a1e:	9401      	str	r4, [sp, #4]
 8005a20:	f04f 0800 	mov.w	r8, #0
 8005a24:	4598      	cmp	r8, r3
 8005a26:	f080 8092 	bcs.w	8005b4e <ai_platform_network_process+0x37a>
 8005a2a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 808d 	beq.w	8005b4e <ai_platform_network_process+0x37a>
 8005a34:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 8005a38:	2e00      	cmp	r6, #0
 8005a3a:	f000 8088 	beq.w	8005b4e <ai_platform_network_process+0x37a>
 8005a3e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	9302      	str	r3, [sp, #8]
 8005a46:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8005a4a:	191f      	adds	r7, r3, r4
 8005a4c:	f000 812d 	beq.w	8005caa <ai_platform_network_process+0x4d6>
 8005a50:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 8005a54:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 8005a58:	69b0      	ldr	r0, [r6, #24]
 8005a5a:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8005a5e:	6841      	ldr	r1, [r0, #4]
 8005a60:	fb0b f30e 	mul.w	r3, fp, lr
 8005a64:	fb0c f303 	mul.w	r3, ip, r3
 8005a68:	4299      	cmp	r1, r3
 8005a6a:	d366      	bcc.n	8005b3a <ai_platform_network_process+0x366>
 8005a6c:	68f3      	ldr	r3, [r6, #12]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	455a      	cmp	r2, fp
 8005a72:	d162      	bne.n	8005b3a <ai_platform_network_process+0x366>
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	4572      	cmp	r2, lr
 8005a78:	d15f      	bne.n	8005b3a <ai_platform_network_process+0x366>
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	459c      	cmp	ip, r3
 8005a7e:	d15c      	bne.n	8005b3a <ai_platform_network_process+0x366>
 8005a80:	6800      	ldr	r0, [r0, #0]
 8005a82:	f002 f9b9 	bl	8007df8 <ai_array_get_byte_size>
 8005a86:	68f2      	ldr	r2, [r6, #12]
 8005a88:	6973      	ldr	r3, [r6, #20]
 8005a8a:	68d2      	ldr	r2, [r2, #12]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	fb03 f302 	mul.w	r3, r3, r2
 8005a92:	4298      	cmp	r0, r3
 8005a94:	d351      	bcc.n	8005b3a <ai_platform_network_process+0x366>
 8005a96:	69b3      	ldr	r3, [r6, #24]
 8005a98:	6818      	ldr	r0, [r3, #0]
 8005a9a:	f002 f955 	bl	8007d48 <ai_array_to_buffer_fmt>
 8005a9e:	682b      	ldr	r3, [r5, #0]
 8005aa0:	4043      	eors	r3, r0
 8005aa2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005aa6:	d13e      	bne.n	8005b26 <ai_platform_network_process+0x352>
 8005aa8:	692b      	ldr	r3, [r5, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d032      	beq.n	8005b14 <ai_platform_network_process+0x340>
 8005aae:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 8005ab2:	f1bb 0f00 	cmp.w	fp, #0
 8005ab6:	d025      	beq.n	8005b04 <ai_platform_network_process+0x330>
 8005ab8:	68f2      	ldr	r2, [r6, #12]
 8005aba:	6973      	ldr	r3, [r6, #20]
 8005abc:	68d1      	ldr	r1, [r2, #12]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	fb02 f201 	mul.w	r2, r2, r1
 8005ac4:	60ba      	str	r2, [r7, #8]
 8005ac6:	88ab      	ldrh	r3, [r5, #4]
 8005ac8:	fb02 f203 	mul.w	r2, r2, r3
 8005acc:	60fa      	str	r2, [r7, #12]
 8005ace:	6929      	ldr	r1, [r5, #16]
 8005ad0:	6079      	str	r1, [r7, #4]
 8005ad2:	692b      	ldr	r3, [r5, #16]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	9a02      	ldr	r2, [sp, #8]
 8005ad8:	5113      	str	r3, [r2, r4]
 8005ada:	69b0      	ldr	r0, [r6, #24]
 8005adc:	6803      	ldr	r3, [r0, #0]
 8005ade:	45d9      	cmp	r9, fp
 8005ae0:	bf38      	it	cc
 8005ae2:	46d9      	movcc	r9, fp
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	d407      	bmi.n	8005af8 <ai_platform_network_process+0x324>
 8005ae8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005aec:	1a9b      	subs	r3, r3, r2
 8005aee:	4419      	add	r1, r3
 8005af0:	6081      	str	r1, [r0, #8]
 8005af2:	69b3      	ldr	r3, [r6, #24]
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	60da      	str	r2, [r3, #12]
 8005af8:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8005afc:	f108 0801 	add.w	r8, r8, #1
 8005b00:	3518      	adds	r5, #24
 8005b02:	e78f      	b.n	8005a24 <ai_platform_network_process+0x250>
 8005b04:	9c01      	ldr	r4, [sp, #4]
 8005b06:	2221      	movs	r2, #33	; 0x21
 8005b08:	f104 0010 	add.w	r0, r4, #16
 8005b0c:	2113      	movs	r1, #19
 8005b0e:	f000 f8e7 	bl	8005ce0 <core_set_error>
 8005b12:	e729      	b.n	8005968 <ai_platform_network_process+0x194>
 8005b14:	9c01      	ldr	r4, [sp, #4]
 8005b16:	2217      	movs	r2, #23
 8005b18:	f104 0010 	add.w	r0, r4, #16
 8005b1c:	2113      	movs	r1, #19
 8005b1e:	469b      	mov	fp, r3
 8005b20:	f000 f8de 	bl	8005ce0 <core_set_error>
 8005b24:	e720      	b.n	8005968 <ai_platform_network_process+0x194>
 8005b26:	9c01      	ldr	r4, [sp, #4]
 8005b28:	2219      	movs	r2, #25
 8005b2a:	f104 0010 	add.w	r0, r4, #16
 8005b2e:	2113      	movs	r1, #19
 8005b30:	f000 f8d6 	bl	8005ce0 <core_set_error>
 8005b34:	f04f 0b00 	mov.w	fp, #0
 8005b38:	e716      	b.n	8005968 <ai_platform_network_process+0x194>
 8005b3a:	9c01      	ldr	r4, [sp, #4]
 8005b3c:	f104 0010 	add.w	r0, r4, #16
 8005b40:	2218      	movs	r2, #24
 8005b42:	2113      	movs	r1, #19
 8005b44:	f000 f8cc 	bl	8005ce0 <core_set_error>
 8005b48:	f04f 0b00 	mov.w	fp, #0
 8005b4c:	e70c      	b.n	8005968 <ai_platform_network_process+0x194>
 8005b4e:	9c01      	ldr	r4, [sp, #4]
 8005b50:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 8005b52:	f8a4 9014 	strh.w	r9, [r4, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 80a4 	beq.w	8005ca4 <ai_platform_network_process+0x4d0>
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005b60:	f240 809e 	bls.w	8005ca0 <ai_platform_network_process+0x4cc>
 8005b64:	f105 070c 	add.w	r7, r5, #12
 8005b68:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 8005b6c:	8aa3      	ldrh	r3, [r4, #20]
 8005b6e:	455b      	cmp	r3, fp
 8005b70:	f67f aefa 	bls.w	8005968 <ai_platform_network_process+0x194>
 8005b74:	9401      	str	r4, [sp, #4]
 8005b76:	2d00      	cmp	r5, #0
 8005b78:	d036      	beq.n	8005be8 <ai_platform_network_process+0x414>
 8005b7a:	882b      	ldrh	r3, [r5, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d033      	beq.n	8005be8 <ai_platform_network_process+0x414>
 8005b80:	686b      	ldr	r3, [r5, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d030      	beq.n	8005be8 <ai_platform_network_process+0x414>
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f04f 0800 	mov.w	r8, #0
 8005b8c:	b9db      	cbnz	r3, 8005bc6 <ai_platform_network_process+0x3f2>
 8005b8e:	e02b      	b.n	8005be8 <ai_platform_network_process+0x414>
 8005b90:	68d4      	ldr	r4, [r2, #12]
 8005b92:	1b00      	subs	r0, r0, r4
 8005b94:	4401      	add	r1, r0
 8005b96:	6091      	str	r1, [r2, #8]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	6872      	ldr	r2, [r6, #4]
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005ba2:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005ba6:	440b      	add	r3, r1
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	bf24      	itt	cs
 8005bac:	68f3      	ldrcs	r3, [r6, #12]
 8005bae:	1ad3      	subcs	r3, r2, r3
 8005bb0:	6073      	str	r3, [r6, #4]
 8005bb2:	882b      	ldrh	r3, [r5, #0]
 8005bb4:	f108 0801 	add.w	r8, r8, #1
 8005bb8:	4598      	cmp	r8, r3
 8005bba:	d215      	bcs.n	8005be8 <ai_platform_network_process+0x414>
 8005bbc:	686b      	ldr	r3, [r5, #4]
 8005bbe:	b19b      	cbz	r3, 8005be8 <ai_platform_network_process+0x414>
 8005bc0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005bc4:	b183      	cbz	r3, 8005be8 <ai_platform_network_process+0x414>
 8005bc6:	68a9      	ldr	r1, [r5, #8]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	f8d1 a000 	ldr.w	sl, [r1]
 8005bce:	6814      	ldr	r4, [r2, #0]
 8005bd0:	6890      	ldr	r0, [r2, #8]
 8005bd2:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005bd6:	eb0a 0609 	add.w	r6, sl, r9
 8005bda:	00a4      	lsls	r4, r4, #2
 8005bdc:	6871      	ldr	r1, [r6, #4]
 8005bde:	d5d7      	bpl.n	8005b90 <ai_platform_network_process+0x3bc>
 8005be0:	68b2      	ldr	r2, [r6, #8]
 8005be2:	f002 fa83 	bl	80080ec <memcpy>
 8005be6:	e7da      	b.n	8005b9e <ai_platform_network_process+0x3ca>
 8005be8:	9801      	ldr	r0, [sp, #4]
 8005bea:	f002 f85f 	bl	8007cac <ai_layers_forward_all>
 8005bee:	2f00      	cmp	r7, #0
 8005bf0:	d047      	beq.n	8005c82 <ai_platform_network_process+0x4ae>
 8005bf2:	883b      	ldrh	r3, [r7, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d044      	beq.n	8005c82 <ai_platform_network_process+0x4ae>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d041      	beq.n	8005c82 <ai_platform_network_process+0x4ae>
 8005bfe:	6818      	ldr	r0, [r3, #0]
 8005c00:	2800      	cmp	r0, #0
 8005c02:	d03e      	beq.n	8005c82 <ai_platform_network_process+0x4ae>
 8005c04:	f04f 0800 	mov.w	r8, #0
 8005c08:	e019      	b.n	8005c3e <ai_platform_network_process+0x46a>
 8005c0a:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	bf24      	itt	cs
 8005c12:	68f3      	ldrcs	r3, [r6, #12]
 8005c14:	1ad3      	subcs	r3, r2, r3
 8005c16:	6073      	str	r3, [r6, #4]
 8005c18:	6981      	ldr	r1, [r0, #24]
 8005c1a:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8005c1e:	1b12      	subs	r2, r2, r4
 8005c20:	4413      	add	r3, r2
 8005c22:	608b      	str	r3, [r1, #8]
 8005c24:	6983      	ldr	r3, [r0, #24]
 8005c26:	6872      	ldr	r2, [r6, #4]
 8005c28:	60da      	str	r2, [r3, #12]
 8005c2a:	883b      	ldrh	r3, [r7, #0]
 8005c2c:	f108 0801 	add.w	r8, r8, #1
 8005c30:	4598      	cmp	r8, r3
 8005c32:	d226      	bcs.n	8005c82 <ai_platform_network_process+0x4ae>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	b323      	cbz	r3, 8005c82 <ai_platform_network_process+0x4ae>
 8005c38:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005c3c:	b308      	cbz	r0, 8005c82 <ai_platform_network_process+0x4ae>
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	6981      	ldr	r1, [r0, #24]
 8005c42:	f8d3 a000 	ldr.w	sl, [r3]
 8005c46:	680c      	ldr	r4, [r1, #0]
 8005c48:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005c4c:	eb0a 0609 	add.w	r6, sl, r9
 8005c50:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 8005c54:	00a4      	lsls	r4, r4, #2
 8005c56:	eb0c 0302 	add.w	r3, ip, r2
 8005c5a:	d5d6      	bpl.n	8005c0a <ai_platform_network_process+0x436>
 8005c5c:	6889      	ldr	r1, [r1, #8]
 8005c5e:	4660      	mov	r0, ip
 8005c60:	f002 fa44 	bl	80080ec <memcpy>
 8005c64:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005c68:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005c6c:	440b      	add	r3, r1
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	bf24      	itt	cs
 8005c72:	68f3      	ldrcs	r3, [r6, #12]
 8005c74:	1ad3      	subcs	r3, r2, r3
 8005c76:	6073      	str	r3, [r6, #4]
 8005c78:	883b      	ldrh	r3, [r7, #0]
 8005c7a:	f108 0801 	add.w	r8, r8, #1
 8005c7e:	4598      	cmp	r8, r3
 8005c80:	d3d8      	bcc.n	8005c34 <ai_platform_network_process+0x460>
 8005c82:	9b01      	ldr	r3, [sp, #4]
 8005c84:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f10b 0b01 	add.w	fp, fp, #1
 8005c8e:	8a9b      	ldrh	r3, [r3, #20]
 8005c90:	fa1f fb8b 	uxth.w	fp, fp
 8005c94:	455b      	cmp	r3, fp
 8005c96:	f8a2 b016 	strh.w	fp, [r2, #22]
 8005c9a:	f63f af6c 	bhi.w	8005b76 <ai_platform_network_process+0x3a2>
 8005c9e:	e663      	b.n	8005968 <ai_platform_network_process+0x194>
 8005ca0:	2700      	movs	r7, #0
 8005ca2:	e761      	b.n	8005b68 <ai_platform_network_process+0x394>
 8005ca4:	461d      	mov	r5, r3
 8005ca6:	461f      	mov	r7, r3
 8005ca8:	e75e      	b.n	8005b68 <ai_platform_network_process+0x394>
 8005caa:	9c01      	ldr	r4, [sp, #4]
 8005cac:	2217      	movs	r2, #23
 8005cae:	f104 0010 	add.w	r0, r4, #16
 8005cb2:	2113      	movs	r1, #19
 8005cb4:	f000 f814 	bl	8005ce0 <core_set_error>
 8005cb8:	46bb      	mov	fp, r7
 8005cba:	e655      	b.n	8005968 <ai_platform_network_process+0x194>
 8005cbc:	f104 0010 	add.w	r0, r4, #16
 8005cc0:	2230      	movs	r2, #48	; 0x30
 8005cc2:	2111      	movs	r1, #17
 8005cc4:	f000 f80c 	bl	8005ce0 <core_set_error>
 8005cc8:	e64e      	b.n	8005968 <ai_platform_network_process+0x194>
 8005cca:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8005ccc:	e5c1      	b.n	8005852 <ai_platform_network_process+0x7e>
 8005cce:	bf00      	nop

08005cd0 <core_init>:
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	4770      	bx	lr

08005cd4 <core_get_error>:
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	6800      	ldr	r0, [r0, #0]
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop

08005ce0 <core_set_error>:
 8005ce0:	7803      	ldrb	r3, [r0, #0]
 8005ce2:	b933      	cbnz	r3, 8005cf2 <core_set_error+0x12>
 8005ce4:	7001      	strb	r1, [r0, #0]
 8005ce6:	6803      	ldr	r3, [r0, #0]
 8005ce8:	f362 231f 	bfi	r3, r2, #8, #24
 8005cec:	6003      	str	r3, [r0, #0]
 8005cee:	2001      	movs	r0, #1
 8005cf0:	4770      	bx	lr
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop

08005cf8 <func_dummy>:
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop

08005cfc <ai_dict8_dot_array_f32>:
 8005cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d00:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005d04:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8005d08:	f000 80c0 	beq.w	8005e8c <ai_dict8_dot_array_f32+0x190>
 8005d0c:	f101 0408 	add.w	r4, r1, #8
 8005d10:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005d14:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005e94 <ai_dict8_dot_array_f32+0x198>
 8005d18:	eb04 0e09 	add.w	lr, r4, r9
 8005d1c:	f103 0520 	add.w	r5, r3, #32
 8005d20:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8005d24:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8005d28:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 8005d2c:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8005d30:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8005d34:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8005d38:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 8005d3c:	ed55 3a04 	vldr	s7, [r5, #-16]
 8005d40:	ed55 4a03 	vldr	s9, [r5, #-12]
 8005d44:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005d48:	ed55 6a01 	vldr	s13, [r5, #-4]
 8005d4c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005d50:	edd6 7a00 	vldr	s15, [r6]
 8005d54:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8005d58:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005d5c:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005d60:	ed9a 3a00 	vldr	s6, [sl]
 8005d64:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 8005d68:	eee3 7a05 	vfma.f32	s15, s6, s10
 8005d6c:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005d70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005d74:	ed97 3a00 	vldr	s6, [r7]
 8005d78:	ed96 5a00 	vldr	s10, [r6]
 8005d7c:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 8005d80:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 8005d84:	eee3 7a04 	vfma.f32	s15, s6, s8
 8005d88:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005d8c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005d90:	ed9a 3a00 	vldr	s6, [sl]
 8005d94:	ed96 4a00 	vldr	s8, [r6]
 8005d98:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 8005d9c:	eee5 7a06 	vfma.f32	s15, s10, s12
 8005da0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005da4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005da8:	ed97 5a00 	vldr	s10, [r7]
 8005dac:	ed96 6a00 	vldr	s12, [r6]
 8005db0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005db4:	3408      	adds	r4, #8
 8005db6:	45a6      	cmp	lr, r4
 8005db8:	f105 0520 	add.w	r5, r5, #32
 8005dbc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005dc0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005dc4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005dc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dcc:	d1a8      	bne.n	8005d20 <ai_dict8_dot_array_f32+0x24>
 8005dce:	4449      	add	r1, r9
 8005dd0:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005dd4:	f01c 0c07 	ands.w	ip, ip, #7
 8005dd8:	d050      	beq.n	8005e7c <ai_dict8_dot_array_f32+0x180>
 8005dda:	780c      	ldrb	r4, [r1, #0]
 8005ddc:	edd3 6a00 	vldr	s13, [r3]
 8005de0:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005de4:	edd4 7a00 	vldr	s15, [r4]
 8005de8:	f1bc 0f01 	cmp.w	ip, #1
 8005dec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005df0:	d044      	beq.n	8005e7c <ai_dict8_dot_array_f32+0x180>
 8005df2:	784c      	ldrb	r4, [r1, #1]
 8005df4:	edd3 6a01 	vldr	s13, [r3, #4]
 8005df8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005dfc:	edd4 7a00 	vldr	s15, [r4]
 8005e00:	f1bc 0f02 	cmp.w	ip, #2
 8005e04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e08:	d038      	beq.n	8005e7c <ai_dict8_dot_array_f32+0x180>
 8005e0a:	788c      	ldrb	r4, [r1, #2]
 8005e0c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005e10:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005e14:	edd4 7a00 	vldr	s15, [r4]
 8005e18:	f1bc 0f03 	cmp.w	ip, #3
 8005e1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e20:	d02c      	beq.n	8005e7c <ai_dict8_dot_array_f32+0x180>
 8005e22:	78cc      	ldrb	r4, [r1, #3]
 8005e24:	edd3 6a03 	vldr	s13, [r3, #12]
 8005e28:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005e2c:	edd4 7a00 	vldr	s15, [r4]
 8005e30:	f1bc 0f04 	cmp.w	ip, #4
 8005e34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e38:	d020      	beq.n	8005e7c <ai_dict8_dot_array_f32+0x180>
 8005e3a:	790c      	ldrb	r4, [r1, #4]
 8005e3c:	edd3 6a04 	vldr	s13, [r3, #16]
 8005e40:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005e44:	edd4 7a00 	vldr	s15, [r4]
 8005e48:	f1bc 0f05 	cmp.w	ip, #5
 8005e4c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e50:	d014      	beq.n	8005e7c <ai_dict8_dot_array_f32+0x180>
 8005e52:	794c      	ldrb	r4, [r1, #5]
 8005e54:	edd3 6a05 	vldr	s13, [r3, #20]
 8005e58:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005e5c:	edd4 7a00 	vldr	s15, [r4]
 8005e60:	f1bc 0f06 	cmp.w	ip, #6
 8005e64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e68:	d008      	beq.n	8005e7c <ai_dict8_dot_array_f32+0x180>
 8005e6a:	7989      	ldrb	r1, [r1, #6]
 8005e6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8005e70:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005e74:	edd2 6a00 	vldr	s13, [r2]
 8005e78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005e7c:	edd0 7a00 	vldr	s15, [r0]
 8005e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e84:	ed80 7a00 	vstr	s14, [r0]
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005e94 <ai_dict8_dot_array_f32+0x198>
 8005e90:	e7a0      	b.n	8005dd4 <ai_dict8_dot_array_f32+0xd8>
 8005e92:	bf00      	nop
 8005e94:	00000000 	.word	0x00000000

08005e98 <ai_dict4_dot_array_f32>:
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005e9e:	f027 0c01 	bic.w	ip, r7, #1
 8005ea2:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 8005ea6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8005eaa:	f000 80ae 	beq.w	800600a <ai_dict4_dot_array_f32+0x172>
 8005eae:	1d0d      	adds	r5, r1, #4
 8005eb0:	ea4f 0988 	mov.w	r9, r8, lsl #2
 8005eb4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8006010 <ai_dict4_dot_array_f32+0x178>
 8005eb8:	eb05 0e09 	add.w	lr, r5, r9
 8005ebc:	f103 0420 	add.w	r4, r3, #32
 8005ec0:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8005ec4:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8005ec8:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 8005ecc:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8005ed0:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8005ed4:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8005ed8:	ed14 5a04 	vldr	s10, [r4, #-16]
 8005edc:	ed54 5a03 	vldr	s11, [r4, #-12]
 8005ee0:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005ee4:	ed54 6a01 	vldr	s13, [r4, #-4]
 8005ee8:	f006 0a0f 	and.w	sl, r6, #15
 8005eec:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005ef0:	edda 7a00 	vldr	s15, [sl]
 8005ef4:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8005ef8:	0936      	lsrs	r6, r6, #4
 8005efa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005efe:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005f02:	ed96 3a00 	vldr	s6, [r6]
 8005f06:	ea4f 161b 	mov.w	r6, fp, lsr #4
 8005f0a:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005f0e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005f12:	f00b 0b0f 	and.w	fp, fp, #15
 8005f16:	edd6 3a00 	vldr	s7, [r6]
 8005f1a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 8005f1e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005f22:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005f26:	3504      	adds	r5, #4
 8005f28:	ed9b 4a00 	vldr	s8, [fp]
 8005f2c:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8005f30:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005f34:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005f38:	f00a 0a0f 	and.w	sl, sl, #15
 8005f3c:	eddb 4a00 	vldr	s9, [fp]
 8005f40:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005f44:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005f48:	45ae      	cmp	lr, r5
 8005f4a:	ed9a 5a00 	vldr	s10, [sl]
 8005f4e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8005f52:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005f56:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005f5a:	f006 060f 	and.w	r6, r6, #15
 8005f5e:	edda 5a00 	vldr	s11, [sl]
 8005f62:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005f66:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005f6a:	f104 0420 	add.w	r4, r4, #32
 8005f6e:	ed96 6a00 	vldr	s12, [r6]
 8005f72:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005f76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f7a:	d1a1      	bne.n	8005ec0 <ai_dict4_dot_array_f32+0x28>
 8005f7c:	4449      	add	r1, r9
 8005f7e:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005f82:	459c      	cmp	ip, r3
 8005f84:	d92d      	bls.n	8005fe2 <ai_dict4_dot_array_f32+0x14a>
 8005f86:	f10c 0c07 	add.w	ip, ip, #7
 8005f8a:	f103 0508 	add.w	r5, r3, #8
 8005f8e:	ebac 0c05 	sub.w	ip, ip, r5
 8005f92:	f02c 0407 	bic.w	r4, ip, #7
 8005f96:	f103 0810 	add.w	r8, r3, #16
 8005f9a:	44a0      	add	r8, r4
 8005f9c:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 8005fa0:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8005fa4:	ed15 6a01 	vldr	s12, [r5, #-4]
 8005fa8:	ed55 6a02 	vldr	s13, [r5, #-8]
 8005fac:	f004 060f 	and.w	r6, r4, #15
 8005fb0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005fb4:	0924      	lsrs	r4, r4, #4
 8005fb6:	edd6 7a00 	vldr	s15, [r6]
 8005fba:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005fbe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005fc2:	ed94 6a00 	vldr	s12, [r4]
 8005fc6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005fca:	3508      	adds	r5, #8
 8005fcc:	45a8      	cmp	r8, r5
 8005fce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005fd2:	d1e5      	bne.n	8005fa0 <ai_dict4_dot_array_f32+0x108>
 8005fd4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005fd8:	f10c 0c01 	add.w	ip, ip, #1
 8005fdc:	4461      	add	r1, ip
 8005fde:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8005fe2:	07fc      	lsls	r4, r7, #31
 8005fe4:	d509      	bpl.n	8005ffa <ai_dict4_dot_array_f32+0x162>
 8005fe6:	7809      	ldrb	r1, [r1, #0]
 8005fe8:	edd3 7a00 	vldr	s15, [r3]
 8005fec:	090b      	lsrs	r3, r1, #4
 8005fee:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005ff2:	edd2 6a00 	vldr	s13, [r2]
 8005ff6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ffa:	edd0 7a00 	vldr	s15, [r0]
 8005ffe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006002:	ed80 7a00 	vstr	s14, [r0]
 8006006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800600a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8006010 <ai_dict4_dot_array_f32+0x178>
 800600e:	e7b8      	b.n	8005f82 <ai_dict4_dot_array_f32+0xea>
 8006010:	00000000 	.word	0x00000000

08006014 <ai_dict_decompress_f32>:
 8006014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006018:	9f08      	ldr	r7, [sp, #32]
 800601a:	2b04      	cmp	r3, #4
 800601c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8006020:	d00e      	beq.n	8006040 <ai_dict_decompress_f32+0x2c>
 8006022:	2b08      	cmp	r3, #8
 8006024:	d10a      	bne.n	800603c <ai_dict_decompress_f32+0x28>
 8006026:	42b8      	cmp	r0, r7
 8006028:	d208      	bcs.n	800603c <ai_dict_decompress_f32+0x28>
 800602a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800602e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f840 3b04 	str.w	r3, [r0], #4
 8006038:	4287      	cmp	r7, r0
 800603a:	d8f6      	bhi.n	800602a <ai_dict_decompress_f32+0x16>
 800603c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006040:	9b07      	ldr	r3, [sp, #28]
 8006042:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 8006046:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800604a:	f10c 38ff 	add.w	r8, ip, #4294967295	; 0xffffffff
 800604e:	f003 0e01 	and.w	lr, r3, #1
 8006052:	42b8      	cmp	r0, r7
 8006054:	d2f2      	bcs.n	800603c <ai_dict_decompress_f32+0x28>
 8006056:	f1bc 0f00 	cmp.w	ip, #0
 800605a:	d01a      	beq.n	8006092 <ai_dict_decompress_f32+0x7e>
 800605c:	f100 0508 	add.w	r5, r0, #8
 8006060:	1e4c      	subs	r4, r1, #1
 8006062:	eb01 0608 	add.w	r6, r1, r8
 8006066:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006070:	42a6      	cmp	r6, r4
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f845 3c08 	str.w	r3, [r5, #-8]
 8006078:	7823      	ldrb	r3, [r4, #0]
 800607a:	f003 030f 	and.w	r3, r3, #15
 800607e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006082:	f105 0508 	add.w	r5, r5, #8
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f845 3c0c 	str.w	r3, [r5, #-12]
 800608c:	d1eb      	bne.n	8006066 <ai_dict_decompress_f32+0x52>
 800608e:	4461      	add	r1, ip
 8006090:	4448      	add	r0, r9
 8006092:	f1be 0f00 	cmp.w	lr, #0
 8006096:	d103      	bne.n	80060a0 <ai_dict_decompress_f32+0x8c>
 8006098:	4287      	cmp	r7, r0
 800609a:	d8dc      	bhi.n	8006056 <ai_dict_decompress_f32+0x42>
 800609c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060a0:	780b      	ldrb	r3, [r1, #0]
 80060a2:	091b      	lsrs	r3, r3, #4
 80060a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80060a8:	3101      	adds	r1, #1
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6003      	str	r3, [r0, #0]
 80060ae:	3004      	adds	r0, #4
 80060b0:	e7cf      	b.n	8006052 <ai_dict_decompress_f32+0x3e>
 80060b2:	bf00      	nop

080060b4 <forward_conv2d_nl_pool>:
 80060b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b8:	ed2d 8b10 	vpush	{d8-d15}
 80060bc:	b0e1      	sub	sp, #388	; 0x184
 80060be:	6983      	ldr	r3, [r0, #24]
 80060c0:	881e      	ldrh	r6, [r3, #0]
 80060c2:	af0a      	add	r7, sp, #40	; 0x28
 80060c4:	2e00      	cmp	r6, #0
 80060c6:	f000 859b 	beq.w	8006c00 <forward_conv2d_nl_pool+0xb4c>
 80060ca:	6859      	ldr	r1, [r3, #4]
 80060cc:	684a      	ldr	r2, [r1, #4]
 80060ce:	2a00      	cmp	r2, #0
 80060d0:	f000 8593 	beq.w	8006bfa <forward_conv2d_nl_pool+0xb46>
 80060d4:	f8d2 c000 	ldr.w	ip, [r2]
 80060d8:	2e01      	cmp	r6, #1
 80060da:	f240 858b 	bls.w	8006bf4 <forward_conv2d_nl_pool+0xb40>
 80060de:	690a      	ldr	r2, [r1, #16]
 80060e0:	2a00      	cmp	r2, #0
 80060e2:	f000 8582 	beq.w	8006bea <forward_conv2d_nl_pool+0xb36>
 80060e6:	f8d2 9000 	ldr.w	r9, [r2]
 80060ea:	2e02      	cmp	r6, #2
 80060ec:	f000 8582 	beq.w	8006bf4 <forward_conv2d_nl_pool+0xb40>
 80060f0:	69cd      	ldr	r5, [r1, #28]
 80060f2:	2d00      	cmp	r5, #0
 80060f4:	f000 8571 	beq.w	8006bda <forward_conv2d_nl_pool+0xb26>
 80060f8:	682a      	ldr	r2, [r5, #0]
 80060fa:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80060fe:	f111 0218 	adds.w	r2, r1, #24
 8006102:	d004      	beq.n	800610e <forward_conv2d_nl_pool+0x5a>
 8006104:	8b0a      	ldrh	r2, [r1, #24]
 8006106:	2a01      	cmp	r2, #1
 8006108:	f240 857c 	bls.w	8006c04 <forward_conv2d_nl_pool+0xb50>
 800610c:	686a      	ldr	r2, [r5, #4]
 800610e:	68a9      	ldr	r1, [r5, #8]
 8006110:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006112:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8006116:	f8dc b018 	ldr.w	fp, [ip, #24]
 800611a:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 800611e:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8006122:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8006126:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800612a:	f8db 4008 	ldr.w	r4, [fp, #8]
 800612e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8006132:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006136:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 800613a:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 800613e:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8006142:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006146:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800614a:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800614e:	f8de 4004 	ldr.w	r4, [lr, #4]
 8006152:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 8006156:	f8de 400c 	ldr.w	r4, [lr, #12]
 800615a:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 800615e:	f8de 4008 	ldr.w	r4, [lr, #8]
 8006162:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8006166:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800616a:	6824      	ldr	r4, [r4, #0]
 800616c:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 8006170:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8006174:	6864      	ldr	r4, [r4, #4]
 8006176:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800617a:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800617e:	68a5      	ldr	r5, [r4, #8]
 8006180:	f8da 4004 	ldr.w	r4, [sl, #4]
 8006184:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8006188:	f8da 4008 	ldr.w	r4, [sl, #8]
 800618c:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8006190:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8006192:	6824      	ldr	r4, [r4, #0]
 8006194:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 8006198:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800619a:	6864      	ldr	r4, [r4, #4]
 800619c:	643c      	str	r4, [r7, #64]	; 0x40
 800619e:	f8dc 4008 	ldr.w	r4, [ip, #8]
 80061a2:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 80061a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80061a8:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80061ac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80061ae:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 80061b2:	69c4      	ldr	r4, [r0, #28]
 80061b4:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 80061b8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80061ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80061bc:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80061be:	647c      	str	r4, [r7, #68]	; 0x44
 80061c0:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80061c2:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 80061c6:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	f000 84f8 	beq.w	8006bc0 <forward_conv2d_nl_pool+0xb0c>
 80061d0:	6992      	ldr	r2, [r2, #24]
 80061d2:	6892      	ldr	r2, [r2, #8]
 80061d4:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80061d8:	4680      	mov	r8, r0
 80061da:	6a00      	ldr	r0, [r0, #32]
 80061dc:	2900      	cmp	r1, #0
 80061de:	f000 84e4 	beq.w	8006baa <forward_conv2d_nl_pool+0xaf6>
 80061e2:	698a      	ldr	r2, [r1, #24]
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	f000 8533 	beq.w	8006c50 <forward_conv2d_nl_pool+0xb9c>
 80061ea:	694b      	ldr	r3, [r1, #20]
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80061f2:	e9d2 0100 	ldrd	r0, r1, [r2]
 80061f6:	6893      	ldr	r3, [r2, #8]
 80061f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061fc:	f001 fdfc 	bl	8007df8 <ai_array_get_byte_size>
 8006200:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006204:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8006208:	881e      	ldrh	r6, [r3, #0]
 800620a:	f8d2 c018 	ldr.w	ip, [r2, #24]
 800620e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8006212:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 8006216:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006218:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 800621c:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8006220:	fa11 f585 	uxtah	r5, r1, r5
 8006224:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8006228:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800622c:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8006230:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8006234:	3901      	subs	r1, #1
 8006236:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 800623a:	eb05 0e00 	add.w	lr, r5, r0
 800623e:	fa1f f28a 	uxth.w	r2, sl
 8006242:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 8006246:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 800624a:	f8dc 4000 	ldr.w	r4, [ip]
 800624e:	f8dc 1000 	ldr.w	r1, [ip]
 8006252:	3a01      	subs	r2, #1
 8006254:	fb00 5002 	mla	r0, r0, r2, r5
 8006258:	fa1f f28b 	uxth.w	r2, fp
 800625c:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 8006260:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8006264:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8006268:	1e50      	subs	r0, r2, #1
 800626a:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800626e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8006272:	fa44 f101 	asr.w	r1, r4, r1
 8006276:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800627a:	f8dc 4000 	ldr.w	r4, [ip]
 800627e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8006282:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006286:	f3c4 4543 	ubfx	r5, r4, #17, #4
 800628a:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 800628e:	ebae 0202 	sub.w	r2, lr, r2
 8006292:	fa1f fe81 	uxth.w	lr, r1
 8006296:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800629a:	fbb2 f2f1 	udiv	r2, r2, r1
 800629e:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 80062a2:	3c01      	subs	r4, #1
 80062a4:	fb04 1100 	mla	r1, r4, r0, r1
 80062a8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80062ac:	1c51      	adds	r1, r2, #1
 80062ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80062b2:	487c      	ldr	r0, [pc, #496]	; (80064a4 <forward_conv2d_nl_pool+0x3f0>)
 80062b4:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80062b8:	4611      	mov	r1, r2
 80062ba:	2a00      	cmp	r2, #0
 80062bc:	bf08      	it	eq
 80062be:	4601      	moveq	r1, r0
 80062c0:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 80062c4:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80062c8:	2d04      	cmp	r5, #4
 80062ca:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80062ce:	f000 849e 	beq.w	8006c0e <forward_conv2d_nl_pool+0xb5a>
 80062d2:	2d08      	cmp	r5, #8
 80062d4:	f000 849b 	beq.w	8006c0e <forward_conv2d_nl_pool+0xb5a>
 80062d8:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80062dc:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80062e0:	2e03      	cmp	r6, #3
 80062e2:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 80062e6:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80062ea:	f240 8483 	bls.w	8006bf4 <forward_conv2d_nl_pool+0xb40>
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 8489 	beq.w	8006c0a <forward_conv2d_nl_pool+0xb56>
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8006306:	6899      	ldr	r1, [r3, #8]
 8006308:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800630c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8006310:	6896      	ldr	r6, [r2, #8]
 8006312:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 8006316:	4249      	negs	r1, r1
 8006318:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800631c:	2800      	cmp	r0, #0
 800631e:	f000 82dd 	beq.w	80068dc <forward_conv2d_nl_pool+0x828>
 8006322:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006326:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800632a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800632e:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 8006332:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 80064a8 <forward_conv2d_nl_pool+0x3f4>
 8006336:	fb03 f200 	mul.w	r2, r3, r0
 800633a:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 800633e:	008c      	lsls	r4, r1, #2
 8006340:	fb04 f000 	mul.w	r0, r4, r0
 8006344:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8006348:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800634c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8006350:	fb01 fc02 	mul.w	ip, r1, r2
 8006354:	00a2      	lsls	r2, r4, #2
 8006356:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 800635a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800635e:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8006362:	00ab      	lsls	r3, r5, #2
 8006364:	4694      	mov	ip, r2
 8006366:	fb0c f204 	mul.w	r2, ip, r4
 800636a:	fb04 f303 	mul.w	r3, r4, r3
 800636e:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8006372:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8006376:	00a4      	lsls	r4, r4, #2
 8006378:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800637c:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8006380:	f04f 0c00 	mov.w	ip, #0
 8006384:	fa0f f58b 	sxth.w	r5, fp
 8006388:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 800638c:	46a4      	mov	ip, r4
 800638e:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 8006392:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 8006396:	fa0f f58a 	sxth.w	r5, sl
 800639a:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 800639e:	fb0c fc04 	mul.w	ip, ip, r4
 80063a2:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 80063a6:	fb06 fc03 	mul.w	ip, r6, r3
 80063aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063ae:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 80063b2:	4240      	negs	r0, r0
 80063b4:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 80063b8:	469c      	mov	ip, r3
 80063ba:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 80063be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063c2:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 80063c6:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 80063ca:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 80063ce:	fb00 f303 	mul.w	r3, r0, r3
 80063d2:	460d      	mov	r5, r1
 80063d4:	fb0c fc04 	mul.w	ip, ip, r4
 80063d8:	627b      	str	r3, [r7, #36]	; 0x24
 80063da:	fb04 f305 	mul.w	r3, r4, r5
 80063de:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 80063e2:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 80063e6:	623b      	str	r3, [r7, #32]
 80063e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ec:	46a6      	mov	lr, r4
 80063ee:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80063f2:	fb05 f503 	mul.w	r5, r5, r3
 80063f6:	667d      	str	r5, [r7, #100]	; 0x64
 80063f8:	4625      	mov	r5, r4
 80063fa:	fb05 f503 	mul.w	r5, r5, r3
 80063fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006402:	66bd      	str	r5, [r7, #104]	; 0x68
 8006404:	fb00 f101 	mul.w	r1, r0, r1
 8006408:	fb03 f306 	mul.w	r3, r3, r6
 800640c:	657b      	str	r3, [r7, #84]	; 0x54
 800640e:	008b      	lsls	r3, r1, #2
 8006410:	633b      	str	r3, [r7, #48]	; 0x30
 8006412:	0093      	lsls	r3, r2, #2
 8006414:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006416:	0083      	lsls	r3, r0, #2
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800641e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8006422:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006426:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 800642a:	2400      	movs	r4, #0
 800642c:	63bb      	str	r3, [r7, #56]	; 0x38
 800642e:	4603      	mov	r3, r0
 8006430:	fb03 f301 	mul.w	r3, r3, r1
 8006434:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8006438:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800643c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006440:	00d1      	lsls	r1, r2, #3
 8006442:	0113      	lsls	r3, r2, #4
 8006444:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8006448:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800644c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8006450:	fb00 f004 	mul.w	r0, r0, r4
 8006454:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8006458:	66f8      	str	r0, [r7, #108]	; 0x6c
 800645a:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800645e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8006462:	469a      	mov	sl, r3
 8006464:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006468:	2b00      	cmp	r3, #0
 800646a:	f340 81d0 	ble.w	800680e <forward_conv2d_nl_pool+0x75a>
 800646e:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 8006472:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006476:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800647a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800647e:	2900      	cmp	r1, #0
 8006480:	441a      	add	r2, r3
 8006482:	bfb4      	ite	lt
 8006484:	2100      	movlt	r1, #0
 8006486:	2300      	movge	r3, #0
 8006488:	4282      	cmp	r2, r0
 800648a:	bf28      	it	cs
 800648c:	4602      	movcs	r2, r0
 800648e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8006492:	2801      	cmp	r0, #1
 8006494:	f000 83f6 	beq.w	8006c84 <forward_conv2d_nl_pool+0xbd0>
 8006498:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800649c:	4281      	cmp	r1, r0
 800649e:	f000 822a 	beq.w	80068f6 <forward_conv2d_nl_pool+0x842>
 80064a2:	e003      	b.n	80064ac <forward_conv2d_nl_pool+0x3f8>
 80064a4:	08005cf9 	.word	0x08005cf9
 80064a8:	00000000 	.word	0x00000000
 80064ac:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80064b0:	2900      	cmp	r1, #0
 80064b2:	f000 819f 	beq.w	80067f4 <forward_conv2d_nl_pool+0x740>
 80064b6:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80064ba:	fb93 f1f0 	sdiv	r1, r3, r0
 80064be:	fb00 3111 	mls	r1, r0, r1, r3
 80064c2:	1a41      	subs	r1, r0, r1
 80064c4:	1ad2      	subs	r2, r2, r3
 80064c6:	fb91 f5f0 	sdiv	r5, r1, r0
 80064ca:	fb00 1515 	mls	r5, r0, r5, r1
 80064ce:	1b52      	subs	r2, r2, r5
 80064d0:	4601      	mov	r1, r0
 80064d2:	4402      	add	r2, r0
 80064d4:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80064d8:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 80064dc:	4604      	mov	r4, r0
 80064de:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80064e2:	fbb4 f4f0 	udiv	r4, r4, r0
 80064e6:	6a38      	ldr	r0, [r7, #32]
 80064e8:	3a01      	subs	r2, #1
 80064ea:	fb92 f8f1 	sdiv	r8, r2, r1
 80064ee:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80064f2:	eba0 0c04 	sub.w	ip, r0, r4
 80064f6:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80064fa:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80064fe:	4614      	mov	r4, r2
 8006500:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006504:	fbb4 f2f2 	udiv	r2, r4, r2
 8006508:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800650c:	663a      	str	r2, [r7, #96]	; 0x60
 800650e:	441d      	add	r5, r3
 8006510:	fb0e f000 	mul.w	r0, lr, r0
 8006514:	440b      	add	r3, r1
 8006516:	eba6 0608 	sub.w	r6, r6, r8
 800651a:	fb04 f505 	mul.w	r5, r4, r5
 800651e:	3b01      	subs	r3, #1
 8006520:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 8006524:	fb93 f3f4 	sdiv	r3, r3, r4
 8006528:	fb00 f406 	mul.w	r4, r0, r6
 800652c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8006530:	677d      	str	r5, [r7, #116]	; 0x74
 8006532:	0091      	lsls	r1, r2, #2
 8006534:	fb00 f003 	mul.w	r0, r0, r3
 8006538:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800653c:	65f8      	str	r0, [r7, #92]	; 0x5c
 800653e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006542:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 8006546:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 800654a:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800654e:	1ac3      	subs	r3, r0, r3
 8006550:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8006554:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006558:	008b      	lsls	r3, r1, #2
 800655a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800655c:	00d3      	lsls	r3, r2, #3
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006568:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800656c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006570:	2300      	movs	r3, #0
 8006572:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 8006576:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800657a:	67bb      	str	r3, [r7, #120]	; 0x78
 800657c:	46c2      	mov	sl, r8
 800657e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006582:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8006586:	eb03 0c02 	add.w	ip, r3, r2
 800658a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800658e:	2b00      	cmp	r3, #0
 8006590:	f2c0 811c 	blt.w	80067cc <forward_conv2d_nl_pool+0x718>
 8006594:	2000      	movs	r0, #0
 8006596:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8006598:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 800659c:	4605      	mov	r5, r0
 800659e:	4606      	mov	r6, r0
 80065a0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065a4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80065a8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 80065ac:	4413      	add	r3, r2
 80065ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065b2:	440a      	add	r2, r1
 80065b4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80065b8:	428b      	cmp	r3, r1
 80065ba:	bf94      	ite	ls
 80065bc:	ebc6 0303 	rsbls	r3, r6, r3
 80065c0:	ebc6 0301 	rsbhi	r3, r6, r1
 80065c4:	4415      	add	r5, r2
 80065c6:	1a1b      	subs	r3, r3, r0
 80065c8:	00a4      	lsls	r4, r4, #2
 80065ca:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80065ce:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 80065d2:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80065d6:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 80065d8:	4602      	mov	r2, r0
 80065da:	2800      	cmp	r0, #0
 80065dc:	bf08      	it	eq
 80065de:	4662      	moveq	r2, ip
 80065e0:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80065e4:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80065e8:	fb91 f1f0 	sdiv	r1, r1, r0
 80065ec:	4429      	add	r1, r5
 80065ee:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 80065f2:	fb0e 5501 	mla	r5, lr, r1, r5
 80065f6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80065fa:	4403      	add	r3, r0
 80065fc:	fb01 6104 	mla	r1, r1, r4, r6
 8006600:	3b01      	subs	r3, #1
 8006602:	fb93 f6f0 	sdiv	r6, r3, r0
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800660c:	fb06 3110 	mls	r1, r6, r0, r3
 8006610:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006614:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8006618:	4562      	cmp	r2, ip
 800661a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800661e:	bf08      	it	eq
 8006620:	eeb0 6a48 	vmoveq.f32	s12, s16
 8006624:	1b9b      	subs	r3, r3, r6
 8006626:	2800      	cmp	r0, #0
 8006628:	d070      	beq.n	800670c <forward_conv2d_nl_pool+0x658>
 800662a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800662e:	fb0e f803 	mul.w	r8, lr, r3
 8006632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006634:	fb00 fb01 	mul.w	fp, r0, r1
 8006638:	2b00      	cmp	r3, #0
 800663a:	d067      	beq.n	800670c <forward_conv2d_nl_pool+0x658>
 800663c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006640:	18d3      	adds	r3, r2, r3
 8006642:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006646:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800664a:	1a9b      	subs	r3, r3, r2
 800664c:	62bb      	str	r3, [r7, #40]	; 0x28
 800664e:	2300      	movs	r3, #0
 8006650:	673b      	str	r3, [r7, #112]	; 0x70
 8006652:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	4413      	add	r3, r2
 800665a:	65bb      	str	r3, [r7, #88]	; 0x58
 800665c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	4413      	add	r3, r2
 8006664:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8006668:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800666c:	ecf3 7a01 	vldmia	r3!, {s15}
 8006670:	f1ba 0f00 	cmp.w	sl, #0
 8006674:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006678:	ee67 7a86 	vmul.f32	s15, s15, s12
 800667c:	f340 80a4 	ble.w	80067c8 <forward_conv2d_nl_pool+0x714>
 8006680:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8006684:	f04f 0c00 	mov.w	ip, #0
 8006688:	2e00      	cmp	r6, #0
 800668a:	dd19      	ble.n	80066c0 <forward_conv2d_nl_pool+0x60c>
 800668c:	2100      	movs	r1, #0
 800668e:	eb00 040e 	add.w	r4, r0, lr
 8006692:	4284      	cmp	r4, r0
 8006694:	d910      	bls.n	80066b8 <forward_conv2d_nl_pool+0x604>
 8006696:	4603      	mov	r3, r0
 8006698:	462a      	mov	r2, r5
 800669a:	ecb3 7a01 	vldmia	r3!, {s14}
 800669e:	ecf2 6a01 	vldmia	r2!, {s13}
 80066a2:	429c      	cmp	r4, r3
 80066a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80066a8:	d8f7      	bhi.n	800669a <forward_conv2d_nl_pool+0x5e6>
 80066aa:	43c3      	mvns	r3, r0
 80066ac:	441c      	add	r4, r3
 80066ae:	f024 0403 	bic.w	r4, r4, #3
 80066b2:	3404      	adds	r4, #4
 80066b4:	4425      	add	r5, r4
 80066b6:	4420      	add	r0, r4
 80066b8:	3101      	adds	r1, #1
 80066ba:	428e      	cmp	r6, r1
 80066bc:	4448      	add	r0, r9
 80066be:	d1e6      	bne.n	800668e <forward_conv2d_nl_pool+0x5da>
 80066c0:	f10c 0c01 	add.w	ip, ip, #1
 80066c4:	45e2      	cmp	sl, ip
 80066c6:	4458      	add	r0, fp
 80066c8:	4445      	add	r5, r8
 80066ca:	d1dd      	bne.n	8006688 <forward_conv2d_nl_pool+0x5d4>
 80066cc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80066d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066d4:	441d      	add	r5, r3
 80066d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80066da:	ece3 7a01 	vstmia	r3!, {s15}
 80066de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d1be      	bne.n	8006668 <forward_conv2d_nl_pool+0x5b4>
 80066ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80066ee:	69f9      	ldr	r1, [r7, #28]
 80066f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066f2:	4472      	add	r2, lr
 80066f4:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80066f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066fa:	1a52      	subs	r2, r2, r1
 80066fc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006700:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006704:	3301      	adds	r3, #1
 8006706:	429a      	cmp	r2, r3
 8006708:	673b      	str	r3, [r7, #112]	; 0x70
 800670a:	d1a2      	bne.n	8006652 <forward_conv2d_nl_pool+0x59e>
 800670c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006710:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006716:	4608      	mov	r0, r1
 8006718:	4410      	add	r0, r2
 800671a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800671e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8006722:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8006726:	4401      	add	r1, r0
 8006728:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 800672c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006730:	1a8a      	subs	r2, r1, r2
 8006732:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8006736:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800673a:	3301      	adds	r3, #1
 800673c:	429a      	cmp	r2, r3
 800673e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006740:	f47f af1d 	bne.w	800657e <forward_conv2d_nl_pool+0x4ca>
 8006744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006748:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800674c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	2a00      	cmp	r2, #0
 8006754:	f000 8210 	beq.w	8006b78 <forward_conv2d_nl_pool+0xac4>
 8006758:	2400      	movs	r4, #0
 800675a:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 800675e:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 8006762:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 8006766:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 800676a:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 800676e:	609e      	str	r6, [r3, #8]
 8006770:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006774:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8006778:	462b      	mov	r3, r5
 800677a:	4641      	mov	r1, r8
 800677c:	4640      	mov	r0, r8
 800677e:	47a0      	blx	r4
 8006780:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006784:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8006788:	6859      	ldr	r1, [r3, #4]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8006790:	4405      	add	r5, r0
 8006792:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8006796:	0089      	lsls	r1, r1, #2
 8006798:	4406      	add	r6, r0
 800679a:	eba5 0c09 	sub.w	ip, r5, r9
 800679e:	1850      	adds	r0, r2, r1
 80067a0:	45a4      	cmp	ip, r4
 80067a2:	bfa8      	it	ge
 80067a4:	464d      	movge	r5, r9
 80067a6:	4286      	cmp	r6, r0
 80067a8:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 80067ac:	bf28      	it	cs
 80067ae:	1a76      	subcs	r6, r6, r1
 80067b0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80067b4:	3001      	adds	r0, #1
 80067b6:	4281      	cmp	r1, r0
 80067b8:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 80067bc:	d1d7      	bne.n	800676e <forward_conv2d_nl_pool+0x6ba>
 80067be:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 80067c2:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 80067c6:	e019      	b.n	80067fc <forward_conv2d_nl_pool+0x748>
 80067c8:	461a      	mov	r2, r3
 80067ca:	e781      	b.n	80066d0 <forward_conv2d_nl_pool+0x61c>
 80067cc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80067d0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80067d4:	fb90 f3f2 	sdiv	r3, r0, r2
 80067d8:	fb02 0313 	mls	r3, r2, r3, r0
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	4605      	mov	r5, r0
 80067e0:	fb93 f0f2 	sdiv	r0, r3, r2
 80067e4:	fb02 3010 	mls	r0, r2, r0, r3
 80067e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ea:	462e      	mov	r6, r5
 80067ec:	18c4      	adds	r4, r0, r3
 80067ee:	eb02 0805 	add.w	r8, r2, r5
 80067f2:	e6d5      	b.n	80065a0 <forward_conv2d_nl_pool+0x4ec>
 80067f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	609a      	str	r2, [r3, #8]
 80067fe:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8006802:	3301      	adds	r3, #1
 8006804:	b21b      	sxth	r3, r3
 8006806:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800680a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800680e:	3b01      	subs	r3, #1
 8006810:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006814:	f100 83bf 	bmi.w	8006f96 <forward_conv2d_nl_pool+0xee2>
 8006818:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800681c:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8006820:	42a3      	cmp	r3, r4
 8006822:	f200 839d 	bhi.w	8006f60 <forward_conv2d_nl_pool+0xeac>
 8006826:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800682a:	b29b      	uxth	r3, r3
 800682c:	6990      	ldr	r0, [r2, #24]
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006834:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8006838:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	fa1f f188 	uxth.w	r1, r8
 8006842:	b29a      	uxth	r2, r3
 8006844:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006848:	9308      	str	r3, [sp, #32]
 800684a:	9105      	str	r1, [sp, #20]
 800684c:	2601      	movs	r6, #1
 800684e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006852:	9607      	str	r6, [sp, #28]
 8006854:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8006858:	9506      	str	r5, [sp, #24]
 800685a:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 800685e:	9304      	str	r3, [sp, #16]
 8006860:	1a64      	subs	r4, r4, r1
 8006862:	b2b1      	uxth	r1, r6
 8006864:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	e9cd 5102 	strd	r5, r1, [sp, #8]
 800686e:	b224      	sxth	r4, r4
 8006870:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 8006874:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8006878:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800687c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800687e:	47a0      	blx	r4
 8006880:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8006884:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8006888:	688a      	ldr	r2, [r1, #8]
 800688a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800688c:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8006890:	fa0f f388 	sxth.w	r3, r8
 8006894:	1af3      	subs	r3, r6, r3
 8006896:	4422      	add	r2, r4
 8006898:	462e      	mov	r6, r5
 800689a:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800689e:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 80068a2:	608a      	str	r2, [r1, #8]
 80068a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80068a8:	4426      	add	r6, r4
 80068aa:	b21b      	sxth	r3, r3
 80068ac:	1b2c      	subs	r4, r5, r4
 80068ae:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 80068b2:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 80068b4:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80068b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80068bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80068c0:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 80068c4:	3001      	adds	r0, #1
 80068c6:	442c      	add	r4, r5
 80068c8:	4283      	cmp	r3, r0
 80068ca:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 80068ce:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 80068d2:	f63f adc7 	bhi.w	8006464 <forward_conv2d_nl_pool+0x3b0>
 80068d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	609a      	str	r2, [r3, #8]
 80068e0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068e4:	68d3      	ldr	r3, [r2, #12]
 80068e6:	6093      	str	r3, [r2, #8]
 80068e8:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80068ec:	46bd      	mov	sp, r7
 80068ee:	ecbd 8b10 	vpop	{d8-d15}
 80068f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068f8:	2901      	cmp	r1, #1
 80068fa:	f47f add7 	bne.w	80064ac <forward_conv2d_nl_pool+0x3f8>
 80068fe:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8006902:	2900      	cmp	r1, #0
 8006904:	f43f af76 	beq.w	80067f4 <forward_conv2d_nl_pool+0x740>
 8006908:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800690c:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 8006910:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006914:	1ad2      	subs	r2, r2, r3
 8006916:	1a8c      	subs	r4, r1, r2
 8006918:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800691c:	00b2      	lsls	r2, r6, #2
 800691e:	fb02 f204 	mul.w	r2, r2, r4
 8006922:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8006926:	fbb1 f1f0 	udiv	r1, r1, r0
 800692a:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 800692e:	460d      	mov	r5, r1
 8006930:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006932:	62ba      	str	r2, [r7, #40]	; 0x28
 8006934:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8006938:	0082      	lsls	r2, r0, #2
 800693a:	65ba      	str	r2, [r7, #88]	; 0x58
 800693c:	00ca      	lsls	r2, r1, #3
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	00aa      	lsls	r2, r5, #2
 8006942:	60ba      	str	r2, [r7, #8]
 8006944:	fb03 f206 	mul.w	r2, r3, r6
 8006948:	67ba      	str	r2, [r7, #120]	; 0x78
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	fb02 f303 	mul.w	r3, r2, r3
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006956:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800695a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800695e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006962:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006966:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800696a:	2300      	movs	r3, #0
 800696c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006974:	2b00      	cmp	r3, #0
 8006976:	f2c0 8112 	blt.w	8006b9e <forward_conv2d_nl_pool+0xaea>
 800697a:	2100      	movs	r1, #0
 800697c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800697e:	460a      	mov	r2, r1
 8006980:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8006984:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8006988:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 800698c:	4420      	add	r0, r4
 800698e:	4408      	add	r0, r1
 8006990:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8006994:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8006998:	190c      	adds	r4, r1, r4
 800699a:	42ac      	cmp	r4, r5
 800699c:	bf28      	it	cs
 800699e:	462c      	movcs	r4, r5
 80069a0:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 80069a4:	0080      	lsls	r0, r0, #2
 80069a6:	1aa4      	subs	r4, r4, r2
 80069a8:	2d00      	cmp	r5, #0
 80069aa:	f000 80e9 	beq.w	8006b80 <forward_conv2d_nl_pool+0xacc>
 80069ae:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80069b2:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 80069b6:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80069ba:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80069be:	42b5      	cmp	r5, r6
 80069c0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 80069c4:	eba3 0204 	sub.w	r2, r3, r4
 80069c8:	eba1 0104 	sub.w	r1, r1, r4
 80069cc:	bf08      	it	eq
 80069ce:	eef0 3a48 	vmoveq.f32	s7, s16
 80069d2:	462b      	mov	r3, r5
 80069d4:	697d      	ldr	r5, [r7, #20]
 80069d6:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 80069da:	4428      	add	r0, r5
 80069dc:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 80069e0:	fb05 6e00 	mla	lr, r5, r0, r6
 80069e4:	eb0e 000b 	add.w	r0, lr, fp
 80069e8:	4586      	cmp	lr, r0
 80069ea:	61f8      	str	r0, [r7, #28]
 80069ec:	f080 80a5 	bcs.w	8006b3a <forward_conv2d_nl_pool+0xa86>
 80069f0:	0092      	lsls	r2, r2, #2
 80069f2:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80069f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069f8:	fb01 f10b 	mul.w	r1, r1, fp
 80069fc:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8006a00:	f024 0803 	bic.w	r8, r4, #3
 8006a04:	2a00      	cmp	r2, #0
 8006a06:	f000 8098 	beq.w	8006b3a <forward_conv2d_nl_pool+0xa86>
 8006a0a:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8006a0e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006a10:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006a14:	0892      	lsrs	r2, r2, #2
 8006a16:	3201      	adds	r2, #1
 8006a18:	4401      	add	r1, r0
 8006a1a:	fb02 f00a 	mul.w	r0, r2, sl
 8006a1e:	6638      	str	r0, [r7, #96]	; 0x60
 8006a20:	0110      	lsls	r0, r2, #4
 8006a22:	0092      	lsls	r2, r2, #2
 8006a24:	65fa      	str	r2, [r7, #92]	; 0x5c
 8006a26:	1aca      	subs	r2, r1, r3
 8006a28:	613a      	str	r2, [r7, #16]
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	6738      	str	r0, [r7, #112]	; 0x70
 8006a2e:	4413      	add	r3, r2
 8006a30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a34:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a3a:	4413      	add	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	4413      	add	r3, r2
 8006a46:	677b      	str	r3, [r7, #116]	; 0x74
 8006a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a4c:	ecf3 6a01 	vldmia	r3!, {s13}
 8006a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8006a5e:	dd57      	ble.n	8006b10 <forward_conv2d_nl_pool+0xa5c>
 8006a60:	4676      	mov	r6, lr
 8006a62:	f04f 0c00 	mov.w	ip, #0
 8006a66:	f1b8 0f00 	cmp.w	r8, #0
 8006a6a:	f340 8087 	ble.w	8006b7c <forward_conv2d_nl_pool+0xac8>
 8006a6e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8006a72:	f109 0310 	add.w	r3, r9, #16
 8006a76:	18b1      	adds	r1, r6, r2
 8006a78:	2000      	movs	r0, #0
 8006a7a:	4632      	mov	r2, r6
 8006a7c:	eb02 050b 	add.w	r5, r2, fp
 8006a80:	ed95 7a00 	vldr	s14, [r5]
 8006a84:	ed53 7a03 	vldr	s15, [r3, #-12]
 8006a88:	ed92 4a00 	vldr	s8, [r2]
 8006a8c:	ed53 4a04 	vldr	s9, [r3, #-16]
 8006a90:	ed91 5a00 	vldr	s10, [r1]
 8006a94:	ed53 5a02 	vldr	s11, [r3, #-8]
 8006a98:	ed13 6a01 	vldr	s12, [r3, #-4]
 8006a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aa0:	eb01 050b 	add.w	r5, r1, fp
 8006aa4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006aa8:	3004      	adds	r0, #4
 8006aaa:	4540      	cmp	r0, r8
 8006aac:	ed95 7a00 	vldr	s14, [r5]
 8006ab0:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006ab4:	4452      	add	r2, sl
 8006ab6:	4451      	add	r1, sl
 8006ab8:	f103 0310 	add.w	r3, r3, #16
 8006abc:	eee7 7a06 	vfma.f32	s15, s14, s12
 8006ac0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006ac4:	dbda      	blt.n	8006a7c <forward_conv2d_nl_pool+0x9c8>
 8006ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ac8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006aca:	441e      	add	r6, r3
 8006acc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ace:	4499      	add	r9, r3
 8006ad0:	42a0      	cmp	r0, r4
 8006ad2:	da11      	bge.n	8006af8 <forward_conv2d_nl_pool+0xa44>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	4633      	mov	r3, r6
 8006ad8:	4649      	mov	r1, r9
 8006ada:	edd3 7a00 	vldr	s15, [r3]
 8006ade:	ecb1 7a01 	vldmia	r1!, {s14}
 8006ae2:	3201      	adds	r2, #1
 8006ae4:	42a2      	cmp	r2, r4
 8006ae6:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006aea:	445b      	add	r3, fp
 8006aec:	d1f5      	bne.n	8006ada <forward_conv2d_nl_pool+0xa26>
 8006aee:	1a20      	subs	r0, r4, r0
 8006af0:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8006af4:	fb00 660b 	mla	r6, r0, fp, r6
 8006af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006afc:	441e      	add	r6, r3
 8006afe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b02:	4499      	add	r9, r3
 8006b04:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006b08:	f10c 0c01 	add.w	ip, ip, #1
 8006b0c:	4563      	cmp	r3, ip
 8006b0e:	d1aa      	bne.n	8006a66 <forward_conv2d_nl_pool+0x9b2>
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	4499      	add	r9, r3
 8006b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b16:	ece3 6a01 	vstmia	r3!, {s13}
 8006b1a:	677b      	str	r3, [r7, #116]	; 0x74
 8006b1c:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d191      	bne.n	8006a48 <forward_conv2d_nl_pool+0x994>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	1a9b      	subs	r3, r3, r2
 8006b2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	f10e 0e04 	add.w	lr, lr, #4
 8006b34:	459e      	cmp	lr, r3
 8006b36:	f4ff af7d 	bcc.w	8006a34 <forward_conv2d_nl_pool+0x980>
 8006b3a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8006b3e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8006b42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b46:	440a      	add	r2, r1
 8006b48:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8006b4c:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8006b50:	4608      	mov	r0, r1
 8006b52:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006b56:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8006b5a:	4410      	add	r0, r2
 8006b5c:	1a8a      	subs	r2, r1, r2
 8006b5e:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006b62:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8006b66:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b72:	f47f aefd 	bne.w	8006970 <forward_conv2d_nl_pool+0x8bc>
 8006b76:	e5e7      	b.n	8006748 <forward_conv2d_nl_pool+0x694>
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	e63f      	b.n	80067fc <forward_conv2d_nl_pool+0x748>
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	e7a7      	b.n	8006ad0 <forward_conv2d_nl_pool+0xa1c>
 8006b80:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006b84:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8006b88:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006b8c:	1b19      	subs	r1, r3, r4
 8006b8e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8006b92:	eef0 3a48 	vmov.f32	s7, s16
 8006b96:	1b1a      	subs	r2, r3, r4
 8006b98:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8006b9c:	e71a      	b.n	80069d4 <forward_conv2d_nl_pool+0x920>
 8006b9e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8006ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ba4:	460a      	mov	r2, r1
 8006ba6:	440b      	add	r3, r1
 8006ba8:	e6ea      	b.n	8006980 <forward_conv2d_nl_pool+0x8cc>
 8006baa:	b168      	cbz	r0, 8006bc8 <forward_conv2d_nl_pool+0xb14>
 8006bac:	6882      	ldr	r2, [r0, #8]
 8006bae:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8006bb8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006bbc:	f7ff bb29 	b.w	8006212 <forward_conv2d_nl_pool+0x15e>
 8006bc0:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8006bc4:	f7ff bb08 	b.w	80061d8 <forward_conv2d_nl_pool+0x124>
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8006bce:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8006bd2:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006bd6:	f7ff bb1c 	b.w	8006212 <forward_conv2d_nl_pool+0x15e>
 8006bda:	3118      	adds	r1, #24
 8006bdc:	d008      	beq.n	8006bf0 <forward_conv2d_nl_pool+0xb3c>
 8006bde:	462a      	mov	r2, r5
 8006be0:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 8006be4:	4629      	mov	r1, r5
 8006be6:	f7ff ba93 	b.w	8006110 <forward_conv2d_nl_pool+0x5c>
 8006bea:	4691      	mov	r9, r2
 8006bec:	f7ff ba7d 	b.w	80060ea <forward_conv2d_nl_pool+0x36>
 8006bf0:	68cb      	ldr	r3, [r1, #12]
 8006bf2:	deff      	udf	#255	; 0xff
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	deff      	udf	#255	; 0xff
 8006bfa:	4694      	mov	ip, r2
 8006bfc:	f7ff ba6c 	b.w	80060d8 <forward_conv2d_nl_pool+0x24>
 8006c00:	6873      	ldr	r3, [r6, #4]
 8006c02:	deff      	udf	#255	; 0xff
 8006c04:	2200      	movs	r2, #0
 8006c06:	f7ff ba82 	b.w	800610e <forward_conv2d_nl_pool+0x5a>
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	deff      	udf	#255	; 0xff
 8006c0e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	f43f ab60 	beq.w	80062d8 <forward_conv2d_nl_pool+0x224>
 8006c18:	2e03      	cmp	r6, #3
 8006c1a:	d9eb      	bls.n	8006bf4 <forward_conv2d_nl_pool+0xb40>
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c20:	b323      	cbz	r3, 8006c6c <forward_conv2d_nl_pool+0xbb8>
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	b313      	cbz	r3, 8006c6c <forward_conv2d_nl_pool+0xbb8>
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8006c2c:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8006c36:	9000      	str	r0, [sp, #0]
 8006c38:	4673      	mov	r3, lr
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f7ff f9ea 	bl	8006014 <ai_dict_decompress_f32>
 8006c40:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8006c44:	b17c      	cbz	r4, 8006c66 <forward_conv2d_nl_pool+0xbb2>
 8006c46:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8006c4a:	881e      	ldrh	r6, [r3, #0]
 8006c4c:	f7ff bb44 	b.w	80062d8 <forward_conv2d_nl_pool+0x224>
 8006c50:	b178      	cbz	r0, 8006c72 <forward_conv2d_nl_pool+0xbbe>
 8006c52:	6881      	ldr	r1, [r0, #8]
 8006c54:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8006c5e:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006c62:	f7ff bad6 	b.w	8006212 <forward_conv2d_nl_pool+0x15e>
 8006c66:	881e      	ldrh	r6, [r3, #0]
 8006c68:	f7ff bb36 	b.w	80062d8 <forward_conv2d_nl_pool+0x224>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	deff      	udf	#255	; 0xff
 8006c72:	2201      	movs	r2, #1
 8006c74:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8006c78:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8006c7c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8006c80:	f7ff bac7 	b.w	8006212 <forward_conv2d_nl_pool+0x15e>
 8006c84:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8006c86:	2801      	cmp	r0, #1
 8006c88:	f47f ac10 	bne.w	80064ac <forward_conv2d_nl_pool+0x3f8>
 8006c8c:	1ad2      	subs	r2, r2, r3
 8006c8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c90:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8006c94:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8006c98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c9a:	fb00 4101 	mla	r1, r0, r1, r4
 8006c9e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8006ca2:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8006ca6:	f080 81c4 	bcs.w	8007032 <forward_conv2d_nl_pool+0xf7e>
 8006caa:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006cae:	2a00      	cmp	r2, #0
 8006cb0:	f43f ad4a 	beq.w	8006748 <forward_conv2d_nl_pool+0x694>
 8006cb4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8006cb8:	fb02 f303 	mul.w	r3, r2, r3
 8006cbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006cbe:	677b      	str	r3, [r7, #116]	; 0x74
 8006cc0:	1a9b      	subs	r3, r3, r2
 8006cc2:	663b      	str	r3, [r7, #96]	; 0x60
 8006cc4:	188b      	adds	r3, r1, r2
 8006cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006ccc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006cd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8006cd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006cd8:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 8006cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8133 	beq.w	8006f5a <forward_conv2d_nl_pool+0xea6>
 8006cf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006cf8:	ed93 6a00 	vldr	s12, [r3]
 8006cfc:	3304      	adds	r3, #4
 8006cfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d02:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 8101 	beq.w	8006f0e <forward_conv2d_nl_pool+0xe5a>
 8006d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d10:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006d14:	eb03 0802 	add.w	r8, r3, r2
 8006d18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d28:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006d32:	f04f 0b00 	mov.w	fp, #0
 8006d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f2c0 8104 	blt.w	8006f48 <forward_conv2d_nl_pool+0xe94>
 8006d40:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006d44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006d46:	2300      	movs	r3, #0
 8006d48:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006d4c:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8006d50:	eb02 0c04 	add.w	ip, r2, r4
 8006d54:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8006d58:	4540      	cmp	r0, r8
 8006d5a:	bf94      	ite	ls
 8006d5c:	ebc3 0300 	rsbls	r3, r3, r0
 8006d60:	ebc3 0308 	rsbhi	r3, r3, r8
 8006d64:	eba2 0903 	sub.w	r9, r2, r3
 8006d68:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8006d6c:	1ac4      	subs	r4, r0, r3
 8006d6e:	fb03 f302 	mul.w	r3, r3, r2
 8006d72:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8006d76:	2a00      	cmp	r2, #0
 8006d78:	f340 80e3 	ble.w	8006f42 <forward_conv2d_nl_pool+0xe8e>
 8006d7c:	f023 050f 	bic.w	r5, r3, #15
 8006d80:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8006d84:	1e68      	subs	r0, r5, #1
 8006d86:	0900      	lsrs	r0, r0, #4
 8006d88:	3001      	adds	r0, #1
 8006d8a:	fb06 f204 	mul.w	r2, r6, r4
 8006d8e:	673a      	str	r2, [r7, #112]	; 0x70
 8006d90:	0102      	lsls	r2, r0, #4
 8006d92:	65ba      	str	r2, [r7, #88]	; 0x58
 8006d94:	fb06 f909 	mul.w	r9, r6, r9
 8006d98:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8006d9c:	eef0 6a46 	vmov.f32	s13, s12
 8006da0:	f04f 0e00 	mov.w	lr, #0
 8006da4:	4662      	mov	r2, ip
 8006da6:	2d00      	cmp	r5, #0
 8006da8:	f340 80c9 	ble.w	8006f3e <forward_conv2d_nl_pool+0xe8a>
 8006dac:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8006db0:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8006db4:	2600      	movs	r6, #0
 8006db6:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8006dba:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8006dbe:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8006dc2:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8006dc6:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8006dca:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8006dce:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8006dd2:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8006dd6:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8006dda:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8006dde:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8006de2:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 8006de6:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 8006dea:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 8006dee:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 8006df2:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8006df6:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 8006dfa:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 8006dfe:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 8006e02:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8006e06:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8006e0a:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8006e0e:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8006e12:	ed50 3a04 	vldr	s7, [r0, #-16]
 8006e16:	ed14 4a04 	vldr	s8, [r4, #-16]
 8006e1a:	ed50 4a03 	vldr	s9, [r0, #-12]
 8006e1e:	ed14 5a03 	vldr	s10, [r4, #-12]
 8006e22:	ed50 5a02 	vldr	s11, [r0, #-8]
 8006e26:	ed14 7a02 	vldr	s14, [r4, #-8]
 8006e2a:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8006e2e:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8006e32:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8006e36:	3610      	adds	r6, #16
 8006e38:	42ae      	cmp	r6, r5
 8006e3a:	ed14 fa01 	vldr	s30, [r4, #-4]
 8006e3e:	ed50 ea01 	vldr	s29, [r0, #-4]
 8006e42:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8006e46:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8006e4a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8006e4e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8006e52:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8006e56:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8006e5a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8006e5e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8006e62:	eee8 7a80 	vfma.f32	s15, s17, s0
 8006e66:	eee0 7a81 	vfma.f32	s15, s1, s2
 8006e6a:	eee1 7a82 	vfma.f32	s15, s3, s4
 8006e6e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8006e72:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006e76:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006e7a:	eee5 7a87 	vfma.f32	s15, s11, s14
 8006e7e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8006e82:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006e86:	db96      	blt.n	8006db6 <forward_conv2d_nl_pool+0xd02>
 8006e88:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006e8a:	4451      	add	r1, sl
 8006e8c:	4452      	add	r2, sl
 8006e8e:	4283      	cmp	r3, r0
 8006e90:	dd0f      	ble.n	8006eb2 <forward_conv2d_nl_pool+0xdfe>
 8006e92:	4604      	mov	r4, r0
 8006e94:	468c      	mov	ip, r1
 8006e96:	4616      	mov	r6, r2
 8006e98:	ecb6 7a01 	vldmia	r6!, {s14}
 8006e9c:	ecfc 7a01 	vldmia	ip!, {s15}
 8006ea0:	3401      	adds	r4, #1
 8006ea2:	42a3      	cmp	r3, r4
 8006ea4:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006ea8:	d1f6      	bne.n	8006e98 <forward_conv2d_nl_pool+0xde4>
 8006eaa:	1a18      	subs	r0, r3, r0
 8006eac:	0080      	lsls	r0, r0, #2
 8006eae:	4402      	add	r2, r0
 8006eb0:	4401      	add	r1, r0
 8006eb2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8006eb4:	4402      	add	r2, r0
 8006eb6:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8006eba:	f10e 0e01 	add.w	lr, lr, #1
 8006ebe:	4570      	cmp	r0, lr
 8006ec0:	4449      	add	r1, r9
 8006ec2:	f47f af70 	bne.w	8006da6 <forward_conv2d_nl_pool+0xcf2>
 8006ec6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ecc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8006ed0:	edc3 6a00 	vstr	s13, [r3]
 8006ed4:	4608      	mov	r0, r1
 8006ed6:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8006eda:	440b      	add	r3, r1
 8006edc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8006ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ee2:	4410      	add	r0, r2
 8006ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ee6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8006eea:	4608      	mov	r0, r1
 8006eec:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006ef0:	4418      	add	r0, r3
 8006ef2:	1acb      	subs	r3, r1, r3
 8006ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ef8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8006efc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8006f00:	f10b 0b01 	add.w	fp, fp, #1
 8006f04:	455b      	cmp	r3, fp
 8006f06:	eba8 0802 	sub.w	r8, r8, r2
 8006f0a:	f47f af14 	bne.w	8006d36 <forward_conv2d_nl_pool+0xc82>
 8006f0e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8006f12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006f18:	440a      	add	r2, r1
 8006f1a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8006f1e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8006f22:	3204      	adds	r2, #4
 8006f24:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8006f28:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f34:	f47f aed9 	bne.w	8006cea <forward_conv2d_nl_pool+0xc36>
 8006f38:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8006f3c:	e404      	b.n	8006748 <forward_conv2d_nl_pool+0x694>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	e7a5      	b.n	8006e8e <forward_conv2d_nl_pool+0xdda>
 8006f42:	eef0 6a46 	vmov.f32	s13, s12
 8006f46:	e7be      	b.n	8006ec6 <forward_conv2d_nl_pool+0xe12>
 8006f48:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8006f4c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8006f50:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8006f54:	eba8 0303 	sub.w	r3, r8, r3
 8006f58:	e6f6      	b.n	8006d48 <forward_conv2d_nl_pool+0xc94>
 8006f5a:	eeb0 6a48 	vmov.f32	s12, s16
 8006f5e:	e6d0      	b.n	8006d02 <forward_conv2d_nl_pool+0xc4e>
 8006f60:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f68:	4611      	mov	r1, r2
 8006f6a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006f6e:	4419      	add	r1, r3
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006f76:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f7c:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8006f80:	4413      	add	r3, r2
 8006f82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f86:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	f63f aa68 	bhi.w	8006464 <forward_conv2d_nl_pool+0x3b0>
 8006f94:	e49f      	b.n	80068d6 <forward_conv2d_nl_pool+0x822>
 8006f96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006f9a:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8006fa4:	68d1      	ldr	r1, [r2, #12]
 8006fa6:	6853      	ldr	r3, [r2, #4]
 8006fa8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006faa:	fb00 4012 	mls	r0, r0, r2, r4
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4281      	cmp	r1, r0
 8006fb2:	bf88      	it	hi
 8006fb4:	18c0      	addhi	r0, r0, r3
 8006fb6:	4281      	cmp	r1, r0
 8006fb8:	eb01 0203 	add.w	r2, r1, r3
 8006fbc:	d216      	bcs.n	8006fec <forward_conv2d_nl_pool+0xf38>
 8006fbe:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 8006fc2:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8006fc6:	42a1      	cmp	r1, r4
 8006fc8:	d010      	beq.n	8006fec <forward_conv2d_nl_pool+0xf38>
 8006fca:	4290      	cmp	r0, r2
 8006fcc:	d20e      	bcs.n	8006fec <forward_conv2d_nl_pool+0xf38>
 8006fce:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8006fd2:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 8006fd6:	f850 3b04 	ldr.w	r3, [r0], #4
 8006fda:	f841 3b04 	str.w	r3, [r1], #4
 8006fde:	69a2      	ldr	r2, [r4, #24]
 8006fe0:	6853      	ldr	r3, [r2, #4]
 8006fe2:	68d2      	ldr	r2, [r2, #12]
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	441a      	add	r2, r3
 8006fe8:	4282      	cmp	r2, r0
 8006fea:	d8f4      	bhi.n	8006fd6 <forward_conv2d_nl_pool+0xf22>
 8006fec:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8006ff0:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8006ff4:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 8006ff8:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8006ffa:	4420      	add	r0, r4
 8006ffc:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 8007000:	1a40      	subs	r0, r0, r1
 8007002:	4421      	add	r1, r4
 8007004:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 8007008:	442c      	add	r4, r5
 800700a:	b209      	sxth	r1, r1
 800700c:	b200      	sxth	r0, r0
 800700e:	4294      	cmp	r4, r2
 8007010:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 8007014:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8007018:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800701c:	4621      	mov	r1, r4
 800701e:	f4ff abfb 	bcc.w	8006818 <forward_conv2d_nl_pool+0x764>
 8007022:	425b      	negs	r3, r3
 8007024:	4419      	add	r1, r3
 8007026:	4291      	cmp	r1, r2
 8007028:	d2fc      	bcs.n	8007024 <forward_conv2d_nl_pool+0xf70>
 800702a:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800702e:	f7ff bbf3 	b.w	8006818 <forward_conv2d_nl_pool+0x764>
 8007032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007036:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 800703a:	320a      	adds	r2, #10
 800703c:	f022 0207 	bic.w	r2, r2, #7
 8007040:	ebad 0d02 	sub.w	sp, sp, r2
 8007044:	aa0a      	add	r2, sp, #40	; 0x28
 8007046:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800704a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800704e:	2a00      	cmp	r2, #0
 8007050:	f000 8153 	beq.w	80072fa <forward_conv2d_nl_pool+0x1246>
 8007054:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007058:	f8c7 b01c 	str.w	fp, [r7, #28]
 800705c:	fb02 f303 	mul.w	r3, r2, r3
 8007060:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007062:	663b      	str	r3, [r7, #96]	; 0x60
 8007064:	1a9b      	subs	r3, r3, r2
 8007066:	65bb      	str	r3, [r7, #88]	; 0x58
 8007068:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800706c:	f8c7 a014 	str.w	sl, [r7, #20]
 8007070:	4413      	add	r3, r2
 8007072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007074:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007078:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800707c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007080:	67bb      	str	r3, [r7, #120]	; 0x78
 8007082:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007086:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800708a:	2300      	movs	r3, #0
 800708c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007090:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007094:	b13b      	cbz	r3, 80070a6 <forward_conv2d_nl_pool+0xff2>
 8007096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800709a:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800709e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80070a2:	f001 f823 	bl	80080ec <memcpy>
 80070a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 8137 	beq.w	800731e <forward_conv2d_nl_pool+0x126a>
 80070b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b2:	ed93 6a00 	vldr	s12, [r3]
 80070b6:	3304      	adds	r3, #4
 80070b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80070ba:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 8101 	beq.w	80072c6 <forward_conv2d_nl_pool+0x1212>
 80070c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070c8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80070cc:	eb03 0802 	add.w	r8, r3, r2
 80070d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e0:	677b      	str	r3, [r7, #116]	; 0x74
 80070e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80070e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80070ea:	f04f 0b00 	mov.w	fp, #0
 80070ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f2c0 810a 	blt.w	800730c <forward_conv2d_nl_pool+0x1258>
 80070f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80070fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070fe:	2300      	movs	r3, #0
 8007100:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 8007104:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8007108:	eb02 0c04 	add.w	ip, r2, r4
 800710c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007110:	4540      	cmp	r0, r8
 8007112:	bf94      	ite	ls
 8007114:	ebc3 0300 	rsbls	r3, r3, r0
 8007118:	ebc3 0308 	rsbhi	r3, r3, r8
 800711c:	eba2 0903 	sub.w	r9, r2, r3
 8007120:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8007124:	1ac4      	subs	r4, r0, r3
 8007126:	fb03 f302 	mul.w	r3, r3, r2
 800712a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 800712e:	2a00      	cmp	r2, #0
 8007130:	f340 80e9 	ble.w	8007306 <forward_conv2d_nl_pool+0x1252>
 8007134:	f023 050f 	bic.w	r5, r3, #15
 8007138:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 800713c:	1e68      	subs	r0, r5, #1
 800713e:	0900      	lsrs	r0, r0, #4
 8007140:	3001      	adds	r0, #1
 8007142:	fb06 f204 	mul.w	r2, r6, r4
 8007146:	65fa      	str	r2, [r7, #92]	; 0x5c
 8007148:	0102      	lsls	r2, r0, #4
 800714a:	62ba      	str	r2, [r7, #40]	; 0x28
 800714c:	fb06 f909 	mul.w	r9, r6, r9
 8007150:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8007154:	eef0 6a46 	vmov.f32	s13, s12
 8007158:	f04f 0e00 	mov.w	lr, #0
 800715c:	4662      	mov	r2, ip
 800715e:	2d00      	cmp	r5, #0
 8007160:	f340 80cf 	ble.w	8007302 <forward_conv2d_nl_pool+0x124e>
 8007164:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8007168:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800716c:	2600      	movs	r6, #0
 800716e:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8007172:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8007176:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 800717a:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 800717e:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8007182:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8007186:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800718a:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800718e:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8007192:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8007196:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800719a:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800719e:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 80071a2:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 80071a6:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 80071aa:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 80071ae:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 80071b2:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 80071b6:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80071ba:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80071be:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80071c2:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 80071c6:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 80071ca:	ed50 3a04 	vldr	s7, [r0, #-16]
 80071ce:	ed14 4a04 	vldr	s8, [r4, #-16]
 80071d2:	ed54 4a03 	vldr	s9, [r4, #-12]
 80071d6:	ed10 5a03 	vldr	s10, [r0, #-12]
 80071da:	ed50 5a02 	vldr	s11, [r0, #-8]
 80071de:	ed14 7a02 	vldr	s14, [r4, #-8]
 80071e2:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80071e6:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 80071ea:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80071ee:	3610      	adds	r6, #16
 80071f0:	42ae      	cmp	r6, r5
 80071f2:	ed14 fa01 	vldr	s30, [r4, #-4]
 80071f6:	ed50 ea01 	vldr	s29, [r0, #-4]
 80071fa:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80071fe:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8007202:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8007206:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800720a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800720e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8007212:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8007216:	eee9 7a89 	vfma.f32	s15, s19, s18
 800721a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800721e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8007222:	eee1 7a82 	vfma.f32	s15, s3, s4
 8007226:	eee2 7a83 	vfma.f32	s15, s5, s6
 800722a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800722e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007232:	eee5 7a87 	vfma.f32	s15, s11, s14
 8007236:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800723a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800723e:	db96      	blt.n	800716e <forward_conv2d_nl_pool+0x10ba>
 8007240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007242:	4451      	add	r1, sl
 8007244:	4452      	add	r2, sl
 8007246:	4283      	cmp	r3, r0
 8007248:	dd0f      	ble.n	800726a <forward_conv2d_nl_pool+0x11b6>
 800724a:	4604      	mov	r4, r0
 800724c:	468c      	mov	ip, r1
 800724e:	4616      	mov	r6, r2
 8007250:	ecb6 7a01 	vldmia	r6!, {s14}
 8007254:	ecfc 7a01 	vldmia	ip!, {s15}
 8007258:	3401      	adds	r4, #1
 800725a:	42a3      	cmp	r3, r4
 800725c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007260:	d1f6      	bne.n	8007250 <forward_conv2d_nl_pool+0x119c>
 8007262:	1a18      	subs	r0, r3, r0
 8007264:	0080      	lsls	r0, r0, #2
 8007266:	4402      	add	r2, r0
 8007268:	4401      	add	r1, r0
 800726a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800726c:	4402      	add	r2, r0
 800726e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8007272:	f10e 0e01 	add.w	lr, lr, #1
 8007276:	4570      	cmp	r0, lr
 8007278:	4449      	add	r1, r9
 800727a:	f47f af70 	bne.w	800715e <forward_conv2d_nl_pool+0x10aa>
 800727e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007284:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8007288:	edc3 6a00 	vstr	s13, [r3]
 800728c:	4608      	mov	r0, r1
 800728e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8007292:	440b      	add	r3, r1
 8007294:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007298:	677b      	str	r3, [r7, #116]	; 0x74
 800729a:	4410      	add	r0, r2
 800729c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800729e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 80072a2:	4608      	mov	r0, r1
 80072a4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80072a8:	4418      	add	r0, r3
 80072aa:	1acb      	subs	r3, r1, r3
 80072ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80072b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80072b8:	f10b 0b01 	add.w	fp, fp, #1
 80072bc:	455b      	cmp	r3, fp
 80072be:	eba8 0802 	sub.w	r8, r8, r2
 80072c2:	f47f af14 	bne.w	80070ee <forward_conv2d_nl_pool+0x103a>
 80072c6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80072ca:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80072ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80072d2:	440a      	add	r2, r1
 80072d4:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80072d8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80072dc:	3204      	adds	r2, #4
 80072de:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80072e2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80072e6:	3301      	adds	r3, #1
 80072e8:	429a      	cmp	r2, r3
 80072ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80072ee:	f47f aecf 	bne.w	8007090 <forward_conv2d_nl_pool+0xfdc>
 80072f2:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 80072f6:	f8d7 a014 	ldr.w	sl, [r7, #20]
 80072fa:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 80072fe:	f7ff ba23 	b.w	8006748 <forward_conv2d_nl_pool+0x694>
 8007302:	2000      	movs	r0, #0
 8007304:	e79f      	b.n	8007246 <forward_conv2d_nl_pool+0x1192>
 8007306:	eef0 6a46 	vmov.f32	s13, s12
 800730a:	e7b8      	b.n	800727e <forward_conv2d_nl_pool+0x11ca>
 800730c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007310:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8007314:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8007318:	eba8 0303 	sub.w	r3, r8, r3
 800731c:	e6f0      	b.n	8007100 <forward_conv2d_nl_pool+0x104c>
 800731e:	eeb0 6a48 	vmov.f32	s12, s16
 8007322:	e6ca      	b.n	80070ba <forward_conv2d_nl_pool+0x1006>

08007324 <forward_dense>:
 8007324:	6983      	ldr	r3, [r0, #24]
 8007326:	881a      	ldrh	r2, [r3, #0]
 8007328:	2a00      	cmp	r2, #0
 800732a:	f000 80b5 	beq.w	8007498 <forward_dense+0x174>
 800732e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007332:	ed2d 8b10 	vpush	{d8-d15}
 8007336:	685f      	ldr	r7, [r3, #4]
 8007338:	687e      	ldr	r6, [r7, #4]
 800733a:	b091      	sub	sp, #68	; 0x44
 800733c:	b106      	cbz	r6, 8007340 <forward_dense+0x1c>
 800733e:	6836      	ldr	r6, [r6, #0]
 8007340:	2a01      	cmp	r2, #1
 8007342:	f240 80a6 	bls.w	8007492 <forward_dense+0x16e>
 8007346:	693d      	ldr	r5, [r7, #16]
 8007348:	b105      	cbz	r5, 800734c <forward_dense+0x28>
 800734a:	682d      	ldr	r5, [r5, #0]
 800734c:	2a02      	cmp	r2, #2
 800734e:	f000 80a5 	beq.w	800749c <forward_dense+0x178>
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	2b00      	cmp	r3, #0
 8007356:	f000 821b 	beq.w	8007790 <forward_dense+0x46c>
 800735a:	6819      	ldr	r1, [r3, #0]
 800735c:	9106      	str	r1, [sp, #24]
 800735e:	f117 0118 	adds.w	r1, r7, #24
 8007362:	f000 80c9 	beq.w	80074f8 <forward_dense+0x1d4>
 8007366:	8b39      	ldrh	r1, [r7, #24]
 8007368:	2901      	cmp	r1, #1
 800736a:	f240 820e 	bls.w	800778a <forward_dense+0x466>
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 80c4 	beq.w	80074fc <forward_dense+0x1d8>
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	9307      	str	r3, [sp, #28]
 8007378:	9b06      	ldr	r3, [sp, #24]
 800737a:	68ec      	ldr	r4, [r5, #12]
 800737c:	6998      	ldr	r0, [r3, #24]
 800737e:	68f1      	ldr	r1, [r6, #12]
 8007380:	6803      	ldr	r3, [r0, #0]
 8007382:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8007386:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 800738a:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 800738e:	f3c3 5141 	ubfx	r1, r3, #21, #2
 8007392:	fa49 f101 	asr.w	r1, r9, r1
 8007396:	910b      	str	r1, [sp, #44]	; 0x2c
 8007398:	2a03      	cmp	r2, #3
 800739a:	fb0e f10c 	mul.w	r1, lr, ip
 800739e:	6864      	ldr	r4, [r4, #4]
 80073a0:	9108      	str	r1, [sp, #32]
 80073a2:	f000 81de 	beq.w	8007762 <forward_dense+0x43e>
 80073a6:	6abf      	ldr	r7, [r7, #40]	; 0x28
 80073a8:	b117      	cbz	r7, 80073b0 <forward_dense+0x8c>
 80073aa:	683f      	ldr	r7, [r7, #0]
 80073ac:	b107      	cbz	r7, 80073b0 <forward_dense+0x8c>
 80073ae:	69bf      	ldr	r7, [r7, #24]
 80073b0:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	f000 81d7 	beq.w	8007768 <forward_dense+0x444>
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	f000 81d4 	beq.w	8007768 <forward_dense+0x444>
 80073c0:	f04f 0a00 	mov.w	sl, #0
 80073c4:	69ab      	ldr	r3, [r5, #24]
 80073c6:	69b2      	ldr	r2, [r6, #24]
 80073c8:	6899      	ldr	r1, [r3, #8]
 80073ca:	9b06      	ldr	r3, [sp, #24]
 80073cc:	9104      	str	r1, [sp, #16]
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	6897      	ldr	r7, [r2, #8]
 80073d2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80073d6:	00a3      	lsls	r3, r4, #2
 80073d8:	9309      	str	r3, [sp, #36]	; 0x24
 80073da:	18ce      	adds	r6, r1, r3
 80073dc:	9b08      	ldr	r3, [sp, #32]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d052      	beq.n	8007488 <forward_dense+0x164>
 80073e2:	f1a8 0310 	sub.w	r3, r8, #16
 80073e6:	091b      	lsrs	r3, r3, #4
 80073e8:	3301      	adds	r3, #1
 80073ea:	019b      	lsls	r3, r3, #6
 80073ec:	930c      	str	r3, [sp, #48]	; 0x30
 80073ee:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80073f2:	930a      	str	r3, [sp, #40]	; 0x28
 80073f4:	2300      	movs	r3, #0
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	eddf aace 	vldr	s21, [pc, #824]	; 8007734 <forward_dense+0x410>
 80073fc:	f008 030f 	and.w	r3, r8, #15
 8007400:	930d      	str	r3, [sp, #52]	; 0x34
 8007402:	9b06      	ldr	r3, [sp, #24]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	689d      	ldr	r5, [r3, #8]
 8007408:	9b07      	ldr	r3, [sp, #28]
 800740a:	2b00      	cmp	r3, #0
 800740c:	f000 818f 	beq.w	800772e <forward_dense+0x40a>
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	689c      	ldr	r4, [r3, #8]
 8007414:	9b04      	ldr	r3, [sp, #16]
 8007416:	f1ba 0f00 	cmp.w	sl, #0
 800741a:	d071      	beq.n	8007500 <forward_dense+0x1dc>
 800741c:	42b3      	cmp	r3, r6
 800741e:	d229      	bcs.n	8007474 <forward_dense+0x150>
 8007420:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007422:	469b      	mov	fp, r3
 8007424:	ab0f      	add	r3, sp, #60	; 0x3c
 8007426:	9303      	str	r3, [sp, #12]
 8007428:	2a04      	cmp	r2, #4
 800742a:	4633      	mov	r3, r6
 800742c:	4646      	mov	r6, r8
 800742e:	4698      	mov	r8, r3
 8007430:	d037      	beq.n	80074a2 <forward_dense+0x17e>
 8007432:	2c00      	cmp	r4, #0
 8007434:	f000 8180 	beq.w	8007738 <forward_dense+0x414>
 8007438:	f8d4 c000 	ldr.w	ip, [r4]
 800743c:	9803      	ldr	r0, [sp, #12]
 800743e:	9600      	str	r6, [sp, #0]
 8007440:	463b      	mov	r3, r7
 8007442:	4629      	mov	r1, r5
 8007444:	4652      	mov	r2, sl
 8007446:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800744a:	f7fe fc57 	bl	8005cfc <ai_dict8_dot_array_f32>
 800744e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007450:	f84b 3b04 	str.w	r3, [fp], #4
 8007454:	45c3      	cmp	fp, r8
 8007456:	f104 0404 	add.w	r4, r4, #4
 800745a:	444d      	add	r5, r9
 800745c:	d3e9      	bcc.n	8007432 <forward_dense+0x10e>
 800745e:	4643      	mov	r3, r8
 8007460:	46b0      	mov	r8, r6
 8007462:	461e      	mov	r6, r3
 8007464:	9a04      	ldr	r2, [sp, #16]
 8007466:	43d3      	mvns	r3, r2
 8007468:	4433      	add	r3, r6
 800746a:	f023 0303 	bic.w	r3, r3, #3
 800746e:	3304      	adds	r3, #4
 8007470:	18d3      	adds	r3, r2, r3
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007476:	9b05      	ldr	r3, [sp, #20]
 8007478:	4417      	add	r7, r2
 800747a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800747c:	4416      	add	r6, r2
 800747e:	9a08      	ldr	r2, [sp, #32]
 8007480:	3301      	adds	r3, #1
 8007482:	4293      	cmp	r3, r2
 8007484:	9305      	str	r3, [sp, #20]
 8007486:	d1bc      	bne.n	8007402 <forward_dense+0xde>
 8007488:	b011      	add	sp, #68	; 0x44
 800748a:	ecbd 8b10 	vpop	{d8-d15}
 800748e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007492:	2300      	movs	r3, #0
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	deff      	udf	#255	; 0xff
 8007498:	6853      	ldr	r3, [r2, #4]
 800749a:	deff      	udf	#255	; 0xff
 800749c:	2300      	movs	r3, #0
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	deff      	udf	#255	; 0xff
 80074a2:	b1a4      	cbz	r4, 80074ce <forward_dense+0x1aa>
 80074a4:	f8d4 c000 	ldr.w	ip, [r4]
 80074a8:	9803      	ldr	r0, [sp, #12]
 80074aa:	9600      	str	r6, [sp, #0]
 80074ac:	463b      	mov	r3, r7
 80074ae:	4629      	mov	r1, r5
 80074b0:	4652      	mov	r2, sl
 80074b2:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 80074b6:	f7fe fcef 	bl	8005e98 <ai_dict4_dot_array_f32>
 80074ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074bc:	f84b 3b04 	str.w	r3, [fp], #4
 80074c0:	45c3      	cmp	fp, r8
 80074c2:	f104 0404 	add.w	r4, r4, #4
 80074c6:	444d      	add	r5, r9
 80074c8:	d2c9      	bcs.n	800745e <forward_dense+0x13a>
 80074ca:	2c00      	cmp	r4, #0
 80074cc:	d1ea      	bne.n	80074a4 <forward_dense+0x180>
 80074ce:	4634      	mov	r4, r6
 80074d0:	4646      	mov	r6, r8
 80074d2:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80074d6:	9400      	str	r4, [sp, #0]
 80074d8:	463b      	mov	r3, r7
 80074da:	4629      	mov	r1, r5
 80074dc:	4652      	mov	r2, sl
 80074de:	4640      	mov	r0, r8
 80074e0:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80074e4:	f7fe fcd8 	bl	8005e98 <ai_dict4_dot_array_f32>
 80074e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80074ea:	f84b 3b04 	str.w	r3, [fp], #4
 80074ee:	45b3      	cmp	fp, r6
 80074f0:	444d      	add	r5, r9
 80074f2:	d3f0      	bcc.n	80074d6 <forward_dense+0x1b2>
 80074f4:	46a0      	mov	r8, r4
 80074f6:	e7b5      	b.n	8007464 <forward_dense+0x140>
 80074f8:	9107      	str	r1, [sp, #28]
 80074fa:	e73d      	b.n	8007378 <forward_dense+0x54>
 80074fc:	9307      	str	r3, [sp, #28]
 80074fe:	e73b      	b.n	8007378 <forward_dense+0x54>
 8007500:	42b3      	cmp	r3, r6
 8007502:	d2b7      	bcs.n	8007474 <forward_dense+0x150>
 8007504:	4618      	mov	r0, r3
 8007506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007508:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800750c:	eb07 0c03 	add.w	ip, r7, r3
 8007510:	469e      	mov	lr, r3
 8007512:	2c00      	cmp	r4, #0
 8007514:	f000 80ff 	beq.w	8007716 <forward_dense+0x3f2>
 8007518:	f1b8 0f0f 	cmp.w	r8, #15
 800751c:	edd4 fa00 	vldr	s31, [r4]
 8007520:	eddf 6a84 	vldr	s13, [pc, #528]	; 8007734 <forward_dense+0x410>
 8007524:	f104 0404 	add.w	r4, r4, #4
 8007528:	f240 80fd 	bls.w	8007726 <forward_dense+0x402>
 800752c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007530:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8007534:	4641      	mov	r1, r8
 8007536:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 800753a:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800753e:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8007542:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8007546:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 800754a:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 800754e:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8007552:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8007556:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 800755a:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 800755e:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8007562:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8007566:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 800756a:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 800756e:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8007572:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8007576:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 800757a:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 800757e:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8007582:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8007586:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 800758a:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 800758e:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8007592:	ed12 4a04 	vldr	s8, [r2, #-16]
 8007596:	ed53 4a04 	vldr	s9, [r3, #-16]
 800759a:	ed13 5a03 	vldr	s10, [r3, #-12]
 800759e:	ed52 5a03 	vldr	s11, [r2, #-12]
 80075a2:	ed13 6a02 	vldr	s12, [r3, #-8]
 80075a6:	ed12 7a02 	vldr	s14, [r2, #-8]
 80075aa:	ee67 7a8f 	vmul.f32	s15, s15, s30
 80075ae:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 80075b2:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80075b6:	3910      	subs	r1, #16
 80075b8:	290f      	cmp	r1, #15
 80075ba:	ed52 ea01 	vldr	s29, [r2, #-4]
 80075be:	ed13 ea01 	vldr	s28, [r3, #-4]
 80075c2:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80075c6:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80075ca:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80075ce:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80075d2:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80075d6:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80075da:	eee9 7a89 	vfma.f32	s15, s19, s18
 80075de:	eee8 7a88 	vfma.f32	s15, s17, s16
 80075e2:	eee0 7a20 	vfma.f32	s15, s0, s1
 80075e6:	eee1 7a21 	vfma.f32	s15, s2, s3
 80075ea:	eee2 7a22 	vfma.f32	s15, s4, s5
 80075ee:	eee3 7a23 	vfma.f32	s15, s6, s7
 80075f2:	eee4 7a24 	vfma.f32	s15, s8, s9
 80075f6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80075fa:	eee6 7a07 	vfma.f32	s15, s12, s14
 80075fe:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8007602:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007606:	d896      	bhi.n	8007536 <forward_dense+0x212>
 8007608:	eb05 010e 	add.w	r1, r5, lr
 800760c:	465b      	mov	r3, fp
 800760e:	4662      	mov	r2, ip
 8007610:	2b00      	cmp	r3, #0
 8007612:	d075      	beq.n	8007700 <forward_dense+0x3dc>
 8007614:	ed91 7a00 	vldr	s14, [r1]
 8007618:	edd2 7a00 	vldr	s15, [r2]
 800761c:	2b01      	cmp	r3, #1
 800761e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007622:	d06d      	beq.n	8007700 <forward_dense+0x3dc>
 8007624:	ed91 7a01 	vldr	s14, [r1, #4]
 8007628:	edd2 7a01 	vldr	s15, [r2, #4]
 800762c:	2b02      	cmp	r3, #2
 800762e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007632:	d065      	beq.n	8007700 <forward_dense+0x3dc>
 8007634:	ed91 7a02 	vldr	s14, [r1, #8]
 8007638:	edd2 7a02 	vldr	s15, [r2, #8]
 800763c:	2b03      	cmp	r3, #3
 800763e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007642:	d05d      	beq.n	8007700 <forward_dense+0x3dc>
 8007644:	ed91 7a03 	vldr	s14, [r1, #12]
 8007648:	edd2 7a03 	vldr	s15, [r2, #12]
 800764c:	2b04      	cmp	r3, #4
 800764e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007652:	d055      	beq.n	8007700 <forward_dense+0x3dc>
 8007654:	ed91 7a04 	vldr	s14, [r1, #16]
 8007658:	edd2 7a04 	vldr	s15, [r2, #16]
 800765c:	2b05      	cmp	r3, #5
 800765e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007662:	d04d      	beq.n	8007700 <forward_dense+0x3dc>
 8007664:	ed91 7a05 	vldr	s14, [r1, #20]
 8007668:	edd2 7a05 	vldr	s15, [r2, #20]
 800766c:	2b06      	cmp	r3, #6
 800766e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007672:	d045      	beq.n	8007700 <forward_dense+0x3dc>
 8007674:	ed91 7a06 	vldr	s14, [r1, #24]
 8007678:	edd2 7a06 	vldr	s15, [r2, #24]
 800767c:	2b07      	cmp	r3, #7
 800767e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007682:	d03d      	beq.n	8007700 <forward_dense+0x3dc>
 8007684:	ed91 7a07 	vldr	s14, [r1, #28]
 8007688:	edd2 7a07 	vldr	s15, [r2, #28]
 800768c:	2b08      	cmp	r3, #8
 800768e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007692:	d035      	beq.n	8007700 <forward_dense+0x3dc>
 8007694:	ed91 7a08 	vldr	s14, [r1, #32]
 8007698:	edd2 7a08 	vldr	s15, [r2, #32]
 800769c:	2b09      	cmp	r3, #9
 800769e:	eee7 6a27 	vfma.f32	s13, s14, s15
 80076a2:	d02d      	beq.n	8007700 <forward_dense+0x3dc>
 80076a4:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 80076a8:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80076ac:	2b0a      	cmp	r3, #10
 80076ae:	eee7 6a27 	vfma.f32	s13, s14, s15
 80076b2:	d025      	beq.n	8007700 <forward_dense+0x3dc>
 80076b4:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80076b8:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80076bc:	2b0b      	cmp	r3, #11
 80076be:	eee7 6a27 	vfma.f32	s13, s14, s15
 80076c2:	d01d      	beq.n	8007700 <forward_dense+0x3dc>
 80076c4:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80076c8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80076cc:	2b0c      	cmp	r3, #12
 80076ce:	eee7 6a27 	vfma.f32	s13, s14, s15
 80076d2:	d015      	beq.n	8007700 <forward_dense+0x3dc>
 80076d4:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80076d8:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80076dc:	2b0d      	cmp	r3, #13
 80076de:	eee7 6a27 	vfma.f32	s13, s14, s15
 80076e2:	d00d      	beq.n	8007700 <forward_dense+0x3dc>
 80076e4:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80076e8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80076ec:	2b0e      	cmp	r3, #14
 80076ee:	eee7 6a27 	vfma.f32	s13, s14, s15
 80076f2:	d005      	beq.n	8007700 <forward_dense+0x3dc>
 80076f4:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80076f8:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80076fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8007700:	444d      	add	r5, r9
 8007702:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8007706:	ece0 6a01 	vstmia	r0!, {s13}
 800770a:	42b0      	cmp	r0, r6
 800770c:	f4bf aeaa 	bcs.w	8007464 <forward_dense+0x140>
 8007710:	2c00      	cmp	r4, #0
 8007712:	f47f af01 	bne.w	8007518 <forward_dense+0x1f4>
 8007716:	f1b8 0f0f 	cmp.w	r8, #15
 800771a:	eef0 fa6a 	vmov.f32	s31, s21
 800771e:	eddf 6a05 	vldr	s13, [pc, #20]	; 8007734 <forward_dense+0x410>
 8007722:	f63f af03 	bhi.w	800752c <forward_dense+0x208>
 8007726:	4643      	mov	r3, r8
 8007728:	4629      	mov	r1, r5
 800772a:	463a      	mov	r2, r7
 800772c:	e770      	b.n	8007610 <forward_dense+0x2ec>
 800772e:	461c      	mov	r4, r3
 8007730:	e670      	b.n	8007414 <forward_dense+0xf0>
 8007732:	bf00      	nop
 8007734:	00000000 	.word	0x00000000
 8007738:	4634      	mov	r4, r6
 800773a:	4646      	mov	r6, r8
 800773c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007740:	9400      	str	r4, [sp, #0]
 8007742:	463b      	mov	r3, r7
 8007744:	4629      	mov	r1, r5
 8007746:	4652      	mov	r2, sl
 8007748:	4640      	mov	r0, r8
 800774a:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 800774e:	f7fe fad5 	bl	8005cfc <ai_dict8_dot_array_f32>
 8007752:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007754:	f84b 3b04 	str.w	r3, [fp], #4
 8007758:	455e      	cmp	r6, fp
 800775a:	444d      	add	r5, r9
 800775c:	d8f0      	bhi.n	8007740 <forward_dense+0x41c>
 800775e:	46a0      	mov	r8, r4
 8007760:	e680      	b.n	8007464 <forward_dense+0x140>
 8007762:	2300      	movs	r3, #0
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	deff      	udf	#255	; 0xff
 8007768:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800776c:	2f00      	cmp	r7, #0
 800776e:	f43f ae29 	beq.w	80073c4 <forward_dense+0xa0>
 8007772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007776:	f000 fb3f 	bl	8007df8 <ai_array_get_byte_size>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	4602      	mov	r2, r0
 800777e:	4651      	mov	r1, sl
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fcb3 	bl	80080ec <memcpy>
 8007786:	4682      	mov	sl, r0
 8007788:	e61c      	b.n	80073c4 <forward_dense+0xa0>
 800778a:	2300      	movs	r3, #0
 800778c:	9307      	str	r3, [sp, #28]
 800778e:	e5f3      	b.n	8007378 <forward_dense+0x54>
 8007790:	9306      	str	r3, [sp, #24]
 8007792:	e5e4      	b.n	800735e <forward_dense+0x3a>

08007794 <nl_func_relu_array_f32>:
 8007794:	b410      	push	{r4}
 8007796:	698c      	ldr	r4, [r1, #24]
 8007798:	6981      	ldr	r1, [r0, #24]
 800779a:	68a3      	ldr	r3, [r4, #8]
 800779c:	6889      	ldr	r1, [r1, #8]
 800779e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80077a2:	3a01      	subs	r2, #1
 80077a4:	0092      	lsls	r2, r2, #2
 80077a6:	189b      	adds	r3, r3, r2
 80077a8:	d216      	bcs.n	80077d8 <nl_func_relu_array_f32+0x44>
 80077aa:	3204      	adds	r2, #4
 80077ac:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80077e0 <nl_func_relu_array_f32+0x4c>
 80077b0:	4411      	add	r1, r2
 80077b2:	3304      	adds	r3, #4
 80077b4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80077b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c0:	bfb8      	it	lt
 80077c2:	eef0 7a47 	vmovlt.f32	s15, s14
 80077c6:	ed61 7a01 	vstmdb	r1!, {s15}
 80077ca:	68a0      	ldr	r0, [r4, #8]
 80077cc:	f1a3 0208 	sub.w	r2, r3, #8
 80077d0:	4290      	cmp	r0, r2
 80077d2:	f1a3 0304 	sub.w	r3, r3, #4
 80077d6:	d9ed      	bls.n	80077b4 <nl_func_relu_array_f32+0x20>
 80077d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	00000000 	.word	0x00000000

080077e4 <nl_func_sm_array_f32>:
 80077e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077e8:	ed2d 8b04 	vpush	{d8-d9}
 80077ec:	b089      	sub	sp, #36	; 0x24
 80077ee:	698f      	ldr	r7, [r1, #24]
 80077f0:	6984      	ldr	r4, [r0, #24]
 80077f2:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80077f6:	68bd      	ldr	r5, [r7, #8]
 80077f8:	9402      	str	r4, [sp, #8]
 80077fa:	4626      	mov	r6, r4
 80077fc:	4696      	mov	lr, r2
 80077fe:	eba2 020c 	sub.w	r2, r2, ip
 8007802:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 8007806:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	68b6      	ldr	r6, [r6, #8]
 800780c:	ebae 0e04 	sub.w	lr, lr, r4
 8007810:	4295      	cmp	r5, r2
 8007812:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 8007816:	d354      	bcc.n	80078c2 <nl_func_sm_array_f32+0xde>
 8007818:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800781c:	f1cc 0200 	rsb	r2, ip, #0
 8007820:	00a4      	lsls	r4, r4, #2
 8007822:	e9cd 1006 	strd	r1, r0, [sp, #24]
 8007826:	9303      	str	r3, [sp, #12]
 8007828:	9204      	str	r2, [sp, #16]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4262      	negs	r2, r4
 800782e:	9205      	str	r2, [sp, #20]
 8007830:	9301      	str	r3, [sp, #4]
 8007832:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8007836:	9b02      	ldr	r3, [sp, #8]
 8007838:	9a07      	ldr	r2, [sp, #28]
 800783a:	60bd      	str	r5, [r7, #8]
 800783c:	609e      	str	r6, [r3, #8]
 800783e:	9b06      	ldr	r3, [sp, #24]
 8007840:	6992      	ldr	r2, [r2, #24]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	6894      	ldr	r4, [r2, #8]
 8007846:	9a03      	ldr	r2, [sp, #12]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2a01      	cmp	r2, #1
 800784c:	ed93 8a00 	vldr	s16, [r3]
 8007850:	d940      	bls.n	80078d4 <nl_func_sm_array_f32+0xf0>
 8007852:	9901      	ldr	r1, [sp, #4]
 8007854:	1d1a      	adds	r2, r3, #4
 8007856:	eb03 0b01 	add.w	fp, r3, r1
 800785a:	ecf2 7a01 	vldmia	r2!, {s15}
 800785e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007866:	bfb8      	it	lt
 8007868:	eeb0 8a67 	vmovlt.f32	s16, s15
 800786c:	4593      	cmp	fp, r2
 800786e:	d1f4      	bne.n	800785a <nl_func_sm_array_f32+0x76>
 8007870:	eddf 8a1b 	vldr	s17, [pc, #108]	; 80078e0 <nl_func_sm_array_f32+0xfc>
 8007874:	469a      	mov	sl, r3
 8007876:	46a1      	mov	r9, r4
 8007878:	46a0      	mov	r8, r4
 800787a:	ecba 0a01 	vldmia	sl!, {s0}
 800787e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007882:	f000 fadb 	bl	8007e3c <expf>
 8007886:	45d3      	cmp	fp, sl
 8007888:	eca8 0a01 	vstmia	r8!, {s0}
 800788c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8007890:	d1f3      	bne.n	800787a <nl_func_sm_array_f32+0x96>
 8007892:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800789a:	d00b      	beq.n	80078b4 <nl_func_sm_array_f32+0xd0>
 800789c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80078a0:	9b01      	ldr	r3, [sp, #4]
 80078a2:	441c      	add	r4, r3
 80078a4:	edd9 7a00 	vldr	s15, [r9]
 80078a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078ac:	ece9 7a01 	vstmia	r9!, {s15}
 80078b0:	454c      	cmp	r4, r9
 80078b2:	d1f7      	bne.n	80078a4 <nl_func_sm_array_f32+0xc0>
 80078b4:	9b04      	ldr	r3, [sp, #16]
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	441d      	add	r5, r3
 80078ba:	9b05      	ldr	r3, [sp, #20]
 80078bc:	42aa      	cmp	r2, r5
 80078be:	441e      	add	r6, r3
 80078c0:	d9b9      	bls.n	8007836 <nl_func_sm_array_f32+0x52>
 80078c2:	60ba      	str	r2, [r7, #8]
 80078c4:	9a02      	ldr	r2, [sp, #8]
 80078c6:	68d3      	ldr	r3, [r2, #12]
 80078c8:	6093      	str	r3, [r2, #8]
 80078ca:	b009      	add	sp, #36	; 0x24
 80078cc:	ecbd 8b04 	vpop	{d8-d9}
 80078d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d4:	2a00      	cmp	r2, #0
 80078d6:	d0ed      	beq.n	80078b4 <nl_func_sm_array_f32+0xd0>
 80078d8:	9a01      	ldr	r2, [sp, #4]
 80078da:	eb03 0b02 	add.w	fp, r3, r2
 80078de:	e7c7      	b.n	8007870 <nl_func_sm_array_f32+0x8c>
 80078e0:	00000000 	.word	0x00000000

080078e4 <forward_sm>:
 80078e4:	6982      	ldr	r2, [r0, #24]
 80078e6:	8813      	ldrh	r3, [r2, #0]
 80078e8:	b32b      	cbz	r3, 8007936 <forward_sm+0x52>
 80078ea:	6852      	ldr	r2, [r2, #4]
 80078ec:	6851      	ldr	r1, [r2, #4]
 80078ee:	b101      	cbz	r1, 80078f2 <forward_sm+0xe>
 80078f0:	6809      	ldr	r1, [r1, #0]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d91c      	bls.n	8007930 <forward_sm+0x4c>
 80078f6:	6913      	ldr	r3, [r2, #16]
 80078f8:	b1c3      	cbz	r3, 800792c <forward_sm+0x48>
 80078fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078fc:	6818      	ldr	r0, [r3, #0]
 80078fe:	688c      	ldr	r4, [r1, #8]
 8007900:	68c3      	ldr	r3, [r0, #12]
 8007902:	68ce      	ldr	r6, [r1, #12]
 8007904:	685f      	ldr	r7, [r3, #4]
 8007906:	6873      	ldr	r3, [r6, #4]
 8007908:	0a24      	lsrs	r4, r4, #8
 800790a:	b083      	sub	sp, #12
 800790c:	d015      	beq.n	800793a <forward_sm+0x56>
 800790e:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8007912:	2201      	movs	r2, #1
 8007914:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007918:	42a6      	cmp	r6, r4
 800791a:	fb05 f202 	mul.w	r2, r5, r2
 800791e:	d1f9      	bne.n	8007914 <forward_sm+0x30>
 8007920:	e9cd 3700 	strd	r3, r7, [sp]
 8007924:	f7ff ff5e 	bl	80077e4 <nl_func_sm_array_f32>
 8007928:	b003      	add	sp, #12
 800792a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	deff      	udf	#255	; 0xff
 8007930:	2300      	movs	r3, #0
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	deff      	udf	#255	; 0xff
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	deff      	udf	#255	; 0xff
 800793a:	2201      	movs	r2, #1
 800793c:	e9cd 3700 	strd	r3, r7, [sp]
 8007940:	f7ff ff50 	bl	80077e4 <nl_func_sm_array_f32>
 8007944:	b003      	add	sp, #12
 8007946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007948 <pool_func_mp_array_f32>:
 8007948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800794c:	b093      	sub	sp, #76	; 0x4c
 800794e:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8007952:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8007954:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8007958:	68a8      	ldr	r0, [r5, #8]
 800795a:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 800795e:	9508      	str	r5, [sp, #32]
 8007960:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 8007964:	9002      	str	r0, [sp, #8]
 8007966:	950d      	str	r5, [sp, #52]	; 0x34
 8007968:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 800796c:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 8007970:	9004      	str	r0, [sp, #16]
 8007972:	9506      	str	r5, [sp, #24]
 8007974:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 8007978:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 800797c:	9009      	str	r0, [sp, #36]	; 0x24
 800797e:	950b      	str	r5, [sp, #44]	; 0x2c
 8007980:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8007984:	9200      	str	r2, [sp, #0]
 8007986:	468a      	mov	sl, r1
 8007988:	4699      	mov	r9, r3
 800798a:	b95c      	cbnz	r4, 80079a4 <pool_func_mp_array_f32+0x5c>
 800798c:	b950      	cbnz	r0, 80079a4 <pool_func_mp_array_f32+0x5c>
 800798e:	9b04      	ldr	r3, [sp, #16]
 8007990:	1a5a      	subs	r2, r3, r1
 8007992:	9b06      	ldr	r3, [sp, #24]
 8007994:	9908      	ldr	r1, [sp, #32]
 8007996:	3a01      	subs	r2, #1
 8007998:	3b01      	subs	r3, #1
 800799a:	fb13 2301 	smlabb	r3, r3, r1, r2
 800799e:	041a      	lsls	r2, r3, #16
 80079a0:	f100 809b 	bmi.w	8007ada <pool_func_mp_array_f32+0x192>
 80079a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f000 808b 	beq.w	8007ac2 <pool_func_mp_array_f32+0x17a>
 80079ac:	9b06      	ldr	r3, [sp, #24]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 8087 	beq.w	8007ac2 <pool_func_mp_array_f32+0x17a>
 80079b4:	f1b9 0f00 	cmp.w	r9, #0
 80079b8:	f000 8083 	beq.w	8007ac2 <pool_func_mp_array_f32+0x17a>
 80079bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079be:	1b1c      	subs	r4, r3, r4
 80079c0:	9b04      	ldr	r3, [sp, #16]
 80079c2:	1a1b      	subs	r3, r3, r0
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	4240      	negs	r0, r0
 80079c8:	2200      	movs	r2, #0
 80079ca:	b2a1      	uxth	r1, r4
 80079cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80079ce:	b283      	uxth	r3, r0
 80079d0:	920e      	str	r2, [sp, #56]	; 0x38
 80079d2:	910c      	str	r1, [sp, #48]	; 0x30
 80079d4:	9310      	str	r3, [sp, #64]	; 0x40
 80079d6:	9c06      	ldr	r4, [sp, #24]
 80079d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80079da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079dc:	fb02 f204 	mul.w	r2, r2, r4
 80079e0:	1acb      	subs	r3, r1, r3
 80079e2:	920a      	str	r2, [sp, #40]	; 0x28
 80079e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80079e6:	9205      	str	r2, [sp, #20]
 80079e8:	2000      	movs	r0, #0
 80079ea:	b21b      	sxth	r3, r3
 80079ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80079ee:	9303      	str	r3, [sp, #12]
 80079f0:	9007      	str	r0, [sp, #28]
 80079f2:	4603      	mov	r3, r0
 80079f4:	fa0f f881 	sxth.w	r8, r1
 80079f8:	9204      	str	r2, [sp, #16]
 80079fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079fc:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8007a00:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8007a04:	4413      	add	r3, r2
 8007a06:	f04f 0e00 	mov.w	lr, #0
 8007a0a:	fb09 f303 	mul.w	r3, r9, r3
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8007a14:	4675      	mov	r5, lr
 8007a16:	9903      	ldr	r1, [sp, #12]
 8007a18:	eddf 7a78 	vldr	s15, [pc, #480]	; 8007bfc <pool_func_mp_array_f32+0x2b4>
 8007a1c:	4588      	cmp	r8, r1
 8007a1e:	dd24      	ble.n	8007a6a <pool_func_mp_array_f32+0x122>
 8007a20:	4564      	cmp	r4, ip
 8007a22:	dd1e      	ble.n	8007a62 <pool_func_mp_array_f32+0x11a>
 8007a24:	2900      	cmp	r1, #0
 8007a26:	fb0a f601 	mul.w	r6, sl, r1
 8007a2a:	db1a      	blt.n	8007a62 <pool_func_mp_array_f32+0x11a>
 8007a2c:	9b00      	ldr	r3, [sp, #0]
 8007a2e:	4299      	cmp	r1, r3
 8007a30:	da17      	bge.n	8007a62 <pool_func_mp_array_f32+0x11a>
 8007a32:	f1bc 0f00 	cmp.w	ip, #0
 8007a36:	4663      	mov	r3, ip
 8007a38:	db46      	blt.n	8007ac8 <pool_func_mp_array_f32+0x180>
 8007a3a:	18f2      	adds	r2, r6, r3
 8007a3c:	fb09 5202 	mla	r2, r9, r2, r5
 8007a40:	1c58      	adds	r0, r3, #1
 8007a42:	459a      	cmp	sl, r3
 8007a44:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8007a48:	b203      	sxth	r3, r0
 8007a4a:	dd08      	ble.n	8007a5e <pool_func_mp_array_f32+0x116>
 8007a4c:	ed92 7a00 	vldr	s14, [r2]
 8007a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a58:	bfb8      	it	lt
 8007a5a:	eef0 7a47 	vmovlt.f32	s15, s14
 8007a5e:	429c      	cmp	r4, r3
 8007a60:	dceb      	bgt.n	8007a3a <pool_func_mp_array_f32+0xf2>
 8007a62:	3101      	adds	r1, #1
 8007a64:	b209      	sxth	r1, r1
 8007a66:	4588      	cmp	r8, r1
 8007a68:	dcda      	bgt.n	8007a20 <pool_func_mp_array_f32+0xd8>
 8007a6a:	9b01      	ldr	r3, [sp, #4]
 8007a6c:	f10e 0e01 	add.w	lr, lr, #1
 8007a70:	441d      	add	r5, r3
 8007a72:	9b02      	ldr	r3, [sp, #8]
 8007a74:	fa0f fe8e 	sxth.w	lr, lr
 8007a78:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007a7c:	45ce      	cmp	lr, r9
 8007a7e:	edc5 7a00 	vstr	s15, [r5]
 8007a82:	4675      	mov	r5, lr
 8007a84:	dbc7      	blt.n	8007a16 <pool_func_mp_array_f32+0xce>
 8007a86:	9b07      	ldr	r3, [sp, #28]
 8007a88:	9808      	ldr	r0, [sp, #32]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	b219      	sxth	r1, r3
 8007a8e:	9b05      	ldr	r3, [sp, #20]
 8007a90:	9107      	str	r1, [sp, #28]
 8007a92:	461a      	mov	r2, r3
 8007a94:	4402      	add	r2, r0
 8007a96:	9b04      	ldr	r3, [sp, #16]
 8007a98:	b292      	uxth	r2, r2
 8007a9a:	9205      	str	r2, [sp, #20]
 8007a9c:	9a06      	ldr	r2, [sp, #24]
 8007a9e:	4403      	add	r3, r0
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	428a      	cmp	r2, r1
 8007aa4:	9304      	str	r3, [sp, #16]
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	dca7      	bgt.n	80079fa <pool_func_mp_array_f32+0xb2>
 8007aaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007aac:	3301      	adds	r3, #1
 8007aae:	b21a      	sxth	r2, r3
 8007ab0:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8007ab4:	440b      	add	r3, r1
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	930c      	str	r3, [sp, #48]	; 0x30
 8007aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007abc:	920e      	str	r2, [sp, #56]	; 0x38
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	dc89      	bgt.n	80079d6 <pool_func_mp_array_f32+0x8e>
 8007ac2:	b013      	add	sp, #76	; 0x4c
 8007ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac8:	3301      	adds	r3, #1
 8007aca:	b21b      	sxth	r3, r3
 8007acc:	42bb      	cmp	r3, r7
 8007ace:	dac6      	bge.n	8007a5e <pool_func_mp_array_f32+0x116>
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	b21b      	sxth	r3, r3
 8007ad4:	42bb      	cmp	r3, r7
 8007ad6:	dbf7      	blt.n	8007ac8 <pool_func_mp_array_f32+0x180>
 8007ad8:	e7c1      	b.n	8007a5e <pool_func_mp_array_f32+0x116>
 8007ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007adc:	9a00      	ldr	r2, [sp, #0]
 8007ade:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007ae0:	1a9a      	subs	r2, r3, r2
 8007ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ae4:	3a01      	subs	r2, #1
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	fb13 2301 	smlabb	r3, r3, r1, r2
 8007aec:	041b      	lsls	r3, r3, #16
 8007aee:	f57f af59 	bpl.w	80079a4 <pool_func_mp_array_f32+0x5c>
 8007af2:	fb0a f309 	mul.w	r3, sl, r9
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8007afc:	930e      	str	r3, [sp, #56]	; 0x38
 8007afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b00:	9001      	str	r0, [sp, #4]
 8007b02:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8007b0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	ddd7      	ble.n	8007ac2 <pool_func_mp_array_f32+0x17a>
 8007b12:	9a00      	ldr	r2, [sp, #0]
 8007b14:	9906      	ldr	r1, [sp, #24]
 8007b16:	fa0f f882 	sxth.w	r8, r2
 8007b1a:	2900      	cmp	r1, #0
 8007b1c:	d062      	beq.n	8007be4 <pool_func_mp_array_f32+0x29c>
 8007b1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b20:	fb01 f303 	mul.w	r3, r1, r3
 8007b24:	1a12      	subs	r2, r2, r0
 8007b26:	9305      	str	r3, [sp, #20]
 8007b28:	b213      	sxth	r3, r2
 8007b2a:	9307      	str	r3, [sp, #28]
 8007b2c:	f1b9 0f00 	cmp.w	r9, #0
 8007b30:	d058      	beq.n	8007be4 <pool_func_mp_array_f32+0x29c>
 8007b32:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007b34:	fb02 f303 	mul.w	r3, r2, r3
 8007b38:	2600      	movs	r6, #0
 8007b3a:	930c      	str	r3, [sp, #48]	; 0x30
 8007b3c:	9b04      	ldr	r3, [sp, #16]
 8007b3e:	9303      	str	r3, [sp, #12]
 8007b40:	4637      	mov	r7, r6
 8007b42:	46b2      	mov	sl, r6
 8007b44:	9b05      	ldr	r3, [sp, #20]
 8007b46:	9611      	str	r6, [sp, #68]	; 0x44
 8007b48:	eb0a 0b03 	add.w	fp, sl, r3
 8007b4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b4e:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8007b52:	b235      	sxth	r5, r6
 8007b54:	18eb      	adds	r3, r5, r3
 8007b56:	f04f 0a00 	mov.w	sl, #0
 8007b5a:	fb09 f303 	mul.w	r3, r9, r3
 8007b5e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007b60:	930a      	str	r3, [sp, #40]	; 0x28
 8007b62:	fb09 fb0b 	mul.w	fp, r9, fp
 8007b66:	46d6      	mov	lr, sl
 8007b68:	9807      	ldr	r0, [sp, #28]
 8007b6a:	4580      	cmp	r8, r0
 8007b6c:	dd43      	ble.n	8007bf6 <pool_func_mp_array_f32+0x2ae>
 8007b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b70:	eddf 7a22 	vldr	s15, [pc, #136]	; 8007bfc <pool_func_mp_array_f32+0x2b4>
 8007b74:	eb0e 0403 	add.w	r4, lr, r3
 8007b78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007b7e:	42a9      	cmp	r1, r5
 8007b80:	dd0f      	ble.n	8007ba2 <pool_func_mp_array_f32+0x25a>
 8007b82:	4622      	mov	r2, r4
 8007b84:	462b      	mov	r3, r5
 8007b86:	ed92 7a00 	vldr	s14, [r2]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b94:	b21b      	sxth	r3, r3
 8007b96:	bfb8      	it	lt
 8007b98:	eef0 7a47 	vmovlt.f32	s15, s14
 8007b9c:	4299      	cmp	r1, r3
 8007b9e:	4462      	add	r2, ip
 8007ba0:	d1f1      	bne.n	8007b86 <pool_func_mp_array_f32+0x23e>
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	b200      	sxth	r0, r0
 8007ba6:	4580      	cmp	r8, r0
 8007ba8:	4434      	add	r4, r6
 8007baa:	d1e8      	bne.n	8007b7e <pool_func_mp_array_f32+0x236>
 8007bac:	f10a 0a01 	add.w	sl, sl, #1
 8007bb0:	9a02      	ldr	r2, [sp, #8]
 8007bb2:	eb0b 030e 	add.w	r3, fp, lr
 8007bb6:	fa0f fa8a 	sxth.w	sl, sl
 8007bba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bbe:	45ca      	cmp	sl, r9
 8007bc0:	edc3 7a00 	vstr	s15, [r3]
 8007bc4:	46d6      	mov	lr, sl
 8007bc6:	dbcf      	blt.n	8007b68 <pool_func_mp_array_f32+0x220>
 8007bc8:	9b03      	ldr	r3, [sp, #12]
 8007bca:	9a08      	ldr	r2, [sp, #32]
 8007bcc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8007bce:	4413      	add	r3, r2
 8007bd0:	b29b      	uxth	r3, r3
 8007bd2:	3701      	adds	r7, #1
 8007bd4:	9303      	str	r3, [sp, #12]
 8007bd6:	9b06      	ldr	r3, [sp, #24]
 8007bd8:	b23f      	sxth	r7, r7
 8007bda:	4416      	add	r6, r2
 8007bdc:	42bb      	cmp	r3, r7
 8007bde:	b2b6      	uxth	r6, r6
 8007be0:	46ba      	mov	sl, r7
 8007be2:	dcaf      	bgt.n	8007b44 <pool_func_mp_array_f32+0x1fc>
 8007be4:	9b00      	ldr	r3, [sp, #0]
 8007be6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007be8:	4413      	add	r3, r2
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	9b01      	ldr	r3, [sp, #4]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	e788      	b.n	8007b08 <pool_func_mp_array_f32+0x1c0>
 8007bf6:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007bfc <pool_func_mp_array_f32+0x2b4>
 8007bfa:	e7d7      	b.n	8007bac <pool_func_mp_array_f32+0x264>
 8007bfc:	cf000000 	.word	0xcf000000

08007c00 <ai_check_custom_types>:
 8007c00:	4b13      	ldr	r3, [pc, #76]	; (8007c50 <ai_check_custom_types+0x50>)
 8007c02:	b082      	sub	sp, #8
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	9301      	str	r3, [sp, #4]
 8007c08:	b118      	cbz	r0, 8007c12 <ai_check_custom_types+0x12>
 8007c0a:	7803      	ldrb	r3, [r0, #0]
 8007c0c:	2b03      	cmp	r3, #3
 8007c0e:	d002      	beq.n	8007c16 <ai_check_custom_types+0x16>
 8007c10:	2000      	movs	r0, #0
 8007c12:	b002      	add	sp, #8
 8007c14:	4770      	bx	lr
 8007c16:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d004      	beq.n	8007c28 <ai_check_custom_types+0x28>
 8007c1e:	2001      	movs	r0, #1
 8007c20:	f080 0001 	eor.w	r0, r0, #1
 8007c24:	b002      	add	sp, #8
 8007c26:	4770      	bx	lr
 8007c28:	7842      	ldrb	r2, [r0, #1]
 8007c2a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	f100 0001 	add.w	r0, r0, #1
 8007c34:	d1f3      	bne.n	8007c1e <ai_check_custom_types+0x1e>
 8007c36:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007c3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d1ed      	bne.n	8007c1e <ai_check_custom_types+0x1e>
 8007c42:	7842      	ldrb	r2, [r0, #1]
 8007c44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d1e8      	bne.n	8007c1e <ai_check_custom_types+0x1e>
 8007c4c:	2000      	movs	r0, #0
 8007c4e:	e7e7      	b.n	8007c20 <ai_check_custom_types+0x20>
 8007c50:	08023960 	.word	0x08023960

08007c54 <ai_layers_init_all>:
 8007c54:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007c56:	b17a      	cbz	r2, 8007c78 <ai_layers_init_all+0x24>
 8007c58:	6913      	ldr	r3, [r2, #16]
 8007c5a:	60d0      	str	r0, [r2, #12]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	f04f 0201 	mov.w	r2, #1
 8007c62:	d009      	beq.n	8007c78 <ai_layers_init_all+0x24>
 8007c64:	b143      	cbz	r3, 8007c78 <ai_layers_init_all+0x24>
 8007c66:	6919      	ldr	r1, [r3, #16]
 8007c68:	60d8      	str	r0, [r3, #12]
 8007c6a:	4299      	cmp	r1, r3
 8007c6c:	f102 0201 	add.w	r2, r2, #1
 8007c70:	d002      	beq.n	8007c78 <ai_layers_init_all+0x24>
 8007c72:	460b      	mov	r3, r1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1f6      	bne.n	8007c66 <ai_layers_init_all+0x12>
 8007c78:	4610      	mov	r0, r2
 8007c7a:	4770      	bx	lr

08007c7c <ai_layers_post_init_all>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007c80:	b18c      	cbz	r4, 8007ca6 <ai_layers_post_init_all+0x2a>
 8007c82:	2500      	movs	r5, #0
 8007c84:	6863      	ldr	r3, [r4, #4]
 8007c86:	f013 0f01 	tst.w	r3, #1
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	d003      	beq.n	8007c96 <ai_layers_post_init_all+0x1a>
 8007c8e:	6a23      	ldr	r3, [r4, #32]
 8007c90:	b10b      	cbz	r3, 8007c96 <ai_layers_post_init_all+0x1a>
 8007c92:	4798      	blx	r3
 8007c94:	3501      	adds	r5, #1
 8007c96:	6923      	ldr	r3, [r4, #16]
 8007c98:	42a3      	cmp	r3, r4
 8007c9a:	d002      	beq.n	8007ca2 <ai_layers_post_init_all+0x26>
 8007c9c:	461c      	mov	r4, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1f0      	bne.n	8007c84 <ai_layers_post_init_all+0x8>
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	bd38      	pop	{r3, r4, r5, pc}
 8007ca6:	4625      	mov	r5, r4
 8007ca8:	e7fb      	b.n	8007ca2 <ai_layers_post_init_all+0x26>
 8007caa:	bf00      	nop

08007cac <ai_layers_forward_all>:
 8007cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb0:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8007cb2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007cb4:	4604      	mov	r4, r0
 8007cb6:	2f00      	cmp	r7, #0
 8007cb8:	d02c      	beq.n	8007d14 <ai_layers_forward_all+0x68>
 8007cba:	2d00      	cmp	r5, #0
 8007cbc:	d03f      	beq.n	8007d3e <ai_layers_forward_all+0x92>
 8007cbe:	6385      	str	r5, [r0, #56]	; 0x38
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007cc4:	2001      	movs	r0, #1
 8007cc6:	47b8      	blx	r7
 8007cc8:	2600      	movs	r6, #0
 8007cca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007ccc:	46b0      	mov	r8, r6
 8007cce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007cd0:	2002      	movs	r0, #2
 8007cd2:	47b8      	blx	r7
 8007cd4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007cd6:	696b      	ldr	r3, [r5, #20]
 8007cd8:	4628      	mov	r0, r5
 8007cda:	4798      	blx	r3
 8007cdc:	692b      	ldr	r3, [r5, #16]
 8007cde:	429d      	cmp	r5, r3
 8007ce0:	f04f 0003 	mov.w	r0, #3
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	d009      	beq.n	8007cfc <ai_layers_forward_all+0x50>
 8007ce8:	63a3      	str	r3, [r4, #56]	; 0x38
 8007cea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007cec:	47b8      	blx	r7
 8007cee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007cf0:	3601      	adds	r6, #1
 8007cf2:	2900      	cmp	r1, #0
 8007cf4:	d1eb      	bne.n	8007cce <ai_layers_forward_all+0x22>
 8007cf6:	4630      	mov	r0, r6
 8007cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8007d02:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007d04:	47b8      	blx	r7
 8007d06:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007d08:	3601      	adds	r6, #1
 8007d0a:	2900      	cmp	r1, #0
 8007d0c:	d1df      	bne.n	8007cce <ai_layers_forward_all+0x22>
 8007d0e:	4630      	mov	r0, r6
 8007d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d14:	b19d      	cbz	r5, 8007d3e <ai_layers_forward_all+0x92>
 8007d16:	6385      	str	r5, [r0, #56]	; 0x38
 8007d18:	463e      	mov	r6, r7
 8007d1a:	696b      	ldr	r3, [r5, #20]
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	4798      	blx	r3
 8007d20:	692b      	ldr	r3, [r5, #16]
 8007d22:	42ab      	cmp	r3, r5
 8007d24:	f106 0601 	add.w	r6, r6, #1
 8007d28:	d004      	beq.n	8007d34 <ai_layers_forward_all+0x88>
 8007d2a:	63a3      	str	r3, [r4, #56]	; 0x38
 8007d2c:	461d      	mov	r5, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1f3      	bne.n	8007d1a <ai_layers_forward_all+0x6e>
 8007d32:	e7e0      	b.n	8007cf6 <ai_layers_forward_all+0x4a>
 8007d34:	2300      	movs	r3, #0
 8007d36:	63a3      	str	r3, [r4, #56]	; 0x38
 8007d38:	4630      	mov	r0, r6
 8007d3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d3e:	462e      	mov	r6, r5
 8007d40:	4630      	mov	r0, r6
 8007d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d46:	bf00      	nop

08007d48 <ai_array_to_buffer_fmt>:
 8007d48:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d029      	beq.n	8007da4 <ai_array_to_buffer_fmt+0x5c>
 8007d50:	4a22      	ldr	r2, [pc, #136]	; (8007ddc <ai_array_to_buffer_fmt+0x94>)
 8007d52:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d010      	beq.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007d5a:	dd13      	ble.n	8007d84 <ai_array_to_buffer_fmt+0x3c>
 8007d5c:	4a20      	ldr	r2, [pc, #128]	; (8007de0 <ai_array_to_buffer_fmt+0x98>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d00c      	beq.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007d62:	dc27      	bgt.n	8007db4 <ai_array_to_buffer_fmt+0x6c>
 8007d64:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d007      	beq.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007d6c:	3207      	adds	r2, #7
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d004      	beq.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007d72:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d000      	beq.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007d7a:	2340      	movs	r3, #64	; 0x40
 8007d7c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007d80:	4318      	orrs	r0, r3
 8007d82:	4770      	bx	lr
 8007d84:	4a17      	ldr	r2, [pc, #92]	; (8007de4 <ai_array_to_buffer_fmt+0x9c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d0f8      	beq.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007d8a:	dd1e      	ble.n	8007dca <ai_array_to_buffer_fmt+0x82>
 8007d8c:	4a16      	ldr	r2, [pc, #88]	; (8007de8 <ai_array_to_buffer_fmt+0xa0>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d0f4      	beq.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007d92:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d0f0      	beq.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007d9a:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d1eb      	bne.n	8007d7a <ai_array_to_buffer_fmt+0x32>
 8007da2:	e7eb      	b.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007da4:	4b11      	ldr	r3, [pc, #68]	; (8007dec <ai_array_to_buffer_fmt+0xa4>)
 8007da6:	4003      	ands	r3, r0
 8007da8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dac:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8007db0:	4318      	orrs	r0, r3
 8007db2:	4770      	bx	lr
 8007db4:	4a0e      	ldr	r2, [pc, #56]	; (8007df0 <ai_array_to_buffer_fmt+0xa8>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d0e0      	beq.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007dba:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d0dc      	beq.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007dc2:	4a0c      	ldr	r2, [pc, #48]	; (8007df4 <ai_array_to_buffer_fmt+0xac>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d1d8      	bne.n	8007d7a <ai_array_to_buffer_fmt+0x32>
 8007dc8:	e7d8      	b.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007dca:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d0d4      	beq.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007dd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d0d0      	beq.n	8007d7c <ai_array_to_buffer_fmt+0x34>
 8007dda:	e7ce      	b.n	8007d7a <ai_array_to_buffer_fmt+0x32>
 8007ddc:	00060440 	.word	0x00060440
 8007de0:	00840840 	.word	0x00840840
 8007de4:	00040447 	.word	0x00040447
 8007de8:	0004084f 	.word	0x0004084f
 8007dec:	00803fff 	.word	0x00803fff
 8007df0:	00841040 	.word	0x00841040
 8007df4:	0084084f 	.word	0x0084084f

08007df8 <ai_array_get_byte_size>:
 8007df8:	b1c1      	cbz	r1, 8007e2c <ai_array_get_byte_size+0x34>
 8007dfa:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8007dfe:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8007e02:	4413      	add	r3, r2
 8007e04:	fb01 f103 	mul.w	r1, r1, r3
 8007e08:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8007e0c:	3107      	adds	r1, #7
 8007e0e:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8007e12:	f021 0107 	bic.w	r1, r1, #7
 8007e16:	2804      	cmp	r0, #4
 8007e18:	fa21 f102 	lsr.w	r1, r1, r2
 8007e1c:	d008      	beq.n	8007e30 <ai_array_get_byte_size+0x38>
 8007e1e:	2808      	cmp	r0, #8
 8007e20:	d101      	bne.n	8007e26 <ai_array_get_byte_size+0x2e>
 8007e22:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8007e26:	3107      	adds	r1, #7
 8007e28:	08c8      	lsrs	r0, r1, #3
 8007e2a:	4770      	bx	lr
 8007e2c:	4608      	mov	r0, r1
 8007e2e:	4770      	bx	lr
 8007e30:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8007e34:	3107      	adds	r1, #7
 8007e36:	08c8      	lsrs	r0, r1, #3
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop

08007e3c <expf>:
 8007e3c:	b508      	push	{r3, lr}
 8007e3e:	ed2d 8b02 	vpush	{d8}
 8007e42:	eef0 8a40 	vmov.f32	s17, s0
 8007e46:	f000 f837 	bl	8007eb8 <__ieee754_expf>
 8007e4a:	4b16      	ldr	r3, [pc, #88]	; (8007ea4 <expf+0x68>)
 8007e4c:	f993 3000 	ldrsb.w	r3, [r3]
 8007e50:	3301      	adds	r3, #1
 8007e52:	eeb0 8a40 	vmov.f32	s16, s0
 8007e56:	d011      	beq.n	8007e7c <expf+0x40>
 8007e58:	eeb0 0a68 	vmov.f32	s0, s17
 8007e5c:	f000 f900 	bl	8008060 <finitef>
 8007e60:	b160      	cbz	r0, 8007e7c <expf+0x40>
 8007e62:	eddf 7a11 	vldr	s15, [pc, #68]	; 8007ea8 <expf+0x6c>
 8007e66:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e6e:	dd0a      	ble.n	8007e86 <expf+0x4a>
 8007e70:	f000 f90a 	bl	8008088 <__errno>
 8007e74:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8007eac <expf+0x70>
 8007e78:	2322      	movs	r3, #34	; 0x22
 8007e7a:	6003      	str	r3, [r0, #0]
 8007e7c:	eeb0 0a48 	vmov.f32	s0, s16
 8007e80:	ecbd 8b02 	vpop	{d8}
 8007e84:	bd08      	pop	{r3, pc}
 8007e86:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8007eb0 <expf+0x74>
 8007e8a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e92:	d5f3      	bpl.n	8007e7c <expf+0x40>
 8007e94:	f000 f8f8 	bl	8008088 <__errno>
 8007e98:	2322      	movs	r3, #34	; 0x22
 8007e9a:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8007eb4 <expf+0x78>
 8007e9e:	6003      	str	r3, [r0, #0]
 8007ea0:	e7ec      	b.n	8007e7c <expf+0x40>
 8007ea2:	bf00      	nop
 8007ea4:	20000778 	.word	0x20000778
 8007ea8:	42b17180 	.word	0x42b17180
 8007eac:	7f800000 	.word	0x7f800000
 8007eb0:	c2cff1b5 	.word	0xc2cff1b5
 8007eb4:	00000000 	.word	0x00000000

08007eb8 <__ieee754_expf>:
 8007eb8:	ee10 2a10 	vmov	r2, s0
 8007ebc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8007ec0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007ec4:	d902      	bls.n	8007ecc <__ieee754_expf+0x14>
 8007ec6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007eca:	4770      	bx	lr
 8007ecc:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8007ed0:	d106      	bne.n	8007ee0 <__ieee754_expf+0x28>
 8007ed2:	eddf 7a51 	vldr	s15, [pc, #324]	; 8008018 <__ieee754_expf+0x160>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bf18      	it	ne
 8007eda:	eeb0 0a67 	vmovne.f32	s0, s15
 8007ede:	4770      	bx	lr
 8007ee0:	484e      	ldr	r0, [pc, #312]	; (800801c <__ieee754_expf+0x164>)
 8007ee2:	4282      	cmp	r2, r0
 8007ee4:	dd04      	ble.n	8007ef0 <__ieee754_expf+0x38>
 8007ee6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8008020 <__ieee754_expf+0x168>
 8007eea:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007eee:	4770      	bx	lr
 8007ef0:	2a00      	cmp	r2, #0
 8007ef2:	da03      	bge.n	8007efc <__ieee754_expf+0x44>
 8007ef4:	4a4b      	ldr	r2, [pc, #300]	; (8008024 <__ieee754_expf+0x16c>)
 8007ef6:	4291      	cmp	r1, r2
 8007ef8:	f200 808a 	bhi.w	8008010 <__ieee754_expf+0x158>
 8007efc:	4a4a      	ldr	r2, [pc, #296]	; (8008028 <__ieee754_expf+0x170>)
 8007efe:	4291      	cmp	r1, r2
 8007f00:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007f04:	d954      	bls.n	8007fb0 <__ieee754_expf+0xf8>
 8007f06:	4a49      	ldr	r2, [pc, #292]	; (800802c <__ieee754_expf+0x174>)
 8007f08:	4291      	cmp	r1, r2
 8007f0a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8007f0e:	d836      	bhi.n	8007f7e <__ieee754_expf+0xc6>
 8007f10:	4947      	ldr	r1, [pc, #284]	; (8008030 <__ieee754_expf+0x178>)
 8007f12:	4411      	add	r1, r2
 8007f14:	ed91 7a00 	vldr	s14, [r1]
 8007f18:	4946      	ldr	r1, [pc, #280]	; (8008034 <__ieee754_expf+0x17c>)
 8007f1a:	440a      	add	r2, r1
 8007f1c:	edd2 7a00 	vldr	s15, [r2]
 8007f20:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007f24:	f1c3 0201 	rsb	r2, r3, #1
 8007f28:	1ad2      	subs	r2, r2, r3
 8007f2a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007f2e:	ee60 6a00 	vmul.f32	s13, s0, s0
 8007f32:	eddf 5a41 	vldr	s11, [pc, #260]	; 8008038 <__ieee754_expf+0x180>
 8007f36:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800803c <__ieee754_expf+0x184>
 8007f3a:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8007f3e:	eddf 5a40 	vldr	s11, [pc, #256]	; 8008040 <__ieee754_expf+0x188>
 8007f42:	eee5 5a26 	vfma.f32	s11, s10, s13
 8007f46:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8008044 <__ieee754_expf+0x18c>
 8007f4a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 8007f4e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8008048 <__ieee754_expf+0x190>
 8007f52:	eee5 5a26 	vfma.f32	s11, s10, s13
 8007f56:	eeb0 5a40 	vmov.f32	s10, s0
 8007f5a:	eea5 5ae6 	vfms.f32	s10, s11, s13
 8007f5e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8007f62:	eef0 6a45 	vmov.f32	s13, s10
 8007f66:	ee20 5a05 	vmul.f32	s10, s0, s10
 8007f6a:	bb92      	cbnz	r2, 8007fd2 <__ieee754_expf+0x11a>
 8007f6c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8007f70:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007f74:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007f78:	ee36 0a40 	vsub.f32	s0, s12, s0
 8007f7c:	4770      	bx	lr
 8007f7e:	4b33      	ldr	r3, [pc, #204]	; (800804c <__ieee754_expf+0x194>)
 8007f80:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8008050 <__ieee754_expf+0x198>
 8007f84:	4413      	add	r3, r2
 8007f86:	edd3 7a00 	vldr	s15, [r3]
 8007f8a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007f8e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8008054 <__ieee754_expf+0x19c>
 8007f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f96:	ee17 2a90 	vmov	r2, s15
 8007f9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f9e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007fa2:	eeb0 7a40 	vmov.f32	s14, s0
 8007fa6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8008058 <__ieee754_expf+0x1a0>
 8007faa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007fae:	e7bc      	b.n	8007f2a <__ieee754_expf+0x72>
 8007fb0:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8007fb4:	d20b      	bcs.n	8007fce <__ieee754_expf+0x116>
 8007fb6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8008020 <__ieee754_expf+0x168>
 8007fba:	ee70 6a26 	vadd.f32	s13, s0, s13
 8007fbe:	eef4 6ac6 	vcmpe.f32	s13, s12
 8007fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc6:	dd02      	ble.n	8007fce <__ieee754_expf+0x116>
 8007fc8:	ee30 0a06 	vadd.f32	s0, s0, s12
 8007fcc:	4770      	bx	lr
 8007fce:	2200      	movs	r2, #0
 8007fd0:	e7ad      	b.n	8007f2e <__ieee754_expf+0x76>
 8007fd2:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8007fd6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8007fda:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8007fde:	bfb8      	it	lt
 8007fe0:	3264      	addlt	r2, #100	; 0x64
 8007fe2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007fe6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007fea:	ee76 7a40 	vsub.f32	s15, s12, s0
 8007fee:	ee17 3a90 	vmov	r3, s15
 8007ff2:	bfab      	itete	ge
 8007ff4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007ff8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007ffc:	ee00 3a10 	vmovge	s0, r3
 8008000:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800805c <__ieee754_expf+0x1a4>
 8008004:	bfbc      	itt	lt
 8008006:	ee00 3a10 	vmovlt	s0, r3
 800800a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800800e:	4770      	bx	lr
 8008010:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008018 <__ieee754_expf+0x160>
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	00000000 	.word	0x00000000
 800801c:	42b17217 	.word	0x42b17217
 8008020:	7149f2ca 	.word	0x7149f2ca
 8008024:	42cff1b5 	.word	0x42cff1b5
 8008028:	3eb17218 	.word	0x3eb17218
 800802c:	3f851591 	.word	0x3f851591
 8008030:	08023b30 	.word	0x08023b30
 8008034:	08023b38 	.word	0x08023b38
 8008038:	3331bb4c 	.word	0x3331bb4c
 800803c:	b5ddea0e 	.word	0xb5ddea0e
 8008040:	388ab355 	.word	0x388ab355
 8008044:	bb360b61 	.word	0xbb360b61
 8008048:	3e2aaaab 	.word	0x3e2aaaab
 800804c:	08023b28 	.word	0x08023b28
 8008050:	3fb8aa3b 	.word	0x3fb8aa3b
 8008054:	3f317180 	.word	0x3f317180
 8008058:	3717f7d1 	.word	0x3717f7d1
 800805c:	0d800000 	.word	0x0d800000

08008060 <finitef>:
 8008060:	b082      	sub	sp, #8
 8008062:	ed8d 0a01 	vstr	s0, [sp, #4]
 8008066:	9801      	ldr	r0, [sp, #4]
 8008068:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800806c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008070:	bfac      	ite	ge
 8008072:	2000      	movge	r0, #0
 8008074:	2001      	movlt	r0, #1
 8008076:	b002      	add	sp, #8
 8008078:	4770      	bx	lr
	...

0800807c <nanf>:
 800807c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008084 <nanf+0x8>
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	7fc00000 	.word	0x7fc00000

08008088 <__errno>:
 8008088:	4b01      	ldr	r3, [pc, #4]	; (8008090 <__errno+0x8>)
 800808a:	6818      	ldr	r0, [r3, #0]
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	2000077c 	.word	0x2000077c

08008094 <__libc_init_array>:
 8008094:	b570      	push	{r4, r5, r6, lr}
 8008096:	4d0d      	ldr	r5, [pc, #52]	; (80080cc <__libc_init_array+0x38>)
 8008098:	4c0d      	ldr	r4, [pc, #52]	; (80080d0 <__libc_init_array+0x3c>)
 800809a:	1b64      	subs	r4, r4, r5
 800809c:	10a4      	asrs	r4, r4, #2
 800809e:	2600      	movs	r6, #0
 80080a0:	42a6      	cmp	r6, r4
 80080a2:	d109      	bne.n	80080b8 <__libc_init_array+0x24>
 80080a4:	4d0b      	ldr	r5, [pc, #44]	; (80080d4 <__libc_init_array+0x40>)
 80080a6:	4c0c      	ldr	r4, [pc, #48]	; (80080d8 <__libc_init_array+0x44>)
 80080a8:	f004 fde2 	bl	800cc70 <_init>
 80080ac:	1b64      	subs	r4, r4, r5
 80080ae:	10a4      	asrs	r4, r4, #2
 80080b0:	2600      	movs	r6, #0
 80080b2:	42a6      	cmp	r6, r4
 80080b4:	d105      	bne.n	80080c2 <__libc_init_array+0x2e>
 80080b6:	bd70      	pop	{r4, r5, r6, pc}
 80080b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080bc:	4798      	blx	r3
 80080be:	3601      	adds	r6, #1
 80080c0:	e7ee      	b.n	80080a0 <__libc_init_array+0xc>
 80080c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c6:	4798      	blx	r3
 80080c8:	3601      	adds	r6, #1
 80080ca:	e7f2      	b.n	80080b2 <__libc_init_array+0x1e>
 80080cc:	08023ffc 	.word	0x08023ffc
 80080d0:	08023ffc 	.word	0x08023ffc
 80080d4:	08023ffc 	.word	0x08023ffc
 80080d8:	08024000 	.word	0x08024000

080080dc <malloc>:
 80080dc:	4b02      	ldr	r3, [pc, #8]	; (80080e8 <malloc+0xc>)
 80080de:	4601      	mov	r1, r0
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	f000 b869 	b.w	80081b8 <_malloc_r>
 80080e6:	bf00      	nop
 80080e8:	2000077c 	.word	0x2000077c

080080ec <memcpy>:
 80080ec:	440a      	add	r2, r1
 80080ee:	4291      	cmp	r1, r2
 80080f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80080f4:	d100      	bne.n	80080f8 <memcpy+0xc>
 80080f6:	4770      	bx	lr
 80080f8:	b510      	push	{r4, lr}
 80080fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008102:	4291      	cmp	r1, r2
 8008104:	d1f9      	bne.n	80080fa <memcpy+0xe>
 8008106:	bd10      	pop	{r4, pc}

08008108 <memset>:
 8008108:	4402      	add	r2, r0
 800810a:	4603      	mov	r3, r0
 800810c:	4293      	cmp	r3, r2
 800810e:	d100      	bne.n	8008112 <memset+0xa>
 8008110:	4770      	bx	lr
 8008112:	f803 1b01 	strb.w	r1, [r3], #1
 8008116:	e7f9      	b.n	800810c <memset+0x4>

08008118 <_free_r>:
 8008118:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800811a:	2900      	cmp	r1, #0
 800811c:	d048      	beq.n	80081b0 <_free_r+0x98>
 800811e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008122:	9001      	str	r0, [sp, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f1a1 0404 	sub.w	r4, r1, #4
 800812a:	bfb8      	it	lt
 800812c:	18e4      	addlt	r4, r4, r3
 800812e:	f003 fc2b 	bl	800b988 <__malloc_lock>
 8008132:	4a20      	ldr	r2, [pc, #128]	; (80081b4 <_free_r+0x9c>)
 8008134:	9801      	ldr	r0, [sp, #4]
 8008136:	6813      	ldr	r3, [r2, #0]
 8008138:	4615      	mov	r5, r2
 800813a:	b933      	cbnz	r3, 800814a <_free_r+0x32>
 800813c:	6063      	str	r3, [r4, #4]
 800813e:	6014      	str	r4, [r2, #0]
 8008140:	b003      	add	sp, #12
 8008142:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008146:	f003 bc25 	b.w	800b994 <__malloc_unlock>
 800814a:	42a3      	cmp	r3, r4
 800814c:	d90b      	bls.n	8008166 <_free_r+0x4e>
 800814e:	6821      	ldr	r1, [r4, #0]
 8008150:	1862      	adds	r2, r4, r1
 8008152:	4293      	cmp	r3, r2
 8008154:	bf04      	itt	eq
 8008156:	681a      	ldreq	r2, [r3, #0]
 8008158:	685b      	ldreq	r3, [r3, #4]
 800815a:	6063      	str	r3, [r4, #4]
 800815c:	bf04      	itt	eq
 800815e:	1852      	addeq	r2, r2, r1
 8008160:	6022      	streq	r2, [r4, #0]
 8008162:	602c      	str	r4, [r5, #0]
 8008164:	e7ec      	b.n	8008140 <_free_r+0x28>
 8008166:	461a      	mov	r2, r3
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	b10b      	cbz	r3, 8008170 <_free_r+0x58>
 800816c:	42a3      	cmp	r3, r4
 800816e:	d9fa      	bls.n	8008166 <_free_r+0x4e>
 8008170:	6811      	ldr	r1, [r2, #0]
 8008172:	1855      	adds	r5, r2, r1
 8008174:	42a5      	cmp	r5, r4
 8008176:	d10b      	bne.n	8008190 <_free_r+0x78>
 8008178:	6824      	ldr	r4, [r4, #0]
 800817a:	4421      	add	r1, r4
 800817c:	1854      	adds	r4, r2, r1
 800817e:	42a3      	cmp	r3, r4
 8008180:	6011      	str	r1, [r2, #0]
 8008182:	d1dd      	bne.n	8008140 <_free_r+0x28>
 8008184:	681c      	ldr	r4, [r3, #0]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	6053      	str	r3, [r2, #4]
 800818a:	4421      	add	r1, r4
 800818c:	6011      	str	r1, [r2, #0]
 800818e:	e7d7      	b.n	8008140 <_free_r+0x28>
 8008190:	d902      	bls.n	8008198 <_free_r+0x80>
 8008192:	230c      	movs	r3, #12
 8008194:	6003      	str	r3, [r0, #0]
 8008196:	e7d3      	b.n	8008140 <_free_r+0x28>
 8008198:	6825      	ldr	r5, [r4, #0]
 800819a:	1961      	adds	r1, r4, r5
 800819c:	428b      	cmp	r3, r1
 800819e:	bf04      	itt	eq
 80081a0:	6819      	ldreq	r1, [r3, #0]
 80081a2:	685b      	ldreq	r3, [r3, #4]
 80081a4:	6063      	str	r3, [r4, #4]
 80081a6:	bf04      	itt	eq
 80081a8:	1949      	addeq	r1, r1, r5
 80081aa:	6021      	streq	r1, [r4, #0]
 80081ac:	6054      	str	r4, [r2, #4]
 80081ae:	e7c7      	b.n	8008140 <_free_r+0x28>
 80081b0:	b003      	add	sp, #12
 80081b2:	bd30      	pop	{r4, r5, pc}
 80081b4:	2000b20c 	.word	0x2000b20c

080081b8 <_malloc_r>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	1ccd      	adds	r5, r1, #3
 80081bc:	f025 0503 	bic.w	r5, r5, #3
 80081c0:	3508      	adds	r5, #8
 80081c2:	2d0c      	cmp	r5, #12
 80081c4:	bf38      	it	cc
 80081c6:	250c      	movcc	r5, #12
 80081c8:	2d00      	cmp	r5, #0
 80081ca:	4606      	mov	r6, r0
 80081cc:	db01      	blt.n	80081d2 <_malloc_r+0x1a>
 80081ce:	42a9      	cmp	r1, r5
 80081d0:	d903      	bls.n	80081da <_malloc_r+0x22>
 80081d2:	230c      	movs	r3, #12
 80081d4:	6033      	str	r3, [r6, #0]
 80081d6:	2000      	movs	r0, #0
 80081d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081da:	f003 fbd5 	bl	800b988 <__malloc_lock>
 80081de:	4921      	ldr	r1, [pc, #132]	; (8008264 <_malloc_r+0xac>)
 80081e0:	680a      	ldr	r2, [r1, #0]
 80081e2:	4614      	mov	r4, r2
 80081e4:	b99c      	cbnz	r4, 800820e <_malloc_r+0x56>
 80081e6:	4f20      	ldr	r7, [pc, #128]	; (8008268 <_malloc_r+0xb0>)
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	b923      	cbnz	r3, 80081f6 <_malloc_r+0x3e>
 80081ec:	4621      	mov	r1, r4
 80081ee:	4630      	mov	r0, r6
 80081f0:	f000 ff44 	bl	800907c <_sbrk_r>
 80081f4:	6038      	str	r0, [r7, #0]
 80081f6:	4629      	mov	r1, r5
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 ff3f 	bl	800907c <_sbrk_r>
 80081fe:	1c43      	adds	r3, r0, #1
 8008200:	d123      	bne.n	800824a <_malloc_r+0x92>
 8008202:	230c      	movs	r3, #12
 8008204:	6033      	str	r3, [r6, #0]
 8008206:	4630      	mov	r0, r6
 8008208:	f003 fbc4 	bl	800b994 <__malloc_unlock>
 800820c:	e7e3      	b.n	80081d6 <_malloc_r+0x1e>
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	1b5b      	subs	r3, r3, r5
 8008212:	d417      	bmi.n	8008244 <_malloc_r+0x8c>
 8008214:	2b0b      	cmp	r3, #11
 8008216:	d903      	bls.n	8008220 <_malloc_r+0x68>
 8008218:	6023      	str	r3, [r4, #0]
 800821a:	441c      	add	r4, r3
 800821c:	6025      	str	r5, [r4, #0]
 800821e:	e004      	b.n	800822a <_malloc_r+0x72>
 8008220:	6863      	ldr	r3, [r4, #4]
 8008222:	42a2      	cmp	r2, r4
 8008224:	bf0c      	ite	eq
 8008226:	600b      	streq	r3, [r1, #0]
 8008228:	6053      	strne	r3, [r2, #4]
 800822a:	4630      	mov	r0, r6
 800822c:	f003 fbb2 	bl	800b994 <__malloc_unlock>
 8008230:	f104 000b 	add.w	r0, r4, #11
 8008234:	1d23      	adds	r3, r4, #4
 8008236:	f020 0007 	bic.w	r0, r0, #7
 800823a:	1ac2      	subs	r2, r0, r3
 800823c:	d0cc      	beq.n	80081d8 <_malloc_r+0x20>
 800823e:	1a1b      	subs	r3, r3, r0
 8008240:	50a3      	str	r3, [r4, r2]
 8008242:	e7c9      	b.n	80081d8 <_malloc_r+0x20>
 8008244:	4622      	mov	r2, r4
 8008246:	6864      	ldr	r4, [r4, #4]
 8008248:	e7cc      	b.n	80081e4 <_malloc_r+0x2c>
 800824a:	1cc4      	adds	r4, r0, #3
 800824c:	f024 0403 	bic.w	r4, r4, #3
 8008250:	42a0      	cmp	r0, r4
 8008252:	d0e3      	beq.n	800821c <_malloc_r+0x64>
 8008254:	1a21      	subs	r1, r4, r0
 8008256:	4630      	mov	r0, r6
 8008258:	f000 ff10 	bl	800907c <_sbrk_r>
 800825c:	3001      	adds	r0, #1
 800825e:	d1dd      	bne.n	800821c <_malloc_r+0x64>
 8008260:	e7cf      	b.n	8008202 <_malloc_r+0x4a>
 8008262:	bf00      	nop
 8008264:	2000b20c 	.word	0x2000b20c
 8008268:	2000b210 	.word	0x2000b210

0800826c <__cvt>:
 800826c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008270:	ec55 4b10 	vmov	r4, r5, d0
 8008274:	2d00      	cmp	r5, #0
 8008276:	460e      	mov	r6, r1
 8008278:	4619      	mov	r1, r3
 800827a:	462b      	mov	r3, r5
 800827c:	bfbb      	ittet	lt
 800827e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008282:	461d      	movlt	r5, r3
 8008284:	2300      	movge	r3, #0
 8008286:	232d      	movlt	r3, #45	; 0x2d
 8008288:	700b      	strb	r3, [r1, #0]
 800828a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800828c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008290:	4691      	mov	r9, r2
 8008292:	f023 0820 	bic.w	r8, r3, #32
 8008296:	bfbc      	itt	lt
 8008298:	4622      	movlt	r2, r4
 800829a:	4614      	movlt	r4, r2
 800829c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082a0:	d005      	beq.n	80082ae <__cvt+0x42>
 80082a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80082a6:	d100      	bne.n	80082aa <__cvt+0x3e>
 80082a8:	3601      	adds	r6, #1
 80082aa:	2102      	movs	r1, #2
 80082ac:	e000      	b.n	80082b0 <__cvt+0x44>
 80082ae:	2103      	movs	r1, #3
 80082b0:	ab03      	add	r3, sp, #12
 80082b2:	9301      	str	r3, [sp, #4]
 80082b4:	ab02      	add	r3, sp, #8
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	ec45 4b10 	vmov	d0, r4, r5
 80082bc:	4653      	mov	r3, sl
 80082be:	4632      	mov	r2, r6
 80082c0:	f001 ffd2 	bl	800a268 <_dtoa_r>
 80082c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082c8:	4607      	mov	r7, r0
 80082ca:	d102      	bne.n	80082d2 <__cvt+0x66>
 80082cc:	f019 0f01 	tst.w	r9, #1
 80082d0:	d022      	beq.n	8008318 <__cvt+0xac>
 80082d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082d6:	eb07 0906 	add.w	r9, r7, r6
 80082da:	d110      	bne.n	80082fe <__cvt+0x92>
 80082dc:	783b      	ldrb	r3, [r7, #0]
 80082de:	2b30      	cmp	r3, #48	; 0x30
 80082e0:	d10a      	bne.n	80082f8 <__cvt+0x8c>
 80082e2:	2200      	movs	r2, #0
 80082e4:	2300      	movs	r3, #0
 80082e6:	4620      	mov	r0, r4
 80082e8:	4629      	mov	r1, r5
 80082ea:	f7f8 fbfd 	bl	8000ae8 <__aeabi_dcmpeq>
 80082ee:	b918      	cbnz	r0, 80082f8 <__cvt+0x8c>
 80082f0:	f1c6 0601 	rsb	r6, r6, #1
 80082f4:	f8ca 6000 	str.w	r6, [sl]
 80082f8:	f8da 3000 	ldr.w	r3, [sl]
 80082fc:	4499      	add	r9, r3
 80082fe:	2200      	movs	r2, #0
 8008300:	2300      	movs	r3, #0
 8008302:	4620      	mov	r0, r4
 8008304:	4629      	mov	r1, r5
 8008306:	f7f8 fbef 	bl	8000ae8 <__aeabi_dcmpeq>
 800830a:	b108      	cbz	r0, 8008310 <__cvt+0xa4>
 800830c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008310:	2230      	movs	r2, #48	; 0x30
 8008312:	9b03      	ldr	r3, [sp, #12]
 8008314:	454b      	cmp	r3, r9
 8008316:	d307      	bcc.n	8008328 <__cvt+0xbc>
 8008318:	9b03      	ldr	r3, [sp, #12]
 800831a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800831c:	1bdb      	subs	r3, r3, r7
 800831e:	4638      	mov	r0, r7
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	b004      	add	sp, #16
 8008324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008328:	1c59      	adds	r1, r3, #1
 800832a:	9103      	str	r1, [sp, #12]
 800832c:	701a      	strb	r2, [r3, #0]
 800832e:	e7f0      	b.n	8008312 <__cvt+0xa6>

08008330 <__exponent>:
 8008330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008332:	4603      	mov	r3, r0
 8008334:	2900      	cmp	r1, #0
 8008336:	bfb8      	it	lt
 8008338:	4249      	neglt	r1, r1
 800833a:	f803 2b02 	strb.w	r2, [r3], #2
 800833e:	bfb4      	ite	lt
 8008340:	222d      	movlt	r2, #45	; 0x2d
 8008342:	222b      	movge	r2, #43	; 0x2b
 8008344:	2909      	cmp	r1, #9
 8008346:	7042      	strb	r2, [r0, #1]
 8008348:	dd2a      	ble.n	80083a0 <__exponent+0x70>
 800834a:	f10d 0407 	add.w	r4, sp, #7
 800834e:	46a4      	mov	ip, r4
 8008350:	270a      	movs	r7, #10
 8008352:	46a6      	mov	lr, r4
 8008354:	460a      	mov	r2, r1
 8008356:	fb91 f6f7 	sdiv	r6, r1, r7
 800835a:	fb07 1516 	mls	r5, r7, r6, r1
 800835e:	3530      	adds	r5, #48	; 0x30
 8008360:	2a63      	cmp	r2, #99	; 0x63
 8008362:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008366:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800836a:	4631      	mov	r1, r6
 800836c:	dcf1      	bgt.n	8008352 <__exponent+0x22>
 800836e:	3130      	adds	r1, #48	; 0x30
 8008370:	f1ae 0502 	sub.w	r5, lr, #2
 8008374:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008378:	1c44      	adds	r4, r0, #1
 800837a:	4629      	mov	r1, r5
 800837c:	4561      	cmp	r1, ip
 800837e:	d30a      	bcc.n	8008396 <__exponent+0x66>
 8008380:	f10d 0209 	add.w	r2, sp, #9
 8008384:	eba2 020e 	sub.w	r2, r2, lr
 8008388:	4565      	cmp	r5, ip
 800838a:	bf88      	it	hi
 800838c:	2200      	movhi	r2, #0
 800838e:	4413      	add	r3, r2
 8008390:	1a18      	subs	r0, r3, r0
 8008392:	b003      	add	sp, #12
 8008394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800839a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800839e:	e7ed      	b.n	800837c <__exponent+0x4c>
 80083a0:	2330      	movs	r3, #48	; 0x30
 80083a2:	3130      	adds	r1, #48	; 0x30
 80083a4:	7083      	strb	r3, [r0, #2]
 80083a6:	70c1      	strb	r1, [r0, #3]
 80083a8:	1d03      	adds	r3, r0, #4
 80083aa:	e7f1      	b.n	8008390 <__exponent+0x60>

080083ac <_printf_float>:
 80083ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b0:	ed2d 8b02 	vpush	{d8}
 80083b4:	b08d      	sub	sp, #52	; 0x34
 80083b6:	460c      	mov	r4, r1
 80083b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083bc:	4616      	mov	r6, r2
 80083be:	461f      	mov	r7, r3
 80083c0:	4605      	mov	r5, r0
 80083c2:	f003 fa63 	bl	800b88c <_localeconv_r>
 80083c6:	f8d0 a000 	ldr.w	sl, [r0]
 80083ca:	4650      	mov	r0, sl
 80083cc:	f7f7 ff10 	bl	80001f0 <strlen>
 80083d0:	2300      	movs	r3, #0
 80083d2:	930a      	str	r3, [sp, #40]	; 0x28
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	9305      	str	r3, [sp, #20]
 80083d8:	f8d8 3000 	ldr.w	r3, [r8]
 80083dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80083e0:	3307      	adds	r3, #7
 80083e2:	f023 0307 	bic.w	r3, r3, #7
 80083e6:	f103 0208 	add.w	r2, r3, #8
 80083ea:	f8c8 2000 	str.w	r2, [r8]
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80083f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80083fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083fe:	9307      	str	r3, [sp, #28]
 8008400:	f8cd 8018 	str.w	r8, [sp, #24]
 8008404:	ee08 0a10 	vmov	s16, r0
 8008408:	4b9f      	ldr	r3, [pc, #636]	; (8008688 <_printf_float+0x2dc>)
 800840a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800840e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008412:	f7f8 fb9b 	bl	8000b4c <__aeabi_dcmpun>
 8008416:	bb88      	cbnz	r0, 800847c <_printf_float+0xd0>
 8008418:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800841c:	4b9a      	ldr	r3, [pc, #616]	; (8008688 <_printf_float+0x2dc>)
 800841e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008422:	f7f8 fb75 	bl	8000b10 <__aeabi_dcmple>
 8008426:	bb48      	cbnz	r0, 800847c <_printf_float+0xd0>
 8008428:	2200      	movs	r2, #0
 800842a:	2300      	movs	r3, #0
 800842c:	4640      	mov	r0, r8
 800842e:	4649      	mov	r1, r9
 8008430:	f7f8 fb64 	bl	8000afc <__aeabi_dcmplt>
 8008434:	b110      	cbz	r0, 800843c <_printf_float+0x90>
 8008436:	232d      	movs	r3, #45	; 0x2d
 8008438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800843c:	4b93      	ldr	r3, [pc, #588]	; (800868c <_printf_float+0x2e0>)
 800843e:	4894      	ldr	r0, [pc, #592]	; (8008690 <_printf_float+0x2e4>)
 8008440:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008444:	bf94      	ite	ls
 8008446:	4698      	movls	r8, r3
 8008448:	4680      	movhi	r8, r0
 800844a:	2303      	movs	r3, #3
 800844c:	6123      	str	r3, [r4, #16]
 800844e:	9b05      	ldr	r3, [sp, #20]
 8008450:	f023 0204 	bic.w	r2, r3, #4
 8008454:	6022      	str	r2, [r4, #0]
 8008456:	f04f 0900 	mov.w	r9, #0
 800845a:	9700      	str	r7, [sp, #0]
 800845c:	4633      	mov	r3, r6
 800845e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008460:	4621      	mov	r1, r4
 8008462:	4628      	mov	r0, r5
 8008464:	f000 f9d8 	bl	8008818 <_printf_common>
 8008468:	3001      	adds	r0, #1
 800846a:	f040 8090 	bne.w	800858e <_printf_float+0x1e2>
 800846e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008472:	b00d      	add	sp, #52	; 0x34
 8008474:	ecbd 8b02 	vpop	{d8}
 8008478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800847c:	4642      	mov	r2, r8
 800847e:	464b      	mov	r3, r9
 8008480:	4640      	mov	r0, r8
 8008482:	4649      	mov	r1, r9
 8008484:	f7f8 fb62 	bl	8000b4c <__aeabi_dcmpun>
 8008488:	b140      	cbz	r0, 800849c <_printf_float+0xf0>
 800848a:	464b      	mov	r3, r9
 800848c:	2b00      	cmp	r3, #0
 800848e:	bfbc      	itt	lt
 8008490:	232d      	movlt	r3, #45	; 0x2d
 8008492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008496:	487f      	ldr	r0, [pc, #508]	; (8008694 <_printf_float+0x2e8>)
 8008498:	4b7f      	ldr	r3, [pc, #508]	; (8008698 <_printf_float+0x2ec>)
 800849a:	e7d1      	b.n	8008440 <_printf_float+0x94>
 800849c:	6863      	ldr	r3, [r4, #4]
 800849e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80084a2:	9206      	str	r2, [sp, #24]
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	d13f      	bne.n	8008528 <_printf_float+0x17c>
 80084a8:	2306      	movs	r3, #6
 80084aa:	6063      	str	r3, [r4, #4]
 80084ac:	9b05      	ldr	r3, [sp, #20]
 80084ae:	6861      	ldr	r1, [r4, #4]
 80084b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084b4:	2300      	movs	r3, #0
 80084b6:	9303      	str	r3, [sp, #12]
 80084b8:	ab0a      	add	r3, sp, #40	; 0x28
 80084ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084be:	ab09      	add	r3, sp, #36	; 0x24
 80084c0:	ec49 8b10 	vmov	d0, r8, r9
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	6022      	str	r2, [r4, #0]
 80084c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084cc:	4628      	mov	r0, r5
 80084ce:	f7ff fecd 	bl	800826c <__cvt>
 80084d2:	9b06      	ldr	r3, [sp, #24]
 80084d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084d6:	2b47      	cmp	r3, #71	; 0x47
 80084d8:	4680      	mov	r8, r0
 80084da:	d108      	bne.n	80084ee <_printf_float+0x142>
 80084dc:	1cc8      	adds	r0, r1, #3
 80084de:	db02      	blt.n	80084e6 <_printf_float+0x13a>
 80084e0:	6863      	ldr	r3, [r4, #4]
 80084e2:	4299      	cmp	r1, r3
 80084e4:	dd41      	ble.n	800856a <_printf_float+0x1be>
 80084e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80084ea:	fa5f fb8b 	uxtb.w	fp, fp
 80084ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084f2:	d820      	bhi.n	8008536 <_printf_float+0x18a>
 80084f4:	3901      	subs	r1, #1
 80084f6:	465a      	mov	r2, fp
 80084f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80084fc:	9109      	str	r1, [sp, #36]	; 0x24
 80084fe:	f7ff ff17 	bl	8008330 <__exponent>
 8008502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008504:	1813      	adds	r3, r2, r0
 8008506:	2a01      	cmp	r2, #1
 8008508:	4681      	mov	r9, r0
 800850a:	6123      	str	r3, [r4, #16]
 800850c:	dc02      	bgt.n	8008514 <_printf_float+0x168>
 800850e:	6822      	ldr	r2, [r4, #0]
 8008510:	07d2      	lsls	r2, r2, #31
 8008512:	d501      	bpl.n	8008518 <_printf_float+0x16c>
 8008514:	3301      	adds	r3, #1
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800851c:	2b00      	cmp	r3, #0
 800851e:	d09c      	beq.n	800845a <_printf_float+0xae>
 8008520:	232d      	movs	r3, #45	; 0x2d
 8008522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008526:	e798      	b.n	800845a <_printf_float+0xae>
 8008528:	9a06      	ldr	r2, [sp, #24]
 800852a:	2a47      	cmp	r2, #71	; 0x47
 800852c:	d1be      	bne.n	80084ac <_printf_float+0x100>
 800852e:	2b00      	cmp	r3, #0
 8008530:	d1bc      	bne.n	80084ac <_printf_float+0x100>
 8008532:	2301      	movs	r3, #1
 8008534:	e7b9      	b.n	80084aa <_printf_float+0xfe>
 8008536:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800853a:	d118      	bne.n	800856e <_printf_float+0x1c2>
 800853c:	2900      	cmp	r1, #0
 800853e:	6863      	ldr	r3, [r4, #4]
 8008540:	dd0b      	ble.n	800855a <_printf_float+0x1ae>
 8008542:	6121      	str	r1, [r4, #16]
 8008544:	b913      	cbnz	r3, 800854c <_printf_float+0x1a0>
 8008546:	6822      	ldr	r2, [r4, #0]
 8008548:	07d0      	lsls	r0, r2, #31
 800854a:	d502      	bpl.n	8008552 <_printf_float+0x1a6>
 800854c:	3301      	adds	r3, #1
 800854e:	440b      	add	r3, r1
 8008550:	6123      	str	r3, [r4, #16]
 8008552:	65a1      	str	r1, [r4, #88]	; 0x58
 8008554:	f04f 0900 	mov.w	r9, #0
 8008558:	e7de      	b.n	8008518 <_printf_float+0x16c>
 800855a:	b913      	cbnz	r3, 8008562 <_printf_float+0x1b6>
 800855c:	6822      	ldr	r2, [r4, #0]
 800855e:	07d2      	lsls	r2, r2, #31
 8008560:	d501      	bpl.n	8008566 <_printf_float+0x1ba>
 8008562:	3302      	adds	r3, #2
 8008564:	e7f4      	b.n	8008550 <_printf_float+0x1a4>
 8008566:	2301      	movs	r3, #1
 8008568:	e7f2      	b.n	8008550 <_printf_float+0x1a4>
 800856a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800856e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008570:	4299      	cmp	r1, r3
 8008572:	db05      	blt.n	8008580 <_printf_float+0x1d4>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	6121      	str	r1, [r4, #16]
 8008578:	07d8      	lsls	r0, r3, #31
 800857a:	d5ea      	bpl.n	8008552 <_printf_float+0x1a6>
 800857c:	1c4b      	adds	r3, r1, #1
 800857e:	e7e7      	b.n	8008550 <_printf_float+0x1a4>
 8008580:	2900      	cmp	r1, #0
 8008582:	bfd4      	ite	le
 8008584:	f1c1 0202 	rsble	r2, r1, #2
 8008588:	2201      	movgt	r2, #1
 800858a:	4413      	add	r3, r2
 800858c:	e7e0      	b.n	8008550 <_printf_float+0x1a4>
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	055a      	lsls	r2, r3, #21
 8008592:	d407      	bmi.n	80085a4 <_printf_float+0x1f8>
 8008594:	6923      	ldr	r3, [r4, #16]
 8008596:	4642      	mov	r2, r8
 8008598:	4631      	mov	r1, r6
 800859a:	4628      	mov	r0, r5
 800859c:	47b8      	blx	r7
 800859e:	3001      	adds	r0, #1
 80085a0:	d12c      	bne.n	80085fc <_printf_float+0x250>
 80085a2:	e764      	b.n	800846e <_printf_float+0xc2>
 80085a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085a8:	f240 80e0 	bls.w	800876c <_printf_float+0x3c0>
 80085ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085b0:	2200      	movs	r2, #0
 80085b2:	2300      	movs	r3, #0
 80085b4:	f7f8 fa98 	bl	8000ae8 <__aeabi_dcmpeq>
 80085b8:	2800      	cmp	r0, #0
 80085ba:	d034      	beq.n	8008626 <_printf_float+0x27a>
 80085bc:	4a37      	ldr	r2, [pc, #220]	; (800869c <_printf_float+0x2f0>)
 80085be:	2301      	movs	r3, #1
 80085c0:	4631      	mov	r1, r6
 80085c2:	4628      	mov	r0, r5
 80085c4:	47b8      	blx	r7
 80085c6:	3001      	adds	r0, #1
 80085c8:	f43f af51 	beq.w	800846e <_printf_float+0xc2>
 80085cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085d0:	429a      	cmp	r2, r3
 80085d2:	db02      	blt.n	80085da <_printf_float+0x22e>
 80085d4:	6823      	ldr	r3, [r4, #0]
 80085d6:	07d8      	lsls	r0, r3, #31
 80085d8:	d510      	bpl.n	80085fc <_printf_float+0x250>
 80085da:	ee18 3a10 	vmov	r3, s16
 80085de:	4652      	mov	r2, sl
 80085e0:	4631      	mov	r1, r6
 80085e2:	4628      	mov	r0, r5
 80085e4:	47b8      	blx	r7
 80085e6:	3001      	adds	r0, #1
 80085e8:	f43f af41 	beq.w	800846e <_printf_float+0xc2>
 80085ec:	f04f 0800 	mov.w	r8, #0
 80085f0:	f104 091a 	add.w	r9, r4, #26
 80085f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085f6:	3b01      	subs	r3, #1
 80085f8:	4543      	cmp	r3, r8
 80085fa:	dc09      	bgt.n	8008610 <_printf_float+0x264>
 80085fc:	6823      	ldr	r3, [r4, #0]
 80085fe:	079b      	lsls	r3, r3, #30
 8008600:	f100 8105 	bmi.w	800880e <_printf_float+0x462>
 8008604:	68e0      	ldr	r0, [r4, #12]
 8008606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008608:	4298      	cmp	r0, r3
 800860a:	bfb8      	it	lt
 800860c:	4618      	movlt	r0, r3
 800860e:	e730      	b.n	8008472 <_printf_float+0xc6>
 8008610:	2301      	movs	r3, #1
 8008612:	464a      	mov	r2, r9
 8008614:	4631      	mov	r1, r6
 8008616:	4628      	mov	r0, r5
 8008618:	47b8      	blx	r7
 800861a:	3001      	adds	r0, #1
 800861c:	f43f af27 	beq.w	800846e <_printf_float+0xc2>
 8008620:	f108 0801 	add.w	r8, r8, #1
 8008624:	e7e6      	b.n	80085f4 <_printf_float+0x248>
 8008626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008628:	2b00      	cmp	r3, #0
 800862a:	dc39      	bgt.n	80086a0 <_printf_float+0x2f4>
 800862c:	4a1b      	ldr	r2, [pc, #108]	; (800869c <_printf_float+0x2f0>)
 800862e:	2301      	movs	r3, #1
 8008630:	4631      	mov	r1, r6
 8008632:	4628      	mov	r0, r5
 8008634:	47b8      	blx	r7
 8008636:	3001      	adds	r0, #1
 8008638:	f43f af19 	beq.w	800846e <_printf_float+0xc2>
 800863c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008640:	4313      	orrs	r3, r2
 8008642:	d102      	bne.n	800864a <_printf_float+0x29e>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	07d9      	lsls	r1, r3, #31
 8008648:	d5d8      	bpl.n	80085fc <_printf_float+0x250>
 800864a:	ee18 3a10 	vmov	r3, s16
 800864e:	4652      	mov	r2, sl
 8008650:	4631      	mov	r1, r6
 8008652:	4628      	mov	r0, r5
 8008654:	47b8      	blx	r7
 8008656:	3001      	adds	r0, #1
 8008658:	f43f af09 	beq.w	800846e <_printf_float+0xc2>
 800865c:	f04f 0900 	mov.w	r9, #0
 8008660:	f104 0a1a 	add.w	sl, r4, #26
 8008664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008666:	425b      	negs	r3, r3
 8008668:	454b      	cmp	r3, r9
 800866a:	dc01      	bgt.n	8008670 <_printf_float+0x2c4>
 800866c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800866e:	e792      	b.n	8008596 <_printf_float+0x1ea>
 8008670:	2301      	movs	r3, #1
 8008672:	4652      	mov	r2, sl
 8008674:	4631      	mov	r1, r6
 8008676:	4628      	mov	r0, r5
 8008678:	47b8      	blx	r7
 800867a:	3001      	adds	r0, #1
 800867c:	f43f aef7 	beq.w	800846e <_printf_float+0xc2>
 8008680:	f109 0901 	add.w	r9, r9, #1
 8008684:	e7ee      	b.n	8008664 <_printf_float+0x2b8>
 8008686:	bf00      	nop
 8008688:	7fefffff 	.word	0x7fefffff
 800868c:	08023b44 	.word	0x08023b44
 8008690:	08023b48 	.word	0x08023b48
 8008694:	08023b50 	.word	0x08023b50
 8008698:	08023b4c 	.word	0x08023b4c
 800869c:	08023b54 	.word	0x08023b54
 80086a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086a4:	429a      	cmp	r2, r3
 80086a6:	bfa8      	it	ge
 80086a8:	461a      	movge	r2, r3
 80086aa:	2a00      	cmp	r2, #0
 80086ac:	4691      	mov	r9, r2
 80086ae:	dc37      	bgt.n	8008720 <_printf_float+0x374>
 80086b0:	f04f 0b00 	mov.w	fp, #0
 80086b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086b8:	f104 021a 	add.w	r2, r4, #26
 80086bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086be:	9305      	str	r3, [sp, #20]
 80086c0:	eba3 0309 	sub.w	r3, r3, r9
 80086c4:	455b      	cmp	r3, fp
 80086c6:	dc33      	bgt.n	8008730 <_printf_float+0x384>
 80086c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086cc:	429a      	cmp	r2, r3
 80086ce:	db3b      	blt.n	8008748 <_printf_float+0x39c>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	07da      	lsls	r2, r3, #31
 80086d4:	d438      	bmi.n	8008748 <_printf_float+0x39c>
 80086d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086d8:	9b05      	ldr	r3, [sp, #20]
 80086da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086dc:	1ad3      	subs	r3, r2, r3
 80086de:	eba2 0901 	sub.w	r9, r2, r1
 80086e2:	4599      	cmp	r9, r3
 80086e4:	bfa8      	it	ge
 80086e6:	4699      	movge	r9, r3
 80086e8:	f1b9 0f00 	cmp.w	r9, #0
 80086ec:	dc35      	bgt.n	800875a <_printf_float+0x3ae>
 80086ee:	f04f 0800 	mov.w	r8, #0
 80086f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086f6:	f104 0a1a 	add.w	sl, r4, #26
 80086fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086fe:	1a9b      	subs	r3, r3, r2
 8008700:	eba3 0309 	sub.w	r3, r3, r9
 8008704:	4543      	cmp	r3, r8
 8008706:	f77f af79 	ble.w	80085fc <_printf_float+0x250>
 800870a:	2301      	movs	r3, #1
 800870c:	4652      	mov	r2, sl
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	f43f aeaa 	beq.w	800846e <_printf_float+0xc2>
 800871a:	f108 0801 	add.w	r8, r8, #1
 800871e:	e7ec      	b.n	80086fa <_printf_float+0x34e>
 8008720:	4613      	mov	r3, r2
 8008722:	4631      	mov	r1, r6
 8008724:	4642      	mov	r2, r8
 8008726:	4628      	mov	r0, r5
 8008728:	47b8      	blx	r7
 800872a:	3001      	adds	r0, #1
 800872c:	d1c0      	bne.n	80086b0 <_printf_float+0x304>
 800872e:	e69e      	b.n	800846e <_printf_float+0xc2>
 8008730:	2301      	movs	r3, #1
 8008732:	4631      	mov	r1, r6
 8008734:	4628      	mov	r0, r5
 8008736:	9205      	str	r2, [sp, #20]
 8008738:	47b8      	blx	r7
 800873a:	3001      	adds	r0, #1
 800873c:	f43f ae97 	beq.w	800846e <_printf_float+0xc2>
 8008740:	9a05      	ldr	r2, [sp, #20]
 8008742:	f10b 0b01 	add.w	fp, fp, #1
 8008746:	e7b9      	b.n	80086bc <_printf_float+0x310>
 8008748:	ee18 3a10 	vmov	r3, s16
 800874c:	4652      	mov	r2, sl
 800874e:	4631      	mov	r1, r6
 8008750:	4628      	mov	r0, r5
 8008752:	47b8      	blx	r7
 8008754:	3001      	adds	r0, #1
 8008756:	d1be      	bne.n	80086d6 <_printf_float+0x32a>
 8008758:	e689      	b.n	800846e <_printf_float+0xc2>
 800875a:	9a05      	ldr	r2, [sp, #20]
 800875c:	464b      	mov	r3, r9
 800875e:	4442      	add	r2, r8
 8008760:	4631      	mov	r1, r6
 8008762:	4628      	mov	r0, r5
 8008764:	47b8      	blx	r7
 8008766:	3001      	adds	r0, #1
 8008768:	d1c1      	bne.n	80086ee <_printf_float+0x342>
 800876a:	e680      	b.n	800846e <_printf_float+0xc2>
 800876c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800876e:	2a01      	cmp	r2, #1
 8008770:	dc01      	bgt.n	8008776 <_printf_float+0x3ca>
 8008772:	07db      	lsls	r3, r3, #31
 8008774:	d538      	bpl.n	80087e8 <_printf_float+0x43c>
 8008776:	2301      	movs	r3, #1
 8008778:	4642      	mov	r2, r8
 800877a:	4631      	mov	r1, r6
 800877c:	4628      	mov	r0, r5
 800877e:	47b8      	blx	r7
 8008780:	3001      	adds	r0, #1
 8008782:	f43f ae74 	beq.w	800846e <_printf_float+0xc2>
 8008786:	ee18 3a10 	vmov	r3, s16
 800878a:	4652      	mov	r2, sl
 800878c:	4631      	mov	r1, r6
 800878e:	4628      	mov	r0, r5
 8008790:	47b8      	blx	r7
 8008792:	3001      	adds	r0, #1
 8008794:	f43f ae6b 	beq.w	800846e <_printf_float+0xc2>
 8008798:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800879c:	2200      	movs	r2, #0
 800879e:	2300      	movs	r3, #0
 80087a0:	f7f8 f9a2 	bl	8000ae8 <__aeabi_dcmpeq>
 80087a4:	b9d8      	cbnz	r0, 80087de <_printf_float+0x432>
 80087a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087a8:	f108 0201 	add.w	r2, r8, #1
 80087ac:	3b01      	subs	r3, #1
 80087ae:	4631      	mov	r1, r6
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b8      	blx	r7
 80087b4:	3001      	adds	r0, #1
 80087b6:	d10e      	bne.n	80087d6 <_printf_float+0x42a>
 80087b8:	e659      	b.n	800846e <_printf_float+0xc2>
 80087ba:	2301      	movs	r3, #1
 80087bc:	4652      	mov	r2, sl
 80087be:	4631      	mov	r1, r6
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b8      	blx	r7
 80087c4:	3001      	adds	r0, #1
 80087c6:	f43f ae52 	beq.w	800846e <_printf_float+0xc2>
 80087ca:	f108 0801 	add.w	r8, r8, #1
 80087ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087d0:	3b01      	subs	r3, #1
 80087d2:	4543      	cmp	r3, r8
 80087d4:	dcf1      	bgt.n	80087ba <_printf_float+0x40e>
 80087d6:	464b      	mov	r3, r9
 80087d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087dc:	e6dc      	b.n	8008598 <_printf_float+0x1ec>
 80087de:	f04f 0800 	mov.w	r8, #0
 80087e2:	f104 0a1a 	add.w	sl, r4, #26
 80087e6:	e7f2      	b.n	80087ce <_printf_float+0x422>
 80087e8:	2301      	movs	r3, #1
 80087ea:	4642      	mov	r2, r8
 80087ec:	e7df      	b.n	80087ae <_printf_float+0x402>
 80087ee:	2301      	movs	r3, #1
 80087f0:	464a      	mov	r2, r9
 80087f2:	4631      	mov	r1, r6
 80087f4:	4628      	mov	r0, r5
 80087f6:	47b8      	blx	r7
 80087f8:	3001      	adds	r0, #1
 80087fa:	f43f ae38 	beq.w	800846e <_printf_float+0xc2>
 80087fe:	f108 0801 	add.w	r8, r8, #1
 8008802:	68e3      	ldr	r3, [r4, #12]
 8008804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008806:	1a5b      	subs	r3, r3, r1
 8008808:	4543      	cmp	r3, r8
 800880a:	dcf0      	bgt.n	80087ee <_printf_float+0x442>
 800880c:	e6fa      	b.n	8008604 <_printf_float+0x258>
 800880e:	f04f 0800 	mov.w	r8, #0
 8008812:	f104 0919 	add.w	r9, r4, #25
 8008816:	e7f4      	b.n	8008802 <_printf_float+0x456>

08008818 <_printf_common>:
 8008818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881c:	4616      	mov	r6, r2
 800881e:	4699      	mov	r9, r3
 8008820:	688a      	ldr	r2, [r1, #8]
 8008822:	690b      	ldr	r3, [r1, #16]
 8008824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008828:	4293      	cmp	r3, r2
 800882a:	bfb8      	it	lt
 800882c:	4613      	movlt	r3, r2
 800882e:	6033      	str	r3, [r6, #0]
 8008830:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008834:	4607      	mov	r7, r0
 8008836:	460c      	mov	r4, r1
 8008838:	b10a      	cbz	r2, 800883e <_printf_common+0x26>
 800883a:	3301      	adds	r3, #1
 800883c:	6033      	str	r3, [r6, #0]
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	0699      	lsls	r1, r3, #26
 8008842:	bf42      	ittt	mi
 8008844:	6833      	ldrmi	r3, [r6, #0]
 8008846:	3302      	addmi	r3, #2
 8008848:	6033      	strmi	r3, [r6, #0]
 800884a:	6825      	ldr	r5, [r4, #0]
 800884c:	f015 0506 	ands.w	r5, r5, #6
 8008850:	d106      	bne.n	8008860 <_printf_common+0x48>
 8008852:	f104 0a19 	add.w	sl, r4, #25
 8008856:	68e3      	ldr	r3, [r4, #12]
 8008858:	6832      	ldr	r2, [r6, #0]
 800885a:	1a9b      	subs	r3, r3, r2
 800885c:	42ab      	cmp	r3, r5
 800885e:	dc26      	bgt.n	80088ae <_printf_common+0x96>
 8008860:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008864:	1e13      	subs	r3, r2, #0
 8008866:	6822      	ldr	r2, [r4, #0]
 8008868:	bf18      	it	ne
 800886a:	2301      	movne	r3, #1
 800886c:	0692      	lsls	r2, r2, #26
 800886e:	d42b      	bmi.n	80088c8 <_printf_common+0xb0>
 8008870:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008874:	4649      	mov	r1, r9
 8008876:	4638      	mov	r0, r7
 8008878:	47c0      	blx	r8
 800887a:	3001      	adds	r0, #1
 800887c:	d01e      	beq.n	80088bc <_printf_common+0xa4>
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	68e5      	ldr	r5, [r4, #12]
 8008882:	6832      	ldr	r2, [r6, #0]
 8008884:	f003 0306 	and.w	r3, r3, #6
 8008888:	2b04      	cmp	r3, #4
 800888a:	bf08      	it	eq
 800888c:	1aad      	subeq	r5, r5, r2
 800888e:	68a3      	ldr	r3, [r4, #8]
 8008890:	6922      	ldr	r2, [r4, #16]
 8008892:	bf0c      	ite	eq
 8008894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008898:	2500      	movne	r5, #0
 800889a:	4293      	cmp	r3, r2
 800889c:	bfc4      	itt	gt
 800889e:	1a9b      	subgt	r3, r3, r2
 80088a0:	18ed      	addgt	r5, r5, r3
 80088a2:	2600      	movs	r6, #0
 80088a4:	341a      	adds	r4, #26
 80088a6:	42b5      	cmp	r5, r6
 80088a8:	d11a      	bne.n	80088e0 <_printf_common+0xc8>
 80088aa:	2000      	movs	r0, #0
 80088ac:	e008      	b.n	80088c0 <_printf_common+0xa8>
 80088ae:	2301      	movs	r3, #1
 80088b0:	4652      	mov	r2, sl
 80088b2:	4649      	mov	r1, r9
 80088b4:	4638      	mov	r0, r7
 80088b6:	47c0      	blx	r8
 80088b8:	3001      	adds	r0, #1
 80088ba:	d103      	bne.n	80088c4 <_printf_common+0xac>
 80088bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088c4:	3501      	adds	r5, #1
 80088c6:	e7c6      	b.n	8008856 <_printf_common+0x3e>
 80088c8:	18e1      	adds	r1, r4, r3
 80088ca:	1c5a      	adds	r2, r3, #1
 80088cc:	2030      	movs	r0, #48	; 0x30
 80088ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088d2:	4422      	add	r2, r4
 80088d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088dc:	3302      	adds	r3, #2
 80088de:	e7c7      	b.n	8008870 <_printf_common+0x58>
 80088e0:	2301      	movs	r3, #1
 80088e2:	4622      	mov	r2, r4
 80088e4:	4649      	mov	r1, r9
 80088e6:	4638      	mov	r0, r7
 80088e8:	47c0      	blx	r8
 80088ea:	3001      	adds	r0, #1
 80088ec:	d0e6      	beq.n	80088bc <_printf_common+0xa4>
 80088ee:	3601      	adds	r6, #1
 80088f0:	e7d9      	b.n	80088a6 <_printf_common+0x8e>
	...

080088f4 <_printf_i>:
 80088f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088f8:	460c      	mov	r4, r1
 80088fa:	4691      	mov	r9, r2
 80088fc:	7e27      	ldrb	r7, [r4, #24]
 80088fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008900:	2f78      	cmp	r7, #120	; 0x78
 8008902:	4680      	mov	r8, r0
 8008904:	469a      	mov	sl, r3
 8008906:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800890a:	d807      	bhi.n	800891c <_printf_i+0x28>
 800890c:	2f62      	cmp	r7, #98	; 0x62
 800890e:	d80a      	bhi.n	8008926 <_printf_i+0x32>
 8008910:	2f00      	cmp	r7, #0
 8008912:	f000 80d8 	beq.w	8008ac6 <_printf_i+0x1d2>
 8008916:	2f58      	cmp	r7, #88	; 0x58
 8008918:	f000 80a3 	beq.w	8008a62 <_printf_i+0x16e>
 800891c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008920:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008924:	e03a      	b.n	800899c <_printf_i+0xa8>
 8008926:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800892a:	2b15      	cmp	r3, #21
 800892c:	d8f6      	bhi.n	800891c <_printf_i+0x28>
 800892e:	a001      	add	r0, pc, #4	; (adr r0, 8008934 <_printf_i+0x40>)
 8008930:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008934:	0800898d 	.word	0x0800898d
 8008938:	080089a1 	.word	0x080089a1
 800893c:	0800891d 	.word	0x0800891d
 8008940:	0800891d 	.word	0x0800891d
 8008944:	0800891d 	.word	0x0800891d
 8008948:	0800891d 	.word	0x0800891d
 800894c:	080089a1 	.word	0x080089a1
 8008950:	0800891d 	.word	0x0800891d
 8008954:	0800891d 	.word	0x0800891d
 8008958:	0800891d 	.word	0x0800891d
 800895c:	0800891d 	.word	0x0800891d
 8008960:	08008aad 	.word	0x08008aad
 8008964:	080089d1 	.word	0x080089d1
 8008968:	08008a8f 	.word	0x08008a8f
 800896c:	0800891d 	.word	0x0800891d
 8008970:	0800891d 	.word	0x0800891d
 8008974:	08008acf 	.word	0x08008acf
 8008978:	0800891d 	.word	0x0800891d
 800897c:	080089d1 	.word	0x080089d1
 8008980:	0800891d 	.word	0x0800891d
 8008984:	0800891d 	.word	0x0800891d
 8008988:	08008a97 	.word	0x08008a97
 800898c:	680b      	ldr	r3, [r1, #0]
 800898e:	1d1a      	adds	r2, r3, #4
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	600a      	str	r2, [r1, #0]
 8008994:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800899c:	2301      	movs	r3, #1
 800899e:	e0a3      	b.n	8008ae8 <_printf_i+0x1f4>
 80089a0:	6825      	ldr	r5, [r4, #0]
 80089a2:	6808      	ldr	r0, [r1, #0]
 80089a4:	062e      	lsls	r6, r5, #24
 80089a6:	f100 0304 	add.w	r3, r0, #4
 80089aa:	d50a      	bpl.n	80089c2 <_printf_i+0xce>
 80089ac:	6805      	ldr	r5, [r0, #0]
 80089ae:	600b      	str	r3, [r1, #0]
 80089b0:	2d00      	cmp	r5, #0
 80089b2:	da03      	bge.n	80089bc <_printf_i+0xc8>
 80089b4:	232d      	movs	r3, #45	; 0x2d
 80089b6:	426d      	negs	r5, r5
 80089b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089bc:	485e      	ldr	r0, [pc, #376]	; (8008b38 <_printf_i+0x244>)
 80089be:	230a      	movs	r3, #10
 80089c0:	e019      	b.n	80089f6 <_printf_i+0x102>
 80089c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80089c6:	6805      	ldr	r5, [r0, #0]
 80089c8:	600b      	str	r3, [r1, #0]
 80089ca:	bf18      	it	ne
 80089cc:	b22d      	sxthne	r5, r5
 80089ce:	e7ef      	b.n	80089b0 <_printf_i+0xbc>
 80089d0:	680b      	ldr	r3, [r1, #0]
 80089d2:	6825      	ldr	r5, [r4, #0]
 80089d4:	1d18      	adds	r0, r3, #4
 80089d6:	6008      	str	r0, [r1, #0]
 80089d8:	0628      	lsls	r0, r5, #24
 80089da:	d501      	bpl.n	80089e0 <_printf_i+0xec>
 80089dc:	681d      	ldr	r5, [r3, #0]
 80089de:	e002      	b.n	80089e6 <_printf_i+0xf2>
 80089e0:	0669      	lsls	r1, r5, #25
 80089e2:	d5fb      	bpl.n	80089dc <_printf_i+0xe8>
 80089e4:	881d      	ldrh	r5, [r3, #0]
 80089e6:	4854      	ldr	r0, [pc, #336]	; (8008b38 <_printf_i+0x244>)
 80089e8:	2f6f      	cmp	r7, #111	; 0x6f
 80089ea:	bf0c      	ite	eq
 80089ec:	2308      	moveq	r3, #8
 80089ee:	230a      	movne	r3, #10
 80089f0:	2100      	movs	r1, #0
 80089f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089f6:	6866      	ldr	r6, [r4, #4]
 80089f8:	60a6      	str	r6, [r4, #8]
 80089fa:	2e00      	cmp	r6, #0
 80089fc:	bfa2      	ittt	ge
 80089fe:	6821      	ldrge	r1, [r4, #0]
 8008a00:	f021 0104 	bicge.w	r1, r1, #4
 8008a04:	6021      	strge	r1, [r4, #0]
 8008a06:	b90d      	cbnz	r5, 8008a0c <_printf_i+0x118>
 8008a08:	2e00      	cmp	r6, #0
 8008a0a:	d04d      	beq.n	8008aa8 <_printf_i+0x1b4>
 8008a0c:	4616      	mov	r6, r2
 8008a0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a12:	fb03 5711 	mls	r7, r3, r1, r5
 8008a16:	5dc7      	ldrb	r7, [r0, r7]
 8008a18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a1c:	462f      	mov	r7, r5
 8008a1e:	42bb      	cmp	r3, r7
 8008a20:	460d      	mov	r5, r1
 8008a22:	d9f4      	bls.n	8008a0e <_printf_i+0x11a>
 8008a24:	2b08      	cmp	r3, #8
 8008a26:	d10b      	bne.n	8008a40 <_printf_i+0x14c>
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	07df      	lsls	r7, r3, #31
 8008a2c:	d508      	bpl.n	8008a40 <_printf_i+0x14c>
 8008a2e:	6923      	ldr	r3, [r4, #16]
 8008a30:	6861      	ldr	r1, [r4, #4]
 8008a32:	4299      	cmp	r1, r3
 8008a34:	bfde      	ittt	le
 8008a36:	2330      	movle	r3, #48	; 0x30
 8008a38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a3c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8008a40:	1b92      	subs	r2, r2, r6
 8008a42:	6122      	str	r2, [r4, #16]
 8008a44:	f8cd a000 	str.w	sl, [sp]
 8008a48:	464b      	mov	r3, r9
 8008a4a:	aa03      	add	r2, sp, #12
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7ff fee2 	bl	8008818 <_printf_common>
 8008a54:	3001      	adds	r0, #1
 8008a56:	d14c      	bne.n	8008af2 <_printf_i+0x1fe>
 8008a58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a5c:	b004      	add	sp, #16
 8008a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a62:	4835      	ldr	r0, [pc, #212]	; (8008b38 <_printf_i+0x244>)
 8008a64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	680e      	ldr	r6, [r1, #0]
 8008a6c:	061f      	lsls	r7, r3, #24
 8008a6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a72:	600e      	str	r6, [r1, #0]
 8008a74:	d514      	bpl.n	8008aa0 <_printf_i+0x1ac>
 8008a76:	07d9      	lsls	r1, r3, #31
 8008a78:	bf44      	itt	mi
 8008a7a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a7e:	6023      	strmi	r3, [r4, #0]
 8008a80:	b91d      	cbnz	r5, 8008a8a <_printf_i+0x196>
 8008a82:	6823      	ldr	r3, [r4, #0]
 8008a84:	f023 0320 	bic.w	r3, r3, #32
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	2310      	movs	r3, #16
 8008a8c:	e7b0      	b.n	80089f0 <_printf_i+0xfc>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	f043 0320 	orr.w	r3, r3, #32
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	2378      	movs	r3, #120	; 0x78
 8008a98:	4828      	ldr	r0, [pc, #160]	; (8008b3c <_printf_i+0x248>)
 8008a9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a9e:	e7e3      	b.n	8008a68 <_printf_i+0x174>
 8008aa0:	065e      	lsls	r6, r3, #25
 8008aa2:	bf48      	it	mi
 8008aa4:	b2ad      	uxthmi	r5, r5
 8008aa6:	e7e6      	b.n	8008a76 <_printf_i+0x182>
 8008aa8:	4616      	mov	r6, r2
 8008aaa:	e7bb      	b.n	8008a24 <_printf_i+0x130>
 8008aac:	680b      	ldr	r3, [r1, #0]
 8008aae:	6826      	ldr	r6, [r4, #0]
 8008ab0:	6960      	ldr	r0, [r4, #20]
 8008ab2:	1d1d      	adds	r5, r3, #4
 8008ab4:	600d      	str	r5, [r1, #0]
 8008ab6:	0635      	lsls	r5, r6, #24
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	d501      	bpl.n	8008ac0 <_printf_i+0x1cc>
 8008abc:	6018      	str	r0, [r3, #0]
 8008abe:	e002      	b.n	8008ac6 <_printf_i+0x1d2>
 8008ac0:	0671      	lsls	r1, r6, #25
 8008ac2:	d5fb      	bpl.n	8008abc <_printf_i+0x1c8>
 8008ac4:	8018      	strh	r0, [r3, #0]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	6123      	str	r3, [r4, #16]
 8008aca:	4616      	mov	r6, r2
 8008acc:	e7ba      	b.n	8008a44 <_printf_i+0x150>
 8008ace:	680b      	ldr	r3, [r1, #0]
 8008ad0:	1d1a      	adds	r2, r3, #4
 8008ad2:	600a      	str	r2, [r1, #0]
 8008ad4:	681e      	ldr	r6, [r3, #0]
 8008ad6:	6862      	ldr	r2, [r4, #4]
 8008ad8:	2100      	movs	r1, #0
 8008ada:	4630      	mov	r0, r6
 8008adc:	f7f7 fb90 	bl	8000200 <memchr>
 8008ae0:	b108      	cbz	r0, 8008ae6 <_printf_i+0x1f2>
 8008ae2:	1b80      	subs	r0, r0, r6
 8008ae4:	6060      	str	r0, [r4, #4]
 8008ae6:	6863      	ldr	r3, [r4, #4]
 8008ae8:	6123      	str	r3, [r4, #16]
 8008aea:	2300      	movs	r3, #0
 8008aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008af0:	e7a8      	b.n	8008a44 <_printf_i+0x150>
 8008af2:	6923      	ldr	r3, [r4, #16]
 8008af4:	4632      	mov	r2, r6
 8008af6:	4649      	mov	r1, r9
 8008af8:	4640      	mov	r0, r8
 8008afa:	47d0      	blx	sl
 8008afc:	3001      	adds	r0, #1
 8008afe:	d0ab      	beq.n	8008a58 <_printf_i+0x164>
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	079b      	lsls	r3, r3, #30
 8008b04:	d413      	bmi.n	8008b2e <_printf_i+0x23a>
 8008b06:	68e0      	ldr	r0, [r4, #12]
 8008b08:	9b03      	ldr	r3, [sp, #12]
 8008b0a:	4298      	cmp	r0, r3
 8008b0c:	bfb8      	it	lt
 8008b0e:	4618      	movlt	r0, r3
 8008b10:	e7a4      	b.n	8008a5c <_printf_i+0x168>
 8008b12:	2301      	movs	r3, #1
 8008b14:	4632      	mov	r2, r6
 8008b16:	4649      	mov	r1, r9
 8008b18:	4640      	mov	r0, r8
 8008b1a:	47d0      	blx	sl
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d09b      	beq.n	8008a58 <_printf_i+0x164>
 8008b20:	3501      	adds	r5, #1
 8008b22:	68e3      	ldr	r3, [r4, #12]
 8008b24:	9903      	ldr	r1, [sp, #12]
 8008b26:	1a5b      	subs	r3, r3, r1
 8008b28:	42ab      	cmp	r3, r5
 8008b2a:	dcf2      	bgt.n	8008b12 <_printf_i+0x21e>
 8008b2c:	e7eb      	b.n	8008b06 <_printf_i+0x212>
 8008b2e:	2500      	movs	r5, #0
 8008b30:	f104 0619 	add.w	r6, r4, #25
 8008b34:	e7f5      	b.n	8008b22 <_printf_i+0x22e>
 8008b36:	bf00      	nop
 8008b38:	08023b56 	.word	0x08023b56
 8008b3c:	08023b67 	.word	0x08023b67

08008b40 <_scanf_float>:
 8008b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b44:	b087      	sub	sp, #28
 8008b46:	4617      	mov	r7, r2
 8008b48:	9303      	str	r3, [sp, #12]
 8008b4a:	688b      	ldr	r3, [r1, #8]
 8008b4c:	1e5a      	subs	r2, r3, #1
 8008b4e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008b52:	bf83      	ittte	hi
 8008b54:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008b58:	195b      	addhi	r3, r3, r5
 8008b5a:	9302      	strhi	r3, [sp, #8]
 8008b5c:	2300      	movls	r3, #0
 8008b5e:	bf86      	itte	hi
 8008b60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008b64:	608b      	strhi	r3, [r1, #8]
 8008b66:	9302      	strls	r3, [sp, #8]
 8008b68:	680b      	ldr	r3, [r1, #0]
 8008b6a:	468b      	mov	fp, r1
 8008b6c:	2500      	movs	r5, #0
 8008b6e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008b72:	f84b 3b1c 	str.w	r3, [fp], #28
 8008b76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008b7a:	4680      	mov	r8, r0
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	465e      	mov	r6, fp
 8008b80:	46aa      	mov	sl, r5
 8008b82:	46a9      	mov	r9, r5
 8008b84:	9501      	str	r5, [sp, #4]
 8008b86:	68a2      	ldr	r2, [r4, #8]
 8008b88:	b152      	cbz	r2, 8008ba0 <_scanf_float+0x60>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b4e      	cmp	r3, #78	; 0x4e
 8008b90:	d864      	bhi.n	8008c5c <_scanf_float+0x11c>
 8008b92:	2b40      	cmp	r3, #64	; 0x40
 8008b94:	d83c      	bhi.n	8008c10 <_scanf_float+0xd0>
 8008b96:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008b9a:	b2c8      	uxtb	r0, r1
 8008b9c:	280e      	cmp	r0, #14
 8008b9e:	d93a      	bls.n	8008c16 <_scanf_float+0xd6>
 8008ba0:	f1b9 0f00 	cmp.w	r9, #0
 8008ba4:	d003      	beq.n	8008bae <_scanf_float+0x6e>
 8008ba6:	6823      	ldr	r3, [r4, #0]
 8008ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bac:	6023      	str	r3, [r4, #0]
 8008bae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008bb2:	f1ba 0f01 	cmp.w	sl, #1
 8008bb6:	f200 8113 	bhi.w	8008de0 <_scanf_float+0x2a0>
 8008bba:	455e      	cmp	r6, fp
 8008bbc:	f200 8105 	bhi.w	8008dca <_scanf_float+0x28a>
 8008bc0:	2501      	movs	r5, #1
 8008bc2:	4628      	mov	r0, r5
 8008bc4:	b007      	add	sp, #28
 8008bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bca:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008bce:	2a0d      	cmp	r2, #13
 8008bd0:	d8e6      	bhi.n	8008ba0 <_scanf_float+0x60>
 8008bd2:	a101      	add	r1, pc, #4	; (adr r1, 8008bd8 <_scanf_float+0x98>)
 8008bd4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008bd8:	08008d17 	.word	0x08008d17
 8008bdc:	08008ba1 	.word	0x08008ba1
 8008be0:	08008ba1 	.word	0x08008ba1
 8008be4:	08008ba1 	.word	0x08008ba1
 8008be8:	08008d77 	.word	0x08008d77
 8008bec:	08008d4f 	.word	0x08008d4f
 8008bf0:	08008ba1 	.word	0x08008ba1
 8008bf4:	08008ba1 	.word	0x08008ba1
 8008bf8:	08008d25 	.word	0x08008d25
 8008bfc:	08008ba1 	.word	0x08008ba1
 8008c00:	08008ba1 	.word	0x08008ba1
 8008c04:	08008ba1 	.word	0x08008ba1
 8008c08:	08008ba1 	.word	0x08008ba1
 8008c0c:	08008cdd 	.word	0x08008cdd
 8008c10:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008c14:	e7db      	b.n	8008bce <_scanf_float+0x8e>
 8008c16:	290e      	cmp	r1, #14
 8008c18:	d8c2      	bhi.n	8008ba0 <_scanf_float+0x60>
 8008c1a:	a001      	add	r0, pc, #4	; (adr r0, 8008c20 <_scanf_float+0xe0>)
 8008c1c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c20:	08008ccf 	.word	0x08008ccf
 8008c24:	08008ba1 	.word	0x08008ba1
 8008c28:	08008ccf 	.word	0x08008ccf
 8008c2c:	08008d63 	.word	0x08008d63
 8008c30:	08008ba1 	.word	0x08008ba1
 8008c34:	08008c7d 	.word	0x08008c7d
 8008c38:	08008cb9 	.word	0x08008cb9
 8008c3c:	08008cb9 	.word	0x08008cb9
 8008c40:	08008cb9 	.word	0x08008cb9
 8008c44:	08008cb9 	.word	0x08008cb9
 8008c48:	08008cb9 	.word	0x08008cb9
 8008c4c:	08008cb9 	.word	0x08008cb9
 8008c50:	08008cb9 	.word	0x08008cb9
 8008c54:	08008cb9 	.word	0x08008cb9
 8008c58:	08008cb9 	.word	0x08008cb9
 8008c5c:	2b6e      	cmp	r3, #110	; 0x6e
 8008c5e:	d809      	bhi.n	8008c74 <_scanf_float+0x134>
 8008c60:	2b60      	cmp	r3, #96	; 0x60
 8008c62:	d8b2      	bhi.n	8008bca <_scanf_float+0x8a>
 8008c64:	2b54      	cmp	r3, #84	; 0x54
 8008c66:	d077      	beq.n	8008d58 <_scanf_float+0x218>
 8008c68:	2b59      	cmp	r3, #89	; 0x59
 8008c6a:	d199      	bne.n	8008ba0 <_scanf_float+0x60>
 8008c6c:	2d07      	cmp	r5, #7
 8008c6e:	d197      	bne.n	8008ba0 <_scanf_float+0x60>
 8008c70:	2508      	movs	r5, #8
 8008c72:	e029      	b.n	8008cc8 <_scanf_float+0x188>
 8008c74:	2b74      	cmp	r3, #116	; 0x74
 8008c76:	d06f      	beq.n	8008d58 <_scanf_float+0x218>
 8008c78:	2b79      	cmp	r3, #121	; 0x79
 8008c7a:	e7f6      	b.n	8008c6a <_scanf_float+0x12a>
 8008c7c:	6821      	ldr	r1, [r4, #0]
 8008c7e:	05c8      	lsls	r0, r1, #23
 8008c80:	d51a      	bpl.n	8008cb8 <_scanf_float+0x178>
 8008c82:	9b02      	ldr	r3, [sp, #8]
 8008c84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008c88:	6021      	str	r1, [r4, #0]
 8008c8a:	f109 0901 	add.w	r9, r9, #1
 8008c8e:	b11b      	cbz	r3, 8008c98 <_scanf_float+0x158>
 8008c90:	3b01      	subs	r3, #1
 8008c92:	3201      	adds	r2, #1
 8008c94:	9302      	str	r3, [sp, #8]
 8008c96:	60a2      	str	r2, [r4, #8]
 8008c98:	68a3      	ldr	r3, [r4, #8]
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	60a3      	str	r3, [r4, #8]
 8008c9e:	6923      	ldr	r3, [r4, #16]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	6123      	str	r3, [r4, #16]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	607b      	str	r3, [r7, #4]
 8008cac:	f340 8084 	ble.w	8008db8 <_scanf_float+0x278>
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	603b      	str	r3, [r7, #0]
 8008cb6:	e766      	b.n	8008b86 <_scanf_float+0x46>
 8008cb8:	eb1a 0f05 	cmn.w	sl, r5
 8008cbc:	f47f af70 	bne.w	8008ba0 <_scanf_float+0x60>
 8008cc0:	6822      	ldr	r2, [r4, #0]
 8008cc2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008cc6:	6022      	str	r2, [r4, #0]
 8008cc8:	f806 3b01 	strb.w	r3, [r6], #1
 8008ccc:	e7e4      	b.n	8008c98 <_scanf_float+0x158>
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	0610      	lsls	r0, r2, #24
 8008cd2:	f57f af65 	bpl.w	8008ba0 <_scanf_float+0x60>
 8008cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cda:	e7f4      	b.n	8008cc6 <_scanf_float+0x186>
 8008cdc:	f1ba 0f00 	cmp.w	sl, #0
 8008ce0:	d10e      	bne.n	8008d00 <_scanf_float+0x1c0>
 8008ce2:	f1b9 0f00 	cmp.w	r9, #0
 8008ce6:	d10e      	bne.n	8008d06 <_scanf_float+0x1c6>
 8008ce8:	6822      	ldr	r2, [r4, #0]
 8008cea:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008cee:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008cf2:	d108      	bne.n	8008d06 <_scanf_float+0x1c6>
 8008cf4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008cf8:	6022      	str	r2, [r4, #0]
 8008cfa:	f04f 0a01 	mov.w	sl, #1
 8008cfe:	e7e3      	b.n	8008cc8 <_scanf_float+0x188>
 8008d00:	f1ba 0f02 	cmp.w	sl, #2
 8008d04:	d055      	beq.n	8008db2 <_scanf_float+0x272>
 8008d06:	2d01      	cmp	r5, #1
 8008d08:	d002      	beq.n	8008d10 <_scanf_float+0x1d0>
 8008d0a:	2d04      	cmp	r5, #4
 8008d0c:	f47f af48 	bne.w	8008ba0 <_scanf_float+0x60>
 8008d10:	3501      	adds	r5, #1
 8008d12:	b2ed      	uxtb	r5, r5
 8008d14:	e7d8      	b.n	8008cc8 <_scanf_float+0x188>
 8008d16:	f1ba 0f01 	cmp.w	sl, #1
 8008d1a:	f47f af41 	bne.w	8008ba0 <_scanf_float+0x60>
 8008d1e:	f04f 0a02 	mov.w	sl, #2
 8008d22:	e7d1      	b.n	8008cc8 <_scanf_float+0x188>
 8008d24:	b97d      	cbnz	r5, 8008d46 <_scanf_float+0x206>
 8008d26:	f1b9 0f00 	cmp.w	r9, #0
 8008d2a:	f47f af3c 	bne.w	8008ba6 <_scanf_float+0x66>
 8008d2e:	6822      	ldr	r2, [r4, #0]
 8008d30:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008d34:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008d38:	f47f af39 	bne.w	8008bae <_scanf_float+0x6e>
 8008d3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d40:	6022      	str	r2, [r4, #0]
 8008d42:	2501      	movs	r5, #1
 8008d44:	e7c0      	b.n	8008cc8 <_scanf_float+0x188>
 8008d46:	2d03      	cmp	r5, #3
 8008d48:	d0e2      	beq.n	8008d10 <_scanf_float+0x1d0>
 8008d4a:	2d05      	cmp	r5, #5
 8008d4c:	e7de      	b.n	8008d0c <_scanf_float+0x1cc>
 8008d4e:	2d02      	cmp	r5, #2
 8008d50:	f47f af26 	bne.w	8008ba0 <_scanf_float+0x60>
 8008d54:	2503      	movs	r5, #3
 8008d56:	e7b7      	b.n	8008cc8 <_scanf_float+0x188>
 8008d58:	2d06      	cmp	r5, #6
 8008d5a:	f47f af21 	bne.w	8008ba0 <_scanf_float+0x60>
 8008d5e:	2507      	movs	r5, #7
 8008d60:	e7b2      	b.n	8008cc8 <_scanf_float+0x188>
 8008d62:	6822      	ldr	r2, [r4, #0]
 8008d64:	0591      	lsls	r1, r2, #22
 8008d66:	f57f af1b 	bpl.w	8008ba0 <_scanf_float+0x60>
 8008d6a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008d6e:	6022      	str	r2, [r4, #0]
 8008d70:	f8cd 9004 	str.w	r9, [sp, #4]
 8008d74:	e7a8      	b.n	8008cc8 <_scanf_float+0x188>
 8008d76:	6822      	ldr	r2, [r4, #0]
 8008d78:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008d7c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008d80:	d006      	beq.n	8008d90 <_scanf_float+0x250>
 8008d82:	0550      	lsls	r0, r2, #21
 8008d84:	f57f af0c 	bpl.w	8008ba0 <_scanf_float+0x60>
 8008d88:	f1b9 0f00 	cmp.w	r9, #0
 8008d8c:	f43f af0f 	beq.w	8008bae <_scanf_float+0x6e>
 8008d90:	0591      	lsls	r1, r2, #22
 8008d92:	bf58      	it	pl
 8008d94:	9901      	ldrpl	r1, [sp, #4]
 8008d96:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008d9a:	bf58      	it	pl
 8008d9c:	eba9 0101 	subpl.w	r1, r9, r1
 8008da0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008da4:	bf58      	it	pl
 8008da6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008daa:	6022      	str	r2, [r4, #0]
 8008dac:	f04f 0900 	mov.w	r9, #0
 8008db0:	e78a      	b.n	8008cc8 <_scanf_float+0x188>
 8008db2:	f04f 0a03 	mov.w	sl, #3
 8008db6:	e787      	b.n	8008cc8 <_scanf_float+0x188>
 8008db8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008dbc:	4639      	mov	r1, r7
 8008dbe:	4640      	mov	r0, r8
 8008dc0:	4798      	blx	r3
 8008dc2:	2800      	cmp	r0, #0
 8008dc4:	f43f aedf 	beq.w	8008b86 <_scanf_float+0x46>
 8008dc8:	e6ea      	b.n	8008ba0 <_scanf_float+0x60>
 8008dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008dce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008dd2:	463a      	mov	r2, r7
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	4798      	blx	r3
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	3b01      	subs	r3, #1
 8008ddc:	6123      	str	r3, [r4, #16]
 8008dde:	e6ec      	b.n	8008bba <_scanf_float+0x7a>
 8008de0:	1e6b      	subs	r3, r5, #1
 8008de2:	2b06      	cmp	r3, #6
 8008de4:	d825      	bhi.n	8008e32 <_scanf_float+0x2f2>
 8008de6:	2d02      	cmp	r5, #2
 8008de8:	d836      	bhi.n	8008e58 <_scanf_float+0x318>
 8008dea:	455e      	cmp	r6, fp
 8008dec:	f67f aee8 	bls.w	8008bc0 <_scanf_float+0x80>
 8008df0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008df4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008df8:	463a      	mov	r2, r7
 8008dfa:	4640      	mov	r0, r8
 8008dfc:	4798      	blx	r3
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	6123      	str	r3, [r4, #16]
 8008e04:	e7f1      	b.n	8008dea <_scanf_float+0x2aa>
 8008e06:	9802      	ldr	r0, [sp, #8]
 8008e08:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e0c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008e10:	9002      	str	r0, [sp, #8]
 8008e12:	463a      	mov	r2, r7
 8008e14:	4640      	mov	r0, r8
 8008e16:	4798      	blx	r3
 8008e18:	6923      	ldr	r3, [r4, #16]
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	6123      	str	r3, [r4, #16]
 8008e1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8008e22:	fa5f fa8a 	uxtb.w	sl, sl
 8008e26:	f1ba 0f02 	cmp.w	sl, #2
 8008e2a:	d1ec      	bne.n	8008e06 <_scanf_float+0x2c6>
 8008e2c:	3d03      	subs	r5, #3
 8008e2e:	b2ed      	uxtb	r5, r5
 8008e30:	1b76      	subs	r6, r6, r5
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	05da      	lsls	r2, r3, #23
 8008e36:	d52f      	bpl.n	8008e98 <_scanf_float+0x358>
 8008e38:	055b      	lsls	r3, r3, #21
 8008e3a:	d510      	bpl.n	8008e5e <_scanf_float+0x31e>
 8008e3c:	455e      	cmp	r6, fp
 8008e3e:	f67f aebf 	bls.w	8008bc0 <_scanf_float+0x80>
 8008e42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e4a:	463a      	mov	r2, r7
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	4798      	blx	r3
 8008e50:	6923      	ldr	r3, [r4, #16]
 8008e52:	3b01      	subs	r3, #1
 8008e54:	6123      	str	r3, [r4, #16]
 8008e56:	e7f1      	b.n	8008e3c <_scanf_float+0x2fc>
 8008e58:	46aa      	mov	sl, r5
 8008e5a:	9602      	str	r6, [sp, #8]
 8008e5c:	e7df      	b.n	8008e1e <_scanf_float+0x2de>
 8008e5e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008e62:	6923      	ldr	r3, [r4, #16]
 8008e64:	2965      	cmp	r1, #101	; 0x65
 8008e66:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008e6a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008e6e:	6123      	str	r3, [r4, #16]
 8008e70:	d00c      	beq.n	8008e8c <_scanf_float+0x34c>
 8008e72:	2945      	cmp	r1, #69	; 0x45
 8008e74:	d00a      	beq.n	8008e8c <_scanf_float+0x34c>
 8008e76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e7a:	463a      	mov	r2, r7
 8008e7c:	4640      	mov	r0, r8
 8008e7e:	4798      	blx	r3
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008e86:	3b01      	subs	r3, #1
 8008e88:	1eb5      	subs	r5, r6, #2
 8008e8a:	6123      	str	r3, [r4, #16]
 8008e8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e90:	463a      	mov	r2, r7
 8008e92:	4640      	mov	r0, r8
 8008e94:	4798      	blx	r3
 8008e96:	462e      	mov	r6, r5
 8008e98:	6825      	ldr	r5, [r4, #0]
 8008e9a:	f015 0510 	ands.w	r5, r5, #16
 8008e9e:	d158      	bne.n	8008f52 <_scanf_float+0x412>
 8008ea0:	7035      	strb	r5, [r6, #0]
 8008ea2:	6823      	ldr	r3, [r4, #0]
 8008ea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eac:	d11c      	bne.n	8008ee8 <_scanf_float+0x3a8>
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	454b      	cmp	r3, r9
 8008eb2:	eba3 0209 	sub.w	r2, r3, r9
 8008eb6:	d124      	bne.n	8008f02 <_scanf_float+0x3c2>
 8008eb8:	2200      	movs	r2, #0
 8008eba:	4659      	mov	r1, fp
 8008ebc:	4640      	mov	r0, r8
 8008ebe:	f000 fff9 	bl	8009eb4 <_strtod_r>
 8008ec2:	9b03      	ldr	r3, [sp, #12]
 8008ec4:	6821      	ldr	r1, [r4, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f011 0f02 	tst.w	r1, #2
 8008ecc:	ec57 6b10 	vmov	r6, r7, d0
 8008ed0:	f103 0204 	add.w	r2, r3, #4
 8008ed4:	d020      	beq.n	8008f18 <_scanf_float+0x3d8>
 8008ed6:	9903      	ldr	r1, [sp, #12]
 8008ed8:	600a      	str	r2, [r1, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	e9c3 6700 	strd	r6, r7, [r3]
 8008ee0:	68e3      	ldr	r3, [r4, #12]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	60e3      	str	r3, [r4, #12]
 8008ee6:	e66c      	b.n	8008bc2 <_scanf_float+0x82>
 8008ee8:	9b04      	ldr	r3, [sp, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d0e4      	beq.n	8008eb8 <_scanf_float+0x378>
 8008eee:	9905      	ldr	r1, [sp, #20]
 8008ef0:	230a      	movs	r3, #10
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	3101      	adds	r1, #1
 8008ef6:	4640      	mov	r0, r8
 8008ef8:	f001 f866 	bl	8009fc8 <_strtol_r>
 8008efc:	9b04      	ldr	r3, [sp, #16]
 8008efe:	9e05      	ldr	r6, [sp, #20]
 8008f00:	1ac2      	subs	r2, r0, r3
 8008f02:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008f06:	429e      	cmp	r6, r3
 8008f08:	bf28      	it	cs
 8008f0a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008f0e:	4912      	ldr	r1, [pc, #72]	; (8008f58 <_scanf_float+0x418>)
 8008f10:	4630      	mov	r0, r6
 8008f12:	f000 f989 	bl	8009228 <siprintf>
 8008f16:	e7cf      	b.n	8008eb8 <_scanf_float+0x378>
 8008f18:	f011 0f04 	tst.w	r1, #4
 8008f1c:	9903      	ldr	r1, [sp, #12]
 8008f1e:	600a      	str	r2, [r1, #0]
 8008f20:	d1db      	bne.n	8008eda <_scanf_float+0x39a>
 8008f22:	f8d3 8000 	ldr.w	r8, [r3]
 8008f26:	ee10 2a10 	vmov	r2, s0
 8008f2a:	ee10 0a10 	vmov	r0, s0
 8008f2e:	463b      	mov	r3, r7
 8008f30:	4639      	mov	r1, r7
 8008f32:	f7f7 fe0b 	bl	8000b4c <__aeabi_dcmpun>
 8008f36:	b128      	cbz	r0, 8008f44 <_scanf_float+0x404>
 8008f38:	4808      	ldr	r0, [pc, #32]	; (8008f5c <_scanf_float+0x41c>)
 8008f3a:	f7ff f89f 	bl	800807c <nanf>
 8008f3e:	ed88 0a00 	vstr	s0, [r8]
 8008f42:	e7cd      	b.n	8008ee0 <_scanf_float+0x3a0>
 8008f44:	4630      	mov	r0, r6
 8008f46:	4639      	mov	r1, r7
 8008f48:	f7f7 fe5e 	bl	8000c08 <__aeabi_d2f>
 8008f4c:	f8c8 0000 	str.w	r0, [r8]
 8008f50:	e7c6      	b.n	8008ee0 <_scanf_float+0x3a0>
 8008f52:	2500      	movs	r5, #0
 8008f54:	e635      	b.n	8008bc2 <_scanf_float+0x82>
 8008f56:	bf00      	nop
 8008f58:	08023b78 	.word	0x08023b78
 8008f5c:	08023995 	.word	0x08023995

08008f60 <iprintf>:
 8008f60:	b40f      	push	{r0, r1, r2, r3}
 8008f62:	4b0a      	ldr	r3, [pc, #40]	; (8008f8c <iprintf+0x2c>)
 8008f64:	b513      	push	{r0, r1, r4, lr}
 8008f66:	681c      	ldr	r4, [r3, #0]
 8008f68:	b124      	cbz	r4, 8008f74 <iprintf+0x14>
 8008f6a:	69a3      	ldr	r3, [r4, #24]
 8008f6c:	b913      	cbnz	r3, 8008f74 <iprintf+0x14>
 8008f6e:	4620      	mov	r0, r4
 8008f70:	f002 f880 	bl	800b074 <__sinit>
 8008f74:	ab05      	add	r3, sp, #20
 8008f76:	9a04      	ldr	r2, [sp, #16]
 8008f78:	68a1      	ldr	r1, [r4, #8]
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	f003 fb85 	bl	800c68c <_vfiprintf_r>
 8008f82:	b002      	add	sp, #8
 8008f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f88:	b004      	add	sp, #16
 8008f8a:	4770      	bx	lr
 8008f8c:	2000077c 	.word	0x2000077c

08008f90 <_puts_r>:
 8008f90:	b570      	push	{r4, r5, r6, lr}
 8008f92:	460e      	mov	r6, r1
 8008f94:	4605      	mov	r5, r0
 8008f96:	b118      	cbz	r0, 8008fa0 <_puts_r+0x10>
 8008f98:	6983      	ldr	r3, [r0, #24]
 8008f9a:	b90b      	cbnz	r3, 8008fa0 <_puts_r+0x10>
 8008f9c:	f002 f86a 	bl	800b074 <__sinit>
 8008fa0:	69ab      	ldr	r3, [r5, #24]
 8008fa2:	68ac      	ldr	r4, [r5, #8]
 8008fa4:	b913      	cbnz	r3, 8008fac <_puts_r+0x1c>
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	f002 f864 	bl	800b074 <__sinit>
 8008fac:	4b2c      	ldr	r3, [pc, #176]	; (8009060 <_puts_r+0xd0>)
 8008fae:	429c      	cmp	r4, r3
 8008fb0:	d120      	bne.n	8008ff4 <_puts_r+0x64>
 8008fb2:	686c      	ldr	r4, [r5, #4]
 8008fb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fb6:	07db      	lsls	r3, r3, #31
 8008fb8:	d405      	bmi.n	8008fc6 <_puts_r+0x36>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	0598      	lsls	r0, r3, #22
 8008fbe:	d402      	bmi.n	8008fc6 <_puts_r+0x36>
 8008fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fc2:	f002 fc68 	bl	800b896 <__retarget_lock_acquire_recursive>
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	0719      	lsls	r1, r3, #28
 8008fca:	d51d      	bpl.n	8009008 <_puts_r+0x78>
 8008fcc:	6923      	ldr	r3, [r4, #16]
 8008fce:	b1db      	cbz	r3, 8009008 <_puts_r+0x78>
 8008fd0:	3e01      	subs	r6, #1
 8008fd2:	68a3      	ldr	r3, [r4, #8]
 8008fd4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	60a3      	str	r3, [r4, #8]
 8008fdc:	bb39      	cbnz	r1, 800902e <_puts_r+0x9e>
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	da38      	bge.n	8009054 <_puts_r+0xc4>
 8008fe2:	4622      	mov	r2, r4
 8008fe4:	210a      	movs	r1, #10
 8008fe6:	4628      	mov	r0, r5
 8008fe8:	f000 fff0 	bl	8009fcc <__swbuf_r>
 8008fec:	3001      	adds	r0, #1
 8008fee:	d011      	beq.n	8009014 <_puts_r+0x84>
 8008ff0:	250a      	movs	r5, #10
 8008ff2:	e011      	b.n	8009018 <_puts_r+0x88>
 8008ff4:	4b1b      	ldr	r3, [pc, #108]	; (8009064 <_puts_r+0xd4>)
 8008ff6:	429c      	cmp	r4, r3
 8008ff8:	d101      	bne.n	8008ffe <_puts_r+0x6e>
 8008ffa:	68ac      	ldr	r4, [r5, #8]
 8008ffc:	e7da      	b.n	8008fb4 <_puts_r+0x24>
 8008ffe:	4b1a      	ldr	r3, [pc, #104]	; (8009068 <_puts_r+0xd8>)
 8009000:	429c      	cmp	r4, r3
 8009002:	bf08      	it	eq
 8009004:	68ec      	ldreq	r4, [r5, #12]
 8009006:	e7d5      	b.n	8008fb4 <_puts_r+0x24>
 8009008:	4621      	mov	r1, r4
 800900a:	4628      	mov	r0, r5
 800900c:	f001 f830 	bl	800a070 <__swsetup_r>
 8009010:	2800      	cmp	r0, #0
 8009012:	d0dd      	beq.n	8008fd0 <_puts_r+0x40>
 8009014:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800901a:	07da      	lsls	r2, r3, #31
 800901c:	d405      	bmi.n	800902a <_puts_r+0x9a>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	059b      	lsls	r3, r3, #22
 8009022:	d402      	bmi.n	800902a <_puts_r+0x9a>
 8009024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009026:	f002 fc37 	bl	800b898 <__retarget_lock_release_recursive>
 800902a:	4628      	mov	r0, r5
 800902c:	bd70      	pop	{r4, r5, r6, pc}
 800902e:	2b00      	cmp	r3, #0
 8009030:	da04      	bge.n	800903c <_puts_r+0xac>
 8009032:	69a2      	ldr	r2, [r4, #24]
 8009034:	429a      	cmp	r2, r3
 8009036:	dc06      	bgt.n	8009046 <_puts_r+0xb6>
 8009038:	290a      	cmp	r1, #10
 800903a:	d004      	beq.n	8009046 <_puts_r+0xb6>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	6022      	str	r2, [r4, #0]
 8009042:	7019      	strb	r1, [r3, #0]
 8009044:	e7c5      	b.n	8008fd2 <_puts_r+0x42>
 8009046:	4622      	mov	r2, r4
 8009048:	4628      	mov	r0, r5
 800904a:	f000 ffbf 	bl	8009fcc <__swbuf_r>
 800904e:	3001      	adds	r0, #1
 8009050:	d1bf      	bne.n	8008fd2 <_puts_r+0x42>
 8009052:	e7df      	b.n	8009014 <_puts_r+0x84>
 8009054:	6823      	ldr	r3, [r4, #0]
 8009056:	250a      	movs	r5, #10
 8009058:	1c5a      	adds	r2, r3, #1
 800905a:	6022      	str	r2, [r4, #0]
 800905c:	701d      	strb	r5, [r3, #0]
 800905e:	e7db      	b.n	8009018 <_puts_r+0x88>
 8009060:	08023d88 	.word	0x08023d88
 8009064:	08023da8 	.word	0x08023da8
 8009068:	08023d68 	.word	0x08023d68

0800906c <puts>:
 800906c:	4b02      	ldr	r3, [pc, #8]	; (8009078 <puts+0xc>)
 800906e:	4601      	mov	r1, r0
 8009070:	6818      	ldr	r0, [r3, #0]
 8009072:	f7ff bf8d 	b.w	8008f90 <_puts_r>
 8009076:	bf00      	nop
 8009078:	2000077c 	.word	0x2000077c

0800907c <_sbrk_r>:
 800907c:	b538      	push	{r3, r4, r5, lr}
 800907e:	4d06      	ldr	r5, [pc, #24]	; (8009098 <_sbrk_r+0x1c>)
 8009080:	2300      	movs	r3, #0
 8009082:	4604      	mov	r4, r0
 8009084:	4608      	mov	r0, r1
 8009086:	602b      	str	r3, [r5, #0]
 8009088:	f003 fdda 	bl	800cc40 <_sbrk>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	d102      	bne.n	8009096 <_sbrk_r+0x1a>
 8009090:	682b      	ldr	r3, [r5, #0]
 8009092:	b103      	cbz	r3, 8009096 <_sbrk_r+0x1a>
 8009094:	6023      	str	r3, [r4, #0]
 8009096:	bd38      	pop	{r3, r4, r5, pc}
 8009098:	2000b578 	.word	0x2000b578

0800909c <setvbuf>:
 800909c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80090a0:	461d      	mov	r5, r3
 80090a2:	4b5d      	ldr	r3, [pc, #372]	; (8009218 <setvbuf+0x17c>)
 80090a4:	681f      	ldr	r7, [r3, #0]
 80090a6:	4604      	mov	r4, r0
 80090a8:	460e      	mov	r6, r1
 80090aa:	4690      	mov	r8, r2
 80090ac:	b127      	cbz	r7, 80090b8 <setvbuf+0x1c>
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	b913      	cbnz	r3, 80090b8 <setvbuf+0x1c>
 80090b2:	4638      	mov	r0, r7
 80090b4:	f001 ffde 	bl	800b074 <__sinit>
 80090b8:	4b58      	ldr	r3, [pc, #352]	; (800921c <setvbuf+0x180>)
 80090ba:	429c      	cmp	r4, r3
 80090bc:	d167      	bne.n	800918e <setvbuf+0xf2>
 80090be:	687c      	ldr	r4, [r7, #4]
 80090c0:	f1b8 0f02 	cmp.w	r8, #2
 80090c4:	d006      	beq.n	80090d4 <setvbuf+0x38>
 80090c6:	f1b8 0f01 	cmp.w	r8, #1
 80090ca:	f200 809f 	bhi.w	800920c <setvbuf+0x170>
 80090ce:	2d00      	cmp	r5, #0
 80090d0:	f2c0 809c 	blt.w	800920c <setvbuf+0x170>
 80090d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090d6:	07db      	lsls	r3, r3, #31
 80090d8:	d405      	bmi.n	80090e6 <setvbuf+0x4a>
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	0598      	lsls	r0, r3, #22
 80090de:	d402      	bmi.n	80090e6 <setvbuf+0x4a>
 80090e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090e2:	f002 fbd8 	bl	800b896 <__retarget_lock_acquire_recursive>
 80090e6:	4621      	mov	r1, r4
 80090e8:	4638      	mov	r0, r7
 80090ea:	f001 ff2f 	bl	800af4c <_fflush_r>
 80090ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090f0:	b141      	cbz	r1, 8009104 <setvbuf+0x68>
 80090f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090f6:	4299      	cmp	r1, r3
 80090f8:	d002      	beq.n	8009100 <setvbuf+0x64>
 80090fa:	4638      	mov	r0, r7
 80090fc:	f7ff f80c 	bl	8008118 <_free_r>
 8009100:	2300      	movs	r3, #0
 8009102:	6363      	str	r3, [r4, #52]	; 0x34
 8009104:	2300      	movs	r3, #0
 8009106:	61a3      	str	r3, [r4, #24]
 8009108:	6063      	str	r3, [r4, #4]
 800910a:	89a3      	ldrh	r3, [r4, #12]
 800910c:	0619      	lsls	r1, r3, #24
 800910e:	d503      	bpl.n	8009118 <setvbuf+0x7c>
 8009110:	6921      	ldr	r1, [r4, #16]
 8009112:	4638      	mov	r0, r7
 8009114:	f7ff f800 	bl	8008118 <_free_r>
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800911e:	f023 0303 	bic.w	r3, r3, #3
 8009122:	f1b8 0f02 	cmp.w	r8, #2
 8009126:	81a3      	strh	r3, [r4, #12]
 8009128:	d06c      	beq.n	8009204 <setvbuf+0x168>
 800912a:	ab01      	add	r3, sp, #4
 800912c:	466a      	mov	r2, sp
 800912e:	4621      	mov	r1, r4
 8009130:	4638      	mov	r0, r7
 8009132:	f002 fbb2 	bl	800b89a <__swhatbuf_r>
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	4318      	orrs	r0, r3
 800913a:	81a0      	strh	r0, [r4, #12]
 800913c:	2d00      	cmp	r5, #0
 800913e:	d130      	bne.n	80091a2 <setvbuf+0x106>
 8009140:	9d00      	ldr	r5, [sp, #0]
 8009142:	4628      	mov	r0, r5
 8009144:	f7fe ffca 	bl	80080dc <malloc>
 8009148:	4606      	mov	r6, r0
 800914a:	2800      	cmp	r0, #0
 800914c:	d155      	bne.n	80091fa <setvbuf+0x15e>
 800914e:	f8dd 9000 	ldr.w	r9, [sp]
 8009152:	45a9      	cmp	r9, r5
 8009154:	d14a      	bne.n	80091ec <setvbuf+0x150>
 8009156:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800915a:	2200      	movs	r2, #0
 800915c:	60a2      	str	r2, [r4, #8]
 800915e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009162:	6022      	str	r2, [r4, #0]
 8009164:	6122      	str	r2, [r4, #16]
 8009166:	2201      	movs	r2, #1
 8009168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800916c:	6162      	str	r2, [r4, #20]
 800916e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009170:	f043 0302 	orr.w	r3, r3, #2
 8009174:	07d2      	lsls	r2, r2, #31
 8009176:	81a3      	strh	r3, [r4, #12]
 8009178:	d405      	bmi.n	8009186 <setvbuf+0xea>
 800917a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800917e:	d102      	bne.n	8009186 <setvbuf+0xea>
 8009180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009182:	f002 fb89 	bl	800b898 <__retarget_lock_release_recursive>
 8009186:	4628      	mov	r0, r5
 8009188:	b003      	add	sp, #12
 800918a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800918e:	4b24      	ldr	r3, [pc, #144]	; (8009220 <setvbuf+0x184>)
 8009190:	429c      	cmp	r4, r3
 8009192:	d101      	bne.n	8009198 <setvbuf+0xfc>
 8009194:	68bc      	ldr	r4, [r7, #8]
 8009196:	e793      	b.n	80090c0 <setvbuf+0x24>
 8009198:	4b22      	ldr	r3, [pc, #136]	; (8009224 <setvbuf+0x188>)
 800919a:	429c      	cmp	r4, r3
 800919c:	bf08      	it	eq
 800919e:	68fc      	ldreq	r4, [r7, #12]
 80091a0:	e78e      	b.n	80090c0 <setvbuf+0x24>
 80091a2:	2e00      	cmp	r6, #0
 80091a4:	d0cd      	beq.n	8009142 <setvbuf+0xa6>
 80091a6:	69bb      	ldr	r3, [r7, #24]
 80091a8:	b913      	cbnz	r3, 80091b0 <setvbuf+0x114>
 80091aa:	4638      	mov	r0, r7
 80091ac:	f001 ff62 	bl	800b074 <__sinit>
 80091b0:	f1b8 0f01 	cmp.w	r8, #1
 80091b4:	bf08      	it	eq
 80091b6:	89a3      	ldrheq	r3, [r4, #12]
 80091b8:	6026      	str	r6, [r4, #0]
 80091ba:	bf04      	itt	eq
 80091bc:	f043 0301 	orreq.w	r3, r3, #1
 80091c0:	81a3      	strheq	r3, [r4, #12]
 80091c2:	89a2      	ldrh	r2, [r4, #12]
 80091c4:	f012 0308 	ands.w	r3, r2, #8
 80091c8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80091cc:	d01c      	beq.n	8009208 <setvbuf+0x16c>
 80091ce:	07d3      	lsls	r3, r2, #31
 80091d0:	bf41      	itttt	mi
 80091d2:	2300      	movmi	r3, #0
 80091d4:	426d      	negmi	r5, r5
 80091d6:	60a3      	strmi	r3, [r4, #8]
 80091d8:	61a5      	strmi	r5, [r4, #24]
 80091da:	bf58      	it	pl
 80091dc:	60a5      	strpl	r5, [r4, #8]
 80091de:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80091e0:	f015 0501 	ands.w	r5, r5, #1
 80091e4:	d115      	bne.n	8009212 <setvbuf+0x176>
 80091e6:	f412 7f00 	tst.w	r2, #512	; 0x200
 80091ea:	e7c8      	b.n	800917e <setvbuf+0xe2>
 80091ec:	4648      	mov	r0, r9
 80091ee:	f7fe ff75 	bl	80080dc <malloc>
 80091f2:	4606      	mov	r6, r0
 80091f4:	2800      	cmp	r0, #0
 80091f6:	d0ae      	beq.n	8009156 <setvbuf+0xba>
 80091f8:	464d      	mov	r5, r9
 80091fa:	89a3      	ldrh	r3, [r4, #12]
 80091fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009200:	81a3      	strh	r3, [r4, #12]
 8009202:	e7d0      	b.n	80091a6 <setvbuf+0x10a>
 8009204:	2500      	movs	r5, #0
 8009206:	e7a8      	b.n	800915a <setvbuf+0xbe>
 8009208:	60a3      	str	r3, [r4, #8]
 800920a:	e7e8      	b.n	80091de <setvbuf+0x142>
 800920c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009210:	e7b9      	b.n	8009186 <setvbuf+0xea>
 8009212:	2500      	movs	r5, #0
 8009214:	e7b7      	b.n	8009186 <setvbuf+0xea>
 8009216:	bf00      	nop
 8009218:	2000077c 	.word	0x2000077c
 800921c:	08023d88 	.word	0x08023d88
 8009220:	08023da8 	.word	0x08023da8
 8009224:	08023d68 	.word	0x08023d68

08009228 <siprintf>:
 8009228:	b40e      	push	{r1, r2, r3}
 800922a:	b500      	push	{lr}
 800922c:	b09c      	sub	sp, #112	; 0x70
 800922e:	ab1d      	add	r3, sp, #116	; 0x74
 8009230:	9002      	str	r0, [sp, #8]
 8009232:	9006      	str	r0, [sp, #24]
 8009234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009238:	4809      	ldr	r0, [pc, #36]	; (8009260 <siprintf+0x38>)
 800923a:	9107      	str	r1, [sp, #28]
 800923c:	9104      	str	r1, [sp, #16]
 800923e:	4909      	ldr	r1, [pc, #36]	; (8009264 <siprintf+0x3c>)
 8009240:	f853 2b04 	ldr.w	r2, [r3], #4
 8009244:	9105      	str	r1, [sp, #20]
 8009246:	6800      	ldr	r0, [r0, #0]
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	a902      	add	r1, sp, #8
 800924c:	f003 f8f4 	bl	800c438 <_svfiprintf_r>
 8009250:	9b02      	ldr	r3, [sp, #8]
 8009252:	2200      	movs	r2, #0
 8009254:	701a      	strb	r2, [r3, #0]
 8009256:	b01c      	add	sp, #112	; 0x70
 8009258:	f85d eb04 	ldr.w	lr, [sp], #4
 800925c:	b003      	add	sp, #12
 800925e:	4770      	bx	lr
 8009260:	2000077c 	.word	0x2000077c
 8009264:	ffff0208 	.word	0xffff0208

08009268 <sulp>:
 8009268:	b570      	push	{r4, r5, r6, lr}
 800926a:	4604      	mov	r4, r0
 800926c:	460d      	mov	r5, r1
 800926e:	ec45 4b10 	vmov	d0, r4, r5
 8009272:	4616      	mov	r6, r2
 8009274:	f002 ff00 	bl	800c078 <__ulp>
 8009278:	ec51 0b10 	vmov	r0, r1, d0
 800927c:	b17e      	cbz	r6, 800929e <sulp+0x36>
 800927e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009282:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009286:	2b00      	cmp	r3, #0
 8009288:	dd09      	ble.n	800929e <sulp+0x36>
 800928a:	051b      	lsls	r3, r3, #20
 800928c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009290:	2400      	movs	r4, #0
 8009292:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009296:	4622      	mov	r2, r4
 8009298:	462b      	mov	r3, r5
 800929a:	f7f7 f9bd 	bl	8000618 <__aeabi_dmul>
 800929e:	bd70      	pop	{r4, r5, r6, pc}

080092a0 <_strtod_l>:
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	b0a3      	sub	sp, #140	; 0x8c
 80092a6:	461f      	mov	r7, r3
 80092a8:	2300      	movs	r3, #0
 80092aa:	931e      	str	r3, [sp, #120]	; 0x78
 80092ac:	4ba4      	ldr	r3, [pc, #656]	; (8009540 <_strtod_l+0x2a0>)
 80092ae:	9219      	str	r2, [sp, #100]	; 0x64
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	9307      	str	r3, [sp, #28]
 80092b4:	4604      	mov	r4, r0
 80092b6:	4618      	mov	r0, r3
 80092b8:	4688      	mov	r8, r1
 80092ba:	f7f6 ff99 	bl	80001f0 <strlen>
 80092be:	f04f 0a00 	mov.w	sl, #0
 80092c2:	4605      	mov	r5, r0
 80092c4:	f04f 0b00 	mov.w	fp, #0
 80092c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80092cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092ce:	781a      	ldrb	r2, [r3, #0]
 80092d0:	2a2b      	cmp	r2, #43	; 0x2b
 80092d2:	d04c      	beq.n	800936e <_strtod_l+0xce>
 80092d4:	d839      	bhi.n	800934a <_strtod_l+0xaa>
 80092d6:	2a0d      	cmp	r2, #13
 80092d8:	d832      	bhi.n	8009340 <_strtod_l+0xa0>
 80092da:	2a08      	cmp	r2, #8
 80092dc:	d832      	bhi.n	8009344 <_strtod_l+0xa4>
 80092de:	2a00      	cmp	r2, #0
 80092e0:	d03c      	beq.n	800935c <_strtod_l+0xbc>
 80092e2:	2300      	movs	r3, #0
 80092e4:	930e      	str	r3, [sp, #56]	; 0x38
 80092e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80092e8:	7833      	ldrb	r3, [r6, #0]
 80092ea:	2b30      	cmp	r3, #48	; 0x30
 80092ec:	f040 80b4 	bne.w	8009458 <_strtod_l+0x1b8>
 80092f0:	7873      	ldrb	r3, [r6, #1]
 80092f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80092f6:	2b58      	cmp	r3, #88	; 0x58
 80092f8:	d16c      	bne.n	80093d4 <_strtod_l+0x134>
 80092fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092fc:	9301      	str	r3, [sp, #4]
 80092fe:	ab1e      	add	r3, sp, #120	; 0x78
 8009300:	9702      	str	r7, [sp, #8]
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	4a8f      	ldr	r2, [pc, #572]	; (8009544 <_strtod_l+0x2a4>)
 8009306:	ab1f      	add	r3, sp, #124	; 0x7c
 8009308:	a91d      	add	r1, sp, #116	; 0x74
 800930a:	4620      	mov	r0, r4
 800930c:	f001 ffb6 	bl	800b27c <__gethex>
 8009310:	f010 0707 	ands.w	r7, r0, #7
 8009314:	4605      	mov	r5, r0
 8009316:	d005      	beq.n	8009324 <_strtod_l+0x84>
 8009318:	2f06      	cmp	r7, #6
 800931a:	d12a      	bne.n	8009372 <_strtod_l+0xd2>
 800931c:	3601      	adds	r6, #1
 800931e:	2300      	movs	r3, #0
 8009320:	961d      	str	r6, [sp, #116]	; 0x74
 8009322:	930e      	str	r3, [sp, #56]	; 0x38
 8009324:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009326:	2b00      	cmp	r3, #0
 8009328:	f040 8596 	bne.w	8009e58 <_strtod_l+0xbb8>
 800932c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800932e:	b1db      	cbz	r3, 8009368 <_strtod_l+0xc8>
 8009330:	4652      	mov	r2, sl
 8009332:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009336:	ec43 2b10 	vmov	d0, r2, r3
 800933a:	b023      	add	sp, #140	; 0x8c
 800933c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009340:	2a20      	cmp	r2, #32
 8009342:	d1ce      	bne.n	80092e2 <_strtod_l+0x42>
 8009344:	3301      	adds	r3, #1
 8009346:	931d      	str	r3, [sp, #116]	; 0x74
 8009348:	e7c0      	b.n	80092cc <_strtod_l+0x2c>
 800934a:	2a2d      	cmp	r2, #45	; 0x2d
 800934c:	d1c9      	bne.n	80092e2 <_strtod_l+0x42>
 800934e:	2201      	movs	r2, #1
 8009350:	920e      	str	r2, [sp, #56]	; 0x38
 8009352:	1c5a      	adds	r2, r3, #1
 8009354:	921d      	str	r2, [sp, #116]	; 0x74
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d1c4      	bne.n	80092e6 <_strtod_l+0x46>
 800935c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800935e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009362:	2b00      	cmp	r3, #0
 8009364:	f040 8576 	bne.w	8009e54 <_strtod_l+0xbb4>
 8009368:	4652      	mov	r2, sl
 800936a:	465b      	mov	r3, fp
 800936c:	e7e3      	b.n	8009336 <_strtod_l+0x96>
 800936e:	2200      	movs	r2, #0
 8009370:	e7ee      	b.n	8009350 <_strtod_l+0xb0>
 8009372:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009374:	b13a      	cbz	r2, 8009386 <_strtod_l+0xe6>
 8009376:	2135      	movs	r1, #53	; 0x35
 8009378:	a820      	add	r0, sp, #128	; 0x80
 800937a:	f002 ff88 	bl	800c28e <__copybits>
 800937e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009380:	4620      	mov	r0, r4
 8009382:	f002 fb4d 	bl	800ba20 <_Bfree>
 8009386:	3f01      	subs	r7, #1
 8009388:	2f05      	cmp	r7, #5
 800938a:	d807      	bhi.n	800939c <_strtod_l+0xfc>
 800938c:	e8df f007 	tbb	[pc, r7]
 8009390:	1d180b0e 	.word	0x1d180b0e
 8009394:	030e      	.short	0x030e
 8009396:	f04f 0b00 	mov.w	fp, #0
 800939a:	46da      	mov	sl, fp
 800939c:	0728      	lsls	r0, r5, #28
 800939e:	d5c1      	bpl.n	8009324 <_strtod_l+0x84>
 80093a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80093a4:	e7be      	b.n	8009324 <_strtod_l+0x84>
 80093a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80093aa:	e7f7      	b.n	800939c <_strtod_l+0xfc>
 80093ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80093b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80093b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80093b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093be:	e7ed      	b.n	800939c <_strtod_l+0xfc>
 80093c0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009548 <_strtod_l+0x2a8>
 80093c4:	f04f 0a00 	mov.w	sl, #0
 80093c8:	e7e8      	b.n	800939c <_strtod_l+0xfc>
 80093ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80093ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80093d2:	e7e3      	b.n	800939c <_strtod_l+0xfc>
 80093d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093d6:	1c5a      	adds	r2, r3, #1
 80093d8:	921d      	str	r2, [sp, #116]	; 0x74
 80093da:	785b      	ldrb	r3, [r3, #1]
 80093dc:	2b30      	cmp	r3, #48	; 0x30
 80093de:	d0f9      	beq.n	80093d4 <_strtod_l+0x134>
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d09f      	beq.n	8009324 <_strtod_l+0x84>
 80093e4:	2301      	movs	r3, #1
 80093e6:	f04f 0900 	mov.w	r9, #0
 80093ea:	9304      	str	r3, [sp, #16]
 80093ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80093ee:	930a      	str	r3, [sp, #40]	; 0x28
 80093f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80093f4:	464f      	mov	r7, r9
 80093f6:	220a      	movs	r2, #10
 80093f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80093fa:	7806      	ldrb	r6, [r0, #0]
 80093fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009400:	b2d9      	uxtb	r1, r3
 8009402:	2909      	cmp	r1, #9
 8009404:	d92a      	bls.n	800945c <_strtod_l+0x1bc>
 8009406:	9907      	ldr	r1, [sp, #28]
 8009408:	462a      	mov	r2, r5
 800940a:	f003 fabc 	bl	800c986 <strncmp>
 800940e:	b398      	cbz	r0, 8009478 <_strtod_l+0x1d8>
 8009410:	2000      	movs	r0, #0
 8009412:	4633      	mov	r3, r6
 8009414:	463d      	mov	r5, r7
 8009416:	9007      	str	r0, [sp, #28]
 8009418:	4602      	mov	r2, r0
 800941a:	2b65      	cmp	r3, #101	; 0x65
 800941c:	d001      	beq.n	8009422 <_strtod_l+0x182>
 800941e:	2b45      	cmp	r3, #69	; 0x45
 8009420:	d118      	bne.n	8009454 <_strtod_l+0x1b4>
 8009422:	b91d      	cbnz	r5, 800942c <_strtod_l+0x18c>
 8009424:	9b04      	ldr	r3, [sp, #16]
 8009426:	4303      	orrs	r3, r0
 8009428:	d098      	beq.n	800935c <_strtod_l+0xbc>
 800942a:	2500      	movs	r5, #0
 800942c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009430:	f108 0301 	add.w	r3, r8, #1
 8009434:	931d      	str	r3, [sp, #116]	; 0x74
 8009436:	f898 3001 	ldrb.w	r3, [r8, #1]
 800943a:	2b2b      	cmp	r3, #43	; 0x2b
 800943c:	d075      	beq.n	800952a <_strtod_l+0x28a>
 800943e:	2b2d      	cmp	r3, #45	; 0x2d
 8009440:	d07b      	beq.n	800953a <_strtod_l+0x29a>
 8009442:	f04f 0c00 	mov.w	ip, #0
 8009446:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800944a:	2909      	cmp	r1, #9
 800944c:	f240 8082 	bls.w	8009554 <_strtod_l+0x2b4>
 8009450:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009454:	2600      	movs	r6, #0
 8009456:	e09d      	b.n	8009594 <_strtod_l+0x2f4>
 8009458:	2300      	movs	r3, #0
 800945a:	e7c4      	b.n	80093e6 <_strtod_l+0x146>
 800945c:	2f08      	cmp	r7, #8
 800945e:	bfd8      	it	le
 8009460:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009462:	f100 0001 	add.w	r0, r0, #1
 8009466:	bfda      	itte	le
 8009468:	fb02 3301 	mlale	r3, r2, r1, r3
 800946c:	9309      	strle	r3, [sp, #36]	; 0x24
 800946e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009472:	3701      	adds	r7, #1
 8009474:	901d      	str	r0, [sp, #116]	; 0x74
 8009476:	e7bf      	b.n	80093f8 <_strtod_l+0x158>
 8009478:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800947a:	195a      	adds	r2, r3, r5
 800947c:	921d      	str	r2, [sp, #116]	; 0x74
 800947e:	5d5b      	ldrb	r3, [r3, r5]
 8009480:	2f00      	cmp	r7, #0
 8009482:	d037      	beq.n	80094f4 <_strtod_l+0x254>
 8009484:	9007      	str	r0, [sp, #28]
 8009486:	463d      	mov	r5, r7
 8009488:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800948c:	2a09      	cmp	r2, #9
 800948e:	d912      	bls.n	80094b6 <_strtod_l+0x216>
 8009490:	2201      	movs	r2, #1
 8009492:	e7c2      	b.n	800941a <_strtod_l+0x17a>
 8009494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	921d      	str	r2, [sp, #116]	; 0x74
 800949a:	785b      	ldrb	r3, [r3, #1]
 800949c:	3001      	adds	r0, #1
 800949e:	2b30      	cmp	r3, #48	; 0x30
 80094a0:	d0f8      	beq.n	8009494 <_strtod_l+0x1f4>
 80094a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80094a6:	2a08      	cmp	r2, #8
 80094a8:	f200 84db 	bhi.w	8009e62 <_strtod_l+0xbc2>
 80094ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80094ae:	9007      	str	r0, [sp, #28]
 80094b0:	2000      	movs	r0, #0
 80094b2:	920a      	str	r2, [sp, #40]	; 0x28
 80094b4:	4605      	mov	r5, r0
 80094b6:	3b30      	subs	r3, #48	; 0x30
 80094b8:	f100 0201 	add.w	r2, r0, #1
 80094bc:	d014      	beq.n	80094e8 <_strtod_l+0x248>
 80094be:	9907      	ldr	r1, [sp, #28]
 80094c0:	4411      	add	r1, r2
 80094c2:	9107      	str	r1, [sp, #28]
 80094c4:	462a      	mov	r2, r5
 80094c6:	eb00 0e05 	add.w	lr, r0, r5
 80094ca:	210a      	movs	r1, #10
 80094cc:	4572      	cmp	r2, lr
 80094ce:	d113      	bne.n	80094f8 <_strtod_l+0x258>
 80094d0:	182a      	adds	r2, r5, r0
 80094d2:	2a08      	cmp	r2, #8
 80094d4:	f105 0501 	add.w	r5, r5, #1
 80094d8:	4405      	add	r5, r0
 80094da:	dc1c      	bgt.n	8009516 <_strtod_l+0x276>
 80094dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80094de:	220a      	movs	r2, #10
 80094e0:	fb02 3301 	mla	r3, r2, r1, r3
 80094e4:	9309      	str	r3, [sp, #36]	; 0x24
 80094e6:	2200      	movs	r2, #0
 80094e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80094ea:	1c59      	adds	r1, r3, #1
 80094ec:	911d      	str	r1, [sp, #116]	; 0x74
 80094ee:	785b      	ldrb	r3, [r3, #1]
 80094f0:	4610      	mov	r0, r2
 80094f2:	e7c9      	b.n	8009488 <_strtod_l+0x1e8>
 80094f4:	4638      	mov	r0, r7
 80094f6:	e7d2      	b.n	800949e <_strtod_l+0x1fe>
 80094f8:	2a08      	cmp	r2, #8
 80094fa:	dc04      	bgt.n	8009506 <_strtod_l+0x266>
 80094fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80094fe:	434e      	muls	r6, r1
 8009500:	9609      	str	r6, [sp, #36]	; 0x24
 8009502:	3201      	adds	r2, #1
 8009504:	e7e2      	b.n	80094cc <_strtod_l+0x22c>
 8009506:	f102 0c01 	add.w	ip, r2, #1
 800950a:	f1bc 0f10 	cmp.w	ip, #16
 800950e:	bfd8      	it	le
 8009510:	fb01 f909 	mulle.w	r9, r1, r9
 8009514:	e7f5      	b.n	8009502 <_strtod_l+0x262>
 8009516:	2d10      	cmp	r5, #16
 8009518:	bfdc      	itt	le
 800951a:	220a      	movle	r2, #10
 800951c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009520:	e7e1      	b.n	80094e6 <_strtod_l+0x246>
 8009522:	2300      	movs	r3, #0
 8009524:	9307      	str	r3, [sp, #28]
 8009526:	2201      	movs	r2, #1
 8009528:	e77c      	b.n	8009424 <_strtod_l+0x184>
 800952a:	f04f 0c00 	mov.w	ip, #0
 800952e:	f108 0302 	add.w	r3, r8, #2
 8009532:	931d      	str	r3, [sp, #116]	; 0x74
 8009534:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009538:	e785      	b.n	8009446 <_strtod_l+0x1a6>
 800953a:	f04f 0c01 	mov.w	ip, #1
 800953e:	e7f6      	b.n	800952e <_strtod_l+0x28e>
 8009540:	08023e30 	.word	0x08023e30
 8009544:	08023b80 	.word	0x08023b80
 8009548:	7ff00000 	.word	0x7ff00000
 800954c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800954e:	1c59      	adds	r1, r3, #1
 8009550:	911d      	str	r1, [sp, #116]	; 0x74
 8009552:	785b      	ldrb	r3, [r3, #1]
 8009554:	2b30      	cmp	r3, #48	; 0x30
 8009556:	d0f9      	beq.n	800954c <_strtod_l+0x2ac>
 8009558:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800955c:	2908      	cmp	r1, #8
 800955e:	f63f af79 	bhi.w	8009454 <_strtod_l+0x1b4>
 8009562:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009566:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009568:	9308      	str	r3, [sp, #32]
 800956a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800956c:	1c59      	adds	r1, r3, #1
 800956e:	911d      	str	r1, [sp, #116]	; 0x74
 8009570:	785b      	ldrb	r3, [r3, #1]
 8009572:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009576:	2e09      	cmp	r6, #9
 8009578:	d937      	bls.n	80095ea <_strtod_l+0x34a>
 800957a:	9e08      	ldr	r6, [sp, #32]
 800957c:	1b89      	subs	r1, r1, r6
 800957e:	2908      	cmp	r1, #8
 8009580:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009584:	dc02      	bgt.n	800958c <_strtod_l+0x2ec>
 8009586:	4576      	cmp	r6, lr
 8009588:	bfa8      	it	ge
 800958a:	4676      	movge	r6, lr
 800958c:	f1bc 0f00 	cmp.w	ip, #0
 8009590:	d000      	beq.n	8009594 <_strtod_l+0x2f4>
 8009592:	4276      	negs	r6, r6
 8009594:	2d00      	cmp	r5, #0
 8009596:	d14f      	bne.n	8009638 <_strtod_l+0x398>
 8009598:	9904      	ldr	r1, [sp, #16]
 800959a:	4301      	orrs	r1, r0
 800959c:	f47f aec2 	bne.w	8009324 <_strtod_l+0x84>
 80095a0:	2a00      	cmp	r2, #0
 80095a2:	f47f aedb 	bne.w	800935c <_strtod_l+0xbc>
 80095a6:	2b69      	cmp	r3, #105	; 0x69
 80095a8:	d027      	beq.n	80095fa <_strtod_l+0x35a>
 80095aa:	dc24      	bgt.n	80095f6 <_strtod_l+0x356>
 80095ac:	2b49      	cmp	r3, #73	; 0x49
 80095ae:	d024      	beq.n	80095fa <_strtod_l+0x35a>
 80095b0:	2b4e      	cmp	r3, #78	; 0x4e
 80095b2:	f47f aed3 	bne.w	800935c <_strtod_l+0xbc>
 80095b6:	499e      	ldr	r1, [pc, #632]	; (8009830 <_strtod_l+0x590>)
 80095b8:	a81d      	add	r0, sp, #116	; 0x74
 80095ba:	f002 f8b7 	bl	800b72c <__match>
 80095be:	2800      	cmp	r0, #0
 80095c0:	f43f aecc 	beq.w	800935c <_strtod_l+0xbc>
 80095c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	2b28      	cmp	r3, #40	; 0x28
 80095ca:	d12d      	bne.n	8009628 <_strtod_l+0x388>
 80095cc:	4999      	ldr	r1, [pc, #612]	; (8009834 <_strtod_l+0x594>)
 80095ce:	aa20      	add	r2, sp, #128	; 0x80
 80095d0:	a81d      	add	r0, sp, #116	; 0x74
 80095d2:	f002 f8bf 	bl	800b754 <__hexnan>
 80095d6:	2805      	cmp	r0, #5
 80095d8:	d126      	bne.n	8009628 <_strtod_l+0x388>
 80095da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80095e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80095e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80095e8:	e69c      	b.n	8009324 <_strtod_l+0x84>
 80095ea:	210a      	movs	r1, #10
 80095ec:	fb01 3e0e 	mla	lr, r1, lr, r3
 80095f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80095f4:	e7b9      	b.n	800956a <_strtod_l+0x2ca>
 80095f6:	2b6e      	cmp	r3, #110	; 0x6e
 80095f8:	e7db      	b.n	80095b2 <_strtod_l+0x312>
 80095fa:	498f      	ldr	r1, [pc, #572]	; (8009838 <_strtod_l+0x598>)
 80095fc:	a81d      	add	r0, sp, #116	; 0x74
 80095fe:	f002 f895 	bl	800b72c <__match>
 8009602:	2800      	cmp	r0, #0
 8009604:	f43f aeaa 	beq.w	800935c <_strtod_l+0xbc>
 8009608:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800960a:	498c      	ldr	r1, [pc, #560]	; (800983c <_strtod_l+0x59c>)
 800960c:	3b01      	subs	r3, #1
 800960e:	a81d      	add	r0, sp, #116	; 0x74
 8009610:	931d      	str	r3, [sp, #116]	; 0x74
 8009612:	f002 f88b 	bl	800b72c <__match>
 8009616:	b910      	cbnz	r0, 800961e <_strtod_l+0x37e>
 8009618:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800961a:	3301      	adds	r3, #1
 800961c:	931d      	str	r3, [sp, #116]	; 0x74
 800961e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800984c <_strtod_l+0x5ac>
 8009622:	f04f 0a00 	mov.w	sl, #0
 8009626:	e67d      	b.n	8009324 <_strtod_l+0x84>
 8009628:	4885      	ldr	r0, [pc, #532]	; (8009840 <_strtod_l+0x5a0>)
 800962a:	f003 f961 	bl	800c8f0 <nan>
 800962e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009632:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009636:	e675      	b.n	8009324 <_strtod_l+0x84>
 8009638:	9b07      	ldr	r3, [sp, #28]
 800963a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800963c:	1af3      	subs	r3, r6, r3
 800963e:	2f00      	cmp	r7, #0
 8009640:	bf08      	it	eq
 8009642:	462f      	moveq	r7, r5
 8009644:	2d10      	cmp	r5, #16
 8009646:	9308      	str	r3, [sp, #32]
 8009648:	46a8      	mov	r8, r5
 800964a:	bfa8      	it	ge
 800964c:	f04f 0810 	movge.w	r8, #16
 8009650:	f7f6 ff68 	bl	8000524 <__aeabi_ui2d>
 8009654:	2d09      	cmp	r5, #9
 8009656:	4682      	mov	sl, r0
 8009658:	468b      	mov	fp, r1
 800965a:	dd13      	ble.n	8009684 <_strtod_l+0x3e4>
 800965c:	4b79      	ldr	r3, [pc, #484]	; (8009844 <_strtod_l+0x5a4>)
 800965e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009662:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009666:	f7f6 ffd7 	bl	8000618 <__aeabi_dmul>
 800966a:	4682      	mov	sl, r0
 800966c:	4648      	mov	r0, r9
 800966e:	468b      	mov	fp, r1
 8009670:	f7f6 ff58 	bl	8000524 <__aeabi_ui2d>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4650      	mov	r0, sl
 800967a:	4659      	mov	r1, fp
 800967c:	f7f6 fe16 	bl	80002ac <__adddf3>
 8009680:	4682      	mov	sl, r0
 8009682:	468b      	mov	fp, r1
 8009684:	2d0f      	cmp	r5, #15
 8009686:	dc38      	bgt.n	80096fa <_strtod_l+0x45a>
 8009688:	9b08      	ldr	r3, [sp, #32]
 800968a:	2b00      	cmp	r3, #0
 800968c:	f43f ae4a 	beq.w	8009324 <_strtod_l+0x84>
 8009690:	dd24      	ble.n	80096dc <_strtod_l+0x43c>
 8009692:	2b16      	cmp	r3, #22
 8009694:	dc0b      	bgt.n	80096ae <_strtod_l+0x40e>
 8009696:	4d6b      	ldr	r5, [pc, #428]	; (8009844 <_strtod_l+0x5a4>)
 8009698:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800969c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80096a0:	4652      	mov	r2, sl
 80096a2:	465b      	mov	r3, fp
 80096a4:	f7f6 ffb8 	bl	8000618 <__aeabi_dmul>
 80096a8:	4682      	mov	sl, r0
 80096aa:	468b      	mov	fp, r1
 80096ac:	e63a      	b.n	8009324 <_strtod_l+0x84>
 80096ae:	9a08      	ldr	r2, [sp, #32]
 80096b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80096b4:	4293      	cmp	r3, r2
 80096b6:	db20      	blt.n	80096fa <_strtod_l+0x45a>
 80096b8:	4c62      	ldr	r4, [pc, #392]	; (8009844 <_strtod_l+0x5a4>)
 80096ba:	f1c5 050f 	rsb	r5, r5, #15
 80096be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80096c2:	4652      	mov	r2, sl
 80096c4:	465b      	mov	r3, fp
 80096c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096ca:	f7f6 ffa5 	bl	8000618 <__aeabi_dmul>
 80096ce:	9b08      	ldr	r3, [sp, #32]
 80096d0:	1b5d      	subs	r5, r3, r5
 80096d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80096d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80096da:	e7e3      	b.n	80096a4 <_strtod_l+0x404>
 80096dc:	9b08      	ldr	r3, [sp, #32]
 80096de:	3316      	adds	r3, #22
 80096e0:	db0b      	blt.n	80096fa <_strtod_l+0x45a>
 80096e2:	9b07      	ldr	r3, [sp, #28]
 80096e4:	4a57      	ldr	r2, [pc, #348]	; (8009844 <_strtod_l+0x5a4>)
 80096e6:	1b9e      	subs	r6, r3, r6
 80096e8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80096ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096f0:	4650      	mov	r0, sl
 80096f2:	4659      	mov	r1, fp
 80096f4:	f7f7 f8ba 	bl	800086c <__aeabi_ddiv>
 80096f8:	e7d6      	b.n	80096a8 <_strtod_l+0x408>
 80096fa:	9b08      	ldr	r3, [sp, #32]
 80096fc:	eba5 0808 	sub.w	r8, r5, r8
 8009700:	4498      	add	r8, r3
 8009702:	f1b8 0f00 	cmp.w	r8, #0
 8009706:	dd71      	ble.n	80097ec <_strtod_l+0x54c>
 8009708:	f018 030f 	ands.w	r3, r8, #15
 800970c:	d00a      	beq.n	8009724 <_strtod_l+0x484>
 800970e:	494d      	ldr	r1, [pc, #308]	; (8009844 <_strtod_l+0x5a4>)
 8009710:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009714:	4652      	mov	r2, sl
 8009716:	465b      	mov	r3, fp
 8009718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800971c:	f7f6 ff7c 	bl	8000618 <__aeabi_dmul>
 8009720:	4682      	mov	sl, r0
 8009722:	468b      	mov	fp, r1
 8009724:	f038 080f 	bics.w	r8, r8, #15
 8009728:	d04d      	beq.n	80097c6 <_strtod_l+0x526>
 800972a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800972e:	dd22      	ble.n	8009776 <_strtod_l+0x4d6>
 8009730:	2500      	movs	r5, #0
 8009732:	462e      	mov	r6, r5
 8009734:	9509      	str	r5, [sp, #36]	; 0x24
 8009736:	9507      	str	r5, [sp, #28]
 8009738:	2322      	movs	r3, #34	; 0x22
 800973a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800984c <_strtod_l+0x5ac>
 800973e:	6023      	str	r3, [r4, #0]
 8009740:	f04f 0a00 	mov.w	sl, #0
 8009744:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009746:	2b00      	cmp	r3, #0
 8009748:	f43f adec 	beq.w	8009324 <_strtod_l+0x84>
 800974c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800974e:	4620      	mov	r0, r4
 8009750:	f002 f966 	bl	800ba20 <_Bfree>
 8009754:	9907      	ldr	r1, [sp, #28]
 8009756:	4620      	mov	r0, r4
 8009758:	f002 f962 	bl	800ba20 <_Bfree>
 800975c:	4631      	mov	r1, r6
 800975e:	4620      	mov	r0, r4
 8009760:	f002 f95e 	bl	800ba20 <_Bfree>
 8009764:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009766:	4620      	mov	r0, r4
 8009768:	f002 f95a 	bl	800ba20 <_Bfree>
 800976c:	4629      	mov	r1, r5
 800976e:	4620      	mov	r0, r4
 8009770:	f002 f956 	bl	800ba20 <_Bfree>
 8009774:	e5d6      	b.n	8009324 <_strtod_l+0x84>
 8009776:	2300      	movs	r3, #0
 8009778:	ea4f 1828 	mov.w	r8, r8, asr #4
 800977c:	4650      	mov	r0, sl
 800977e:	4659      	mov	r1, fp
 8009780:	4699      	mov	r9, r3
 8009782:	f1b8 0f01 	cmp.w	r8, #1
 8009786:	dc21      	bgt.n	80097cc <_strtod_l+0x52c>
 8009788:	b10b      	cbz	r3, 800978e <_strtod_l+0x4ee>
 800978a:	4682      	mov	sl, r0
 800978c:	468b      	mov	fp, r1
 800978e:	4b2e      	ldr	r3, [pc, #184]	; (8009848 <_strtod_l+0x5a8>)
 8009790:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009794:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009798:	4652      	mov	r2, sl
 800979a:	465b      	mov	r3, fp
 800979c:	e9d9 0100 	ldrd	r0, r1, [r9]
 80097a0:	f7f6 ff3a 	bl	8000618 <__aeabi_dmul>
 80097a4:	4b29      	ldr	r3, [pc, #164]	; (800984c <_strtod_l+0x5ac>)
 80097a6:	460a      	mov	r2, r1
 80097a8:	400b      	ands	r3, r1
 80097aa:	4929      	ldr	r1, [pc, #164]	; (8009850 <_strtod_l+0x5b0>)
 80097ac:	428b      	cmp	r3, r1
 80097ae:	4682      	mov	sl, r0
 80097b0:	d8be      	bhi.n	8009730 <_strtod_l+0x490>
 80097b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80097b6:	428b      	cmp	r3, r1
 80097b8:	bf86      	itte	hi
 80097ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009854 <_strtod_l+0x5b4>
 80097be:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80097c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80097c6:	2300      	movs	r3, #0
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	e081      	b.n	80098d0 <_strtod_l+0x630>
 80097cc:	f018 0f01 	tst.w	r8, #1
 80097d0:	d007      	beq.n	80097e2 <_strtod_l+0x542>
 80097d2:	4b1d      	ldr	r3, [pc, #116]	; (8009848 <_strtod_l+0x5a8>)
 80097d4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	f7f6 ff1c 	bl	8000618 <__aeabi_dmul>
 80097e0:	2301      	movs	r3, #1
 80097e2:	f109 0901 	add.w	r9, r9, #1
 80097e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80097ea:	e7ca      	b.n	8009782 <_strtod_l+0x4e2>
 80097ec:	d0eb      	beq.n	80097c6 <_strtod_l+0x526>
 80097ee:	f1c8 0800 	rsb	r8, r8, #0
 80097f2:	f018 020f 	ands.w	r2, r8, #15
 80097f6:	d00a      	beq.n	800980e <_strtod_l+0x56e>
 80097f8:	4b12      	ldr	r3, [pc, #72]	; (8009844 <_strtod_l+0x5a4>)
 80097fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097fe:	4650      	mov	r0, sl
 8009800:	4659      	mov	r1, fp
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	f7f7 f831 	bl	800086c <__aeabi_ddiv>
 800980a:	4682      	mov	sl, r0
 800980c:	468b      	mov	fp, r1
 800980e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009812:	d0d8      	beq.n	80097c6 <_strtod_l+0x526>
 8009814:	f1b8 0f1f 	cmp.w	r8, #31
 8009818:	dd1e      	ble.n	8009858 <_strtod_l+0x5b8>
 800981a:	2500      	movs	r5, #0
 800981c:	462e      	mov	r6, r5
 800981e:	9509      	str	r5, [sp, #36]	; 0x24
 8009820:	9507      	str	r5, [sp, #28]
 8009822:	2322      	movs	r3, #34	; 0x22
 8009824:	f04f 0a00 	mov.w	sl, #0
 8009828:	f04f 0b00 	mov.w	fp, #0
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	e789      	b.n	8009744 <_strtod_l+0x4a4>
 8009830:	08023b51 	.word	0x08023b51
 8009834:	08023b94 	.word	0x08023b94
 8009838:	08023b49 	.word	0x08023b49
 800983c:	08023cd4 	.word	0x08023cd4
 8009840:	08023995 	.word	0x08023995
 8009844:	08023ed0 	.word	0x08023ed0
 8009848:	08023ea8 	.word	0x08023ea8
 800984c:	7ff00000 	.word	0x7ff00000
 8009850:	7ca00000 	.word	0x7ca00000
 8009854:	7fefffff 	.word	0x7fefffff
 8009858:	f018 0310 	ands.w	r3, r8, #16
 800985c:	bf18      	it	ne
 800985e:	236a      	movne	r3, #106	; 0x6a
 8009860:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009c18 <_strtod_l+0x978>
 8009864:	9304      	str	r3, [sp, #16]
 8009866:	4650      	mov	r0, sl
 8009868:	4659      	mov	r1, fp
 800986a:	2300      	movs	r3, #0
 800986c:	f018 0f01 	tst.w	r8, #1
 8009870:	d004      	beq.n	800987c <_strtod_l+0x5dc>
 8009872:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009876:	f7f6 fecf 	bl	8000618 <__aeabi_dmul>
 800987a:	2301      	movs	r3, #1
 800987c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009880:	f109 0908 	add.w	r9, r9, #8
 8009884:	d1f2      	bne.n	800986c <_strtod_l+0x5cc>
 8009886:	b10b      	cbz	r3, 800988c <_strtod_l+0x5ec>
 8009888:	4682      	mov	sl, r0
 800988a:	468b      	mov	fp, r1
 800988c:	9b04      	ldr	r3, [sp, #16]
 800988e:	b1bb      	cbz	r3, 80098c0 <_strtod_l+0x620>
 8009890:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009894:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009898:	2b00      	cmp	r3, #0
 800989a:	4659      	mov	r1, fp
 800989c:	dd10      	ble.n	80098c0 <_strtod_l+0x620>
 800989e:	2b1f      	cmp	r3, #31
 80098a0:	f340 8128 	ble.w	8009af4 <_strtod_l+0x854>
 80098a4:	2b34      	cmp	r3, #52	; 0x34
 80098a6:	bfde      	ittt	le
 80098a8:	3b20      	suble	r3, #32
 80098aa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80098ae:	fa02 f303 	lslle.w	r3, r2, r3
 80098b2:	f04f 0a00 	mov.w	sl, #0
 80098b6:	bfcc      	ite	gt
 80098b8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80098bc:	ea03 0b01 	andle.w	fp, r3, r1
 80098c0:	2200      	movs	r2, #0
 80098c2:	2300      	movs	r3, #0
 80098c4:	4650      	mov	r0, sl
 80098c6:	4659      	mov	r1, fp
 80098c8:	f7f7 f90e 	bl	8000ae8 <__aeabi_dcmpeq>
 80098cc:	2800      	cmp	r0, #0
 80098ce:	d1a4      	bne.n	800981a <_strtod_l+0x57a>
 80098d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80098d6:	462b      	mov	r3, r5
 80098d8:	463a      	mov	r2, r7
 80098da:	4620      	mov	r0, r4
 80098dc:	f002 f90c 	bl	800baf8 <__s2b>
 80098e0:	9009      	str	r0, [sp, #36]	; 0x24
 80098e2:	2800      	cmp	r0, #0
 80098e4:	f43f af24 	beq.w	8009730 <_strtod_l+0x490>
 80098e8:	9b07      	ldr	r3, [sp, #28]
 80098ea:	1b9e      	subs	r6, r3, r6
 80098ec:	9b08      	ldr	r3, [sp, #32]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	bfb4      	ite	lt
 80098f2:	4633      	movlt	r3, r6
 80098f4:	2300      	movge	r3, #0
 80098f6:	9310      	str	r3, [sp, #64]	; 0x40
 80098f8:	9b08      	ldr	r3, [sp, #32]
 80098fa:	2500      	movs	r5, #0
 80098fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009900:	9318      	str	r3, [sp, #96]	; 0x60
 8009902:	462e      	mov	r6, r5
 8009904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009906:	4620      	mov	r0, r4
 8009908:	6859      	ldr	r1, [r3, #4]
 800990a:	f002 f849 	bl	800b9a0 <_Balloc>
 800990e:	9007      	str	r0, [sp, #28]
 8009910:	2800      	cmp	r0, #0
 8009912:	f43f af11 	beq.w	8009738 <_strtod_l+0x498>
 8009916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009918:	691a      	ldr	r2, [r3, #16]
 800991a:	3202      	adds	r2, #2
 800991c:	f103 010c 	add.w	r1, r3, #12
 8009920:	0092      	lsls	r2, r2, #2
 8009922:	300c      	adds	r0, #12
 8009924:	f7fe fbe2 	bl	80080ec <memcpy>
 8009928:	ec4b ab10 	vmov	d0, sl, fp
 800992c:	aa20      	add	r2, sp, #128	; 0x80
 800992e:	a91f      	add	r1, sp, #124	; 0x7c
 8009930:	4620      	mov	r0, r4
 8009932:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009936:	f002 fc1b 	bl	800c170 <__d2b>
 800993a:	901e      	str	r0, [sp, #120]	; 0x78
 800993c:	2800      	cmp	r0, #0
 800993e:	f43f aefb 	beq.w	8009738 <_strtod_l+0x498>
 8009942:	2101      	movs	r1, #1
 8009944:	4620      	mov	r0, r4
 8009946:	f002 f971 	bl	800bc2c <__i2b>
 800994a:	4606      	mov	r6, r0
 800994c:	2800      	cmp	r0, #0
 800994e:	f43f aef3 	beq.w	8009738 <_strtod_l+0x498>
 8009952:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009954:	9904      	ldr	r1, [sp, #16]
 8009956:	2b00      	cmp	r3, #0
 8009958:	bfab      	itete	ge
 800995a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800995c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800995e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009960:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009964:	bfac      	ite	ge
 8009966:	eb03 0902 	addge.w	r9, r3, r2
 800996a:	1ad7      	sublt	r7, r2, r3
 800996c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800996e:	eba3 0801 	sub.w	r8, r3, r1
 8009972:	4490      	add	r8, r2
 8009974:	4ba3      	ldr	r3, [pc, #652]	; (8009c04 <_strtod_l+0x964>)
 8009976:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800997a:	4598      	cmp	r8, r3
 800997c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009980:	f280 80cc 	bge.w	8009b1c <_strtod_l+0x87c>
 8009984:	eba3 0308 	sub.w	r3, r3, r8
 8009988:	2b1f      	cmp	r3, #31
 800998a:	eba2 0203 	sub.w	r2, r2, r3
 800998e:	f04f 0101 	mov.w	r1, #1
 8009992:	f300 80b6 	bgt.w	8009b02 <_strtod_l+0x862>
 8009996:	fa01 f303 	lsl.w	r3, r1, r3
 800999a:	9311      	str	r3, [sp, #68]	; 0x44
 800999c:	2300      	movs	r3, #0
 800999e:	930c      	str	r3, [sp, #48]	; 0x30
 80099a0:	eb09 0802 	add.w	r8, r9, r2
 80099a4:	9b04      	ldr	r3, [sp, #16]
 80099a6:	45c1      	cmp	r9, r8
 80099a8:	4417      	add	r7, r2
 80099aa:	441f      	add	r7, r3
 80099ac:	464b      	mov	r3, r9
 80099ae:	bfa8      	it	ge
 80099b0:	4643      	movge	r3, r8
 80099b2:	42bb      	cmp	r3, r7
 80099b4:	bfa8      	it	ge
 80099b6:	463b      	movge	r3, r7
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bfc2      	ittt	gt
 80099bc:	eba8 0803 	subgt.w	r8, r8, r3
 80099c0:	1aff      	subgt	r7, r7, r3
 80099c2:	eba9 0903 	subgt.w	r9, r9, r3
 80099c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	dd17      	ble.n	80099fc <_strtod_l+0x75c>
 80099cc:	4631      	mov	r1, r6
 80099ce:	461a      	mov	r2, r3
 80099d0:	4620      	mov	r0, r4
 80099d2:	f002 f9e7 	bl	800bda4 <__pow5mult>
 80099d6:	4606      	mov	r6, r0
 80099d8:	2800      	cmp	r0, #0
 80099da:	f43f aead 	beq.w	8009738 <_strtod_l+0x498>
 80099de:	4601      	mov	r1, r0
 80099e0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80099e2:	4620      	mov	r0, r4
 80099e4:	f002 f938 	bl	800bc58 <__multiply>
 80099e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80099ea:	2800      	cmp	r0, #0
 80099ec:	f43f aea4 	beq.w	8009738 <_strtod_l+0x498>
 80099f0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80099f2:	4620      	mov	r0, r4
 80099f4:	f002 f814 	bl	800ba20 <_Bfree>
 80099f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099fa:	931e      	str	r3, [sp, #120]	; 0x78
 80099fc:	f1b8 0f00 	cmp.w	r8, #0
 8009a00:	f300 8091 	bgt.w	8009b26 <_strtod_l+0x886>
 8009a04:	9b08      	ldr	r3, [sp, #32]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	dd08      	ble.n	8009a1c <_strtod_l+0x77c>
 8009a0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009a0c:	9907      	ldr	r1, [sp, #28]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f002 f9c8 	bl	800bda4 <__pow5mult>
 8009a14:	9007      	str	r0, [sp, #28]
 8009a16:	2800      	cmp	r0, #0
 8009a18:	f43f ae8e 	beq.w	8009738 <_strtod_l+0x498>
 8009a1c:	2f00      	cmp	r7, #0
 8009a1e:	dd08      	ble.n	8009a32 <_strtod_l+0x792>
 8009a20:	9907      	ldr	r1, [sp, #28]
 8009a22:	463a      	mov	r2, r7
 8009a24:	4620      	mov	r0, r4
 8009a26:	f002 fa17 	bl	800be58 <__lshift>
 8009a2a:	9007      	str	r0, [sp, #28]
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	f43f ae83 	beq.w	8009738 <_strtod_l+0x498>
 8009a32:	f1b9 0f00 	cmp.w	r9, #0
 8009a36:	dd08      	ble.n	8009a4a <_strtod_l+0x7aa>
 8009a38:	4631      	mov	r1, r6
 8009a3a:	464a      	mov	r2, r9
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f002 fa0b 	bl	800be58 <__lshift>
 8009a42:	4606      	mov	r6, r0
 8009a44:	2800      	cmp	r0, #0
 8009a46:	f43f ae77 	beq.w	8009738 <_strtod_l+0x498>
 8009a4a:	9a07      	ldr	r2, [sp, #28]
 8009a4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f002 fa8a 	bl	800bf68 <__mdiff>
 8009a54:	4605      	mov	r5, r0
 8009a56:	2800      	cmp	r0, #0
 8009a58:	f43f ae6e 	beq.w	8009738 <_strtod_l+0x498>
 8009a5c:	68c3      	ldr	r3, [r0, #12]
 8009a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009a60:	2300      	movs	r3, #0
 8009a62:	60c3      	str	r3, [r0, #12]
 8009a64:	4631      	mov	r1, r6
 8009a66:	f002 fa63 	bl	800bf30 <__mcmp>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	da65      	bge.n	8009b3a <_strtod_l+0x89a>
 8009a6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a70:	ea53 030a 	orrs.w	r3, r3, sl
 8009a74:	f040 8087 	bne.w	8009b86 <_strtod_l+0x8e6>
 8009a78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f040 8082 	bne.w	8009b86 <_strtod_l+0x8e6>
 8009a82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a86:	0d1b      	lsrs	r3, r3, #20
 8009a88:	051b      	lsls	r3, r3, #20
 8009a8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a8e:	d97a      	bls.n	8009b86 <_strtod_l+0x8e6>
 8009a90:	696b      	ldr	r3, [r5, #20]
 8009a92:	b913      	cbnz	r3, 8009a9a <_strtod_l+0x7fa>
 8009a94:	692b      	ldr	r3, [r5, #16]
 8009a96:	2b01      	cmp	r3, #1
 8009a98:	dd75      	ble.n	8009b86 <_strtod_l+0x8e6>
 8009a9a:	4629      	mov	r1, r5
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	f002 f9da 	bl	800be58 <__lshift>
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	f002 fa42 	bl	800bf30 <__mcmp>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	dd6a      	ble.n	8009b86 <_strtod_l+0x8e6>
 8009ab0:	9904      	ldr	r1, [sp, #16]
 8009ab2:	4a55      	ldr	r2, [pc, #340]	; (8009c08 <_strtod_l+0x968>)
 8009ab4:	465b      	mov	r3, fp
 8009ab6:	2900      	cmp	r1, #0
 8009ab8:	f000 8085 	beq.w	8009bc6 <_strtod_l+0x926>
 8009abc:	ea02 010b 	and.w	r1, r2, fp
 8009ac0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009ac4:	dc7f      	bgt.n	8009bc6 <_strtod_l+0x926>
 8009ac6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009aca:	f77f aeaa 	ble.w	8009822 <_strtod_l+0x582>
 8009ace:	4a4f      	ldr	r2, [pc, #316]	; (8009c0c <_strtod_l+0x96c>)
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009ad6:	4650      	mov	r0, sl
 8009ad8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8009adc:	4659      	mov	r1, fp
 8009ade:	f7f6 fd9b 	bl	8000618 <__aeabi_dmul>
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4303      	orrs	r3, r0
 8009ae6:	bf08      	it	eq
 8009ae8:	2322      	moveq	r3, #34	; 0x22
 8009aea:	4682      	mov	sl, r0
 8009aec:	468b      	mov	fp, r1
 8009aee:	bf08      	it	eq
 8009af0:	6023      	streq	r3, [r4, #0]
 8009af2:	e62b      	b.n	800974c <_strtod_l+0x4ac>
 8009af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009af8:	fa02 f303 	lsl.w	r3, r2, r3
 8009afc:	ea03 0a0a 	and.w	sl, r3, sl
 8009b00:	e6de      	b.n	80098c0 <_strtod_l+0x620>
 8009b02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009b06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009b0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009b0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009b12:	fa01 f308 	lsl.w	r3, r1, r8
 8009b16:	930c      	str	r3, [sp, #48]	; 0x30
 8009b18:	9111      	str	r1, [sp, #68]	; 0x44
 8009b1a:	e741      	b.n	80099a0 <_strtod_l+0x700>
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	930c      	str	r3, [sp, #48]	; 0x30
 8009b20:	2301      	movs	r3, #1
 8009b22:	9311      	str	r3, [sp, #68]	; 0x44
 8009b24:	e73c      	b.n	80099a0 <_strtod_l+0x700>
 8009b26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009b28:	4642      	mov	r2, r8
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f002 f994 	bl	800be58 <__lshift>
 8009b30:	901e      	str	r0, [sp, #120]	; 0x78
 8009b32:	2800      	cmp	r0, #0
 8009b34:	f47f af66 	bne.w	8009a04 <_strtod_l+0x764>
 8009b38:	e5fe      	b.n	8009738 <_strtod_l+0x498>
 8009b3a:	465f      	mov	r7, fp
 8009b3c:	d16e      	bne.n	8009c1c <_strtod_l+0x97c>
 8009b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009b40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b44:	b342      	cbz	r2, 8009b98 <_strtod_l+0x8f8>
 8009b46:	4a32      	ldr	r2, [pc, #200]	; (8009c10 <_strtod_l+0x970>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d128      	bne.n	8009b9e <_strtod_l+0x8fe>
 8009b4c:	9b04      	ldr	r3, [sp, #16]
 8009b4e:	4650      	mov	r0, sl
 8009b50:	b1eb      	cbz	r3, 8009b8e <_strtod_l+0x8ee>
 8009b52:	4a2d      	ldr	r2, [pc, #180]	; (8009c08 <_strtod_l+0x968>)
 8009b54:	403a      	ands	r2, r7
 8009b56:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009b5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009b5e:	d819      	bhi.n	8009b94 <_strtod_l+0x8f4>
 8009b60:	0d12      	lsrs	r2, r2, #20
 8009b62:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b66:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6a:	4298      	cmp	r0, r3
 8009b6c:	d117      	bne.n	8009b9e <_strtod_l+0x8fe>
 8009b6e:	4b29      	ldr	r3, [pc, #164]	; (8009c14 <_strtod_l+0x974>)
 8009b70:	429f      	cmp	r7, r3
 8009b72:	d102      	bne.n	8009b7a <_strtod_l+0x8da>
 8009b74:	3001      	adds	r0, #1
 8009b76:	f43f addf 	beq.w	8009738 <_strtod_l+0x498>
 8009b7a:	4b23      	ldr	r3, [pc, #140]	; (8009c08 <_strtod_l+0x968>)
 8009b7c:	403b      	ands	r3, r7
 8009b7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b82:	f04f 0a00 	mov.w	sl, #0
 8009b86:	9b04      	ldr	r3, [sp, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1a0      	bne.n	8009ace <_strtod_l+0x82e>
 8009b8c:	e5de      	b.n	800974c <_strtod_l+0x4ac>
 8009b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b92:	e7ea      	b.n	8009b6a <_strtod_l+0x8ca>
 8009b94:	460b      	mov	r3, r1
 8009b96:	e7e8      	b.n	8009b6a <_strtod_l+0x8ca>
 8009b98:	ea53 030a 	orrs.w	r3, r3, sl
 8009b9c:	d088      	beq.n	8009ab0 <_strtod_l+0x810>
 8009b9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ba0:	b1db      	cbz	r3, 8009bda <_strtod_l+0x93a>
 8009ba2:	423b      	tst	r3, r7
 8009ba4:	d0ef      	beq.n	8009b86 <_strtod_l+0x8e6>
 8009ba6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ba8:	9a04      	ldr	r2, [sp, #16]
 8009baa:	4650      	mov	r0, sl
 8009bac:	4659      	mov	r1, fp
 8009bae:	b1c3      	cbz	r3, 8009be2 <_strtod_l+0x942>
 8009bb0:	f7ff fb5a 	bl	8009268 <sulp>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bbc:	f7f6 fb76 	bl	80002ac <__adddf3>
 8009bc0:	4682      	mov	sl, r0
 8009bc2:	468b      	mov	fp, r1
 8009bc4:	e7df      	b.n	8009b86 <_strtod_l+0x8e6>
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009bcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009bd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009bd4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009bd8:	e7d5      	b.n	8009b86 <_strtod_l+0x8e6>
 8009bda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009bdc:	ea13 0f0a 	tst.w	r3, sl
 8009be0:	e7e0      	b.n	8009ba4 <_strtod_l+0x904>
 8009be2:	f7ff fb41 	bl	8009268 <sulp>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009bee:	f7f6 fb5b 	bl	80002a8 <__aeabi_dsub>
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	4682      	mov	sl, r0
 8009bf8:	468b      	mov	fp, r1
 8009bfa:	f7f6 ff75 	bl	8000ae8 <__aeabi_dcmpeq>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d0c1      	beq.n	8009b86 <_strtod_l+0x8e6>
 8009c02:	e60e      	b.n	8009822 <_strtod_l+0x582>
 8009c04:	fffffc02 	.word	0xfffffc02
 8009c08:	7ff00000 	.word	0x7ff00000
 8009c0c:	39500000 	.word	0x39500000
 8009c10:	000fffff 	.word	0x000fffff
 8009c14:	7fefffff 	.word	0x7fefffff
 8009c18:	08023ba8 	.word	0x08023ba8
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f002 fb02 	bl	800c228 <__ratio>
 8009c24:	ec59 8b10 	vmov	r8, r9, d0
 8009c28:	ee10 0a10 	vmov	r0, s0
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c32:	4649      	mov	r1, r9
 8009c34:	f7f6 ff6c 	bl	8000b10 <__aeabi_dcmple>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d07c      	beq.n	8009d36 <_strtod_l+0xa96>
 8009c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d04c      	beq.n	8009cdc <_strtod_l+0xa3c>
 8009c42:	4b95      	ldr	r3, [pc, #596]	; (8009e98 <_strtod_l+0xbf8>)
 8009c44:	2200      	movs	r2, #0
 8009c46:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009c4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009e98 <_strtod_l+0xbf8>
 8009c4e:	f04f 0800 	mov.w	r8, #0
 8009c52:	4b92      	ldr	r3, [pc, #584]	; (8009e9c <_strtod_l+0xbfc>)
 8009c54:	403b      	ands	r3, r7
 8009c56:	9311      	str	r3, [sp, #68]	; 0x44
 8009c58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009c5a:	4b91      	ldr	r3, [pc, #580]	; (8009ea0 <_strtod_l+0xc00>)
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	f040 80b2 	bne.w	8009dc6 <_strtod_l+0xb26>
 8009c62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c6a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009c6e:	ec4b ab10 	vmov	d0, sl, fp
 8009c72:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009c76:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009c7a:	f002 f9fd 	bl	800c078 <__ulp>
 8009c7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c82:	ec53 2b10 	vmov	r2, r3, d0
 8009c86:	f7f6 fcc7 	bl	8000618 <__aeabi_dmul>
 8009c8a:	4652      	mov	r2, sl
 8009c8c:	465b      	mov	r3, fp
 8009c8e:	f7f6 fb0d 	bl	80002ac <__adddf3>
 8009c92:	460b      	mov	r3, r1
 8009c94:	4981      	ldr	r1, [pc, #516]	; (8009e9c <_strtod_l+0xbfc>)
 8009c96:	4a83      	ldr	r2, [pc, #524]	; (8009ea4 <_strtod_l+0xc04>)
 8009c98:	4019      	ands	r1, r3
 8009c9a:	4291      	cmp	r1, r2
 8009c9c:	4682      	mov	sl, r0
 8009c9e:	d95e      	bls.n	8009d5e <_strtod_l+0xabe>
 8009ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ca2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d103      	bne.n	8009cb2 <_strtod_l+0xa12>
 8009caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cac:	3301      	adds	r3, #1
 8009cae:	f43f ad43 	beq.w	8009738 <_strtod_l+0x498>
 8009cb2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009eb0 <_strtod_l+0xc10>
 8009cb6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8009cba:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	f001 feaf 	bl	800ba20 <_Bfree>
 8009cc2:	9907      	ldr	r1, [sp, #28]
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f001 feab 	bl	800ba20 <_Bfree>
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f001 fea7 	bl	800ba20 <_Bfree>
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	f001 fea3 	bl	800ba20 <_Bfree>
 8009cda:	e613      	b.n	8009904 <_strtod_l+0x664>
 8009cdc:	f1ba 0f00 	cmp.w	sl, #0
 8009ce0:	d11b      	bne.n	8009d1a <_strtod_l+0xa7a>
 8009ce2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ce6:	b9f3      	cbnz	r3, 8009d26 <_strtod_l+0xa86>
 8009ce8:	4b6b      	ldr	r3, [pc, #428]	; (8009e98 <_strtod_l+0xbf8>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	4640      	mov	r0, r8
 8009cee:	4649      	mov	r1, r9
 8009cf0:	f7f6 ff04 	bl	8000afc <__aeabi_dcmplt>
 8009cf4:	b9d0      	cbnz	r0, 8009d2c <_strtod_l+0xa8c>
 8009cf6:	4640      	mov	r0, r8
 8009cf8:	4649      	mov	r1, r9
 8009cfa:	4b6b      	ldr	r3, [pc, #428]	; (8009ea8 <_strtod_l+0xc08>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f7f6 fc8b 	bl	8000618 <__aeabi_dmul>
 8009d02:	4680      	mov	r8, r0
 8009d04:	4689      	mov	r9, r1
 8009d06:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009d0a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009d0e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009d10:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009d14:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009d18:	e79b      	b.n	8009c52 <_strtod_l+0x9b2>
 8009d1a:	f1ba 0f01 	cmp.w	sl, #1
 8009d1e:	d102      	bne.n	8009d26 <_strtod_l+0xa86>
 8009d20:	2f00      	cmp	r7, #0
 8009d22:	f43f ad7e 	beq.w	8009822 <_strtod_l+0x582>
 8009d26:	4b61      	ldr	r3, [pc, #388]	; (8009eac <_strtod_l+0xc0c>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	e78c      	b.n	8009c46 <_strtod_l+0x9a6>
 8009d2c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009ea8 <_strtod_l+0xc08>
 8009d30:	f04f 0800 	mov.w	r8, #0
 8009d34:	e7e7      	b.n	8009d06 <_strtod_l+0xa66>
 8009d36:	4b5c      	ldr	r3, [pc, #368]	; (8009ea8 <_strtod_l+0xc08>)
 8009d38:	4640      	mov	r0, r8
 8009d3a:	4649      	mov	r1, r9
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f7f6 fc6b 	bl	8000618 <__aeabi_dmul>
 8009d42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d44:	4680      	mov	r8, r0
 8009d46:	4689      	mov	r9, r1
 8009d48:	b933      	cbnz	r3, 8009d58 <_strtod_l+0xab8>
 8009d4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d4e:	9012      	str	r0, [sp, #72]	; 0x48
 8009d50:	9313      	str	r3, [sp, #76]	; 0x4c
 8009d52:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009d56:	e7dd      	b.n	8009d14 <_strtod_l+0xa74>
 8009d58:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009d5c:	e7f9      	b.n	8009d52 <_strtod_l+0xab2>
 8009d5e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009d62:	9b04      	ldr	r3, [sp, #16]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1a8      	bne.n	8009cba <_strtod_l+0xa1a>
 8009d68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009d6e:	0d1b      	lsrs	r3, r3, #20
 8009d70:	051b      	lsls	r3, r3, #20
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d1a1      	bne.n	8009cba <_strtod_l+0xa1a>
 8009d76:	4640      	mov	r0, r8
 8009d78:	4649      	mov	r1, r9
 8009d7a:	f7f6 ffad 	bl	8000cd8 <__aeabi_d2lz>
 8009d7e:	f7f6 fc1d 	bl	80005bc <__aeabi_l2d>
 8009d82:	4602      	mov	r2, r0
 8009d84:	460b      	mov	r3, r1
 8009d86:	4640      	mov	r0, r8
 8009d88:	4649      	mov	r1, r9
 8009d8a:	f7f6 fa8d 	bl	80002a8 <__aeabi_dsub>
 8009d8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d90:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d94:	ea43 030a 	orr.w	r3, r3, sl
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	4680      	mov	r8, r0
 8009d9c:	4689      	mov	r9, r1
 8009d9e:	d053      	beq.n	8009e48 <_strtod_l+0xba8>
 8009da0:	a335      	add	r3, pc, #212	; (adr r3, 8009e78 <_strtod_l+0xbd8>)
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	f7f6 fea9 	bl	8000afc <__aeabi_dcmplt>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	f47f acce 	bne.w	800974c <_strtod_l+0x4ac>
 8009db0:	a333      	add	r3, pc, #204	; (adr r3, 8009e80 <_strtod_l+0xbe0>)
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	4640      	mov	r0, r8
 8009db8:	4649      	mov	r1, r9
 8009dba:	f7f6 febd 	bl	8000b38 <__aeabi_dcmpgt>
 8009dbe:	2800      	cmp	r0, #0
 8009dc0:	f43f af7b 	beq.w	8009cba <_strtod_l+0xa1a>
 8009dc4:	e4c2      	b.n	800974c <_strtod_l+0x4ac>
 8009dc6:	9b04      	ldr	r3, [sp, #16]
 8009dc8:	b333      	cbz	r3, 8009e18 <_strtod_l+0xb78>
 8009dca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009dcc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009dd0:	d822      	bhi.n	8009e18 <_strtod_l+0xb78>
 8009dd2:	a32d      	add	r3, pc, #180	; (adr r3, 8009e88 <_strtod_l+0xbe8>)
 8009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd8:	4640      	mov	r0, r8
 8009dda:	4649      	mov	r1, r9
 8009ddc:	f7f6 fe98 	bl	8000b10 <__aeabi_dcmple>
 8009de0:	b1a0      	cbz	r0, 8009e0c <_strtod_l+0xb6c>
 8009de2:	4649      	mov	r1, r9
 8009de4:	4640      	mov	r0, r8
 8009de6:	f7f6 feef 	bl	8000bc8 <__aeabi_d2uiz>
 8009dea:	2801      	cmp	r0, #1
 8009dec:	bf38      	it	cc
 8009dee:	2001      	movcc	r0, #1
 8009df0:	f7f6 fb98 	bl	8000524 <__aeabi_ui2d>
 8009df4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009df6:	4680      	mov	r8, r0
 8009df8:	4689      	mov	r9, r1
 8009dfa:	bb13      	cbnz	r3, 8009e42 <_strtod_l+0xba2>
 8009dfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e00:	9014      	str	r0, [sp, #80]	; 0x50
 8009e02:	9315      	str	r3, [sp, #84]	; 0x54
 8009e04:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009e08:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009e0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009e0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009e10:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e14:	1a9b      	subs	r3, r3, r2
 8009e16:	930d      	str	r3, [sp, #52]	; 0x34
 8009e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e1c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009e20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009e24:	f002 f928 	bl	800c078 <__ulp>
 8009e28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009e2c:	ec53 2b10 	vmov	r2, r3, d0
 8009e30:	f7f6 fbf2 	bl	8000618 <__aeabi_dmul>
 8009e34:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009e38:	f7f6 fa38 	bl	80002ac <__adddf3>
 8009e3c:	4682      	mov	sl, r0
 8009e3e:	468b      	mov	fp, r1
 8009e40:	e78f      	b.n	8009d62 <_strtod_l+0xac2>
 8009e42:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009e46:	e7dd      	b.n	8009e04 <_strtod_l+0xb64>
 8009e48:	a311      	add	r3, pc, #68	; (adr r3, 8009e90 <_strtod_l+0xbf0>)
 8009e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4e:	f7f6 fe55 	bl	8000afc <__aeabi_dcmplt>
 8009e52:	e7b4      	b.n	8009dbe <_strtod_l+0xb1e>
 8009e54:	2300      	movs	r3, #0
 8009e56:	930e      	str	r3, [sp, #56]	; 0x38
 8009e58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009e5a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	f7ff ba65 	b.w	800932c <_strtod_l+0x8c>
 8009e62:	2b65      	cmp	r3, #101	; 0x65
 8009e64:	f43f ab5d 	beq.w	8009522 <_strtod_l+0x282>
 8009e68:	2b45      	cmp	r3, #69	; 0x45
 8009e6a:	f43f ab5a 	beq.w	8009522 <_strtod_l+0x282>
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f7ff bb92 	b.w	8009598 <_strtod_l+0x2f8>
 8009e74:	f3af 8000 	nop.w
 8009e78:	94a03595 	.word	0x94a03595
 8009e7c:	3fdfffff 	.word	0x3fdfffff
 8009e80:	35afe535 	.word	0x35afe535
 8009e84:	3fe00000 	.word	0x3fe00000
 8009e88:	ffc00000 	.word	0xffc00000
 8009e8c:	41dfffff 	.word	0x41dfffff
 8009e90:	94a03595 	.word	0x94a03595
 8009e94:	3fcfffff 	.word	0x3fcfffff
 8009e98:	3ff00000 	.word	0x3ff00000
 8009e9c:	7ff00000 	.word	0x7ff00000
 8009ea0:	7fe00000 	.word	0x7fe00000
 8009ea4:	7c9fffff 	.word	0x7c9fffff
 8009ea8:	3fe00000 	.word	0x3fe00000
 8009eac:	bff00000 	.word	0xbff00000
 8009eb0:	7fefffff 	.word	0x7fefffff

08009eb4 <_strtod_r>:
 8009eb4:	4b01      	ldr	r3, [pc, #4]	; (8009ebc <_strtod_r+0x8>)
 8009eb6:	f7ff b9f3 	b.w	80092a0 <_strtod_l>
 8009eba:	bf00      	nop
 8009ebc:	200007e4 	.word	0x200007e4

08009ec0 <_strtol_l.isra.0>:
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec6:	d001      	beq.n	8009ecc <_strtol_l.isra.0+0xc>
 8009ec8:	2b24      	cmp	r3, #36	; 0x24
 8009eca:	d906      	bls.n	8009eda <_strtol_l.isra.0+0x1a>
 8009ecc:	f7fe f8dc 	bl	8008088 <__errno>
 8009ed0:	2316      	movs	r3, #22
 8009ed2:	6003      	str	r3, [r0, #0]
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eda:	4f3a      	ldr	r7, [pc, #232]	; (8009fc4 <_strtol_l.isra.0+0x104>)
 8009edc:	468e      	mov	lr, r1
 8009ede:	4676      	mov	r6, lr
 8009ee0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009ee4:	5de5      	ldrb	r5, [r4, r7]
 8009ee6:	f015 0508 	ands.w	r5, r5, #8
 8009eea:	d1f8      	bne.n	8009ede <_strtol_l.isra.0+0x1e>
 8009eec:	2c2d      	cmp	r4, #45	; 0x2d
 8009eee:	d134      	bne.n	8009f5a <_strtol_l.isra.0+0x9a>
 8009ef0:	f89e 4000 	ldrb.w	r4, [lr]
 8009ef4:	f04f 0801 	mov.w	r8, #1
 8009ef8:	f106 0e02 	add.w	lr, r6, #2
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d05c      	beq.n	8009fba <_strtol_l.isra.0+0xfa>
 8009f00:	2b10      	cmp	r3, #16
 8009f02:	d10c      	bne.n	8009f1e <_strtol_l.isra.0+0x5e>
 8009f04:	2c30      	cmp	r4, #48	; 0x30
 8009f06:	d10a      	bne.n	8009f1e <_strtol_l.isra.0+0x5e>
 8009f08:	f89e 4000 	ldrb.w	r4, [lr]
 8009f0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009f10:	2c58      	cmp	r4, #88	; 0x58
 8009f12:	d14d      	bne.n	8009fb0 <_strtol_l.isra.0+0xf0>
 8009f14:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009f18:	2310      	movs	r3, #16
 8009f1a:	f10e 0e02 	add.w	lr, lr, #2
 8009f1e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009f22:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009f26:	2600      	movs	r6, #0
 8009f28:	fbbc f9f3 	udiv	r9, ip, r3
 8009f2c:	4635      	mov	r5, r6
 8009f2e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009f32:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009f36:	2f09      	cmp	r7, #9
 8009f38:	d818      	bhi.n	8009f6c <_strtol_l.isra.0+0xac>
 8009f3a:	463c      	mov	r4, r7
 8009f3c:	42a3      	cmp	r3, r4
 8009f3e:	dd24      	ble.n	8009f8a <_strtol_l.isra.0+0xca>
 8009f40:	2e00      	cmp	r6, #0
 8009f42:	db1f      	blt.n	8009f84 <_strtol_l.isra.0+0xc4>
 8009f44:	45a9      	cmp	r9, r5
 8009f46:	d31d      	bcc.n	8009f84 <_strtol_l.isra.0+0xc4>
 8009f48:	d101      	bne.n	8009f4e <_strtol_l.isra.0+0x8e>
 8009f4a:	45a2      	cmp	sl, r4
 8009f4c:	db1a      	blt.n	8009f84 <_strtol_l.isra.0+0xc4>
 8009f4e:	fb05 4503 	mla	r5, r5, r3, r4
 8009f52:	2601      	movs	r6, #1
 8009f54:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009f58:	e7eb      	b.n	8009f32 <_strtol_l.isra.0+0x72>
 8009f5a:	2c2b      	cmp	r4, #43	; 0x2b
 8009f5c:	bf08      	it	eq
 8009f5e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009f62:	46a8      	mov	r8, r5
 8009f64:	bf08      	it	eq
 8009f66:	f106 0e02 	addeq.w	lr, r6, #2
 8009f6a:	e7c7      	b.n	8009efc <_strtol_l.isra.0+0x3c>
 8009f6c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009f70:	2f19      	cmp	r7, #25
 8009f72:	d801      	bhi.n	8009f78 <_strtol_l.isra.0+0xb8>
 8009f74:	3c37      	subs	r4, #55	; 0x37
 8009f76:	e7e1      	b.n	8009f3c <_strtol_l.isra.0+0x7c>
 8009f78:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009f7c:	2f19      	cmp	r7, #25
 8009f7e:	d804      	bhi.n	8009f8a <_strtol_l.isra.0+0xca>
 8009f80:	3c57      	subs	r4, #87	; 0x57
 8009f82:	e7db      	b.n	8009f3c <_strtol_l.isra.0+0x7c>
 8009f84:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8009f88:	e7e4      	b.n	8009f54 <_strtol_l.isra.0+0x94>
 8009f8a:	2e00      	cmp	r6, #0
 8009f8c:	da05      	bge.n	8009f9a <_strtol_l.isra.0+0xda>
 8009f8e:	2322      	movs	r3, #34	; 0x22
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	4665      	mov	r5, ip
 8009f94:	b942      	cbnz	r2, 8009fa8 <_strtol_l.isra.0+0xe8>
 8009f96:	4628      	mov	r0, r5
 8009f98:	e79d      	b.n	8009ed6 <_strtol_l.isra.0+0x16>
 8009f9a:	f1b8 0f00 	cmp.w	r8, #0
 8009f9e:	d000      	beq.n	8009fa2 <_strtol_l.isra.0+0xe2>
 8009fa0:	426d      	negs	r5, r5
 8009fa2:	2a00      	cmp	r2, #0
 8009fa4:	d0f7      	beq.n	8009f96 <_strtol_l.isra.0+0xd6>
 8009fa6:	b10e      	cbz	r6, 8009fac <_strtol_l.isra.0+0xec>
 8009fa8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8009fac:	6011      	str	r1, [r2, #0]
 8009fae:	e7f2      	b.n	8009f96 <_strtol_l.isra.0+0xd6>
 8009fb0:	2430      	movs	r4, #48	; 0x30
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d1b3      	bne.n	8009f1e <_strtol_l.isra.0+0x5e>
 8009fb6:	2308      	movs	r3, #8
 8009fb8:	e7b1      	b.n	8009f1e <_strtol_l.isra.0+0x5e>
 8009fba:	2c30      	cmp	r4, #48	; 0x30
 8009fbc:	d0a4      	beq.n	8009f08 <_strtol_l.isra.0+0x48>
 8009fbe:	230a      	movs	r3, #10
 8009fc0:	e7ad      	b.n	8009f1e <_strtol_l.isra.0+0x5e>
 8009fc2:	bf00      	nop
 8009fc4:	08023bd1 	.word	0x08023bd1

08009fc8 <_strtol_r>:
 8009fc8:	f7ff bf7a 	b.w	8009ec0 <_strtol_l.isra.0>

08009fcc <__swbuf_r>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	460e      	mov	r6, r1
 8009fd0:	4614      	mov	r4, r2
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	b118      	cbz	r0, 8009fde <__swbuf_r+0x12>
 8009fd6:	6983      	ldr	r3, [r0, #24]
 8009fd8:	b90b      	cbnz	r3, 8009fde <__swbuf_r+0x12>
 8009fda:	f001 f84b 	bl	800b074 <__sinit>
 8009fde:	4b21      	ldr	r3, [pc, #132]	; (800a064 <__swbuf_r+0x98>)
 8009fe0:	429c      	cmp	r4, r3
 8009fe2:	d12b      	bne.n	800a03c <__swbuf_r+0x70>
 8009fe4:	686c      	ldr	r4, [r5, #4]
 8009fe6:	69a3      	ldr	r3, [r4, #24]
 8009fe8:	60a3      	str	r3, [r4, #8]
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	071a      	lsls	r2, r3, #28
 8009fee:	d52f      	bpl.n	800a050 <__swbuf_r+0x84>
 8009ff0:	6923      	ldr	r3, [r4, #16]
 8009ff2:	b36b      	cbz	r3, 800a050 <__swbuf_r+0x84>
 8009ff4:	6923      	ldr	r3, [r4, #16]
 8009ff6:	6820      	ldr	r0, [r4, #0]
 8009ff8:	1ac0      	subs	r0, r0, r3
 8009ffa:	6963      	ldr	r3, [r4, #20]
 8009ffc:	b2f6      	uxtb	r6, r6
 8009ffe:	4283      	cmp	r3, r0
 800a000:	4637      	mov	r7, r6
 800a002:	dc04      	bgt.n	800a00e <__swbuf_r+0x42>
 800a004:	4621      	mov	r1, r4
 800a006:	4628      	mov	r0, r5
 800a008:	f000 ffa0 	bl	800af4c <_fflush_r>
 800a00c:	bb30      	cbnz	r0, 800a05c <__swbuf_r+0x90>
 800a00e:	68a3      	ldr	r3, [r4, #8]
 800a010:	3b01      	subs	r3, #1
 800a012:	60a3      	str	r3, [r4, #8]
 800a014:	6823      	ldr	r3, [r4, #0]
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	6022      	str	r2, [r4, #0]
 800a01a:	701e      	strb	r6, [r3, #0]
 800a01c:	6963      	ldr	r3, [r4, #20]
 800a01e:	3001      	adds	r0, #1
 800a020:	4283      	cmp	r3, r0
 800a022:	d004      	beq.n	800a02e <__swbuf_r+0x62>
 800a024:	89a3      	ldrh	r3, [r4, #12]
 800a026:	07db      	lsls	r3, r3, #31
 800a028:	d506      	bpl.n	800a038 <__swbuf_r+0x6c>
 800a02a:	2e0a      	cmp	r6, #10
 800a02c:	d104      	bne.n	800a038 <__swbuf_r+0x6c>
 800a02e:	4621      	mov	r1, r4
 800a030:	4628      	mov	r0, r5
 800a032:	f000 ff8b 	bl	800af4c <_fflush_r>
 800a036:	b988      	cbnz	r0, 800a05c <__swbuf_r+0x90>
 800a038:	4638      	mov	r0, r7
 800a03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a03c:	4b0a      	ldr	r3, [pc, #40]	; (800a068 <__swbuf_r+0x9c>)
 800a03e:	429c      	cmp	r4, r3
 800a040:	d101      	bne.n	800a046 <__swbuf_r+0x7a>
 800a042:	68ac      	ldr	r4, [r5, #8]
 800a044:	e7cf      	b.n	8009fe6 <__swbuf_r+0x1a>
 800a046:	4b09      	ldr	r3, [pc, #36]	; (800a06c <__swbuf_r+0xa0>)
 800a048:	429c      	cmp	r4, r3
 800a04a:	bf08      	it	eq
 800a04c:	68ec      	ldreq	r4, [r5, #12]
 800a04e:	e7ca      	b.n	8009fe6 <__swbuf_r+0x1a>
 800a050:	4621      	mov	r1, r4
 800a052:	4628      	mov	r0, r5
 800a054:	f000 f80c 	bl	800a070 <__swsetup_r>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d0cb      	beq.n	8009ff4 <__swbuf_r+0x28>
 800a05c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a060:	e7ea      	b.n	800a038 <__swbuf_r+0x6c>
 800a062:	bf00      	nop
 800a064:	08023d88 	.word	0x08023d88
 800a068:	08023da8 	.word	0x08023da8
 800a06c:	08023d68 	.word	0x08023d68

0800a070 <__swsetup_r>:
 800a070:	4b32      	ldr	r3, [pc, #200]	; (800a13c <__swsetup_r+0xcc>)
 800a072:	b570      	push	{r4, r5, r6, lr}
 800a074:	681d      	ldr	r5, [r3, #0]
 800a076:	4606      	mov	r6, r0
 800a078:	460c      	mov	r4, r1
 800a07a:	b125      	cbz	r5, 800a086 <__swsetup_r+0x16>
 800a07c:	69ab      	ldr	r3, [r5, #24]
 800a07e:	b913      	cbnz	r3, 800a086 <__swsetup_r+0x16>
 800a080:	4628      	mov	r0, r5
 800a082:	f000 fff7 	bl	800b074 <__sinit>
 800a086:	4b2e      	ldr	r3, [pc, #184]	; (800a140 <__swsetup_r+0xd0>)
 800a088:	429c      	cmp	r4, r3
 800a08a:	d10f      	bne.n	800a0ac <__swsetup_r+0x3c>
 800a08c:	686c      	ldr	r4, [r5, #4]
 800a08e:	89a3      	ldrh	r3, [r4, #12]
 800a090:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a094:	0719      	lsls	r1, r3, #28
 800a096:	d42c      	bmi.n	800a0f2 <__swsetup_r+0x82>
 800a098:	06dd      	lsls	r5, r3, #27
 800a09a:	d411      	bmi.n	800a0c0 <__swsetup_r+0x50>
 800a09c:	2309      	movs	r3, #9
 800a09e:	6033      	str	r3, [r6, #0]
 800a0a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0a4:	81a3      	strh	r3, [r4, #12]
 800a0a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a0aa:	e03e      	b.n	800a12a <__swsetup_r+0xba>
 800a0ac:	4b25      	ldr	r3, [pc, #148]	; (800a144 <__swsetup_r+0xd4>)
 800a0ae:	429c      	cmp	r4, r3
 800a0b0:	d101      	bne.n	800a0b6 <__swsetup_r+0x46>
 800a0b2:	68ac      	ldr	r4, [r5, #8]
 800a0b4:	e7eb      	b.n	800a08e <__swsetup_r+0x1e>
 800a0b6:	4b24      	ldr	r3, [pc, #144]	; (800a148 <__swsetup_r+0xd8>)
 800a0b8:	429c      	cmp	r4, r3
 800a0ba:	bf08      	it	eq
 800a0bc:	68ec      	ldreq	r4, [r5, #12]
 800a0be:	e7e6      	b.n	800a08e <__swsetup_r+0x1e>
 800a0c0:	0758      	lsls	r0, r3, #29
 800a0c2:	d512      	bpl.n	800a0ea <__swsetup_r+0x7a>
 800a0c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0c6:	b141      	cbz	r1, 800a0da <__swsetup_r+0x6a>
 800a0c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0cc:	4299      	cmp	r1, r3
 800a0ce:	d002      	beq.n	800a0d6 <__swsetup_r+0x66>
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f7fe f821 	bl	8008118 <_free_r>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	6363      	str	r3, [r4, #52]	; 0x34
 800a0da:	89a3      	ldrh	r3, [r4, #12]
 800a0dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0e0:	81a3      	strh	r3, [r4, #12]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	6063      	str	r3, [r4, #4]
 800a0e6:	6923      	ldr	r3, [r4, #16]
 800a0e8:	6023      	str	r3, [r4, #0]
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	f043 0308 	orr.w	r3, r3, #8
 800a0f0:	81a3      	strh	r3, [r4, #12]
 800a0f2:	6923      	ldr	r3, [r4, #16]
 800a0f4:	b94b      	cbnz	r3, 800a10a <__swsetup_r+0x9a>
 800a0f6:	89a3      	ldrh	r3, [r4, #12]
 800a0f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a100:	d003      	beq.n	800a10a <__swsetup_r+0x9a>
 800a102:	4621      	mov	r1, r4
 800a104:	4630      	mov	r0, r6
 800a106:	f001 fbed 	bl	800b8e4 <__smakebuf_r>
 800a10a:	89a0      	ldrh	r0, [r4, #12]
 800a10c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a110:	f010 0301 	ands.w	r3, r0, #1
 800a114:	d00a      	beq.n	800a12c <__swsetup_r+0xbc>
 800a116:	2300      	movs	r3, #0
 800a118:	60a3      	str	r3, [r4, #8]
 800a11a:	6963      	ldr	r3, [r4, #20]
 800a11c:	425b      	negs	r3, r3
 800a11e:	61a3      	str	r3, [r4, #24]
 800a120:	6923      	ldr	r3, [r4, #16]
 800a122:	b943      	cbnz	r3, 800a136 <__swsetup_r+0xc6>
 800a124:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a128:	d1ba      	bne.n	800a0a0 <__swsetup_r+0x30>
 800a12a:	bd70      	pop	{r4, r5, r6, pc}
 800a12c:	0781      	lsls	r1, r0, #30
 800a12e:	bf58      	it	pl
 800a130:	6963      	ldrpl	r3, [r4, #20]
 800a132:	60a3      	str	r3, [r4, #8]
 800a134:	e7f4      	b.n	800a120 <__swsetup_r+0xb0>
 800a136:	2000      	movs	r0, #0
 800a138:	e7f7      	b.n	800a12a <__swsetup_r+0xba>
 800a13a:	bf00      	nop
 800a13c:	2000077c 	.word	0x2000077c
 800a140:	08023d88 	.word	0x08023d88
 800a144:	08023da8 	.word	0x08023da8
 800a148:	08023d68 	.word	0x08023d68

0800a14c <quorem>:
 800a14c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a150:	6903      	ldr	r3, [r0, #16]
 800a152:	690c      	ldr	r4, [r1, #16]
 800a154:	42a3      	cmp	r3, r4
 800a156:	4607      	mov	r7, r0
 800a158:	f2c0 8081 	blt.w	800a25e <quorem+0x112>
 800a15c:	3c01      	subs	r4, #1
 800a15e:	f101 0814 	add.w	r8, r1, #20
 800a162:	f100 0514 	add.w	r5, r0, #20
 800a166:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a16a:	9301      	str	r3, [sp, #4]
 800a16c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a170:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a174:	3301      	adds	r3, #1
 800a176:	429a      	cmp	r2, r3
 800a178:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a17c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a180:	fbb2 f6f3 	udiv	r6, r2, r3
 800a184:	d331      	bcc.n	800a1ea <quorem+0x9e>
 800a186:	f04f 0e00 	mov.w	lr, #0
 800a18a:	4640      	mov	r0, r8
 800a18c:	46ac      	mov	ip, r5
 800a18e:	46f2      	mov	sl, lr
 800a190:	f850 2b04 	ldr.w	r2, [r0], #4
 800a194:	b293      	uxth	r3, r2
 800a196:	fb06 e303 	mla	r3, r6, r3, lr
 800a19a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	ebaa 0303 	sub.w	r3, sl, r3
 800a1a4:	0c12      	lsrs	r2, r2, #16
 800a1a6:	f8dc a000 	ldr.w	sl, [ip]
 800a1aa:	fb06 e202 	mla	r2, r6, r2, lr
 800a1ae:	fa13 f38a 	uxtah	r3, r3, sl
 800a1b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1b6:	fa1f fa82 	uxth.w	sl, r2
 800a1ba:	f8dc 2000 	ldr.w	r2, [ip]
 800a1be:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a1c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1cc:	4581      	cmp	r9, r0
 800a1ce:	f84c 3b04 	str.w	r3, [ip], #4
 800a1d2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1d6:	d2db      	bcs.n	800a190 <quorem+0x44>
 800a1d8:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1dc:	b92b      	cbnz	r3, 800a1ea <quorem+0x9e>
 800a1de:	9b01      	ldr	r3, [sp, #4]
 800a1e0:	3b04      	subs	r3, #4
 800a1e2:	429d      	cmp	r5, r3
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	d32e      	bcc.n	800a246 <quorem+0xfa>
 800a1e8:	613c      	str	r4, [r7, #16]
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	f001 fea0 	bl	800bf30 <__mcmp>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	db24      	blt.n	800a23e <quorem+0xf2>
 800a1f4:	3601      	adds	r6, #1
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f04f 0c00 	mov.w	ip, #0
 800a1fc:	f858 2b04 	ldr.w	r2, [r8], #4
 800a200:	f8d0 e000 	ldr.w	lr, [r0]
 800a204:	b293      	uxth	r3, r2
 800a206:	ebac 0303 	sub.w	r3, ip, r3
 800a20a:	0c12      	lsrs	r2, r2, #16
 800a20c:	fa13 f38e 	uxtah	r3, r3, lr
 800a210:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a214:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a218:	b29b      	uxth	r3, r3
 800a21a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a21e:	45c1      	cmp	r9, r8
 800a220:	f840 3b04 	str.w	r3, [r0], #4
 800a224:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a228:	d2e8      	bcs.n	800a1fc <quorem+0xb0>
 800a22a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a22e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a232:	b922      	cbnz	r2, 800a23e <quorem+0xf2>
 800a234:	3b04      	subs	r3, #4
 800a236:	429d      	cmp	r5, r3
 800a238:	461a      	mov	r2, r3
 800a23a:	d30a      	bcc.n	800a252 <quorem+0x106>
 800a23c:	613c      	str	r4, [r7, #16]
 800a23e:	4630      	mov	r0, r6
 800a240:	b003      	add	sp, #12
 800a242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a246:	6812      	ldr	r2, [r2, #0]
 800a248:	3b04      	subs	r3, #4
 800a24a:	2a00      	cmp	r2, #0
 800a24c:	d1cc      	bne.n	800a1e8 <quorem+0x9c>
 800a24e:	3c01      	subs	r4, #1
 800a250:	e7c7      	b.n	800a1e2 <quorem+0x96>
 800a252:	6812      	ldr	r2, [r2, #0]
 800a254:	3b04      	subs	r3, #4
 800a256:	2a00      	cmp	r2, #0
 800a258:	d1f0      	bne.n	800a23c <quorem+0xf0>
 800a25a:	3c01      	subs	r4, #1
 800a25c:	e7eb      	b.n	800a236 <quorem+0xea>
 800a25e:	2000      	movs	r0, #0
 800a260:	e7ee      	b.n	800a240 <quorem+0xf4>
 800a262:	0000      	movs	r0, r0
 800a264:	0000      	movs	r0, r0
	...

0800a268 <_dtoa_r>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	ed2d 8b02 	vpush	{d8}
 800a270:	ec57 6b10 	vmov	r6, r7, d0
 800a274:	b095      	sub	sp, #84	; 0x54
 800a276:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a278:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a27c:	9105      	str	r1, [sp, #20]
 800a27e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a282:	4604      	mov	r4, r0
 800a284:	9209      	str	r2, [sp, #36]	; 0x24
 800a286:	930f      	str	r3, [sp, #60]	; 0x3c
 800a288:	b975      	cbnz	r5, 800a2a8 <_dtoa_r+0x40>
 800a28a:	2010      	movs	r0, #16
 800a28c:	f7fd ff26 	bl	80080dc <malloc>
 800a290:	4602      	mov	r2, r0
 800a292:	6260      	str	r0, [r4, #36]	; 0x24
 800a294:	b920      	cbnz	r0, 800a2a0 <_dtoa_r+0x38>
 800a296:	4bb2      	ldr	r3, [pc, #712]	; (800a560 <_dtoa_r+0x2f8>)
 800a298:	21ea      	movs	r1, #234	; 0xea
 800a29a:	48b2      	ldr	r0, [pc, #712]	; (800a564 <_dtoa_r+0x2fc>)
 800a29c:	f002 fba4 	bl	800c9e8 <__assert_func>
 800a2a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2a4:	6005      	str	r5, [r0, #0]
 800a2a6:	60c5      	str	r5, [r0, #12]
 800a2a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2aa:	6819      	ldr	r1, [r3, #0]
 800a2ac:	b151      	cbz	r1, 800a2c4 <_dtoa_r+0x5c>
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	604a      	str	r2, [r1, #4]
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4093      	lsls	r3, r2
 800a2b6:	608b      	str	r3, [r1, #8]
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f001 fbb1 	bl	800ba20 <_Bfree>
 800a2be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]
 800a2c4:	1e3b      	subs	r3, r7, #0
 800a2c6:	bfb9      	ittee	lt
 800a2c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a2cc:	9303      	strlt	r3, [sp, #12]
 800a2ce:	2300      	movge	r3, #0
 800a2d0:	f8c8 3000 	strge.w	r3, [r8]
 800a2d4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a2d8:	4ba3      	ldr	r3, [pc, #652]	; (800a568 <_dtoa_r+0x300>)
 800a2da:	bfbc      	itt	lt
 800a2dc:	2201      	movlt	r2, #1
 800a2de:	f8c8 2000 	strlt.w	r2, [r8]
 800a2e2:	ea33 0309 	bics.w	r3, r3, r9
 800a2e6:	d11b      	bne.n	800a320 <_dtoa_r+0xb8>
 800a2e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2f4:	4333      	orrs	r3, r6
 800a2f6:	f000 857a 	beq.w	800adee <_dtoa_r+0xb86>
 800a2fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2fc:	b963      	cbnz	r3, 800a318 <_dtoa_r+0xb0>
 800a2fe:	4b9b      	ldr	r3, [pc, #620]	; (800a56c <_dtoa_r+0x304>)
 800a300:	e024      	b.n	800a34c <_dtoa_r+0xe4>
 800a302:	4b9b      	ldr	r3, [pc, #620]	; (800a570 <_dtoa_r+0x308>)
 800a304:	9300      	str	r3, [sp, #0]
 800a306:	3308      	adds	r3, #8
 800a308:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a30a:	6013      	str	r3, [r2, #0]
 800a30c:	9800      	ldr	r0, [sp, #0]
 800a30e:	b015      	add	sp, #84	; 0x54
 800a310:	ecbd 8b02 	vpop	{d8}
 800a314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a318:	4b94      	ldr	r3, [pc, #592]	; (800a56c <_dtoa_r+0x304>)
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	3303      	adds	r3, #3
 800a31e:	e7f3      	b.n	800a308 <_dtoa_r+0xa0>
 800a320:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a324:	2200      	movs	r2, #0
 800a326:	ec51 0b17 	vmov	r0, r1, d7
 800a32a:	2300      	movs	r3, #0
 800a32c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a330:	f7f6 fbda 	bl	8000ae8 <__aeabi_dcmpeq>
 800a334:	4680      	mov	r8, r0
 800a336:	b158      	cbz	r0, 800a350 <_dtoa_r+0xe8>
 800a338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a33a:	2301      	movs	r3, #1
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a340:	2b00      	cmp	r3, #0
 800a342:	f000 8551 	beq.w	800ade8 <_dtoa_r+0xb80>
 800a346:	488b      	ldr	r0, [pc, #556]	; (800a574 <_dtoa_r+0x30c>)
 800a348:	6018      	str	r0, [r3, #0]
 800a34a:	1e43      	subs	r3, r0, #1
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	e7dd      	b.n	800a30c <_dtoa_r+0xa4>
 800a350:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a354:	aa12      	add	r2, sp, #72	; 0x48
 800a356:	a913      	add	r1, sp, #76	; 0x4c
 800a358:	4620      	mov	r0, r4
 800a35a:	f001 ff09 	bl	800c170 <__d2b>
 800a35e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a362:	4683      	mov	fp, r0
 800a364:	2d00      	cmp	r5, #0
 800a366:	d07c      	beq.n	800a462 <_dtoa_r+0x1fa>
 800a368:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a36a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a36e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a372:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a376:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a37a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a37e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a382:	4b7d      	ldr	r3, [pc, #500]	; (800a578 <_dtoa_r+0x310>)
 800a384:	2200      	movs	r2, #0
 800a386:	4630      	mov	r0, r6
 800a388:	4639      	mov	r1, r7
 800a38a:	f7f5 ff8d 	bl	80002a8 <__aeabi_dsub>
 800a38e:	a36e      	add	r3, pc, #440	; (adr r3, 800a548 <_dtoa_r+0x2e0>)
 800a390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a394:	f7f6 f940 	bl	8000618 <__aeabi_dmul>
 800a398:	a36d      	add	r3, pc, #436	; (adr r3, 800a550 <_dtoa_r+0x2e8>)
 800a39a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39e:	f7f5 ff85 	bl	80002ac <__adddf3>
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	460f      	mov	r7, r1
 800a3a8:	f7f6 f8cc 	bl	8000544 <__aeabi_i2d>
 800a3ac:	a36a      	add	r3, pc, #424	; (adr r3, 800a558 <_dtoa_r+0x2f0>)
 800a3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b2:	f7f6 f931 	bl	8000618 <__aeabi_dmul>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	460b      	mov	r3, r1
 800a3ba:	4630      	mov	r0, r6
 800a3bc:	4639      	mov	r1, r7
 800a3be:	f7f5 ff75 	bl	80002ac <__adddf3>
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	460f      	mov	r7, r1
 800a3c6:	f7f6 fbd7 	bl	8000b78 <__aeabi_d2iz>
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	4682      	mov	sl, r0
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	4639      	mov	r1, r7
 800a3d4:	f7f6 fb92 	bl	8000afc <__aeabi_dcmplt>
 800a3d8:	b148      	cbz	r0, 800a3ee <_dtoa_r+0x186>
 800a3da:	4650      	mov	r0, sl
 800a3dc:	f7f6 f8b2 	bl	8000544 <__aeabi_i2d>
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	463b      	mov	r3, r7
 800a3e4:	f7f6 fb80 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3e8:	b908      	cbnz	r0, 800a3ee <_dtoa_r+0x186>
 800a3ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a3ee:	f1ba 0f16 	cmp.w	sl, #22
 800a3f2:	d854      	bhi.n	800a49e <_dtoa_r+0x236>
 800a3f4:	4b61      	ldr	r3, [pc, #388]	; (800a57c <_dtoa_r+0x314>)
 800a3f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a402:	f7f6 fb7b 	bl	8000afc <__aeabi_dcmplt>
 800a406:	2800      	cmp	r0, #0
 800a408:	d04b      	beq.n	800a4a2 <_dtoa_r+0x23a>
 800a40a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800a40e:	2300      	movs	r3, #0
 800a410:	930e      	str	r3, [sp, #56]	; 0x38
 800a412:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a414:	1b5d      	subs	r5, r3, r5
 800a416:	1e6b      	subs	r3, r5, #1
 800a418:	9304      	str	r3, [sp, #16]
 800a41a:	bf43      	ittte	mi
 800a41c:	2300      	movmi	r3, #0
 800a41e:	f1c5 0801 	rsbmi	r8, r5, #1
 800a422:	9304      	strmi	r3, [sp, #16]
 800a424:	f04f 0800 	movpl.w	r8, #0
 800a428:	f1ba 0f00 	cmp.w	sl, #0
 800a42c:	db3b      	blt.n	800a4a6 <_dtoa_r+0x23e>
 800a42e:	9b04      	ldr	r3, [sp, #16]
 800a430:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a434:	4453      	add	r3, sl
 800a436:	9304      	str	r3, [sp, #16]
 800a438:	2300      	movs	r3, #0
 800a43a:	9306      	str	r3, [sp, #24]
 800a43c:	9b05      	ldr	r3, [sp, #20]
 800a43e:	2b09      	cmp	r3, #9
 800a440:	d869      	bhi.n	800a516 <_dtoa_r+0x2ae>
 800a442:	2b05      	cmp	r3, #5
 800a444:	bfc4      	itt	gt
 800a446:	3b04      	subgt	r3, #4
 800a448:	9305      	strgt	r3, [sp, #20]
 800a44a:	9b05      	ldr	r3, [sp, #20]
 800a44c:	f1a3 0302 	sub.w	r3, r3, #2
 800a450:	bfcc      	ite	gt
 800a452:	2500      	movgt	r5, #0
 800a454:	2501      	movle	r5, #1
 800a456:	2b03      	cmp	r3, #3
 800a458:	d869      	bhi.n	800a52e <_dtoa_r+0x2c6>
 800a45a:	e8df f003 	tbb	[pc, r3]
 800a45e:	4e2c      	.short	0x4e2c
 800a460:	5a4c      	.short	0x5a4c
 800a462:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a466:	441d      	add	r5, r3
 800a468:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a46c:	2b20      	cmp	r3, #32
 800a46e:	bfc1      	itttt	gt
 800a470:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a474:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a478:	fa09 f303 	lslgt.w	r3, r9, r3
 800a47c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a480:	bfda      	itte	le
 800a482:	f1c3 0320 	rsble	r3, r3, #32
 800a486:	fa06 f003 	lslle.w	r0, r6, r3
 800a48a:	4318      	orrgt	r0, r3
 800a48c:	f7f6 f84a 	bl	8000524 <__aeabi_ui2d>
 800a490:	2301      	movs	r3, #1
 800a492:	4606      	mov	r6, r0
 800a494:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a498:	3d01      	subs	r5, #1
 800a49a:	9310      	str	r3, [sp, #64]	; 0x40
 800a49c:	e771      	b.n	800a382 <_dtoa_r+0x11a>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e7b6      	b.n	800a410 <_dtoa_r+0x1a8>
 800a4a2:	900e      	str	r0, [sp, #56]	; 0x38
 800a4a4:	e7b5      	b.n	800a412 <_dtoa_r+0x1aa>
 800a4a6:	f1ca 0300 	rsb	r3, sl, #0
 800a4aa:	9306      	str	r3, [sp, #24]
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	eba8 080a 	sub.w	r8, r8, sl
 800a4b2:	930d      	str	r3, [sp, #52]	; 0x34
 800a4b4:	e7c2      	b.n	800a43c <_dtoa_r+0x1d4>
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	9308      	str	r3, [sp, #32]
 800a4ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	dc39      	bgt.n	800a534 <_dtoa_r+0x2cc>
 800a4c0:	f04f 0901 	mov.w	r9, #1
 800a4c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a4c8:	464b      	mov	r3, r9
 800a4ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a4ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	6042      	str	r2, [r0, #4]
 800a4d4:	2204      	movs	r2, #4
 800a4d6:	f102 0614 	add.w	r6, r2, #20
 800a4da:	429e      	cmp	r6, r3
 800a4dc:	6841      	ldr	r1, [r0, #4]
 800a4de:	d92f      	bls.n	800a540 <_dtoa_r+0x2d8>
 800a4e0:	4620      	mov	r0, r4
 800a4e2:	f001 fa5d 	bl	800b9a0 <_Balloc>
 800a4e6:	9000      	str	r0, [sp, #0]
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d14b      	bne.n	800a584 <_dtoa_r+0x31c>
 800a4ec:	4b24      	ldr	r3, [pc, #144]	; (800a580 <_dtoa_r+0x318>)
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a4f4:	e6d1      	b.n	800a29a <_dtoa_r+0x32>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e7de      	b.n	800a4b8 <_dtoa_r+0x250>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	9308      	str	r3, [sp, #32]
 800a4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a500:	eb0a 0903 	add.w	r9, sl, r3
 800a504:	f109 0301 	add.w	r3, r9, #1
 800a508:	2b01      	cmp	r3, #1
 800a50a:	9301      	str	r3, [sp, #4]
 800a50c:	bfb8      	it	lt
 800a50e:	2301      	movlt	r3, #1
 800a510:	e7dd      	b.n	800a4ce <_dtoa_r+0x266>
 800a512:	2301      	movs	r3, #1
 800a514:	e7f2      	b.n	800a4fc <_dtoa_r+0x294>
 800a516:	2501      	movs	r5, #1
 800a518:	2300      	movs	r3, #0
 800a51a:	9305      	str	r3, [sp, #20]
 800a51c:	9508      	str	r5, [sp, #32]
 800a51e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800a522:	2200      	movs	r2, #0
 800a524:	f8cd 9004 	str.w	r9, [sp, #4]
 800a528:	2312      	movs	r3, #18
 800a52a:	9209      	str	r2, [sp, #36]	; 0x24
 800a52c:	e7cf      	b.n	800a4ce <_dtoa_r+0x266>
 800a52e:	2301      	movs	r3, #1
 800a530:	9308      	str	r3, [sp, #32]
 800a532:	e7f4      	b.n	800a51e <_dtoa_r+0x2b6>
 800a534:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a538:	f8cd 9004 	str.w	r9, [sp, #4]
 800a53c:	464b      	mov	r3, r9
 800a53e:	e7c6      	b.n	800a4ce <_dtoa_r+0x266>
 800a540:	3101      	adds	r1, #1
 800a542:	6041      	str	r1, [r0, #4]
 800a544:	0052      	lsls	r2, r2, #1
 800a546:	e7c6      	b.n	800a4d6 <_dtoa_r+0x26e>
 800a548:	636f4361 	.word	0x636f4361
 800a54c:	3fd287a7 	.word	0x3fd287a7
 800a550:	8b60c8b3 	.word	0x8b60c8b3
 800a554:	3fc68a28 	.word	0x3fc68a28
 800a558:	509f79fb 	.word	0x509f79fb
 800a55c:	3fd34413 	.word	0x3fd34413
 800a560:	08023cde 	.word	0x08023cde
 800a564:	08023cf5 	.word	0x08023cf5
 800a568:	7ff00000 	.word	0x7ff00000
 800a56c:	08023cda 	.word	0x08023cda
 800a570:	08023cd1 	.word	0x08023cd1
 800a574:	08023b55 	.word	0x08023b55
 800a578:	3ff80000 	.word	0x3ff80000
 800a57c:	08023ed0 	.word	0x08023ed0
 800a580:	08023d54 	.word	0x08023d54
 800a584:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a586:	9a00      	ldr	r2, [sp, #0]
 800a588:	601a      	str	r2, [r3, #0]
 800a58a:	9b01      	ldr	r3, [sp, #4]
 800a58c:	2b0e      	cmp	r3, #14
 800a58e:	f200 80ad 	bhi.w	800a6ec <_dtoa_r+0x484>
 800a592:	2d00      	cmp	r5, #0
 800a594:	f000 80aa 	beq.w	800a6ec <_dtoa_r+0x484>
 800a598:	f1ba 0f00 	cmp.w	sl, #0
 800a59c:	dd36      	ble.n	800a60c <_dtoa_r+0x3a4>
 800a59e:	4ac3      	ldr	r2, [pc, #780]	; (800a8ac <_dtoa_r+0x644>)
 800a5a0:	f00a 030f 	and.w	r3, sl, #15
 800a5a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5a8:	ed93 7b00 	vldr	d7, [r3]
 800a5ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a5b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a5b4:	eeb0 8a47 	vmov.f32	s16, s14
 800a5b8:	eef0 8a67 	vmov.f32	s17, s15
 800a5bc:	d016      	beq.n	800a5ec <_dtoa_r+0x384>
 800a5be:	4bbc      	ldr	r3, [pc, #752]	; (800a8b0 <_dtoa_r+0x648>)
 800a5c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a5c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5c8:	f7f6 f950 	bl	800086c <__aeabi_ddiv>
 800a5cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5d0:	f007 070f 	and.w	r7, r7, #15
 800a5d4:	2503      	movs	r5, #3
 800a5d6:	4eb6      	ldr	r6, [pc, #728]	; (800a8b0 <_dtoa_r+0x648>)
 800a5d8:	b957      	cbnz	r7, 800a5f0 <_dtoa_r+0x388>
 800a5da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5de:	ec53 2b18 	vmov	r2, r3, d8
 800a5e2:	f7f6 f943 	bl	800086c <__aeabi_ddiv>
 800a5e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5ea:	e029      	b.n	800a640 <_dtoa_r+0x3d8>
 800a5ec:	2502      	movs	r5, #2
 800a5ee:	e7f2      	b.n	800a5d6 <_dtoa_r+0x36e>
 800a5f0:	07f9      	lsls	r1, r7, #31
 800a5f2:	d508      	bpl.n	800a606 <_dtoa_r+0x39e>
 800a5f4:	ec51 0b18 	vmov	r0, r1, d8
 800a5f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5fc:	f7f6 f80c 	bl	8000618 <__aeabi_dmul>
 800a600:	ec41 0b18 	vmov	d8, r0, r1
 800a604:	3501      	adds	r5, #1
 800a606:	107f      	asrs	r7, r7, #1
 800a608:	3608      	adds	r6, #8
 800a60a:	e7e5      	b.n	800a5d8 <_dtoa_r+0x370>
 800a60c:	f000 80a6 	beq.w	800a75c <_dtoa_r+0x4f4>
 800a610:	f1ca 0600 	rsb	r6, sl, #0
 800a614:	4ba5      	ldr	r3, [pc, #660]	; (800a8ac <_dtoa_r+0x644>)
 800a616:	4fa6      	ldr	r7, [pc, #664]	; (800a8b0 <_dtoa_r+0x648>)
 800a618:	f006 020f 	and.w	r2, r6, #15
 800a61c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a624:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a628:	f7f5 fff6 	bl	8000618 <__aeabi_dmul>
 800a62c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a630:	1136      	asrs	r6, r6, #4
 800a632:	2300      	movs	r3, #0
 800a634:	2502      	movs	r5, #2
 800a636:	2e00      	cmp	r6, #0
 800a638:	f040 8085 	bne.w	800a746 <_dtoa_r+0x4de>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d1d2      	bne.n	800a5e6 <_dtoa_r+0x37e>
 800a640:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a642:	2b00      	cmp	r3, #0
 800a644:	f000 808c 	beq.w	800a760 <_dtoa_r+0x4f8>
 800a648:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a64c:	4b99      	ldr	r3, [pc, #612]	; (800a8b4 <_dtoa_r+0x64c>)
 800a64e:	2200      	movs	r2, #0
 800a650:	4630      	mov	r0, r6
 800a652:	4639      	mov	r1, r7
 800a654:	f7f6 fa52 	bl	8000afc <__aeabi_dcmplt>
 800a658:	2800      	cmp	r0, #0
 800a65a:	f000 8081 	beq.w	800a760 <_dtoa_r+0x4f8>
 800a65e:	9b01      	ldr	r3, [sp, #4]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d07d      	beq.n	800a760 <_dtoa_r+0x4f8>
 800a664:	f1b9 0f00 	cmp.w	r9, #0
 800a668:	dd3c      	ble.n	800a6e4 <_dtoa_r+0x47c>
 800a66a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800a66e:	9307      	str	r3, [sp, #28]
 800a670:	2200      	movs	r2, #0
 800a672:	4b91      	ldr	r3, [pc, #580]	; (800a8b8 <_dtoa_r+0x650>)
 800a674:	4630      	mov	r0, r6
 800a676:	4639      	mov	r1, r7
 800a678:	f7f5 ffce 	bl	8000618 <__aeabi_dmul>
 800a67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a680:	3501      	adds	r5, #1
 800a682:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a686:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a68a:	4628      	mov	r0, r5
 800a68c:	f7f5 ff5a 	bl	8000544 <__aeabi_i2d>
 800a690:	4632      	mov	r2, r6
 800a692:	463b      	mov	r3, r7
 800a694:	f7f5 ffc0 	bl	8000618 <__aeabi_dmul>
 800a698:	4b88      	ldr	r3, [pc, #544]	; (800a8bc <_dtoa_r+0x654>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	f7f5 fe06 	bl	80002ac <__adddf3>
 800a6a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a6a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a6a8:	9303      	str	r3, [sp, #12]
 800a6aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d15c      	bne.n	800a76a <_dtoa_r+0x502>
 800a6b0:	4b83      	ldr	r3, [pc, #524]	; (800a8c0 <_dtoa_r+0x658>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	4639      	mov	r1, r7
 800a6b8:	f7f5 fdf6 	bl	80002a8 <__aeabi_dsub>
 800a6bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6c0:	4606      	mov	r6, r0
 800a6c2:	460f      	mov	r7, r1
 800a6c4:	f7f6 fa38 	bl	8000b38 <__aeabi_dcmpgt>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	f040 8296 	bne.w	800abfa <_dtoa_r+0x992>
 800a6ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a6d8:	4639      	mov	r1, r7
 800a6da:	f7f6 fa0f 	bl	8000afc <__aeabi_dcmplt>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	f040 8288 	bne.w	800abf4 <_dtoa_r+0x98c>
 800a6e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a6ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f2c0 8158 	blt.w	800a9a4 <_dtoa_r+0x73c>
 800a6f4:	f1ba 0f0e 	cmp.w	sl, #14
 800a6f8:	f300 8154 	bgt.w	800a9a4 <_dtoa_r+0x73c>
 800a6fc:	4b6b      	ldr	r3, [pc, #428]	; (800a8ac <_dtoa_r+0x644>)
 800a6fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a702:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f280 80e3 	bge.w	800a8d4 <_dtoa_r+0x66c>
 800a70e:	9b01      	ldr	r3, [sp, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	f300 80df 	bgt.w	800a8d4 <_dtoa_r+0x66c>
 800a716:	f040 826d 	bne.w	800abf4 <_dtoa_r+0x98c>
 800a71a:	4b69      	ldr	r3, [pc, #420]	; (800a8c0 <_dtoa_r+0x658>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	4640      	mov	r0, r8
 800a720:	4649      	mov	r1, r9
 800a722:	f7f5 ff79 	bl	8000618 <__aeabi_dmul>
 800a726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a72a:	f7f6 f9fb 	bl	8000b24 <__aeabi_dcmpge>
 800a72e:	9e01      	ldr	r6, [sp, #4]
 800a730:	4637      	mov	r7, r6
 800a732:	2800      	cmp	r0, #0
 800a734:	f040 8243 	bne.w	800abbe <_dtoa_r+0x956>
 800a738:	9d00      	ldr	r5, [sp, #0]
 800a73a:	2331      	movs	r3, #49	; 0x31
 800a73c:	f805 3b01 	strb.w	r3, [r5], #1
 800a740:	f10a 0a01 	add.w	sl, sl, #1
 800a744:	e23f      	b.n	800abc6 <_dtoa_r+0x95e>
 800a746:	07f2      	lsls	r2, r6, #31
 800a748:	d505      	bpl.n	800a756 <_dtoa_r+0x4ee>
 800a74a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a74e:	f7f5 ff63 	bl	8000618 <__aeabi_dmul>
 800a752:	3501      	adds	r5, #1
 800a754:	2301      	movs	r3, #1
 800a756:	1076      	asrs	r6, r6, #1
 800a758:	3708      	adds	r7, #8
 800a75a:	e76c      	b.n	800a636 <_dtoa_r+0x3ce>
 800a75c:	2502      	movs	r5, #2
 800a75e:	e76f      	b.n	800a640 <_dtoa_r+0x3d8>
 800a760:	9b01      	ldr	r3, [sp, #4]
 800a762:	f8cd a01c 	str.w	sl, [sp, #28]
 800a766:	930c      	str	r3, [sp, #48]	; 0x30
 800a768:	e78d      	b.n	800a686 <_dtoa_r+0x41e>
 800a76a:	9900      	ldr	r1, [sp, #0]
 800a76c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a76e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a770:	4b4e      	ldr	r3, [pc, #312]	; (800a8ac <_dtoa_r+0x644>)
 800a772:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a776:	4401      	add	r1, r0
 800a778:	9102      	str	r1, [sp, #8]
 800a77a:	9908      	ldr	r1, [sp, #32]
 800a77c:	eeb0 8a47 	vmov.f32	s16, s14
 800a780:	eef0 8a67 	vmov.f32	s17, s15
 800a784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a788:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a78c:	2900      	cmp	r1, #0
 800a78e:	d045      	beq.n	800a81c <_dtoa_r+0x5b4>
 800a790:	494c      	ldr	r1, [pc, #304]	; (800a8c4 <_dtoa_r+0x65c>)
 800a792:	2000      	movs	r0, #0
 800a794:	f7f6 f86a 	bl	800086c <__aeabi_ddiv>
 800a798:	ec53 2b18 	vmov	r2, r3, d8
 800a79c:	f7f5 fd84 	bl	80002a8 <__aeabi_dsub>
 800a7a0:	9d00      	ldr	r5, [sp, #0]
 800a7a2:	ec41 0b18 	vmov	d8, r0, r1
 800a7a6:	4639      	mov	r1, r7
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7f6 f9e5 	bl	8000b78 <__aeabi_d2iz>
 800a7ae:	900c      	str	r0, [sp, #48]	; 0x30
 800a7b0:	f7f5 fec8 	bl	8000544 <__aeabi_i2d>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	4639      	mov	r1, r7
 800a7bc:	f7f5 fd74 	bl	80002a8 <__aeabi_dsub>
 800a7c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7c2:	3330      	adds	r3, #48	; 0x30
 800a7c4:	f805 3b01 	strb.w	r3, [r5], #1
 800a7c8:	ec53 2b18 	vmov	r2, r3, d8
 800a7cc:	4606      	mov	r6, r0
 800a7ce:	460f      	mov	r7, r1
 800a7d0:	f7f6 f994 	bl	8000afc <__aeabi_dcmplt>
 800a7d4:	2800      	cmp	r0, #0
 800a7d6:	d165      	bne.n	800a8a4 <_dtoa_r+0x63c>
 800a7d8:	4632      	mov	r2, r6
 800a7da:	463b      	mov	r3, r7
 800a7dc:	4935      	ldr	r1, [pc, #212]	; (800a8b4 <_dtoa_r+0x64c>)
 800a7de:	2000      	movs	r0, #0
 800a7e0:	f7f5 fd62 	bl	80002a8 <__aeabi_dsub>
 800a7e4:	ec53 2b18 	vmov	r2, r3, d8
 800a7e8:	f7f6 f988 	bl	8000afc <__aeabi_dcmplt>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	f040 80b9 	bne.w	800a964 <_dtoa_r+0x6fc>
 800a7f2:	9b02      	ldr	r3, [sp, #8]
 800a7f4:	429d      	cmp	r5, r3
 800a7f6:	f43f af75 	beq.w	800a6e4 <_dtoa_r+0x47c>
 800a7fa:	4b2f      	ldr	r3, [pc, #188]	; (800a8b8 <_dtoa_r+0x650>)
 800a7fc:	ec51 0b18 	vmov	r0, r1, d8
 800a800:	2200      	movs	r2, #0
 800a802:	f7f5 ff09 	bl	8000618 <__aeabi_dmul>
 800a806:	4b2c      	ldr	r3, [pc, #176]	; (800a8b8 <_dtoa_r+0x650>)
 800a808:	ec41 0b18 	vmov	d8, r0, r1
 800a80c:	2200      	movs	r2, #0
 800a80e:	4630      	mov	r0, r6
 800a810:	4639      	mov	r1, r7
 800a812:	f7f5 ff01 	bl	8000618 <__aeabi_dmul>
 800a816:	4606      	mov	r6, r0
 800a818:	460f      	mov	r7, r1
 800a81a:	e7c4      	b.n	800a7a6 <_dtoa_r+0x53e>
 800a81c:	ec51 0b17 	vmov	r0, r1, d7
 800a820:	f7f5 fefa 	bl	8000618 <__aeabi_dmul>
 800a824:	9b02      	ldr	r3, [sp, #8]
 800a826:	9d00      	ldr	r5, [sp, #0]
 800a828:	930c      	str	r3, [sp, #48]	; 0x30
 800a82a:	ec41 0b18 	vmov	d8, r0, r1
 800a82e:	4639      	mov	r1, r7
 800a830:	4630      	mov	r0, r6
 800a832:	f7f6 f9a1 	bl	8000b78 <__aeabi_d2iz>
 800a836:	9011      	str	r0, [sp, #68]	; 0x44
 800a838:	f7f5 fe84 	bl	8000544 <__aeabi_i2d>
 800a83c:	4602      	mov	r2, r0
 800a83e:	460b      	mov	r3, r1
 800a840:	4630      	mov	r0, r6
 800a842:	4639      	mov	r1, r7
 800a844:	f7f5 fd30 	bl	80002a8 <__aeabi_dsub>
 800a848:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a84a:	3330      	adds	r3, #48	; 0x30
 800a84c:	f805 3b01 	strb.w	r3, [r5], #1
 800a850:	9b02      	ldr	r3, [sp, #8]
 800a852:	429d      	cmp	r5, r3
 800a854:	4606      	mov	r6, r0
 800a856:	460f      	mov	r7, r1
 800a858:	f04f 0200 	mov.w	r2, #0
 800a85c:	d134      	bne.n	800a8c8 <_dtoa_r+0x660>
 800a85e:	4b19      	ldr	r3, [pc, #100]	; (800a8c4 <_dtoa_r+0x65c>)
 800a860:	ec51 0b18 	vmov	r0, r1, d8
 800a864:	f7f5 fd22 	bl	80002ac <__adddf3>
 800a868:	4602      	mov	r2, r0
 800a86a:	460b      	mov	r3, r1
 800a86c:	4630      	mov	r0, r6
 800a86e:	4639      	mov	r1, r7
 800a870:	f7f6 f962 	bl	8000b38 <__aeabi_dcmpgt>
 800a874:	2800      	cmp	r0, #0
 800a876:	d175      	bne.n	800a964 <_dtoa_r+0x6fc>
 800a878:	ec53 2b18 	vmov	r2, r3, d8
 800a87c:	4911      	ldr	r1, [pc, #68]	; (800a8c4 <_dtoa_r+0x65c>)
 800a87e:	2000      	movs	r0, #0
 800a880:	f7f5 fd12 	bl	80002a8 <__aeabi_dsub>
 800a884:	4602      	mov	r2, r0
 800a886:	460b      	mov	r3, r1
 800a888:	4630      	mov	r0, r6
 800a88a:	4639      	mov	r1, r7
 800a88c:	f7f6 f936 	bl	8000afc <__aeabi_dcmplt>
 800a890:	2800      	cmp	r0, #0
 800a892:	f43f af27 	beq.w	800a6e4 <_dtoa_r+0x47c>
 800a896:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a898:	1e6b      	subs	r3, r5, #1
 800a89a:	930c      	str	r3, [sp, #48]	; 0x30
 800a89c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8a0:	2b30      	cmp	r3, #48	; 0x30
 800a8a2:	d0f8      	beq.n	800a896 <_dtoa_r+0x62e>
 800a8a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a8a8:	e04a      	b.n	800a940 <_dtoa_r+0x6d8>
 800a8aa:	bf00      	nop
 800a8ac:	08023ed0 	.word	0x08023ed0
 800a8b0:	08023ea8 	.word	0x08023ea8
 800a8b4:	3ff00000 	.word	0x3ff00000
 800a8b8:	40240000 	.word	0x40240000
 800a8bc:	401c0000 	.word	0x401c0000
 800a8c0:	40140000 	.word	0x40140000
 800a8c4:	3fe00000 	.word	0x3fe00000
 800a8c8:	4baf      	ldr	r3, [pc, #700]	; (800ab88 <_dtoa_r+0x920>)
 800a8ca:	f7f5 fea5 	bl	8000618 <__aeabi_dmul>
 800a8ce:	4606      	mov	r6, r0
 800a8d0:	460f      	mov	r7, r1
 800a8d2:	e7ac      	b.n	800a82e <_dtoa_r+0x5c6>
 800a8d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a8d8:	9d00      	ldr	r5, [sp, #0]
 800a8da:	4642      	mov	r2, r8
 800a8dc:	464b      	mov	r3, r9
 800a8de:	4630      	mov	r0, r6
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	f7f5 ffc3 	bl	800086c <__aeabi_ddiv>
 800a8e6:	f7f6 f947 	bl	8000b78 <__aeabi_d2iz>
 800a8ea:	9002      	str	r0, [sp, #8]
 800a8ec:	f7f5 fe2a 	bl	8000544 <__aeabi_i2d>
 800a8f0:	4642      	mov	r2, r8
 800a8f2:	464b      	mov	r3, r9
 800a8f4:	f7f5 fe90 	bl	8000618 <__aeabi_dmul>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	460b      	mov	r3, r1
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	4639      	mov	r1, r7
 800a900:	f7f5 fcd2 	bl	80002a8 <__aeabi_dsub>
 800a904:	9e02      	ldr	r6, [sp, #8]
 800a906:	9f01      	ldr	r7, [sp, #4]
 800a908:	3630      	adds	r6, #48	; 0x30
 800a90a:	f805 6b01 	strb.w	r6, [r5], #1
 800a90e:	9e00      	ldr	r6, [sp, #0]
 800a910:	1bae      	subs	r6, r5, r6
 800a912:	42b7      	cmp	r7, r6
 800a914:	4602      	mov	r2, r0
 800a916:	460b      	mov	r3, r1
 800a918:	d137      	bne.n	800a98a <_dtoa_r+0x722>
 800a91a:	f7f5 fcc7 	bl	80002ac <__adddf3>
 800a91e:	4642      	mov	r2, r8
 800a920:	464b      	mov	r3, r9
 800a922:	4606      	mov	r6, r0
 800a924:	460f      	mov	r7, r1
 800a926:	f7f6 f907 	bl	8000b38 <__aeabi_dcmpgt>
 800a92a:	b9c8      	cbnz	r0, 800a960 <_dtoa_r+0x6f8>
 800a92c:	4642      	mov	r2, r8
 800a92e:	464b      	mov	r3, r9
 800a930:	4630      	mov	r0, r6
 800a932:	4639      	mov	r1, r7
 800a934:	f7f6 f8d8 	bl	8000ae8 <__aeabi_dcmpeq>
 800a938:	b110      	cbz	r0, 800a940 <_dtoa_r+0x6d8>
 800a93a:	9b02      	ldr	r3, [sp, #8]
 800a93c:	07d9      	lsls	r1, r3, #31
 800a93e:	d40f      	bmi.n	800a960 <_dtoa_r+0x6f8>
 800a940:	4620      	mov	r0, r4
 800a942:	4659      	mov	r1, fp
 800a944:	f001 f86c 	bl	800ba20 <_Bfree>
 800a948:	2300      	movs	r3, #0
 800a94a:	702b      	strb	r3, [r5, #0]
 800a94c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a94e:	f10a 0001 	add.w	r0, sl, #1
 800a952:	6018      	str	r0, [r3, #0]
 800a954:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a956:	2b00      	cmp	r3, #0
 800a958:	f43f acd8 	beq.w	800a30c <_dtoa_r+0xa4>
 800a95c:	601d      	str	r5, [r3, #0]
 800a95e:	e4d5      	b.n	800a30c <_dtoa_r+0xa4>
 800a960:	f8cd a01c 	str.w	sl, [sp, #28]
 800a964:	462b      	mov	r3, r5
 800a966:	461d      	mov	r5, r3
 800a968:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a96c:	2a39      	cmp	r2, #57	; 0x39
 800a96e:	d108      	bne.n	800a982 <_dtoa_r+0x71a>
 800a970:	9a00      	ldr	r2, [sp, #0]
 800a972:	429a      	cmp	r2, r3
 800a974:	d1f7      	bne.n	800a966 <_dtoa_r+0x6fe>
 800a976:	9a07      	ldr	r2, [sp, #28]
 800a978:	9900      	ldr	r1, [sp, #0]
 800a97a:	3201      	adds	r2, #1
 800a97c:	9207      	str	r2, [sp, #28]
 800a97e:	2230      	movs	r2, #48	; 0x30
 800a980:	700a      	strb	r2, [r1, #0]
 800a982:	781a      	ldrb	r2, [r3, #0]
 800a984:	3201      	adds	r2, #1
 800a986:	701a      	strb	r2, [r3, #0]
 800a988:	e78c      	b.n	800a8a4 <_dtoa_r+0x63c>
 800a98a:	4b7f      	ldr	r3, [pc, #508]	; (800ab88 <_dtoa_r+0x920>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	f7f5 fe43 	bl	8000618 <__aeabi_dmul>
 800a992:	2200      	movs	r2, #0
 800a994:	2300      	movs	r3, #0
 800a996:	4606      	mov	r6, r0
 800a998:	460f      	mov	r7, r1
 800a99a:	f7f6 f8a5 	bl	8000ae8 <__aeabi_dcmpeq>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	d09b      	beq.n	800a8da <_dtoa_r+0x672>
 800a9a2:	e7cd      	b.n	800a940 <_dtoa_r+0x6d8>
 800a9a4:	9a08      	ldr	r2, [sp, #32]
 800a9a6:	2a00      	cmp	r2, #0
 800a9a8:	f000 80c4 	beq.w	800ab34 <_dtoa_r+0x8cc>
 800a9ac:	9a05      	ldr	r2, [sp, #20]
 800a9ae:	2a01      	cmp	r2, #1
 800a9b0:	f300 80a8 	bgt.w	800ab04 <_dtoa_r+0x89c>
 800a9b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a9b6:	2a00      	cmp	r2, #0
 800a9b8:	f000 80a0 	beq.w	800aafc <_dtoa_r+0x894>
 800a9bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9c0:	9e06      	ldr	r6, [sp, #24]
 800a9c2:	4645      	mov	r5, r8
 800a9c4:	9a04      	ldr	r2, [sp, #16]
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	441a      	add	r2, r3
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	4498      	add	r8, r3
 800a9ce:	9204      	str	r2, [sp, #16]
 800a9d0:	f001 f92c 	bl	800bc2c <__i2b>
 800a9d4:	4607      	mov	r7, r0
 800a9d6:	2d00      	cmp	r5, #0
 800a9d8:	dd0b      	ble.n	800a9f2 <_dtoa_r+0x78a>
 800a9da:	9b04      	ldr	r3, [sp, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	dd08      	ble.n	800a9f2 <_dtoa_r+0x78a>
 800a9e0:	42ab      	cmp	r3, r5
 800a9e2:	9a04      	ldr	r2, [sp, #16]
 800a9e4:	bfa8      	it	ge
 800a9e6:	462b      	movge	r3, r5
 800a9e8:	eba8 0803 	sub.w	r8, r8, r3
 800a9ec:	1aed      	subs	r5, r5, r3
 800a9ee:	1ad3      	subs	r3, r2, r3
 800a9f0:	9304      	str	r3, [sp, #16]
 800a9f2:	9b06      	ldr	r3, [sp, #24]
 800a9f4:	b1fb      	cbz	r3, 800aa36 <_dtoa_r+0x7ce>
 800a9f6:	9b08      	ldr	r3, [sp, #32]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f000 809f 	beq.w	800ab3c <_dtoa_r+0x8d4>
 800a9fe:	2e00      	cmp	r6, #0
 800aa00:	dd11      	ble.n	800aa26 <_dtoa_r+0x7be>
 800aa02:	4639      	mov	r1, r7
 800aa04:	4632      	mov	r2, r6
 800aa06:	4620      	mov	r0, r4
 800aa08:	f001 f9cc 	bl	800bda4 <__pow5mult>
 800aa0c:	465a      	mov	r2, fp
 800aa0e:	4601      	mov	r1, r0
 800aa10:	4607      	mov	r7, r0
 800aa12:	4620      	mov	r0, r4
 800aa14:	f001 f920 	bl	800bc58 <__multiply>
 800aa18:	4659      	mov	r1, fp
 800aa1a:	9007      	str	r0, [sp, #28]
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 ffff 	bl	800ba20 <_Bfree>
 800aa22:	9b07      	ldr	r3, [sp, #28]
 800aa24:	469b      	mov	fp, r3
 800aa26:	9b06      	ldr	r3, [sp, #24]
 800aa28:	1b9a      	subs	r2, r3, r6
 800aa2a:	d004      	beq.n	800aa36 <_dtoa_r+0x7ce>
 800aa2c:	4659      	mov	r1, fp
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f001 f9b8 	bl	800bda4 <__pow5mult>
 800aa34:	4683      	mov	fp, r0
 800aa36:	2101      	movs	r1, #1
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f001 f8f7 	bl	800bc2c <__i2b>
 800aa3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	4606      	mov	r6, r0
 800aa44:	dd7c      	ble.n	800ab40 <_dtoa_r+0x8d8>
 800aa46:	461a      	mov	r2, r3
 800aa48:	4601      	mov	r1, r0
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f001 f9aa 	bl	800bda4 <__pow5mult>
 800aa50:	9b05      	ldr	r3, [sp, #20]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	4606      	mov	r6, r0
 800aa56:	dd76      	ble.n	800ab46 <_dtoa_r+0x8de>
 800aa58:	2300      	movs	r3, #0
 800aa5a:	9306      	str	r3, [sp, #24]
 800aa5c:	6933      	ldr	r3, [r6, #16]
 800aa5e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa62:	6918      	ldr	r0, [r3, #16]
 800aa64:	f001 f892 	bl	800bb8c <__hi0bits>
 800aa68:	f1c0 0020 	rsb	r0, r0, #32
 800aa6c:	9b04      	ldr	r3, [sp, #16]
 800aa6e:	4418      	add	r0, r3
 800aa70:	f010 001f 	ands.w	r0, r0, #31
 800aa74:	f000 8086 	beq.w	800ab84 <_dtoa_r+0x91c>
 800aa78:	f1c0 0320 	rsb	r3, r0, #32
 800aa7c:	2b04      	cmp	r3, #4
 800aa7e:	dd7f      	ble.n	800ab80 <_dtoa_r+0x918>
 800aa80:	f1c0 001c 	rsb	r0, r0, #28
 800aa84:	9b04      	ldr	r3, [sp, #16]
 800aa86:	4403      	add	r3, r0
 800aa88:	4480      	add	r8, r0
 800aa8a:	4405      	add	r5, r0
 800aa8c:	9304      	str	r3, [sp, #16]
 800aa8e:	f1b8 0f00 	cmp.w	r8, #0
 800aa92:	dd05      	ble.n	800aaa0 <_dtoa_r+0x838>
 800aa94:	4659      	mov	r1, fp
 800aa96:	4642      	mov	r2, r8
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f001 f9dd 	bl	800be58 <__lshift>
 800aa9e:	4683      	mov	fp, r0
 800aaa0:	9b04      	ldr	r3, [sp, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	dd05      	ble.n	800aab2 <_dtoa_r+0x84a>
 800aaa6:	4631      	mov	r1, r6
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	4620      	mov	r0, r4
 800aaac:	f001 f9d4 	bl	800be58 <__lshift>
 800aab0:	4606      	mov	r6, r0
 800aab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d069      	beq.n	800ab8c <_dtoa_r+0x924>
 800aab8:	4631      	mov	r1, r6
 800aaba:	4658      	mov	r0, fp
 800aabc:	f001 fa38 	bl	800bf30 <__mcmp>
 800aac0:	2800      	cmp	r0, #0
 800aac2:	da63      	bge.n	800ab8c <_dtoa_r+0x924>
 800aac4:	2300      	movs	r3, #0
 800aac6:	4659      	mov	r1, fp
 800aac8:	220a      	movs	r2, #10
 800aaca:	4620      	mov	r0, r4
 800aacc:	f000 ffca 	bl	800ba64 <__multadd>
 800aad0:	9b08      	ldr	r3, [sp, #32]
 800aad2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800aad6:	4683      	mov	fp, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	f000 818f 	beq.w	800adfc <_dtoa_r+0xb94>
 800aade:	4639      	mov	r1, r7
 800aae0:	2300      	movs	r3, #0
 800aae2:	220a      	movs	r2, #10
 800aae4:	4620      	mov	r0, r4
 800aae6:	f000 ffbd 	bl	800ba64 <__multadd>
 800aaea:	f1b9 0f00 	cmp.w	r9, #0
 800aaee:	4607      	mov	r7, r0
 800aaf0:	f300 808e 	bgt.w	800ac10 <_dtoa_r+0x9a8>
 800aaf4:	9b05      	ldr	r3, [sp, #20]
 800aaf6:	2b02      	cmp	r3, #2
 800aaf8:	dc50      	bgt.n	800ab9c <_dtoa_r+0x934>
 800aafa:	e089      	b.n	800ac10 <_dtoa_r+0x9a8>
 800aafc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800aafe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab02:	e75d      	b.n	800a9c0 <_dtoa_r+0x758>
 800ab04:	9b01      	ldr	r3, [sp, #4]
 800ab06:	1e5e      	subs	r6, r3, #1
 800ab08:	9b06      	ldr	r3, [sp, #24]
 800ab0a:	42b3      	cmp	r3, r6
 800ab0c:	bfbf      	itttt	lt
 800ab0e:	9b06      	ldrlt	r3, [sp, #24]
 800ab10:	9606      	strlt	r6, [sp, #24]
 800ab12:	1af2      	sublt	r2, r6, r3
 800ab14:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ab16:	bfb6      	itet	lt
 800ab18:	189b      	addlt	r3, r3, r2
 800ab1a:	1b9e      	subge	r6, r3, r6
 800ab1c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ab1e:	9b01      	ldr	r3, [sp, #4]
 800ab20:	bfb8      	it	lt
 800ab22:	2600      	movlt	r6, #0
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	bfb5      	itete	lt
 800ab28:	eba8 0503 	sublt.w	r5, r8, r3
 800ab2c:	9b01      	ldrge	r3, [sp, #4]
 800ab2e:	2300      	movlt	r3, #0
 800ab30:	4645      	movge	r5, r8
 800ab32:	e747      	b.n	800a9c4 <_dtoa_r+0x75c>
 800ab34:	9e06      	ldr	r6, [sp, #24]
 800ab36:	9f08      	ldr	r7, [sp, #32]
 800ab38:	4645      	mov	r5, r8
 800ab3a:	e74c      	b.n	800a9d6 <_dtoa_r+0x76e>
 800ab3c:	9a06      	ldr	r2, [sp, #24]
 800ab3e:	e775      	b.n	800aa2c <_dtoa_r+0x7c4>
 800ab40:	9b05      	ldr	r3, [sp, #20]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	dc18      	bgt.n	800ab78 <_dtoa_r+0x910>
 800ab46:	9b02      	ldr	r3, [sp, #8]
 800ab48:	b9b3      	cbnz	r3, 800ab78 <_dtoa_r+0x910>
 800ab4a:	9b03      	ldr	r3, [sp, #12]
 800ab4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab50:	b9a3      	cbnz	r3, 800ab7c <_dtoa_r+0x914>
 800ab52:	9b03      	ldr	r3, [sp, #12]
 800ab54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ab58:	0d1b      	lsrs	r3, r3, #20
 800ab5a:	051b      	lsls	r3, r3, #20
 800ab5c:	b12b      	cbz	r3, 800ab6a <_dtoa_r+0x902>
 800ab5e:	9b04      	ldr	r3, [sp, #16]
 800ab60:	3301      	adds	r3, #1
 800ab62:	9304      	str	r3, [sp, #16]
 800ab64:	f108 0801 	add.w	r8, r8, #1
 800ab68:	2301      	movs	r3, #1
 800ab6a:	9306      	str	r3, [sp, #24]
 800ab6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f47f af74 	bne.w	800aa5c <_dtoa_r+0x7f4>
 800ab74:	2001      	movs	r0, #1
 800ab76:	e779      	b.n	800aa6c <_dtoa_r+0x804>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	e7f6      	b.n	800ab6a <_dtoa_r+0x902>
 800ab7c:	9b02      	ldr	r3, [sp, #8]
 800ab7e:	e7f4      	b.n	800ab6a <_dtoa_r+0x902>
 800ab80:	d085      	beq.n	800aa8e <_dtoa_r+0x826>
 800ab82:	4618      	mov	r0, r3
 800ab84:	301c      	adds	r0, #28
 800ab86:	e77d      	b.n	800aa84 <_dtoa_r+0x81c>
 800ab88:	40240000 	.word	0x40240000
 800ab8c:	9b01      	ldr	r3, [sp, #4]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	dc38      	bgt.n	800ac04 <_dtoa_r+0x99c>
 800ab92:	9b05      	ldr	r3, [sp, #20]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	dd35      	ble.n	800ac04 <_dtoa_r+0x99c>
 800ab98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ab9c:	f1b9 0f00 	cmp.w	r9, #0
 800aba0:	d10d      	bne.n	800abbe <_dtoa_r+0x956>
 800aba2:	4631      	mov	r1, r6
 800aba4:	464b      	mov	r3, r9
 800aba6:	2205      	movs	r2, #5
 800aba8:	4620      	mov	r0, r4
 800abaa:	f000 ff5b 	bl	800ba64 <__multadd>
 800abae:	4601      	mov	r1, r0
 800abb0:	4606      	mov	r6, r0
 800abb2:	4658      	mov	r0, fp
 800abb4:	f001 f9bc 	bl	800bf30 <__mcmp>
 800abb8:	2800      	cmp	r0, #0
 800abba:	f73f adbd 	bgt.w	800a738 <_dtoa_r+0x4d0>
 800abbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abc0:	9d00      	ldr	r5, [sp, #0]
 800abc2:	ea6f 0a03 	mvn.w	sl, r3
 800abc6:	f04f 0800 	mov.w	r8, #0
 800abca:	4631      	mov	r1, r6
 800abcc:	4620      	mov	r0, r4
 800abce:	f000 ff27 	bl	800ba20 <_Bfree>
 800abd2:	2f00      	cmp	r7, #0
 800abd4:	f43f aeb4 	beq.w	800a940 <_dtoa_r+0x6d8>
 800abd8:	f1b8 0f00 	cmp.w	r8, #0
 800abdc:	d005      	beq.n	800abea <_dtoa_r+0x982>
 800abde:	45b8      	cmp	r8, r7
 800abe0:	d003      	beq.n	800abea <_dtoa_r+0x982>
 800abe2:	4641      	mov	r1, r8
 800abe4:	4620      	mov	r0, r4
 800abe6:	f000 ff1b 	bl	800ba20 <_Bfree>
 800abea:	4639      	mov	r1, r7
 800abec:	4620      	mov	r0, r4
 800abee:	f000 ff17 	bl	800ba20 <_Bfree>
 800abf2:	e6a5      	b.n	800a940 <_dtoa_r+0x6d8>
 800abf4:	2600      	movs	r6, #0
 800abf6:	4637      	mov	r7, r6
 800abf8:	e7e1      	b.n	800abbe <_dtoa_r+0x956>
 800abfa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800abfc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ac00:	4637      	mov	r7, r6
 800ac02:	e599      	b.n	800a738 <_dtoa_r+0x4d0>
 800ac04:	9b08      	ldr	r3, [sp, #32]
 800ac06:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f000 80fd 	beq.w	800ae0a <_dtoa_r+0xba2>
 800ac10:	2d00      	cmp	r5, #0
 800ac12:	dd05      	ble.n	800ac20 <_dtoa_r+0x9b8>
 800ac14:	4639      	mov	r1, r7
 800ac16:	462a      	mov	r2, r5
 800ac18:	4620      	mov	r0, r4
 800ac1a:	f001 f91d 	bl	800be58 <__lshift>
 800ac1e:	4607      	mov	r7, r0
 800ac20:	9b06      	ldr	r3, [sp, #24]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d05c      	beq.n	800ace0 <_dtoa_r+0xa78>
 800ac26:	6879      	ldr	r1, [r7, #4]
 800ac28:	4620      	mov	r0, r4
 800ac2a:	f000 feb9 	bl	800b9a0 <_Balloc>
 800ac2e:	4605      	mov	r5, r0
 800ac30:	b928      	cbnz	r0, 800ac3e <_dtoa_r+0x9d6>
 800ac32:	4b80      	ldr	r3, [pc, #512]	; (800ae34 <_dtoa_r+0xbcc>)
 800ac34:	4602      	mov	r2, r0
 800ac36:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac3a:	f7ff bb2e 	b.w	800a29a <_dtoa_r+0x32>
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	3202      	adds	r2, #2
 800ac42:	0092      	lsls	r2, r2, #2
 800ac44:	f107 010c 	add.w	r1, r7, #12
 800ac48:	300c      	adds	r0, #12
 800ac4a:	f7fd fa4f 	bl	80080ec <memcpy>
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4629      	mov	r1, r5
 800ac52:	4620      	mov	r0, r4
 800ac54:	f001 f900 	bl	800be58 <__lshift>
 800ac58:	9b00      	ldr	r3, [sp, #0]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	9301      	str	r3, [sp, #4]
 800ac5e:	9b00      	ldr	r3, [sp, #0]
 800ac60:	444b      	add	r3, r9
 800ac62:	9307      	str	r3, [sp, #28]
 800ac64:	9b02      	ldr	r3, [sp, #8]
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	46b8      	mov	r8, r7
 800ac6c:	9306      	str	r3, [sp, #24]
 800ac6e:	4607      	mov	r7, r0
 800ac70:	9b01      	ldr	r3, [sp, #4]
 800ac72:	4631      	mov	r1, r6
 800ac74:	3b01      	subs	r3, #1
 800ac76:	4658      	mov	r0, fp
 800ac78:	9302      	str	r3, [sp, #8]
 800ac7a:	f7ff fa67 	bl	800a14c <quorem>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	3330      	adds	r3, #48	; 0x30
 800ac82:	9004      	str	r0, [sp, #16]
 800ac84:	4641      	mov	r1, r8
 800ac86:	4658      	mov	r0, fp
 800ac88:	9308      	str	r3, [sp, #32]
 800ac8a:	f001 f951 	bl	800bf30 <__mcmp>
 800ac8e:	463a      	mov	r2, r7
 800ac90:	4681      	mov	r9, r0
 800ac92:	4631      	mov	r1, r6
 800ac94:	4620      	mov	r0, r4
 800ac96:	f001 f967 	bl	800bf68 <__mdiff>
 800ac9a:	68c2      	ldr	r2, [r0, #12]
 800ac9c:	9b08      	ldr	r3, [sp, #32]
 800ac9e:	4605      	mov	r5, r0
 800aca0:	bb02      	cbnz	r2, 800ace4 <_dtoa_r+0xa7c>
 800aca2:	4601      	mov	r1, r0
 800aca4:	4658      	mov	r0, fp
 800aca6:	f001 f943 	bl	800bf30 <__mcmp>
 800acaa:	9b08      	ldr	r3, [sp, #32]
 800acac:	4602      	mov	r2, r0
 800acae:	4629      	mov	r1, r5
 800acb0:	4620      	mov	r0, r4
 800acb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800acb6:	f000 feb3 	bl	800ba20 <_Bfree>
 800acba:	9b05      	ldr	r3, [sp, #20]
 800acbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acbe:	9d01      	ldr	r5, [sp, #4]
 800acc0:	ea43 0102 	orr.w	r1, r3, r2
 800acc4:	9b06      	ldr	r3, [sp, #24]
 800acc6:	430b      	orrs	r3, r1
 800acc8:	9b08      	ldr	r3, [sp, #32]
 800acca:	d10d      	bne.n	800ace8 <_dtoa_r+0xa80>
 800accc:	2b39      	cmp	r3, #57	; 0x39
 800acce:	d029      	beq.n	800ad24 <_dtoa_r+0xabc>
 800acd0:	f1b9 0f00 	cmp.w	r9, #0
 800acd4:	dd01      	ble.n	800acda <_dtoa_r+0xa72>
 800acd6:	9b04      	ldr	r3, [sp, #16]
 800acd8:	3331      	adds	r3, #49	; 0x31
 800acda:	9a02      	ldr	r2, [sp, #8]
 800acdc:	7013      	strb	r3, [r2, #0]
 800acde:	e774      	b.n	800abca <_dtoa_r+0x962>
 800ace0:	4638      	mov	r0, r7
 800ace2:	e7b9      	b.n	800ac58 <_dtoa_r+0x9f0>
 800ace4:	2201      	movs	r2, #1
 800ace6:	e7e2      	b.n	800acae <_dtoa_r+0xa46>
 800ace8:	f1b9 0f00 	cmp.w	r9, #0
 800acec:	db06      	blt.n	800acfc <_dtoa_r+0xa94>
 800acee:	9905      	ldr	r1, [sp, #20]
 800acf0:	ea41 0909 	orr.w	r9, r1, r9
 800acf4:	9906      	ldr	r1, [sp, #24]
 800acf6:	ea59 0101 	orrs.w	r1, r9, r1
 800acfa:	d120      	bne.n	800ad3e <_dtoa_r+0xad6>
 800acfc:	2a00      	cmp	r2, #0
 800acfe:	ddec      	ble.n	800acda <_dtoa_r+0xa72>
 800ad00:	4659      	mov	r1, fp
 800ad02:	2201      	movs	r2, #1
 800ad04:	4620      	mov	r0, r4
 800ad06:	9301      	str	r3, [sp, #4]
 800ad08:	f001 f8a6 	bl	800be58 <__lshift>
 800ad0c:	4631      	mov	r1, r6
 800ad0e:	4683      	mov	fp, r0
 800ad10:	f001 f90e 	bl	800bf30 <__mcmp>
 800ad14:	2800      	cmp	r0, #0
 800ad16:	9b01      	ldr	r3, [sp, #4]
 800ad18:	dc02      	bgt.n	800ad20 <_dtoa_r+0xab8>
 800ad1a:	d1de      	bne.n	800acda <_dtoa_r+0xa72>
 800ad1c:	07da      	lsls	r2, r3, #31
 800ad1e:	d5dc      	bpl.n	800acda <_dtoa_r+0xa72>
 800ad20:	2b39      	cmp	r3, #57	; 0x39
 800ad22:	d1d8      	bne.n	800acd6 <_dtoa_r+0xa6e>
 800ad24:	9a02      	ldr	r2, [sp, #8]
 800ad26:	2339      	movs	r3, #57	; 0x39
 800ad28:	7013      	strb	r3, [r2, #0]
 800ad2a:	462b      	mov	r3, r5
 800ad2c:	461d      	mov	r5, r3
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad34:	2a39      	cmp	r2, #57	; 0x39
 800ad36:	d050      	beq.n	800adda <_dtoa_r+0xb72>
 800ad38:	3201      	adds	r2, #1
 800ad3a:	701a      	strb	r2, [r3, #0]
 800ad3c:	e745      	b.n	800abca <_dtoa_r+0x962>
 800ad3e:	2a00      	cmp	r2, #0
 800ad40:	dd03      	ble.n	800ad4a <_dtoa_r+0xae2>
 800ad42:	2b39      	cmp	r3, #57	; 0x39
 800ad44:	d0ee      	beq.n	800ad24 <_dtoa_r+0xabc>
 800ad46:	3301      	adds	r3, #1
 800ad48:	e7c7      	b.n	800acda <_dtoa_r+0xa72>
 800ad4a:	9a01      	ldr	r2, [sp, #4]
 800ad4c:	9907      	ldr	r1, [sp, #28]
 800ad4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ad52:	428a      	cmp	r2, r1
 800ad54:	d02a      	beq.n	800adac <_dtoa_r+0xb44>
 800ad56:	4659      	mov	r1, fp
 800ad58:	2300      	movs	r3, #0
 800ad5a:	220a      	movs	r2, #10
 800ad5c:	4620      	mov	r0, r4
 800ad5e:	f000 fe81 	bl	800ba64 <__multadd>
 800ad62:	45b8      	cmp	r8, r7
 800ad64:	4683      	mov	fp, r0
 800ad66:	f04f 0300 	mov.w	r3, #0
 800ad6a:	f04f 020a 	mov.w	r2, #10
 800ad6e:	4641      	mov	r1, r8
 800ad70:	4620      	mov	r0, r4
 800ad72:	d107      	bne.n	800ad84 <_dtoa_r+0xb1c>
 800ad74:	f000 fe76 	bl	800ba64 <__multadd>
 800ad78:	4680      	mov	r8, r0
 800ad7a:	4607      	mov	r7, r0
 800ad7c:	9b01      	ldr	r3, [sp, #4]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	9301      	str	r3, [sp, #4]
 800ad82:	e775      	b.n	800ac70 <_dtoa_r+0xa08>
 800ad84:	f000 fe6e 	bl	800ba64 <__multadd>
 800ad88:	4639      	mov	r1, r7
 800ad8a:	4680      	mov	r8, r0
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	220a      	movs	r2, #10
 800ad90:	4620      	mov	r0, r4
 800ad92:	f000 fe67 	bl	800ba64 <__multadd>
 800ad96:	4607      	mov	r7, r0
 800ad98:	e7f0      	b.n	800ad7c <_dtoa_r+0xb14>
 800ad9a:	f1b9 0f00 	cmp.w	r9, #0
 800ad9e:	9a00      	ldr	r2, [sp, #0]
 800ada0:	bfcc      	ite	gt
 800ada2:	464d      	movgt	r5, r9
 800ada4:	2501      	movle	r5, #1
 800ada6:	4415      	add	r5, r2
 800ada8:	f04f 0800 	mov.w	r8, #0
 800adac:	4659      	mov	r1, fp
 800adae:	2201      	movs	r2, #1
 800adb0:	4620      	mov	r0, r4
 800adb2:	9301      	str	r3, [sp, #4]
 800adb4:	f001 f850 	bl	800be58 <__lshift>
 800adb8:	4631      	mov	r1, r6
 800adba:	4683      	mov	fp, r0
 800adbc:	f001 f8b8 	bl	800bf30 <__mcmp>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	dcb2      	bgt.n	800ad2a <_dtoa_r+0xac2>
 800adc4:	d102      	bne.n	800adcc <_dtoa_r+0xb64>
 800adc6:	9b01      	ldr	r3, [sp, #4]
 800adc8:	07db      	lsls	r3, r3, #31
 800adca:	d4ae      	bmi.n	800ad2a <_dtoa_r+0xac2>
 800adcc:	462b      	mov	r3, r5
 800adce:	461d      	mov	r5, r3
 800add0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800add4:	2a30      	cmp	r2, #48	; 0x30
 800add6:	d0fa      	beq.n	800adce <_dtoa_r+0xb66>
 800add8:	e6f7      	b.n	800abca <_dtoa_r+0x962>
 800adda:	9a00      	ldr	r2, [sp, #0]
 800addc:	429a      	cmp	r2, r3
 800adde:	d1a5      	bne.n	800ad2c <_dtoa_r+0xac4>
 800ade0:	f10a 0a01 	add.w	sl, sl, #1
 800ade4:	2331      	movs	r3, #49	; 0x31
 800ade6:	e779      	b.n	800acdc <_dtoa_r+0xa74>
 800ade8:	4b13      	ldr	r3, [pc, #76]	; (800ae38 <_dtoa_r+0xbd0>)
 800adea:	f7ff baaf 	b.w	800a34c <_dtoa_r+0xe4>
 800adee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	f47f aa86 	bne.w	800a302 <_dtoa_r+0x9a>
 800adf6:	4b11      	ldr	r3, [pc, #68]	; (800ae3c <_dtoa_r+0xbd4>)
 800adf8:	f7ff baa8 	b.w	800a34c <_dtoa_r+0xe4>
 800adfc:	f1b9 0f00 	cmp.w	r9, #0
 800ae00:	dc03      	bgt.n	800ae0a <_dtoa_r+0xba2>
 800ae02:	9b05      	ldr	r3, [sp, #20]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	f73f aec9 	bgt.w	800ab9c <_dtoa_r+0x934>
 800ae0a:	9d00      	ldr	r5, [sp, #0]
 800ae0c:	4631      	mov	r1, r6
 800ae0e:	4658      	mov	r0, fp
 800ae10:	f7ff f99c 	bl	800a14c <quorem>
 800ae14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae18:	f805 3b01 	strb.w	r3, [r5], #1
 800ae1c:	9a00      	ldr	r2, [sp, #0]
 800ae1e:	1aaa      	subs	r2, r5, r2
 800ae20:	4591      	cmp	r9, r2
 800ae22:	ddba      	ble.n	800ad9a <_dtoa_r+0xb32>
 800ae24:	4659      	mov	r1, fp
 800ae26:	2300      	movs	r3, #0
 800ae28:	220a      	movs	r2, #10
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f000 fe1a 	bl	800ba64 <__multadd>
 800ae30:	4683      	mov	fp, r0
 800ae32:	e7eb      	b.n	800ae0c <_dtoa_r+0xba4>
 800ae34:	08023d54 	.word	0x08023d54
 800ae38:	08023b54 	.word	0x08023b54
 800ae3c:	08023cd1 	.word	0x08023cd1

0800ae40 <__sflush_r>:
 800ae40:	898a      	ldrh	r2, [r1, #12]
 800ae42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae46:	4605      	mov	r5, r0
 800ae48:	0710      	lsls	r0, r2, #28
 800ae4a:	460c      	mov	r4, r1
 800ae4c:	d458      	bmi.n	800af00 <__sflush_r+0xc0>
 800ae4e:	684b      	ldr	r3, [r1, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	dc05      	bgt.n	800ae60 <__sflush_r+0x20>
 800ae54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	dc02      	bgt.n	800ae60 <__sflush_r+0x20>
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae62:	2e00      	cmp	r6, #0
 800ae64:	d0f9      	beq.n	800ae5a <__sflush_r+0x1a>
 800ae66:	2300      	movs	r3, #0
 800ae68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae6c:	682f      	ldr	r7, [r5, #0]
 800ae6e:	602b      	str	r3, [r5, #0]
 800ae70:	d032      	beq.n	800aed8 <__sflush_r+0x98>
 800ae72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae74:	89a3      	ldrh	r3, [r4, #12]
 800ae76:	075a      	lsls	r2, r3, #29
 800ae78:	d505      	bpl.n	800ae86 <__sflush_r+0x46>
 800ae7a:	6863      	ldr	r3, [r4, #4]
 800ae7c:	1ac0      	subs	r0, r0, r3
 800ae7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae80:	b10b      	cbz	r3, 800ae86 <__sflush_r+0x46>
 800ae82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae84:	1ac0      	subs	r0, r0, r3
 800ae86:	2300      	movs	r3, #0
 800ae88:	4602      	mov	r2, r0
 800ae8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae8c:	6a21      	ldr	r1, [r4, #32]
 800ae8e:	4628      	mov	r0, r5
 800ae90:	47b0      	blx	r6
 800ae92:	1c43      	adds	r3, r0, #1
 800ae94:	89a3      	ldrh	r3, [r4, #12]
 800ae96:	d106      	bne.n	800aea6 <__sflush_r+0x66>
 800ae98:	6829      	ldr	r1, [r5, #0]
 800ae9a:	291d      	cmp	r1, #29
 800ae9c:	d82c      	bhi.n	800aef8 <__sflush_r+0xb8>
 800ae9e:	4a2a      	ldr	r2, [pc, #168]	; (800af48 <__sflush_r+0x108>)
 800aea0:	40ca      	lsrs	r2, r1
 800aea2:	07d6      	lsls	r6, r2, #31
 800aea4:	d528      	bpl.n	800aef8 <__sflush_r+0xb8>
 800aea6:	2200      	movs	r2, #0
 800aea8:	6062      	str	r2, [r4, #4]
 800aeaa:	04d9      	lsls	r1, r3, #19
 800aeac:	6922      	ldr	r2, [r4, #16]
 800aeae:	6022      	str	r2, [r4, #0]
 800aeb0:	d504      	bpl.n	800aebc <__sflush_r+0x7c>
 800aeb2:	1c42      	adds	r2, r0, #1
 800aeb4:	d101      	bne.n	800aeba <__sflush_r+0x7a>
 800aeb6:	682b      	ldr	r3, [r5, #0]
 800aeb8:	b903      	cbnz	r3, 800aebc <__sflush_r+0x7c>
 800aeba:	6560      	str	r0, [r4, #84]	; 0x54
 800aebc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aebe:	602f      	str	r7, [r5, #0]
 800aec0:	2900      	cmp	r1, #0
 800aec2:	d0ca      	beq.n	800ae5a <__sflush_r+0x1a>
 800aec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aec8:	4299      	cmp	r1, r3
 800aeca:	d002      	beq.n	800aed2 <__sflush_r+0x92>
 800aecc:	4628      	mov	r0, r5
 800aece:	f7fd f923 	bl	8008118 <_free_r>
 800aed2:	2000      	movs	r0, #0
 800aed4:	6360      	str	r0, [r4, #52]	; 0x34
 800aed6:	e7c1      	b.n	800ae5c <__sflush_r+0x1c>
 800aed8:	6a21      	ldr	r1, [r4, #32]
 800aeda:	2301      	movs	r3, #1
 800aedc:	4628      	mov	r0, r5
 800aede:	47b0      	blx	r6
 800aee0:	1c41      	adds	r1, r0, #1
 800aee2:	d1c7      	bne.n	800ae74 <__sflush_r+0x34>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d0c4      	beq.n	800ae74 <__sflush_r+0x34>
 800aeea:	2b1d      	cmp	r3, #29
 800aeec:	d001      	beq.n	800aef2 <__sflush_r+0xb2>
 800aeee:	2b16      	cmp	r3, #22
 800aef0:	d101      	bne.n	800aef6 <__sflush_r+0xb6>
 800aef2:	602f      	str	r7, [r5, #0]
 800aef4:	e7b1      	b.n	800ae5a <__sflush_r+0x1a>
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aefc:	81a3      	strh	r3, [r4, #12]
 800aefe:	e7ad      	b.n	800ae5c <__sflush_r+0x1c>
 800af00:	690f      	ldr	r7, [r1, #16]
 800af02:	2f00      	cmp	r7, #0
 800af04:	d0a9      	beq.n	800ae5a <__sflush_r+0x1a>
 800af06:	0793      	lsls	r3, r2, #30
 800af08:	680e      	ldr	r6, [r1, #0]
 800af0a:	bf08      	it	eq
 800af0c:	694b      	ldreq	r3, [r1, #20]
 800af0e:	600f      	str	r7, [r1, #0]
 800af10:	bf18      	it	ne
 800af12:	2300      	movne	r3, #0
 800af14:	eba6 0807 	sub.w	r8, r6, r7
 800af18:	608b      	str	r3, [r1, #8]
 800af1a:	f1b8 0f00 	cmp.w	r8, #0
 800af1e:	dd9c      	ble.n	800ae5a <__sflush_r+0x1a>
 800af20:	6a21      	ldr	r1, [r4, #32]
 800af22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af24:	4643      	mov	r3, r8
 800af26:	463a      	mov	r2, r7
 800af28:	4628      	mov	r0, r5
 800af2a:	47b0      	blx	r6
 800af2c:	2800      	cmp	r0, #0
 800af2e:	dc06      	bgt.n	800af3e <__sflush_r+0xfe>
 800af30:	89a3      	ldrh	r3, [r4, #12]
 800af32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af3c:	e78e      	b.n	800ae5c <__sflush_r+0x1c>
 800af3e:	4407      	add	r7, r0
 800af40:	eba8 0800 	sub.w	r8, r8, r0
 800af44:	e7e9      	b.n	800af1a <__sflush_r+0xda>
 800af46:	bf00      	nop
 800af48:	20400001 	.word	0x20400001

0800af4c <_fflush_r>:
 800af4c:	b538      	push	{r3, r4, r5, lr}
 800af4e:	690b      	ldr	r3, [r1, #16]
 800af50:	4605      	mov	r5, r0
 800af52:	460c      	mov	r4, r1
 800af54:	b913      	cbnz	r3, 800af5c <_fflush_r+0x10>
 800af56:	2500      	movs	r5, #0
 800af58:	4628      	mov	r0, r5
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	b118      	cbz	r0, 800af66 <_fflush_r+0x1a>
 800af5e:	6983      	ldr	r3, [r0, #24]
 800af60:	b90b      	cbnz	r3, 800af66 <_fflush_r+0x1a>
 800af62:	f000 f887 	bl	800b074 <__sinit>
 800af66:	4b14      	ldr	r3, [pc, #80]	; (800afb8 <_fflush_r+0x6c>)
 800af68:	429c      	cmp	r4, r3
 800af6a:	d11b      	bne.n	800afa4 <_fflush_r+0x58>
 800af6c:	686c      	ldr	r4, [r5, #4]
 800af6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d0ef      	beq.n	800af56 <_fflush_r+0xa>
 800af76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af78:	07d0      	lsls	r0, r2, #31
 800af7a:	d404      	bmi.n	800af86 <_fflush_r+0x3a>
 800af7c:	0599      	lsls	r1, r3, #22
 800af7e:	d402      	bmi.n	800af86 <_fflush_r+0x3a>
 800af80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af82:	f000 fc88 	bl	800b896 <__retarget_lock_acquire_recursive>
 800af86:	4628      	mov	r0, r5
 800af88:	4621      	mov	r1, r4
 800af8a:	f7ff ff59 	bl	800ae40 <__sflush_r>
 800af8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af90:	07da      	lsls	r2, r3, #31
 800af92:	4605      	mov	r5, r0
 800af94:	d4e0      	bmi.n	800af58 <_fflush_r+0xc>
 800af96:	89a3      	ldrh	r3, [r4, #12]
 800af98:	059b      	lsls	r3, r3, #22
 800af9a:	d4dd      	bmi.n	800af58 <_fflush_r+0xc>
 800af9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af9e:	f000 fc7b 	bl	800b898 <__retarget_lock_release_recursive>
 800afa2:	e7d9      	b.n	800af58 <_fflush_r+0xc>
 800afa4:	4b05      	ldr	r3, [pc, #20]	; (800afbc <_fflush_r+0x70>)
 800afa6:	429c      	cmp	r4, r3
 800afa8:	d101      	bne.n	800afae <_fflush_r+0x62>
 800afaa:	68ac      	ldr	r4, [r5, #8]
 800afac:	e7df      	b.n	800af6e <_fflush_r+0x22>
 800afae:	4b04      	ldr	r3, [pc, #16]	; (800afc0 <_fflush_r+0x74>)
 800afb0:	429c      	cmp	r4, r3
 800afb2:	bf08      	it	eq
 800afb4:	68ec      	ldreq	r4, [r5, #12]
 800afb6:	e7da      	b.n	800af6e <_fflush_r+0x22>
 800afb8:	08023d88 	.word	0x08023d88
 800afbc:	08023da8 	.word	0x08023da8
 800afc0:	08023d68 	.word	0x08023d68

0800afc4 <std>:
 800afc4:	2300      	movs	r3, #0
 800afc6:	b510      	push	{r4, lr}
 800afc8:	4604      	mov	r4, r0
 800afca:	e9c0 3300 	strd	r3, r3, [r0]
 800afce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800afd2:	6083      	str	r3, [r0, #8]
 800afd4:	8181      	strh	r1, [r0, #12]
 800afd6:	6643      	str	r3, [r0, #100]	; 0x64
 800afd8:	81c2      	strh	r2, [r0, #14]
 800afda:	6183      	str	r3, [r0, #24]
 800afdc:	4619      	mov	r1, r3
 800afde:	2208      	movs	r2, #8
 800afe0:	305c      	adds	r0, #92	; 0x5c
 800afe2:	f7fd f891 	bl	8008108 <memset>
 800afe6:	4b05      	ldr	r3, [pc, #20]	; (800affc <std+0x38>)
 800afe8:	6263      	str	r3, [r4, #36]	; 0x24
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <std+0x3c>)
 800afec:	62a3      	str	r3, [r4, #40]	; 0x28
 800afee:	4b05      	ldr	r3, [pc, #20]	; (800b004 <std+0x40>)
 800aff0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aff2:	4b05      	ldr	r3, [pc, #20]	; (800b008 <std+0x44>)
 800aff4:	6224      	str	r4, [r4, #32]
 800aff6:	6323      	str	r3, [r4, #48]	; 0x30
 800aff8:	bd10      	pop	{r4, pc}
 800affa:	bf00      	nop
 800affc:	0800c901 	.word	0x0800c901
 800b000:	0800c923 	.word	0x0800c923
 800b004:	0800c95b 	.word	0x0800c95b
 800b008:	0800c97f 	.word	0x0800c97f

0800b00c <_cleanup_r>:
 800b00c:	4901      	ldr	r1, [pc, #4]	; (800b014 <_cleanup_r+0x8>)
 800b00e:	f000 b8af 	b.w	800b170 <_fwalk_reent>
 800b012:	bf00      	nop
 800b014:	0800af4d 	.word	0x0800af4d

0800b018 <__sfmoreglue>:
 800b018:	b570      	push	{r4, r5, r6, lr}
 800b01a:	1e4a      	subs	r2, r1, #1
 800b01c:	2568      	movs	r5, #104	; 0x68
 800b01e:	4355      	muls	r5, r2
 800b020:	460e      	mov	r6, r1
 800b022:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b026:	f7fd f8c7 	bl	80081b8 <_malloc_r>
 800b02a:	4604      	mov	r4, r0
 800b02c:	b140      	cbz	r0, 800b040 <__sfmoreglue+0x28>
 800b02e:	2100      	movs	r1, #0
 800b030:	e9c0 1600 	strd	r1, r6, [r0]
 800b034:	300c      	adds	r0, #12
 800b036:	60a0      	str	r0, [r4, #8]
 800b038:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b03c:	f7fd f864 	bl	8008108 <memset>
 800b040:	4620      	mov	r0, r4
 800b042:	bd70      	pop	{r4, r5, r6, pc}

0800b044 <__sfp_lock_acquire>:
 800b044:	4801      	ldr	r0, [pc, #4]	; (800b04c <__sfp_lock_acquire+0x8>)
 800b046:	f000 bc26 	b.w	800b896 <__retarget_lock_acquire_recursive>
 800b04a:	bf00      	nop
 800b04c:	2000b574 	.word	0x2000b574

0800b050 <__sfp_lock_release>:
 800b050:	4801      	ldr	r0, [pc, #4]	; (800b058 <__sfp_lock_release+0x8>)
 800b052:	f000 bc21 	b.w	800b898 <__retarget_lock_release_recursive>
 800b056:	bf00      	nop
 800b058:	2000b574 	.word	0x2000b574

0800b05c <__sinit_lock_acquire>:
 800b05c:	4801      	ldr	r0, [pc, #4]	; (800b064 <__sinit_lock_acquire+0x8>)
 800b05e:	f000 bc1a 	b.w	800b896 <__retarget_lock_acquire_recursive>
 800b062:	bf00      	nop
 800b064:	2000b56f 	.word	0x2000b56f

0800b068 <__sinit_lock_release>:
 800b068:	4801      	ldr	r0, [pc, #4]	; (800b070 <__sinit_lock_release+0x8>)
 800b06a:	f000 bc15 	b.w	800b898 <__retarget_lock_release_recursive>
 800b06e:	bf00      	nop
 800b070:	2000b56f 	.word	0x2000b56f

0800b074 <__sinit>:
 800b074:	b510      	push	{r4, lr}
 800b076:	4604      	mov	r4, r0
 800b078:	f7ff fff0 	bl	800b05c <__sinit_lock_acquire>
 800b07c:	69a3      	ldr	r3, [r4, #24]
 800b07e:	b11b      	cbz	r3, 800b088 <__sinit+0x14>
 800b080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b084:	f7ff bff0 	b.w	800b068 <__sinit_lock_release>
 800b088:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b08c:	6523      	str	r3, [r4, #80]	; 0x50
 800b08e:	4b13      	ldr	r3, [pc, #76]	; (800b0dc <__sinit+0x68>)
 800b090:	4a13      	ldr	r2, [pc, #76]	; (800b0e0 <__sinit+0x6c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	62a2      	str	r2, [r4, #40]	; 0x28
 800b096:	42a3      	cmp	r3, r4
 800b098:	bf04      	itt	eq
 800b09a:	2301      	moveq	r3, #1
 800b09c:	61a3      	streq	r3, [r4, #24]
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 f820 	bl	800b0e4 <__sfp>
 800b0a4:	6060      	str	r0, [r4, #4]
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f000 f81c 	bl	800b0e4 <__sfp>
 800b0ac:	60a0      	str	r0, [r4, #8]
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 f818 	bl	800b0e4 <__sfp>
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	60e0      	str	r0, [r4, #12]
 800b0b8:	2104      	movs	r1, #4
 800b0ba:	6860      	ldr	r0, [r4, #4]
 800b0bc:	f7ff ff82 	bl	800afc4 <std>
 800b0c0:	68a0      	ldr	r0, [r4, #8]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	2109      	movs	r1, #9
 800b0c6:	f7ff ff7d 	bl	800afc4 <std>
 800b0ca:	68e0      	ldr	r0, [r4, #12]
 800b0cc:	2202      	movs	r2, #2
 800b0ce:	2112      	movs	r1, #18
 800b0d0:	f7ff ff78 	bl	800afc4 <std>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	61a3      	str	r3, [r4, #24]
 800b0d8:	e7d2      	b.n	800b080 <__sinit+0xc>
 800b0da:	bf00      	nop
 800b0dc:	08023b40 	.word	0x08023b40
 800b0e0:	0800b00d 	.word	0x0800b00d

0800b0e4 <__sfp>:
 800b0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e6:	4607      	mov	r7, r0
 800b0e8:	f7ff ffac 	bl	800b044 <__sfp_lock_acquire>
 800b0ec:	4b1e      	ldr	r3, [pc, #120]	; (800b168 <__sfp+0x84>)
 800b0ee:	681e      	ldr	r6, [r3, #0]
 800b0f0:	69b3      	ldr	r3, [r6, #24]
 800b0f2:	b913      	cbnz	r3, 800b0fa <__sfp+0x16>
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	f7ff ffbd 	bl	800b074 <__sinit>
 800b0fa:	3648      	adds	r6, #72	; 0x48
 800b0fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b100:	3b01      	subs	r3, #1
 800b102:	d503      	bpl.n	800b10c <__sfp+0x28>
 800b104:	6833      	ldr	r3, [r6, #0]
 800b106:	b30b      	cbz	r3, 800b14c <__sfp+0x68>
 800b108:	6836      	ldr	r6, [r6, #0]
 800b10a:	e7f7      	b.n	800b0fc <__sfp+0x18>
 800b10c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b110:	b9d5      	cbnz	r5, 800b148 <__sfp+0x64>
 800b112:	4b16      	ldr	r3, [pc, #88]	; (800b16c <__sfp+0x88>)
 800b114:	60e3      	str	r3, [r4, #12]
 800b116:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b11a:	6665      	str	r5, [r4, #100]	; 0x64
 800b11c:	f000 fbba 	bl	800b894 <__retarget_lock_init_recursive>
 800b120:	f7ff ff96 	bl	800b050 <__sfp_lock_release>
 800b124:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b128:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b12c:	6025      	str	r5, [r4, #0]
 800b12e:	61a5      	str	r5, [r4, #24]
 800b130:	2208      	movs	r2, #8
 800b132:	4629      	mov	r1, r5
 800b134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b138:	f7fc ffe6 	bl	8008108 <memset>
 800b13c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b144:	4620      	mov	r0, r4
 800b146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b148:	3468      	adds	r4, #104	; 0x68
 800b14a:	e7d9      	b.n	800b100 <__sfp+0x1c>
 800b14c:	2104      	movs	r1, #4
 800b14e:	4638      	mov	r0, r7
 800b150:	f7ff ff62 	bl	800b018 <__sfmoreglue>
 800b154:	4604      	mov	r4, r0
 800b156:	6030      	str	r0, [r6, #0]
 800b158:	2800      	cmp	r0, #0
 800b15a:	d1d5      	bne.n	800b108 <__sfp+0x24>
 800b15c:	f7ff ff78 	bl	800b050 <__sfp_lock_release>
 800b160:	230c      	movs	r3, #12
 800b162:	603b      	str	r3, [r7, #0]
 800b164:	e7ee      	b.n	800b144 <__sfp+0x60>
 800b166:	bf00      	nop
 800b168:	08023b40 	.word	0x08023b40
 800b16c:	ffff0001 	.word	0xffff0001

0800b170 <_fwalk_reent>:
 800b170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b174:	4606      	mov	r6, r0
 800b176:	4688      	mov	r8, r1
 800b178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b17c:	2700      	movs	r7, #0
 800b17e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b182:	f1b9 0901 	subs.w	r9, r9, #1
 800b186:	d505      	bpl.n	800b194 <_fwalk_reent+0x24>
 800b188:	6824      	ldr	r4, [r4, #0]
 800b18a:	2c00      	cmp	r4, #0
 800b18c:	d1f7      	bne.n	800b17e <_fwalk_reent+0xe>
 800b18e:	4638      	mov	r0, r7
 800b190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b194:	89ab      	ldrh	r3, [r5, #12]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d907      	bls.n	800b1aa <_fwalk_reent+0x3a>
 800b19a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	d003      	beq.n	800b1aa <_fwalk_reent+0x3a>
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	47c0      	blx	r8
 800b1a8:	4307      	orrs	r7, r0
 800b1aa:	3568      	adds	r5, #104	; 0x68
 800b1ac:	e7e9      	b.n	800b182 <_fwalk_reent+0x12>

0800b1ae <rshift>:
 800b1ae:	6903      	ldr	r3, [r0, #16]
 800b1b0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b1b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b1b8:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b1bc:	f100 0414 	add.w	r4, r0, #20
 800b1c0:	dd45      	ble.n	800b24e <rshift+0xa0>
 800b1c2:	f011 011f 	ands.w	r1, r1, #31
 800b1c6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b1ca:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b1ce:	d10c      	bne.n	800b1ea <rshift+0x3c>
 800b1d0:	f100 0710 	add.w	r7, r0, #16
 800b1d4:	4629      	mov	r1, r5
 800b1d6:	42b1      	cmp	r1, r6
 800b1d8:	d334      	bcc.n	800b244 <rshift+0x96>
 800b1da:	1a9b      	subs	r3, r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	1eea      	subs	r2, r5, #3
 800b1e0:	4296      	cmp	r6, r2
 800b1e2:	bf38      	it	cc
 800b1e4:	2300      	movcc	r3, #0
 800b1e6:	4423      	add	r3, r4
 800b1e8:	e015      	b.n	800b216 <rshift+0x68>
 800b1ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b1ee:	f1c1 0820 	rsb	r8, r1, #32
 800b1f2:	40cf      	lsrs	r7, r1
 800b1f4:	f105 0e04 	add.w	lr, r5, #4
 800b1f8:	46a1      	mov	r9, r4
 800b1fa:	4576      	cmp	r6, lr
 800b1fc:	46f4      	mov	ip, lr
 800b1fe:	d815      	bhi.n	800b22c <rshift+0x7e>
 800b200:	1a9b      	subs	r3, r3, r2
 800b202:	009a      	lsls	r2, r3, #2
 800b204:	3a04      	subs	r2, #4
 800b206:	3501      	adds	r5, #1
 800b208:	42ae      	cmp	r6, r5
 800b20a:	bf38      	it	cc
 800b20c:	2200      	movcc	r2, #0
 800b20e:	18a3      	adds	r3, r4, r2
 800b210:	50a7      	str	r7, [r4, r2]
 800b212:	b107      	cbz	r7, 800b216 <rshift+0x68>
 800b214:	3304      	adds	r3, #4
 800b216:	1b1a      	subs	r2, r3, r4
 800b218:	42a3      	cmp	r3, r4
 800b21a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b21e:	bf08      	it	eq
 800b220:	2300      	moveq	r3, #0
 800b222:	6102      	str	r2, [r0, #16]
 800b224:	bf08      	it	eq
 800b226:	6143      	streq	r3, [r0, #20]
 800b228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b22c:	f8dc c000 	ldr.w	ip, [ip]
 800b230:	fa0c fc08 	lsl.w	ip, ip, r8
 800b234:	ea4c 0707 	orr.w	r7, ip, r7
 800b238:	f849 7b04 	str.w	r7, [r9], #4
 800b23c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b240:	40cf      	lsrs	r7, r1
 800b242:	e7da      	b.n	800b1fa <rshift+0x4c>
 800b244:	f851 cb04 	ldr.w	ip, [r1], #4
 800b248:	f847 cf04 	str.w	ip, [r7, #4]!
 800b24c:	e7c3      	b.n	800b1d6 <rshift+0x28>
 800b24e:	4623      	mov	r3, r4
 800b250:	e7e1      	b.n	800b216 <rshift+0x68>

0800b252 <__hexdig_fun>:
 800b252:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b256:	2b09      	cmp	r3, #9
 800b258:	d802      	bhi.n	800b260 <__hexdig_fun+0xe>
 800b25a:	3820      	subs	r0, #32
 800b25c:	b2c0      	uxtb	r0, r0
 800b25e:	4770      	bx	lr
 800b260:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b264:	2b05      	cmp	r3, #5
 800b266:	d801      	bhi.n	800b26c <__hexdig_fun+0x1a>
 800b268:	3847      	subs	r0, #71	; 0x47
 800b26a:	e7f7      	b.n	800b25c <__hexdig_fun+0xa>
 800b26c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b270:	2b05      	cmp	r3, #5
 800b272:	d801      	bhi.n	800b278 <__hexdig_fun+0x26>
 800b274:	3827      	subs	r0, #39	; 0x27
 800b276:	e7f1      	b.n	800b25c <__hexdig_fun+0xa>
 800b278:	2000      	movs	r0, #0
 800b27a:	4770      	bx	lr

0800b27c <__gethex>:
 800b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b280:	ed2d 8b02 	vpush	{d8}
 800b284:	b089      	sub	sp, #36	; 0x24
 800b286:	ee08 0a10 	vmov	s16, r0
 800b28a:	9304      	str	r3, [sp, #16]
 800b28c:	4bbc      	ldr	r3, [pc, #752]	; (800b580 <__gethex+0x304>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	9301      	str	r3, [sp, #4]
 800b292:	4618      	mov	r0, r3
 800b294:	468b      	mov	fp, r1
 800b296:	4690      	mov	r8, r2
 800b298:	f7f4 ffaa 	bl	80001f0 <strlen>
 800b29c:	9b01      	ldr	r3, [sp, #4]
 800b29e:	f8db 2000 	ldr.w	r2, [fp]
 800b2a2:	4403      	add	r3, r0
 800b2a4:	4682      	mov	sl, r0
 800b2a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b2aa:	9305      	str	r3, [sp, #20]
 800b2ac:	1c93      	adds	r3, r2, #2
 800b2ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b2b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b2b6:	32fe      	adds	r2, #254	; 0xfe
 800b2b8:	18d1      	adds	r1, r2, r3
 800b2ba:	461f      	mov	r7, r3
 800b2bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b2c0:	9100      	str	r1, [sp, #0]
 800b2c2:	2830      	cmp	r0, #48	; 0x30
 800b2c4:	d0f8      	beq.n	800b2b8 <__gethex+0x3c>
 800b2c6:	f7ff ffc4 	bl	800b252 <__hexdig_fun>
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d13a      	bne.n	800b346 <__gethex+0xca>
 800b2d0:	9901      	ldr	r1, [sp, #4]
 800b2d2:	4652      	mov	r2, sl
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	f001 fb56 	bl	800c986 <strncmp>
 800b2da:	4605      	mov	r5, r0
 800b2dc:	2800      	cmp	r0, #0
 800b2de:	d168      	bne.n	800b3b2 <__gethex+0x136>
 800b2e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b2e4:	eb07 060a 	add.w	r6, r7, sl
 800b2e8:	f7ff ffb3 	bl	800b252 <__hexdig_fun>
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d062      	beq.n	800b3b6 <__gethex+0x13a>
 800b2f0:	4633      	mov	r3, r6
 800b2f2:	7818      	ldrb	r0, [r3, #0]
 800b2f4:	2830      	cmp	r0, #48	; 0x30
 800b2f6:	461f      	mov	r7, r3
 800b2f8:	f103 0301 	add.w	r3, r3, #1
 800b2fc:	d0f9      	beq.n	800b2f2 <__gethex+0x76>
 800b2fe:	f7ff ffa8 	bl	800b252 <__hexdig_fun>
 800b302:	2301      	movs	r3, #1
 800b304:	fab0 f480 	clz	r4, r0
 800b308:	0964      	lsrs	r4, r4, #5
 800b30a:	4635      	mov	r5, r6
 800b30c:	9300      	str	r3, [sp, #0]
 800b30e:	463a      	mov	r2, r7
 800b310:	4616      	mov	r6, r2
 800b312:	3201      	adds	r2, #1
 800b314:	7830      	ldrb	r0, [r6, #0]
 800b316:	f7ff ff9c 	bl	800b252 <__hexdig_fun>
 800b31a:	2800      	cmp	r0, #0
 800b31c:	d1f8      	bne.n	800b310 <__gethex+0x94>
 800b31e:	9901      	ldr	r1, [sp, #4]
 800b320:	4652      	mov	r2, sl
 800b322:	4630      	mov	r0, r6
 800b324:	f001 fb2f 	bl	800c986 <strncmp>
 800b328:	b980      	cbnz	r0, 800b34c <__gethex+0xd0>
 800b32a:	b94d      	cbnz	r5, 800b340 <__gethex+0xc4>
 800b32c:	eb06 050a 	add.w	r5, r6, sl
 800b330:	462a      	mov	r2, r5
 800b332:	4616      	mov	r6, r2
 800b334:	3201      	adds	r2, #1
 800b336:	7830      	ldrb	r0, [r6, #0]
 800b338:	f7ff ff8b 	bl	800b252 <__hexdig_fun>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d1f8      	bne.n	800b332 <__gethex+0xb6>
 800b340:	1bad      	subs	r5, r5, r6
 800b342:	00ad      	lsls	r5, r5, #2
 800b344:	e004      	b.n	800b350 <__gethex+0xd4>
 800b346:	2400      	movs	r4, #0
 800b348:	4625      	mov	r5, r4
 800b34a:	e7e0      	b.n	800b30e <__gethex+0x92>
 800b34c:	2d00      	cmp	r5, #0
 800b34e:	d1f7      	bne.n	800b340 <__gethex+0xc4>
 800b350:	7833      	ldrb	r3, [r6, #0]
 800b352:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b356:	2b50      	cmp	r3, #80	; 0x50
 800b358:	d13b      	bne.n	800b3d2 <__gethex+0x156>
 800b35a:	7873      	ldrb	r3, [r6, #1]
 800b35c:	2b2b      	cmp	r3, #43	; 0x2b
 800b35e:	d02c      	beq.n	800b3ba <__gethex+0x13e>
 800b360:	2b2d      	cmp	r3, #45	; 0x2d
 800b362:	d02e      	beq.n	800b3c2 <__gethex+0x146>
 800b364:	1c71      	adds	r1, r6, #1
 800b366:	f04f 0900 	mov.w	r9, #0
 800b36a:	7808      	ldrb	r0, [r1, #0]
 800b36c:	f7ff ff71 	bl	800b252 <__hexdig_fun>
 800b370:	1e43      	subs	r3, r0, #1
 800b372:	b2db      	uxtb	r3, r3
 800b374:	2b18      	cmp	r3, #24
 800b376:	d82c      	bhi.n	800b3d2 <__gethex+0x156>
 800b378:	f1a0 0210 	sub.w	r2, r0, #16
 800b37c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b380:	f7ff ff67 	bl	800b252 <__hexdig_fun>
 800b384:	1e43      	subs	r3, r0, #1
 800b386:	b2db      	uxtb	r3, r3
 800b388:	2b18      	cmp	r3, #24
 800b38a:	d91d      	bls.n	800b3c8 <__gethex+0x14c>
 800b38c:	f1b9 0f00 	cmp.w	r9, #0
 800b390:	d000      	beq.n	800b394 <__gethex+0x118>
 800b392:	4252      	negs	r2, r2
 800b394:	4415      	add	r5, r2
 800b396:	f8cb 1000 	str.w	r1, [fp]
 800b39a:	b1e4      	cbz	r4, 800b3d6 <__gethex+0x15a>
 800b39c:	9b00      	ldr	r3, [sp, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	bf14      	ite	ne
 800b3a2:	2700      	movne	r7, #0
 800b3a4:	2706      	moveq	r7, #6
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	b009      	add	sp, #36	; 0x24
 800b3aa:	ecbd 8b02 	vpop	{d8}
 800b3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3b2:	463e      	mov	r6, r7
 800b3b4:	4625      	mov	r5, r4
 800b3b6:	2401      	movs	r4, #1
 800b3b8:	e7ca      	b.n	800b350 <__gethex+0xd4>
 800b3ba:	f04f 0900 	mov.w	r9, #0
 800b3be:	1cb1      	adds	r1, r6, #2
 800b3c0:	e7d3      	b.n	800b36a <__gethex+0xee>
 800b3c2:	f04f 0901 	mov.w	r9, #1
 800b3c6:	e7fa      	b.n	800b3be <__gethex+0x142>
 800b3c8:	230a      	movs	r3, #10
 800b3ca:	fb03 0202 	mla	r2, r3, r2, r0
 800b3ce:	3a10      	subs	r2, #16
 800b3d0:	e7d4      	b.n	800b37c <__gethex+0x100>
 800b3d2:	4631      	mov	r1, r6
 800b3d4:	e7df      	b.n	800b396 <__gethex+0x11a>
 800b3d6:	1bf3      	subs	r3, r6, r7
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	4621      	mov	r1, r4
 800b3dc:	2b07      	cmp	r3, #7
 800b3de:	dc0b      	bgt.n	800b3f8 <__gethex+0x17c>
 800b3e0:	ee18 0a10 	vmov	r0, s16
 800b3e4:	f000 fadc 	bl	800b9a0 <_Balloc>
 800b3e8:	4604      	mov	r4, r0
 800b3ea:	b940      	cbnz	r0, 800b3fe <__gethex+0x182>
 800b3ec:	4b65      	ldr	r3, [pc, #404]	; (800b584 <__gethex+0x308>)
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	21de      	movs	r1, #222	; 0xde
 800b3f2:	4865      	ldr	r0, [pc, #404]	; (800b588 <__gethex+0x30c>)
 800b3f4:	f001 faf8 	bl	800c9e8 <__assert_func>
 800b3f8:	3101      	adds	r1, #1
 800b3fa:	105b      	asrs	r3, r3, #1
 800b3fc:	e7ee      	b.n	800b3dc <__gethex+0x160>
 800b3fe:	f100 0914 	add.w	r9, r0, #20
 800b402:	f04f 0b00 	mov.w	fp, #0
 800b406:	f1ca 0301 	rsb	r3, sl, #1
 800b40a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b40e:	f8cd b000 	str.w	fp, [sp]
 800b412:	9306      	str	r3, [sp, #24]
 800b414:	42b7      	cmp	r7, r6
 800b416:	d340      	bcc.n	800b49a <__gethex+0x21e>
 800b418:	9802      	ldr	r0, [sp, #8]
 800b41a:	9b00      	ldr	r3, [sp, #0]
 800b41c:	f840 3b04 	str.w	r3, [r0], #4
 800b420:	eba0 0009 	sub.w	r0, r0, r9
 800b424:	1080      	asrs	r0, r0, #2
 800b426:	0146      	lsls	r6, r0, #5
 800b428:	6120      	str	r0, [r4, #16]
 800b42a:	4618      	mov	r0, r3
 800b42c:	f000 fbae 	bl	800bb8c <__hi0bits>
 800b430:	1a30      	subs	r0, r6, r0
 800b432:	f8d8 6000 	ldr.w	r6, [r8]
 800b436:	42b0      	cmp	r0, r6
 800b438:	dd63      	ble.n	800b502 <__gethex+0x286>
 800b43a:	1b87      	subs	r7, r0, r6
 800b43c:	4639      	mov	r1, r7
 800b43e:	4620      	mov	r0, r4
 800b440:	f000 ff48 	bl	800c2d4 <__any_on>
 800b444:	4682      	mov	sl, r0
 800b446:	b1a8      	cbz	r0, 800b474 <__gethex+0x1f8>
 800b448:	1e7b      	subs	r3, r7, #1
 800b44a:	1159      	asrs	r1, r3, #5
 800b44c:	f003 021f 	and.w	r2, r3, #31
 800b450:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b454:	f04f 0a01 	mov.w	sl, #1
 800b458:	fa0a f202 	lsl.w	r2, sl, r2
 800b45c:	420a      	tst	r2, r1
 800b45e:	d009      	beq.n	800b474 <__gethex+0x1f8>
 800b460:	4553      	cmp	r3, sl
 800b462:	dd05      	ble.n	800b470 <__gethex+0x1f4>
 800b464:	1eb9      	subs	r1, r7, #2
 800b466:	4620      	mov	r0, r4
 800b468:	f000 ff34 	bl	800c2d4 <__any_on>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	d145      	bne.n	800b4fc <__gethex+0x280>
 800b470:	f04f 0a02 	mov.w	sl, #2
 800b474:	4639      	mov	r1, r7
 800b476:	4620      	mov	r0, r4
 800b478:	f7ff fe99 	bl	800b1ae <rshift>
 800b47c:	443d      	add	r5, r7
 800b47e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b482:	42ab      	cmp	r3, r5
 800b484:	da4c      	bge.n	800b520 <__gethex+0x2a4>
 800b486:	ee18 0a10 	vmov	r0, s16
 800b48a:	4621      	mov	r1, r4
 800b48c:	f000 fac8 	bl	800ba20 <_Bfree>
 800b490:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b492:	2300      	movs	r3, #0
 800b494:	6013      	str	r3, [r2, #0]
 800b496:	27a3      	movs	r7, #163	; 0xa3
 800b498:	e785      	b.n	800b3a6 <__gethex+0x12a>
 800b49a:	1e73      	subs	r3, r6, #1
 800b49c:	9a05      	ldr	r2, [sp, #20]
 800b49e:	9303      	str	r3, [sp, #12]
 800b4a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d019      	beq.n	800b4dc <__gethex+0x260>
 800b4a8:	f1bb 0f20 	cmp.w	fp, #32
 800b4ac:	d107      	bne.n	800b4be <__gethex+0x242>
 800b4ae:	9b02      	ldr	r3, [sp, #8]
 800b4b0:	9a00      	ldr	r2, [sp, #0]
 800b4b2:	f843 2b04 	str.w	r2, [r3], #4
 800b4b6:	9302      	str	r3, [sp, #8]
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	469b      	mov	fp, r3
 800b4be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b4c2:	f7ff fec6 	bl	800b252 <__hexdig_fun>
 800b4c6:	9b00      	ldr	r3, [sp, #0]
 800b4c8:	f000 000f 	and.w	r0, r0, #15
 800b4cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800b4d0:	4303      	orrs	r3, r0
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	f10b 0b04 	add.w	fp, fp, #4
 800b4d8:	9b03      	ldr	r3, [sp, #12]
 800b4da:	e00d      	b.n	800b4f8 <__gethex+0x27c>
 800b4dc:	9b03      	ldr	r3, [sp, #12]
 800b4de:	9a06      	ldr	r2, [sp, #24]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	42bb      	cmp	r3, r7
 800b4e4:	d3e0      	bcc.n	800b4a8 <__gethex+0x22c>
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	9901      	ldr	r1, [sp, #4]
 800b4ea:	9307      	str	r3, [sp, #28]
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	f001 fa4a 	bl	800c986 <strncmp>
 800b4f2:	9b07      	ldr	r3, [sp, #28]
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d1d7      	bne.n	800b4a8 <__gethex+0x22c>
 800b4f8:	461e      	mov	r6, r3
 800b4fa:	e78b      	b.n	800b414 <__gethex+0x198>
 800b4fc:	f04f 0a03 	mov.w	sl, #3
 800b500:	e7b8      	b.n	800b474 <__gethex+0x1f8>
 800b502:	da0a      	bge.n	800b51a <__gethex+0x29e>
 800b504:	1a37      	subs	r7, r6, r0
 800b506:	4621      	mov	r1, r4
 800b508:	ee18 0a10 	vmov	r0, s16
 800b50c:	463a      	mov	r2, r7
 800b50e:	f000 fca3 	bl	800be58 <__lshift>
 800b512:	1bed      	subs	r5, r5, r7
 800b514:	4604      	mov	r4, r0
 800b516:	f100 0914 	add.w	r9, r0, #20
 800b51a:	f04f 0a00 	mov.w	sl, #0
 800b51e:	e7ae      	b.n	800b47e <__gethex+0x202>
 800b520:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b524:	42a8      	cmp	r0, r5
 800b526:	dd72      	ble.n	800b60e <__gethex+0x392>
 800b528:	1b45      	subs	r5, r0, r5
 800b52a:	42ae      	cmp	r6, r5
 800b52c:	dc36      	bgt.n	800b59c <__gethex+0x320>
 800b52e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b532:	2b02      	cmp	r3, #2
 800b534:	d02a      	beq.n	800b58c <__gethex+0x310>
 800b536:	2b03      	cmp	r3, #3
 800b538:	d02c      	beq.n	800b594 <__gethex+0x318>
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d115      	bne.n	800b56a <__gethex+0x2ee>
 800b53e:	42ae      	cmp	r6, r5
 800b540:	d113      	bne.n	800b56a <__gethex+0x2ee>
 800b542:	2e01      	cmp	r6, #1
 800b544:	d10b      	bne.n	800b55e <__gethex+0x2e2>
 800b546:	9a04      	ldr	r2, [sp, #16]
 800b548:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b54c:	6013      	str	r3, [r2, #0]
 800b54e:	2301      	movs	r3, #1
 800b550:	6123      	str	r3, [r4, #16]
 800b552:	f8c9 3000 	str.w	r3, [r9]
 800b556:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b558:	2762      	movs	r7, #98	; 0x62
 800b55a:	601c      	str	r4, [r3, #0]
 800b55c:	e723      	b.n	800b3a6 <__gethex+0x12a>
 800b55e:	1e71      	subs	r1, r6, #1
 800b560:	4620      	mov	r0, r4
 800b562:	f000 feb7 	bl	800c2d4 <__any_on>
 800b566:	2800      	cmp	r0, #0
 800b568:	d1ed      	bne.n	800b546 <__gethex+0x2ca>
 800b56a:	ee18 0a10 	vmov	r0, s16
 800b56e:	4621      	mov	r1, r4
 800b570:	f000 fa56 	bl	800ba20 <_Bfree>
 800b574:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b576:	2300      	movs	r3, #0
 800b578:	6013      	str	r3, [r2, #0]
 800b57a:	2750      	movs	r7, #80	; 0x50
 800b57c:	e713      	b.n	800b3a6 <__gethex+0x12a>
 800b57e:	bf00      	nop
 800b580:	08023e30 	.word	0x08023e30
 800b584:	08023d54 	.word	0x08023d54
 800b588:	08023dc8 	.word	0x08023dc8
 800b58c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1eb      	bne.n	800b56a <__gethex+0x2ee>
 800b592:	e7d8      	b.n	800b546 <__gethex+0x2ca>
 800b594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1d5      	bne.n	800b546 <__gethex+0x2ca>
 800b59a:	e7e6      	b.n	800b56a <__gethex+0x2ee>
 800b59c:	1e6f      	subs	r7, r5, #1
 800b59e:	f1ba 0f00 	cmp.w	sl, #0
 800b5a2:	d131      	bne.n	800b608 <__gethex+0x38c>
 800b5a4:	b127      	cbz	r7, 800b5b0 <__gethex+0x334>
 800b5a6:	4639      	mov	r1, r7
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 fe93 	bl	800c2d4 <__any_on>
 800b5ae:	4682      	mov	sl, r0
 800b5b0:	117b      	asrs	r3, r7, #5
 800b5b2:	2101      	movs	r1, #1
 800b5b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b5b8:	f007 071f 	and.w	r7, r7, #31
 800b5bc:	fa01 f707 	lsl.w	r7, r1, r7
 800b5c0:	421f      	tst	r7, r3
 800b5c2:	4629      	mov	r1, r5
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	bf18      	it	ne
 800b5c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800b5cc:	1b76      	subs	r6, r6, r5
 800b5ce:	f7ff fdee 	bl	800b1ae <rshift>
 800b5d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b5d6:	2702      	movs	r7, #2
 800b5d8:	f1ba 0f00 	cmp.w	sl, #0
 800b5dc:	d048      	beq.n	800b670 <__gethex+0x3f4>
 800b5de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d015      	beq.n	800b612 <__gethex+0x396>
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d017      	beq.n	800b61a <__gethex+0x39e>
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d109      	bne.n	800b602 <__gethex+0x386>
 800b5ee:	f01a 0f02 	tst.w	sl, #2
 800b5f2:	d006      	beq.n	800b602 <__gethex+0x386>
 800b5f4:	f8d9 0000 	ldr.w	r0, [r9]
 800b5f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b5fc:	f01a 0f01 	tst.w	sl, #1
 800b600:	d10e      	bne.n	800b620 <__gethex+0x3a4>
 800b602:	f047 0710 	orr.w	r7, r7, #16
 800b606:	e033      	b.n	800b670 <__gethex+0x3f4>
 800b608:	f04f 0a01 	mov.w	sl, #1
 800b60c:	e7d0      	b.n	800b5b0 <__gethex+0x334>
 800b60e:	2701      	movs	r7, #1
 800b610:	e7e2      	b.n	800b5d8 <__gethex+0x35c>
 800b612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b614:	f1c3 0301 	rsb	r3, r3, #1
 800b618:	9315      	str	r3, [sp, #84]	; 0x54
 800b61a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d0f0      	beq.n	800b602 <__gethex+0x386>
 800b620:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b624:	f104 0314 	add.w	r3, r4, #20
 800b628:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b62c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b630:	f04f 0c00 	mov.w	ip, #0
 800b634:	4618      	mov	r0, r3
 800b636:	f853 2b04 	ldr.w	r2, [r3], #4
 800b63a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800b63e:	d01c      	beq.n	800b67a <__gethex+0x3fe>
 800b640:	3201      	adds	r2, #1
 800b642:	6002      	str	r2, [r0, #0]
 800b644:	2f02      	cmp	r7, #2
 800b646:	f104 0314 	add.w	r3, r4, #20
 800b64a:	d13f      	bne.n	800b6cc <__gethex+0x450>
 800b64c:	f8d8 2000 	ldr.w	r2, [r8]
 800b650:	3a01      	subs	r2, #1
 800b652:	42b2      	cmp	r2, r6
 800b654:	d10a      	bne.n	800b66c <__gethex+0x3f0>
 800b656:	1171      	asrs	r1, r6, #5
 800b658:	2201      	movs	r2, #1
 800b65a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b65e:	f006 061f 	and.w	r6, r6, #31
 800b662:	fa02 f606 	lsl.w	r6, r2, r6
 800b666:	421e      	tst	r6, r3
 800b668:	bf18      	it	ne
 800b66a:	4617      	movne	r7, r2
 800b66c:	f047 0720 	orr.w	r7, r7, #32
 800b670:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b672:	601c      	str	r4, [r3, #0]
 800b674:	9b04      	ldr	r3, [sp, #16]
 800b676:	601d      	str	r5, [r3, #0]
 800b678:	e695      	b.n	800b3a6 <__gethex+0x12a>
 800b67a:	4299      	cmp	r1, r3
 800b67c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b680:	d8d8      	bhi.n	800b634 <__gethex+0x3b8>
 800b682:	68a3      	ldr	r3, [r4, #8]
 800b684:	459b      	cmp	fp, r3
 800b686:	db19      	blt.n	800b6bc <__gethex+0x440>
 800b688:	6861      	ldr	r1, [r4, #4]
 800b68a:	ee18 0a10 	vmov	r0, s16
 800b68e:	3101      	adds	r1, #1
 800b690:	f000 f986 	bl	800b9a0 <_Balloc>
 800b694:	4681      	mov	r9, r0
 800b696:	b918      	cbnz	r0, 800b6a0 <__gethex+0x424>
 800b698:	4b1a      	ldr	r3, [pc, #104]	; (800b704 <__gethex+0x488>)
 800b69a:	4602      	mov	r2, r0
 800b69c:	2184      	movs	r1, #132	; 0x84
 800b69e:	e6a8      	b.n	800b3f2 <__gethex+0x176>
 800b6a0:	6922      	ldr	r2, [r4, #16]
 800b6a2:	3202      	adds	r2, #2
 800b6a4:	f104 010c 	add.w	r1, r4, #12
 800b6a8:	0092      	lsls	r2, r2, #2
 800b6aa:	300c      	adds	r0, #12
 800b6ac:	f7fc fd1e 	bl	80080ec <memcpy>
 800b6b0:	4621      	mov	r1, r4
 800b6b2:	ee18 0a10 	vmov	r0, s16
 800b6b6:	f000 f9b3 	bl	800ba20 <_Bfree>
 800b6ba:	464c      	mov	r4, r9
 800b6bc:	6923      	ldr	r3, [r4, #16]
 800b6be:	1c5a      	adds	r2, r3, #1
 800b6c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6c4:	6122      	str	r2, [r4, #16]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	615a      	str	r2, [r3, #20]
 800b6ca:	e7bb      	b.n	800b644 <__gethex+0x3c8>
 800b6cc:	6922      	ldr	r2, [r4, #16]
 800b6ce:	455a      	cmp	r2, fp
 800b6d0:	dd0b      	ble.n	800b6ea <__gethex+0x46e>
 800b6d2:	2101      	movs	r1, #1
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f7ff fd6a 	bl	800b1ae <rshift>
 800b6da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6de:	3501      	adds	r5, #1
 800b6e0:	42ab      	cmp	r3, r5
 800b6e2:	f6ff aed0 	blt.w	800b486 <__gethex+0x20a>
 800b6e6:	2701      	movs	r7, #1
 800b6e8:	e7c0      	b.n	800b66c <__gethex+0x3f0>
 800b6ea:	f016 061f 	ands.w	r6, r6, #31
 800b6ee:	d0fa      	beq.n	800b6e6 <__gethex+0x46a>
 800b6f0:	449a      	add	sl, r3
 800b6f2:	f1c6 0620 	rsb	r6, r6, #32
 800b6f6:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b6fa:	f000 fa47 	bl	800bb8c <__hi0bits>
 800b6fe:	42b0      	cmp	r0, r6
 800b700:	dbe7      	blt.n	800b6d2 <__gethex+0x456>
 800b702:	e7f0      	b.n	800b6e6 <__gethex+0x46a>
 800b704:	08023d54 	.word	0x08023d54

0800b708 <L_shift>:
 800b708:	f1c2 0208 	rsb	r2, r2, #8
 800b70c:	0092      	lsls	r2, r2, #2
 800b70e:	b570      	push	{r4, r5, r6, lr}
 800b710:	f1c2 0620 	rsb	r6, r2, #32
 800b714:	6843      	ldr	r3, [r0, #4]
 800b716:	6804      	ldr	r4, [r0, #0]
 800b718:	fa03 f506 	lsl.w	r5, r3, r6
 800b71c:	432c      	orrs	r4, r5
 800b71e:	40d3      	lsrs	r3, r2
 800b720:	6004      	str	r4, [r0, #0]
 800b722:	f840 3f04 	str.w	r3, [r0, #4]!
 800b726:	4288      	cmp	r0, r1
 800b728:	d3f4      	bcc.n	800b714 <L_shift+0xc>
 800b72a:	bd70      	pop	{r4, r5, r6, pc}

0800b72c <__match>:
 800b72c:	b530      	push	{r4, r5, lr}
 800b72e:	6803      	ldr	r3, [r0, #0]
 800b730:	3301      	adds	r3, #1
 800b732:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b736:	b914      	cbnz	r4, 800b73e <__match+0x12>
 800b738:	6003      	str	r3, [r0, #0]
 800b73a:	2001      	movs	r0, #1
 800b73c:	bd30      	pop	{r4, r5, pc}
 800b73e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b742:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b746:	2d19      	cmp	r5, #25
 800b748:	bf98      	it	ls
 800b74a:	3220      	addls	r2, #32
 800b74c:	42a2      	cmp	r2, r4
 800b74e:	d0f0      	beq.n	800b732 <__match+0x6>
 800b750:	2000      	movs	r0, #0
 800b752:	e7f3      	b.n	800b73c <__match+0x10>

0800b754 <__hexnan>:
 800b754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b758:	680b      	ldr	r3, [r1, #0]
 800b75a:	6801      	ldr	r1, [r0, #0]
 800b75c:	115e      	asrs	r6, r3, #5
 800b75e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b762:	f013 031f 	ands.w	r3, r3, #31
 800b766:	b087      	sub	sp, #28
 800b768:	bf18      	it	ne
 800b76a:	3604      	addne	r6, #4
 800b76c:	2500      	movs	r5, #0
 800b76e:	1f37      	subs	r7, r6, #4
 800b770:	4682      	mov	sl, r0
 800b772:	4690      	mov	r8, r2
 800b774:	9301      	str	r3, [sp, #4]
 800b776:	f846 5c04 	str.w	r5, [r6, #-4]
 800b77a:	46b9      	mov	r9, r7
 800b77c:	463c      	mov	r4, r7
 800b77e:	9502      	str	r5, [sp, #8]
 800b780:	46ab      	mov	fp, r5
 800b782:	784a      	ldrb	r2, [r1, #1]
 800b784:	1c4b      	adds	r3, r1, #1
 800b786:	9303      	str	r3, [sp, #12]
 800b788:	b342      	cbz	r2, 800b7dc <__hexnan+0x88>
 800b78a:	4610      	mov	r0, r2
 800b78c:	9105      	str	r1, [sp, #20]
 800b78e:	9204      	str	r2, [sp, #16]
 800b790:	f7ff fd5f 	bl	800b252 <__hexdig_fun>
 800b794:	2800      	cmp	r0, #0
 800b796:	d14f      	bne.n	800b838 <__hexnan+0xe4>
 800b798:	9a04      	ldr	r2, [sp, #16]
 800b79a:	9905      	ldr	r1, [sp, #20]
 800b79c:	2a20      	cmp	r2, #32
 800b79e:	d818      	bhi.n	800b7d2 <__hexnan+0x7e>
 800b7a0:	9b02      	ldr	r3, [sp, #8]
 800b7a2:	459b      	cmp	fp, r3
 800b7a4:	dd13      	ble.n	800b7ce <__hexnan+0x7a>
 800b7a6:	454c      	cmp	r4, r9
 800b7a8:	d206      	bcs.n	800b7b8 <__hexnan+0x64>
 800b7aa:	2d07      	cmp	r5, #7
 800b7ac:	dc04      	bgt.n	800b7b8 <__hexnan+0x64>
 800b7ae:	462a      	mov	r2, r5
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f7ff ffa8 	bl	800b708 <L_shift>
 800b7b8:	4544      	cmp	r4, r8
 800b7ba:	d950      	bls.n	800b85e <__hexnan+0x10a>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f1a4 0904 	sub.w	r9, r4, #4
 800b7c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7c6:	f8cd b008 	str.w	fp, [sp, #8]
 800b7ca:	464c      	mov	r4, r9
 800b7cc:	461d      	mov	r5, r3
 800b7ce:	9903      	ldr	r1, [sp, #12]
 800b7d0:	e7d7      	b.n	800b782 <__hexnan+0x2e>
 800b7d2:	2a29      	cmp	r2, #41	; 0x29
 800b7d4:	d156      	bne.n	800b884 <__hexnan+0x130>
 800b7d6:	3102      	adds	r1, #2
 800b7d8:	f8ca 1000 	str.w	r1, [sl]
 800b7dc:	f1bb 0f00 	cmp.w	fp, #0
 800b7e0:	d050      	beq.n	800b884 <__hexnan+0x130>
 800b7e2:	454c      	cmp	r4, r9
 800b7e4:	d206      	bcs.n	800b7f4 <__hexnan+0xa0>
 800b7e6:	2d07      	cmp	r5, #7
 800b7e8:	dc04      	bgt.n	800b7f4 <__hexnan+0xa0>
 800b7ea:	462a      	mov	r2, r5
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	f7ff ff8a 	bl	800b708 <L_shift>
 800b7f4:	4544      	cmp	r4, r8
 800b7f6:	d934      	bls.n	800b862 <__hexnan+0x10e>
 800b7f8:	f1a8 0204 	sub.w	r2, r8, #4
 800b7fc:	4623      	mov	r3, r4
 800b7fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800b802:	f842 1f04 	str.w	r1, [r2, #4]!
 800b806:	429f      	cmp	r7, r3
 800b808:	d2f9      	bcs.n	800b7fe <__hexnan+0xaa>
 800b80a:	1b3b      	subs	r3, r7, r4
 800b80c:	f023 0303 	bic.w	r3, r3, #3
 800b810:	3304      	adds	r3, #4
 800b812:	3401      	adds	r4, #1
 800b814:	3e03      	subs	r6, #3
 800b816:	42b4      	cmp	r4, r6
 800b818:	bf88      	it	hi
 800b81a:	2304      	movhi	r3, #4
 800b81c:	4443      	add	r3, r8
 800b81e:	2200      	movs	r2, #0
 800b820:	f843 2b04 	str.w	r2, [r3], #4
 800b824:	429f      	cmp	r7, r3
 800b826:	d2fb      	bcs.n	800b820 <__hexnan+0xcc>
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	b91b      	cbnz	r3, 800b834 <__hexnan+0xe0>
 800b82c:	4547      	cmp	r7, r8
 800b82e:	d127      	bne.n	800b880 <__hexnan+0x12c>
 800b830:	2301      	movs	r3, #1
 800b832:	603b      	str	r3, [r7, #0]
 800b834:	2005      	movs	r0, #5
 800b836:	e026      	b.n	800b886 <__hexnan+0x132>
 800b838:	3501      	adds	r5, #1
 800b83a:	2d08      	cmp	r5, #8
 800b83c:	f10b 0b01 	add.w	fp, fp, #1
 800b840:	dd06      	ble.n	800b850 <__hexnan+0xfc>
 800b842:	4544      	cmp	r4, r8
 800b844:	d9c3      	bls.n	800b7ce <__hexnan+0x7a>
 800b846:	2300      	movs	r3, #0
 800b848:	f844 3c04 	str.w	r3, [r4, #-4]
 800b84c:	2501      	movs	r5, #1
 800b84e:	3c04      	subs	r4, #4
 800b850:	6822      	ldr	r2, [r4, #0]
 800b852:	f000 000f 	and.w	r0, r0, #15
 800b856:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b85a:	6022      	str	r2, [r4, #0]
 800b85c:	e7b7      	b.n	800b7ce <__hexnan+0x7a>
 800b85e:	2508      	movs	r5, #8
 800b860:	e7b5      	b.n	800b7ce <__hexnan+0x7a>
 800b862:	9b01      	ldr	r3, [sp, #4]
 800b864:	2b00      	cmp	r3, #0
 800b866:	d0df      	beq.n	800b828 <__hexnan+0xd4>
 800b868:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b86c:	f1c3 0320 	rsb	r3, r3, #32
 800b870:	fa22 f303 	lsr.w	r3, r2, r3
 800b874:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b878:	401a      	ands	r2, r3
 800b87a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b87e:	e7d3      	b.n	800b828 <__hexnan+0xd4>
 800b880:	3f04      	subs	r7, #4
 800b882:	e7d1      	b.n	800b828 <__hexnan+0xd4>
 800b884:	2004      	movs	r0, #4
 800b886:	b007      	add	sp, #28
 800b888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b88c <_localeconv_r>:
 800b88c:	4800      	ldr	r0, [pc, #0]	; (800b890 <_localeconv_r+0x4>)
 800b88e:	4770      	bx	lr
 800b890:	200008d4 	.word	0x200008d4

0800b894 <__retarget_lock_init_recursive>:
 800b894:	4770      	bx	lr

0800b896 <__retarget_lock_acquire_recursive>:
 800b896:	4770      	bx	lr

0800b898 <__retarget_lock_release_recursive>:
 800b898:	4770      	bx	lr

0800b89a <__swhatbuf_r>:
 800b89a:	b570      	push	{r4, r5, r6, lr}
 800b89c:	460e      	mov	r6, r1
 800b89e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8a2:	2900      	cmp	r1, #0
 800b8a4:	b096      	sub	sp, #88	; 0x58
 800b8a6:	4614      	mov	r4, r2
 800b8a8:	461d      	mov	r5, r3
 800b8aa:	da07      	bge.n	800b8bc <__swhatbuf_r+0x22>
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	89b3      	ldrh	r3, [r6, #12]
 800b8b2:	061a      	lsls	r2, r3, #24
 800b8b4:	d410      	bmi.n	800b8d8 <__swhatbuf_r+0x3e>
 800b8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b8ba:	e00e      	b.n	800b8da <__swhatbuf_r+0x40>
 800b8bc:	466a      	mov	r2, sp
 800b8be:	f001 f8d3 	bl	800ca68 <_fstat_r>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	dbf2      	blt.n	800b8ac <__swhatbuf_r+0x12>
 800b8c6:	9a01      	ldr	r2, [sp, #4]
 800b8c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b8cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b8d0:	425a      	negs	r2, r3
 800b8d2:	415a      	adcs	r2, r3
 800b8d4:	602a      	str	r2, [r5, #0]
 800b8d6:	e7ee      	b.n	800b8b6 <__swhatbuf_r+0x1c>
 800b8d8:	2340      	movs	r3, #64	; 0x40
 800b8da:	2000      	movs	r0, #0
 800b8dc:	6023      	str	r3, [r4, #0]
 800b8de:	b016      	add	sp, #88	; 0x58
 800b8e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8e4 <__smakebuf_r>:
 800b8e4:	898b      	ldrh	r3, [r1, #12]
 800b8e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8e8:	079d      	lsls	r5, r3, #30
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	460c      	mov	r4, r1
 800b8ee:	d507      	bpl.n	800b900 <__smakebuf_r+0x1c>
 800b8f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	6123      	str	r3, [r4, #16]
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	6163      	str	r3, [r4, #20]
 800b8fc:	b002      	add	sp, #8
 800b8fe:	bd70      	pop	{r4, r5, r6, pc}
 800b900:	ab01      	add	r3, sp, #4
 800b902:	466a      	mov	r2, sp
 800b904:	f7ff ffc9 	bl	800b89a <__swhatbuf_r>
 800b908:	9900      	ldr	r1, [sp, #0]
 800b90a:	4605      	mov	r5, r0
 800b90c:	4630      	mov	r0, r6
 800b90e:	f7fc fc53 	bl	80081b8 <_malloc_r>
 800b912:	b948      	cbnz	r0, 800b928 <__smakebuf_r+0x44>
 800b914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b918:	059a      	lsls	r2, r3, #22
 800b91a:	d4ef      	bmi.n	800b8fc <__smakebuf_r+0x18>
 800b91c:	f023 0303 	bic.w	r3, r3, #3
 800b920:	f043 0302 	orr.w	r3, r3, #2
 800b924:	81a3      	strh	r3, [r4, #12]
 800b926:	e7e3      	b.n	800b8f0 <__smakebuf_r+0xc>
 800b928:	4b0d      	ldr	r3, [pc, #52]	; (800b960 <__smakebuf_r+0x7c>)
 800b92a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	6020      	str	r0, [r4, #0]
 800b930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b934:	81a3      	strh	r3, [r4, #12]
 800b936:	9b00      	ldr	r3, [sp, #0]
 800b938:	6163      	str	r3, [r4, #20]
 800b93a:	9b01      	ldr	r3, [sp, #4]
 800b93c:	6120      	str	r0, [r4, #16]
 800b93e:	b15b      	cbz	r3, 800b958 <__smakebuf_r+0x74>
 800b940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b944:	4630      	mov	r0, r6
 800b946:	f001 f8a1 	bl	800ca8c <_isatty_r>
 800b94a:	b128      	cbz	r0, 800b958 <__smakebuf_r+0x74>
 800b94c:	89a3      	ldrh	r3, [r4, #12]
 800b94e:	f023 0303 	bic.w	r3, r3, #3
 800b952:	f043 0301 	orr.w	r3, r3, #1
 800b956:	81a3      	strh	r3, [r4, #12]
 800b958:	89a0      	ldrh	r0, [r4, #12]
 800b95a:	4305      	orrs	r5, r0
 800b95c:	81a5      	strh	r5, [r4, #12]
 800b95e:	e7cd      	b.n	800b8fc <__smakebuf_r+0x18>
 800b960:	0800b00d 	.word	0x0800b00d

0800b964 <__ascii_mbtowc>:
 800b964:	b082      	sub	sp, #8
 800b966:	b901      	cbnz	r1, 800b96a <__ascii_mbtowc+0x6>
 800b968:	a901      	add	r1, sp, #4
 800b96a:	b142      	cbz	r2, 800b97e <__ascii_mbtowc+0x1a>
 800b96c:	b14b      	cbz	r3, 800b982 <__ascii_mbtowc+0x1e>
 800b96e:	7813      	ldrb	r3, [r2, #0]
 800b970:	600b      	str	r3, [r1, #0]
 800b972:	7812      	ldrb	r2, [r2, #0]
 800b974:	1e10      	subs	r0, r2, #0
 800b976:	bf18      	it	ne
 800b978:	2001      	movne	r0, #1
 800b97a:	b002      	add	sp, #8
 800b97c:	4770      	bx	lr
 800b97e:	4610      	mov	r0, r2
 800b980:	e7fb      	b.n	800b97a <__ascii_mbtowc+0x16>
 800b982:	f06f 0001 	mvn.w	r0, #1
 800b986:	e7f8      	b.n	800b97a <__ascii_mbtowc+0x16>

0800b988 <__malloc_lock>:
 800b988:	4801      	ldr	r0, [pc, #4]	; (800b990 <__malloc_lock+0x8>)
 800b98a:	f7ff bf84 	b.w	800b896 <__retarget_lock_acquire_recursive>
 800b98e:	bf00      	nop
 800b990:	2000b570 	.word	0x2000b570

0800b994 <__malloc_unlock>:
 800b994:	4801      	ldr	r0, [pc, #4]	; (800b99c <__malloc_unlock+0x8>)
 800b996:	f7ff bf7f 	b.w	800b898 <__retarget_lock_release_recursive>
 800b99a:	bf00      	nop
 800b99c:	2000b570 	.word	0x2000b570

0800b9a0 <_Balloc>:
 800b9a0:	b570      	push	{r4, r5, r6, lr}
 800b9a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	460d      	mov	r5, r1
 800b9a8:	b976      	cbnz	r6, 800b9c8 <_Balloc+0x28>
 800b9aa:	2010      	movs	r0, #16
 800b9ac:	f7fc fb96 	bl	80080dc <malloc>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	6260      	str	r0, [r4, #36]	; 0x24
 800b9b4:	b920      	cbnz	r0, 800b9c0 <_Balloc+0x20>
 800b9b6:	4b18      	ldr	r3, [pc, #96]	; (800ba18 <_Balloc+0x78>)
 800b9b8:	4818      	ldr	r0, [pc, #96]	; (800ba1c <_Balloc+0x7c>)
 800b9ba:	2166      	movs	r1, #102	; 0x66
 800b9bc:	f001 f814 	bl	800c9e8 <__assert_func>
 800b9c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b9c4:	6006      	str	r6, [r0, #0]
 800b9c6:	60c6      	str	r6, [r0, #12]
 800b9c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b9ca:	68f3      	ldr	r3, [r6, #12]
 800b9cc:	b183      	cbz	r3, 800b9f0 <_Balloc+0x50>
 800b9ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b9d6:	b9b8      	cbnz	r0, 800ba08 <_Balloc+0x68>
 800b9d8:	2101      	movs	r1, #1
 800b9da:	fa01 f605 	lsl.w	r6, r1, r5
 800b9de:	1d72      	adds	r2, r6, #5
 800b9e0:	0092      	lsls	r2, r2, #2
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f000 fc97 	bl	800c316 <_calloc_r>
 800b9e8:	b160      	cbz	r0, 800ba04 <_Balloc+0x64>
 800b9ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b9ee:	e00e      	b.n	800ba0e <_Balloc+0x6e>
 800b9f0:	2221      	movs	r2, #33	; 0x21
 800b9f2:	2104      	movs	r1, #4
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	f000 fc8e 	bl	800c316 <_calloc_r>
 800b9fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9fc:	60f0      	str	r0, [r6, #12]
 800b9fe:	68db      	ldr	r3, [r3, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d1e4      	bne.n	800b9ce <_Balloc+0x2e>
 800ba04:	2000      	movs	r0, #0
 800ba06:	bd70      	pop	{r4, r5, r6, pc}
 800ba08:	6802      	ldr	r2, [r0, #0]
 800ba0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba0e:	2300      	movs	r3, #0
 800ba10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba14:	e7f7      	b.n	800ba06 <_Balloc+0x66>
 800ba16:	bf00      	nop
 800ba18:	08023cde 	.word	0x08023cde
 800ba1c:	08023e44 	.word	0x08023e44

0800ba20 <_Bfree>:
 800ba20:	b570      	push	{r4, r5, r6, lr}
 800ba22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba24:	4605      	mov	r5, r0
 800ba26:	460c      	mov	r4, r1
 800ba28:	b976      	cbnz	r6, 800ba48 <_Bfree+0x28>
 800ba2a:	2010      	movs	r0, #16
 800ba2c:	f7fc fb56 	bl	80080dc <malloc>
 800ba30:	4602      	mov	r2, r0
 800ba32:	6268      	str	r0, [r5, #36]	; 0x24
 800ba34:	b920      	cbnz	r0, 800ba40 <_Bfree+0x20>
 800ba36:	4b09      	ldr	r3, [pc, #36]	; (800ba5c <_Bfree+0x3c>)
 800ba38:	4809      	ldr	r0, [pc, #36]	; (800ba60 <_Bfree+0x40>)
 800ba3a:	218a      	movs	r1, #138	; 0x8a
 800ba3c:	f000 ffd4 	bl	800c9e8 <__assert_func>
 800ba40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba44:	6006      	str	r6, [r0, #0]
 800ba46:	60c6      	str	r6, [r0, #12]
 800ba48:	b13c      	cbz	r4, 800ba5a <_Bfree+0x3a>
 800ba4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba4c:	6862      	ldr	r2, [r4, #4]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ba54:	6021      	str	r1, [r4, #0]
 800ba56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ba5a:	bd70      	pop	{r4, r5, r6, pc}
 800ba5c:	08023cde 	.word	0x08023cde
 800ba60:	08023e44 	.word	0x08023e44

0800ba64 <__multadd>:
 800ba64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba68:	690e      	ldr	r6, [r1, #16]
 800ba6a:	4607      	mov	r7, r0
 800ba6c:	4698      	mov	r8, r3
 800ba6e:	460c      	mov	r4, r1
 800ba70:	f101 0014 	add.w	r0, r1, #20
 800ba74:	2300      	movs	r3, #0
 800ba76:	6805      	ldr	r5, [r0, #0]
 800ba78:	b2a9      	uxth	r1, r5
 800ba7a:	fb02 8101 	mla	r1, r2, r1, r8
 800ba7e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ba82:	0c2d      	lsrs	r5, r5, #16
 800ba84:	fb02 c505 	mla	r5, r2, r5, ip
 800ba88:	b289      	uxth	r1, r1
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ba90:	429e      	cmp	r6, r3
 800ba92:	f840 1b04 	str.w	r1, [r0], #4
 800ba96:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ba9a:	dcec      	bgt.n	800ba76 <__multadd+0x12>
 800ba9c:	f1b8 0f00 	cmp.w	r8, #0
 800baa0:	d022      	beq.n	800bae8 <__multadd+0x84>
 800baa2:	68a3      	ldr	r3, [r4, #8]
 800baa4:	42b3      	cmp	r3, r6
 800baa6:	dc19      	bgt.n	800badc <__multadd+0x78>
 800baa8:	6861      	ldr	r1, [r4, #4]
 800baaa:	4638      	mov	r0, r7
 800baac:	3101      	adds	r1, #1
 800baae:	f7ff ff77 	bl	800b9a0 <_Balloc>
 800bab2:	4605      	mov	r5, r0
 800bab4:	b928      	cbnz	r0, 800bac2 <__multadd+0x5e>
 800bab6:	4602      	mov	r2, r0
 800bab8:	4b0d      	ldr	r3, [pc, #52]	; (800baf0 <__multadd+0x8c>)
 800baba:	480e      	ldr	r0, [pc, #56]	; (800baf4 <__multadd+0x90>)
 800babc:	21b5      	movs	r1, #181	; 0xb5
 800babe:	f000 ff93 	bl	800c9e8 <__assert_func>
 800bac2:	6922      	ldr	r2, [r4, #16]
 800bac4:	3202      	adds	r2, #2
 800bac6:	f104 010c 	add.w	r1, r4, #12
 800baca:	0092      	lsls	r2, r2, #2
 800bacc:	300c      	adds	r0, #12
 800bace:	f7fc fb0d 	bl	80080ec <memcpy>
 800bad2:	4621      	mov	r1, r4
 800bad4:	4638      	mov	r0, r7
 800bad6:	f7ff ffa3 	bl	800ba20 <_Bfree>
 800bada:	462c      	mov	r4, r5
 800badc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bae0:	3601      	adds	r6, #1
 800bae2:	f8c3 8014 	str.w	r8, [r3, #20]
 800bae6:	6126      	str	r6, [r4, #16]
 800bae8:	4620      	mov	r0, r4
 800baea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baee:	bf00      	nop
 800baf0:	08023d54 	.word	0x08023d54
 800baf4:	08023e44 	.word	0x08023e44

0800baf8 <__s2b>:
 800baf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bafc:	460c      	mov	r4, r1
 800bafe:	4615      	mov	r5, r2
 800bb00:	461f      	mov	r7, r3
 800bb02:	2209      	movs	r2, #9
 800bb04:	3308      	adds	r3, #8
 800bb06:	4606      	mov	r6, r0
 800bb08:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb0c:	2100      	movs	r1, #0
 800bb0e:	2201      	movs	r2, #1
 800bb10:	429a      	cmp	r2, r3
 800bb12:	db09      	blt.n	800bb28 <__s2b+0x30>
 800bb14:	4630      	mov	r0, r6
 800bb16:	f7ff ff43 	bl	800b9a0 <_Balloc>
 800bb1a:	b940      	cbnz	r0, 800bb2e <__s2b+0x36>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	4b19      	ldr	r3, [pc, #100]	; (800bb84 <__s2b+0x8c>)
 800bb20:	4819      	ldr	r0, [pc, #100]	; (800bb88 <__s2b+0x90>)
 800bb22:	21ce      	movs	r1, #206	; 0xce
 800bb24:	f000 ff60 	bl	800c9e8 <__assert_func>
 800bb28:	0052      	lsls	r2, r2, #1
 800bb2a:	3101      	adds	r1, #1
 800bb2c:	e7f0      	b.n	800bb10 <__s2b+0x18>
 800bb2e:	9b08      	ldr	r3, [sp, #32]
 800bb30:	6143      	str	r3, [r0, #20]
 800bb32:	2d09      	cmp	r5, #9
 800bb34:	f04f 0301 	mov.w	r3, #1
 800bb38:	6103      	str	r3, [r0, #16]
 800bb3a:	dd16      	ble.n	800bb6a <__s2b+0x72>
 800bb3c:	f104 0909 	add.w	r9, r4, #9
 800bb40:	46c8      	mov	r8, r9
 800bb42:	442c      	add	r4, r5
 800bb44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb48:	4601      	mov	r1, r0
 800bb4a:	3b30      	subs	r3, #48	; 0x30
 800bb4c:	220a      	movs	r2, #10
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f7ff ff88 	bl	800ba64 <__multadd>
 800bb54:	45a0      	cmp	r8, r4
 800bb56:	d1f5      	bne.n	800bb44 <__s2b+0x4c>
 800bb58:	f1a5 0408 	sub.w	r4, r5, #8
 800bb5c:	444c      	add	r4, r9
 800bb5e:	1b2d      	subs	r5, r5, r4
 800bb60:	1963      	adds	r3, r4, r5
 800bb62:	42bb      	cmp	r3, r7
 800bb64:	db04      	blt.n	800bb70 <__s2b+0x78>
 800bb66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb6a:	340a      	adds	r4, #10
 800bb6c:	2509      	movs	r5, #9
 800bb6e:	e7f6      	b.n	800bb5e <__s2b+0x66>
 800bb70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bb74:	4601      	mov	r1, r0
 800bb76:	3b30      	subs	r3, #48	; 0x30
 800bb78:	220a      	movs	r2, #10
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	f7ff ff72 	bl	800ba64 <__multadd>
 800bb80:	e7ee      	b.n	800bb60 <__s2b+0x68>
 800bb82:	bf00      	nop
 800bb84:	08023d54 	.word	0x08023d54
 800bb88:	08023e44 	.word	0x08023e44

0800bb8c <__hi0bits>:
 800bb8c:	0c03      	lsrs	r3, r0, #16
 800bb8e:	041b      	lsls	r3, r3, #16
 800bb90:	b9d3      	cbnz	r3, 800bbc8 <__hi0bits+0x3c>
 800bb92:	0400      	lsls	r0, r0, #16
 800bb94:	2310      	movs	r3, #16
 800bb96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bb9a:	bf04      	itt	eq
 800bb9c:	0200      	lsleq	r0, r0, #8
 800bb9e:	3308      	addeq	r3, #8
 800bba0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bba4:	bf04      	itt	eq
 800bba6:	0100      	lsleq	r0, r0, #4
 800bba8:	3304      	addeq	r3, #4
 800bbaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbae:	bf04      	itt	eq
 800bbb0:	0080      	lsleq	r0, r0, #2
 800bbb2:	3302      	addeq	r3, #2
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	db05      	blt.n	800bbc4 <__hi0bits+0x38>
 800bbb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbbc:	f103 0301 	add.w	r3, r3, #1
 800bbc0:	bf08      	it	eq
 800bbc2:	2320      	moveq	r3, #32
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	4770      	bx	lr
 800bbc8:	2300      	movs	r3, #0
 800bbca:	e7e4      	b.n	800bb96 <__hi0bits+0xa>

0800bbcc <__lo0bits>:
 800bbcc:	6803      	ldr	r3, [r0, #0]
 800bbce:	f013 0207 	ands.w	r2, r3, #7
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	d00b      	beq.n	800bbee <__lo0bits+0x22>
 800bbd6:	07da      	lsls	r2, r3, #31
 800bbd8:	d424      	bmi.n	800bc24 <__lo0bits+0x58>
 800bbda:	0798      	lsls	r0, r3, #30
 800bbdc:	bf49      	itett	mi
 800bbde:	085b      	lsrmi	r3, r3, #1
 800bbe0:	089b      	lsrpl	r3, r3, #2
 800bbe2:	2001      	movmi	r0, #1
 800bbe4:	600b      	strmi	r3, [r1, #0]
 800bbe6:	bf5c      	itt	pl
 800bbe8:	600b      	strpl	r3, [r1, #0]
 800bbea:	2002      	movpl	r0, #2
 800bbec:	4770      	bx	lr
 800bbee:	b298      	uxth	r0, r3
 800bbf0:	b9b0      	cbnz	r0, 800bc20 <__lo0bits+0x54>
 800bbf2:	0c1b      	lsrs	r3, r3, #16
 800bbf4:	2010      	movs	r0, #16
 800bbf6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bbfa:	bf04      	itt	eq
 800bbfc:	0a1b      	lsreq	r3, r3, #8
 800bbfe:	3008      	addeq	r0, #8
 800bc00:	071a      	lsls	r2, r3, #28
 800bc02:	bf04      	itt	eq
 800bc04:	091b      	lsreq	r3, r3, #4
 800bc06:	3004      	addeq	r0, #4
 800bc08:	079a      	lsls	r2, r3, #30
 800bc0a:	bf04      	itt	eq
 800bc0c:	089b      	lsreq	r3, r3, #2
 800bc0e:	3002      	addeq	r0, #2
 800bc10:	07da      	lsls	r2, r3, #31
 800bc12:	d403      	bmi.n	800bc1c <__lo0bits+0x50>
 800bc14:	085b      	lsrs	r3, r3, #1
 800bc16:	f100 0001 	add.w	r0, r0, #1
 800bc1a:	d005      	beq.n	800bc28 <__lo0bits+0x5c>
 800bc1c:	600b      	str	r3, [r1, #0]
 800bc1e:	4770      	bx	lr
 800bc20:	4610      	mov	r0, r2
 800bc22:	e7e8      	b.n	800bbf6 <__lo0bits+0x2a>
 800bc24:	2000      	movs	r0, #0
 800bc26:	4770      	bx	lr
 800bc28:	2020      	movs	r0, #32
 800bc2a:	4770      	bx	lr

0800bc2c <__i2b>:
 800bc2c:	b510      	push	{r4, lr}
 800bc2e:	460c      	mov	r4, r1
 800bc30:	2101      	movs	r1, #1
 800bc32:	f7ff feb5 	bl	800b9a0 <_Balloc>
 800bc36:	4602      	mov	r2, r0
 800bc38:	b928      	cbnz	r0, 800bc46 <__i2b+0x1a>
 800bc3a:	4b05      	ldr	r3, [pc, #20]	; (800bc50 <__i2b+0x24>)
 800bc3c:	4805      	ldr	r0, [pc, #20]	; (800bc54 <__i2b+0x28>)
 800bc3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc42:	f000 fed1 	bl	800c9e8 <__assert_func>
 800bc46:	2301      	movs	r3, #1
 800bc48:	6144      	str	r4, [r0, #20]
 800bc4a:	6103      	str	r3, [r0, #16]
 800bc4c:	bd10      	pop	{r4, pc}
 800bc4e:	bf00      	nop
 800bc50:	08023d54 	.word	0x08023d54
 800bc54:	08023e44 	.word	0x08023e44

0800bc58 <__multiply>:
 800bc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5c:	4614      	mov	r4, r2
 800bc5e:	690a      	ldr	r2, [r1, #16]
 800bc60:	6923      	ldr	r3, [r4, #16]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	bfb8      	it	lt
 800bc66:	460b      	movlt	r3, r1
 800bc68:	460d      	mov	r5, r1
 800bc6a:	bfbc      	itt	lt
 800bc6c:	4625      	movlt	r5, r4
 800bc6e:	461c      	movlt	r4, r3
 800bc70:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bc74:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bc78:	68ab      	ldr	r3, [r5, #8]
 800bc7a:	6869      	ldr	r1, [r5, #4]
 800bc7c:	eb0a 0709 	add.w	r7, sl, r9
 800bc80:	42bb      	cmp	r3, r7
 800bc82:	b085      	sub	sp, #20
 800bc84:	bfb8      	it	lt
 800bc86:	3101      	addlt	r1, #1
 800bc88:	f7ff fe8a 	bl	800b9a0 <_Balloc>
 800bc8c:	b930      	cbnz	r0, 800bc9c <__multiply+0x44>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	4b42      	ldr	r3, [pc, #264]	; (800bd9c <__multiply+0x144>)
 800bc92:	4843      	ldr	r0, [pc, #268]	; (800bda0 <__multiply+0x148>)
 800bc94:	f240 115d 	movw	r1, #349	; 0x15d
 800bc98:	f000 fea6 	bl	800c9e8 <__assert_func>
 800bc9c:	f100 0614 	add.w	r6, r0, #20
 800bca0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bca4:	4633      	mov	r3, r6
 800bca6:	2200      	movs	r2, #0
 800bca8:	4543      	cmp	r3, r8
 800bcaa:	d31e      	bcc.n	800bcea <__multiply+0x92>
 800bcac:	f105 0c14 	add.w	ip, r5, #20
 800bcb0:	f104 0314 	add.w	r3, r4, #20
 800bcb4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bcb8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bcbc:	9202      	str	r2, [sp, #8]
 800bcbe:	ebac 0205 	sub.w	r2, ip, r5
 800bcc2:	3a15      	subs	r2, #21
 800bcc4:	f022 0203 	bic.w	r2, r2, #3
 800bcc8:	3204      	adds	r2, #4
 800bcca:	f105 0115 	add.w	r1, r5, #21
 800bcce:	458c      	cmp	ip, r1
 800bcd0:	bf38      	it	cc
 800bcd2:	2204      	movcc	r2, #4
 800bcd4:	9201      	str	r2, [sp, #4]
 800bcd6:	9a02      	ldr	r2, [sp, #8]
 800bcd8:	9303      	str	r3, [sp, #12]
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d808      	bhi.n	800bcf0 <__multiply+0x98>
 800bcde:	2f00      	cmp	r7, #0
 800bce0:	dc55      	bgt.n	800bd8e <__multiply+0x136>
 800bce2:	6107      	str	r7, [r0, #16]
 800bce4:	b005      	add	sp, #20
 800bce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcea:	f843 2b04 	str.w	r2, [r3], #4
 800bcee:	e7db      	b.n	800bca8 <__multiply+0x50>
 800bcf0:	f8b3 a000 	ldrh.w	sl, [r3]
 800bcf4:	f1ba 0f00 	cmp.w	sl, #0
 800bcf8:	d020      	beq.n	800bd3c <__multiply+0xe4>
 800bcfa:	f105 0e14 	add.w	lr, r5, #20
 800bcfe:	46b1      	mov	r9, r6
 800bd00:	2200      	movs	r2, #0
 800bd02:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bd06:	f8d9 b000 	ldr.w	fp, [r9]
 800bd0a:	b2a1      	uxth	r1, r4
 800bd0c:	fa1f fb8b 	uxth.w	fp, fp
 800bd10:	fb0a b101 	mla	r1, sl, r1, fp
 800bd14:	4411      	add	r1, r2
 800bd16:	f8d9 2000 	ldr.w	r2, [r9]
 800bd1a:	0c24      	lsrs	r4, r4, #16
 800bd1c:	0c12      	lsrs	r2, r2, #16
 800bd1e:	fb0a 2404 	mla	r4, sl, r4, r2
 800bd22:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bd26:	b289      	uxth	r1, r1
 800bd28:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bd2c:	45f4      	cmp	ip, lr
 800bd2e:	f849 1b04 	str.w	r1, [r9], #4
 800bd32:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bd36:	d8e4      	bhi.n	800bd02 <__multiply+0xaa>
 800bd38:	9901      	ldr	r1, [sp, #4]
 800bd3a:	5072      	str	r2, [r6, r1]
 800bd3c:	9a03      	ldr	r2, [sp, #12]
 800bd3e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd42:	3304      	adds	r3, #4
 800bd44:	f1b9 0f00 	cmp.w	r9, #0
 800bd48:	d01f      	beq.n	800bd8a <__multiply+0x132>
 800bd4a:	6834      	ldr	r4, [r6, #0]
 800bd4c:	f105 0114 	add.w	r1, r5, #20
 800bd50:	46b6      	mov	lr, r6
 800bd52:	f04f 0a00 	mov.w	sl, #0
 800bd56:	880a      	ldrh	r2, [r1, #0]
 800bd58:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bd5c:	fb09 b202 	mla	r2, r9, r2, fp
 800bd60:	4492      	add	sl, r2
 800bd62:	b2a4      	uxth	r4, r4
 800bd64:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bd68:	f84e 4b04 	str.w	r4, [lr], #4
 800bd6c:	f851 4b04 	ldr.w	r4, [r1], #4
 800bd70:	f8be 2000 	ldrh.w	r2, [lr]
 800bd74:	0c24      	lsrs	r4, r4, #16
 800bd76:	fb09 2404 	mla	r4, r9, r4, r2
 800bd7a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bd7e:	458c      	cmp	ip, r1
 800bd80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bd84:	d8e7      	bhi.n	800bd56 <__multiply+0xfe>
 800bd86:	9a01      	ldr	r2, [sp, #4]
 800bd88:	50b4      	str	r4, [r6, r2]
 800bd8a:	3604      	adds	r6, #4
 800bd8c:	e7a3      	b.n	800bcd6 <__multiply+0x7e>
 800bd8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1a5      	bne.n	800bce2 <__multiply+0x8a>
 800bd96:	3f01      	subs	r7, #1
 800bd98:	e7a1      	b.n	800bcde <__multiply+0x86>
 800bd9a:	bf00      	nop
 800bd9c:	08023d54 	.word	0x08023d54
 800bda0:	08023e44 	.word	0x08023e44

0800bda4 <__pow5mult>:
 800bda4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bda8:	4615      	mov	r5, r2
 800bdaa:	f012 0203 	ands.w	r2, r2, #3
 800bdae:	4606      	mov	r6, r0
 800bdb0:	460f      	mov	r7, r1
 800bdb2:	d007      	beq.n	800bdc4 <__pow5mult+0x20>
 800bdb4:	4c25      	ldr	r4, [pc, #148]	; (800be4c <__pow5mult+0xa8>)
 800bdb6:	3a01      	subs	r2, #1
 800bdb8:	2300      	movs	r3, #0
 800bdba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdbe:	f7ff fe51 	bl	800ba64 <__multadd>
 800bdc2:	4607      	mov	r7, r0
 800bdc4:	10ad      	asrs	r5, r5, #2
 800bdc6:	d03d      	beq.n	800be44 <__pow5mult+0xa0>
 800bdc8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bdca:	b97c      	cbnz	r4, 800bdec <__pow5mult+0x48>
 800bdcc:	2010      	movs	r0, #16
 800bdce:	f7fc f985 	bl	80080dc <malloc>
 800bdd2:	4602      	mov	r2, r0
 800bdd4:	6270      	str	r0, [r6, #36]	; 0x24
 800bdd6:	b928      	cbnz	r0, 800bde4 <__pow5mult+0x40>
 800bdd8:	4b1d      	ldr	r3, [pc, #116]	; (800be50 <__pow5mult+0xac>)
 800bdda:	481e      	ldr	r0, [pc, #120]	; (800be54 <__pow5mult+0xb0>)
 800bddc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bde0:	f000 fe02 	bl	800c9e8 <__assert_func>
 800bde4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bde8:	6004      	str	r4, [r0, #0]
 800bdea:	60c4      	str	r4, [r0, #12]
 800bdec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bdf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bdf4:	b94c      	cbnz	r4, 800be0a <__pow5mult+0x66>
 800bdf6:	f240 2171 	movw	r1, #625	; 0x271
 800bdfa:	4630      	mov	r0, r6
 800bdfc:	f7ff ff16 	bl	800bc2c <__i2b>
 800be00:	2300      	movs	r3, #0
 800be02:	f8c8 0008 	str.w	r0, [r8, #8]
 800be06:	4604      	mov	r4, r0
 800be08:	6003      	str	r3, [r0, #0]
 800be0a:	f04f 0900 	mov.w	r9, #0
 800be0e:	07eb      	lsls	r3, r5, #31
 800be10:	d50a      	bpl.n	800be28 <__pow5mult+0x84>
 800be12:	4639      	mov	r1, r7
 800be14:	4622      	mov	r2, r4
 800be16:	4630      	mov	r0, r6
 800be18:	f7ff ff1e 	bl	800bc58 <__multiply>
 800be1c:	4639      	mov	r1, r7
 800be1e:	4680      	mov	r8, r0
 800be20:	4630      	mov	r0, r6
 800be22:	f7ff fdfd 	bl	800ba20 <_Bfree>
 800be26:	4647      	mov	r7, r8
 800be28:	106d      	asrs	r5, r5, #1
 800be2a:	d00b      	beq.n	800be44 <__pow5mult+0xa0>
 800be2c:	6820      	ldr	r0, [r4, #0]
 800be2e:	b938      	cbnz	r0, 800be40 <__pow5mult+0x9c>
 800be30:	4622      	mov	r2, r4
 800be32:	4621      	mov	r1, r4
 800be34:	4630      	mov	r0, r6
 800be36:	f7ff ff0f 	bl	800bc58 <__multiply>
 800be3a:	6020      	str	r0, [r4, #0]
 800be3c:	f8c0 9000 	str.w	r9, [r0]
 800be40:	4604      	mov	r4, r0
 800be42:	e7e4      	b.n	800be0e <__pow5mult+0x6a>
 800be44:	4638      	mov	r0, r7
 800be46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be4a:	bf00      	nop
 800be4c:	08023f98 	.word	0x08023f98
 800be50:	08023cde 	.word	0x08023cde
 800be54:	08023e44 	.word	0x08023e44

0800be58 <__lshift>:
 800be58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be5c:	460c      	mov	r4, r1
 800be5e:	6849      	ldr	r1, [r1, #4]
 800be60:	6923      	ldr	r3, [r4, #16]
 800be62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800be66:	68a3      	ldr	r3, [r4, #8]
 800be68:	4607      	mov	r7, r0
 800be6a:	4691      	mov	r9, r2
 800be6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800be70:	f108 0601 	add.w	r6, r8, #1
 800be74:	42b3      	cmp	r3, r6
 800be76:	db0b      	blt.n	800be90 <__lshift+0x38>
 800be78:	4638      	mov	r0, r7
 800be7a:	f7ff fd91 	bl	800b9a0 <_Balloc>
 800be7e:	4605      	mov	r5, r0
 800be80:	b948      	cbnz	r0, 800be96 <__lshift+0x3e>
 800be82:	4602      	mov	r2, r0
 800be84:	4b28      	ldr	r3, [pc, #160]	; (800bf28 <__lshift+0xd0>)
 800be86:	4829      	ldr	r0, [pc, #164]	; (800bf2c <__lshift+0xd4>)
 800be88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800be8c:	f000 fdac 	bl	800c9e8 <__assert_func>
 800be90:	3101      	adds	r1, #1
 800be92:	005b      	lsls	r3, r3, #1
 800be94:	e7ee      	b.n	800be74 <__lshift+0x1c>
 800be96:	2300      	movs	r3, #0
 800be98:	f100 0114 	add.w	r1, r0, #20
 800be9c:	f100 0210 	add.w	r2, r0, #16
 800bea0:	4618      	mov	r0, r3
 800bea2:	4553      	cmp	r3, sl
 800bea4:	db33      	blt.n	800bf0e <__lshift+0xb6>
 800bea6:	6920      	ldr	r0, [r4, #16]
 800bea8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800beac:	f104 0314 	add.w	r3, r4, #20
 800beb0:	f019 091f 	ands.w	r9, r9, #31
 800beb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800beb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bebc:	d02b      	beq.n	800bf16 <__lshift+0xbe>
 800bebe:	f1c9 0e20 	rsb	lr, r9, #32
 800bec2:	468a      	mov	sl, r1
 800bec4:	2200      	movs	r2, #0
 800bec6:	6818      	ldr	r0, [r3, #0]
 800bec8:	fa00 f009 	lsl.w	r0, r0, r9
 800becc:	4302      	orrs	r2, r0
 800bece:	f84a 2b04 	str.w	r2, [sl], #4
 800bed2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bed6:	459c      	cmp	ip, r3
 800bed8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bedc:	d8f3      	bhi.n	800bec6 <__lshift+0x6e>
 800bede:	ebac 0304 	sub.w	r3, ip, r4
 800bee2:	3b15      	subs	r3, #21
 800bee4:	f023 0303 	bic.w	r3, r3, #3
 800bee8:	3304      	adds	r3, #4
 800beea:	f104 0015 	add.w	r0, r4, #21
 800beee:	4584      	cmp	ip, r0
 800bef0:	bf38      	it	cc
 800bef2:	2304      	movcc	r3, #4
 800bef4:	50ca      	str	r2, [r1, r3]
 800bef6:	b10a      	cbz	r2, 800befc <__lshift+0xa4>
 800bef8:	f108 0602 	add.w	r6, r8, #2
 800befc:	3e01      	subs	r6, #1
 800befe:	4638      	mov	r0, r7
 800bf00:	612e      	str	r6, [r5, #16]
 800bf02:	4621      	mov	r1, r4
 800bf04:	f7ff fd8c 	bl	800ba20 <_Bfree>
 800bf08:	4628      	mov	r0, r5
 800bf0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf12:	3301      	adds	r3, #1
 800bf14:	e7c5      	b.n	800bea2 <__lshift+0x4a>
 800bf16:	3904      	subs	r1, #4
 800bf18:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf20:	459c      	cmp	ip, r3
 800bf22:	d8f9      	bhi.n	800bf18 <__lshift+0xc0>
 800bf24:	e7ea      	b.n	800befc <__lshift+0xa4>
 800bf26:	bf00      	nop
 800bf28:	08023d54 	.word	0x08023d54
 800bf2c:	08023e44 	.word	0x08023e44

0800bf30 <__mcmp>:
 800bf30:	b530      	push	{r4, r5, lr}
 800bf32:	6902      	ldr	r2, [r0, #16]
 800bf34:	690c      	ldr	r4, [r1, #16]
 800bf36:	1b12      	subs	r2, r2, r4
 800bf38:	d10e      	bne.n	800bf58 <__mcmp+0x28>
 800bf3a:	f100 0314 	add.w	r3, r0, #20
 800bf3e:	3114      	adds	r1, #20
 800bf40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf50:	42a5      	cmp	r5, r4
 800bf52:	d003      	beq.n	800bf5c <__mcmp+0x2c>
 800bf54:	d305      	bcc.n	800bf62 <__mcmp+0x32>
 800bf56:	2201      	movs	r2, #1
 800bf58:	4610      	mov	r0, r2
 800bf5a:	bd30      	pop	{r4, r5, pc}
 800bf5c:	4283      	cmp	r3, r0
 800bf5e:	d3f3      	bcc.n	800bf48 <__mcmp+0x18>
 800bf60:	e7fa      	b.n	800bf58 <__mcmp+0x28>
 800bf62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf66:	e7f7      	b.n	800bf58 <__mcmp+0x28>

0800bf68 <__mdiff>:
 800bf68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf6c:	460c      	mov	r4, r1
 800bf6e:	4606      	mov	r6, r0
 800bf70:	4611      	mov	r1, r2
 800bf72:	4620      	mov	r0, r4
 800bf74:	4617      	mov	r7, r2
 800bf76:	f7ff ffdb 	bl	800bf30 <__mcmp>
 800bf7a:	1e05      	subs	r5, r0, #0
 800bf7c:	d110      	bne.n	800bfa0 <__mdiff+0x38>
 800bf7e:	4629      	mov	r1, r5
 800bf80:	4630      	mov	r0, r6
 800bf82:	f7ff fd0d 	bl	800b9a0 <_Balloc>
 800bf86:	b930      	cbnz	r0, 800bf96 <__mdiff+0x2e>
 800bf88:	4b39      	ldr	r3, [pc, #228]	; (800c070 <__mdiff+0x108>)
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	f240 2132 	movw	r1, #562	; 0x232
 800bf90:	4838      	ldr	r0, [pc, #224]	; (800c074 <__mdiff+0x10c>)
 800bf92:	f000 fd29 	bl	800c9e8 <__assert_func>
 800bf96:	2301      	movs	r3, #1
 800bf98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bf9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfa0:	bfa4      	itt	ge
 800bfa2:	463b      	movge	r3, r7
 800bfa4:	4627      	movge	r7, r4
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	6879      	ldr	r1, [r7, #4]
 800bfaa:	bfa6      	itte	ge
 800bfac:	461c      	movge	r4, r3
 800bfae:	2500      	movge	r5, #0
 800bfb0:	2501      	movlt	r5, #1
 800bfb2:	f7ff fcf5 	bl	800b9a0 <_Balloc>
 800bfb6:	b920      	cbnz	r0, 800bfc2 <__mdiff+0x5a>
 800bfb8:	4b2d      	ldr	r3, [pc, #180]	; (800c070 <__mdiff+0x108>)
 800bfba:	4602      	mov	r2, r0
 800bfbc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bfc0:	e7e6      	b.n	800bf90 <__mdiff+0x28>
 800bfc2:	693e      	ldr	r6, [r7, #16]
 800bfc4:	60c5      	str	r5, [r0, #12]
 800bfc6:	6925      	ldr	r5, [r4, #16]
 800bfc8:	f107 0114 	add.w	r1, r7, #20
 800bfcc:	f104 0914 	add.w	r9, r4, #20
 800bfd0:	f100 0e14 	add.w	lr, r0, #20
 800bfd4:	f107 0210 	add.w	r2, r7, #16
 800bfd8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800bfdc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800bfe0:	46f2      	mov	sl, lr
 800bfe2:	2700      	movs	r7, #0
 800bfe4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bfe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bfec:	fa1f f883 	uxth.w	r8, r3
 800bff0:	fa17 f78b 	uxtah	r7, r7, fp
 800bff4:	0c1b      	lsrs	r3, r3, #16
 800bff6:	eba7 0808 	sub.w	r8, r7, r8
 800bffa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bffe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c002:	fa1f f888 	uxth.w	r8, r8
 800c006:	141f      	asrs	r7, r3, #16
 800c008:	454d      	cmp	r5, r9
 800c00a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c00e:	f84a 3b04 	str.w	r3, [sl], #4
 800c012:	d8e7      	bhi.n	800bfe4 <__mdiff+0x7c>
 800c014:	1b2b      	subs	r3, r5, r4
 800c016:	3b15      	subs	r3, #21
 800c018:	f023 0303 	bic.w	r3, r3, #3
 800c01c:	3304      	adds	r3, #4
 800c01e:	3415      	adds	r4, #21
 800c020:	42a5      	cmp	r5, r4
 800c022:	bf38      	it	cc
 800c024:	2304      	movcc	r3, #4
 800c026:	4419      	add	r1, r3
 800c028:	4473      	add	r3, lr
 800c02a:	469e      	mov	lr, r3
 800c02c:	460d      	mov	r5, r1
 800c02e:	4565      	cmp	r5, ip
 800c030:	d30e      	bcc.n	800c050 <__mdiff+0xe8>
 800c032:	f10c 0203 	add.w	r2, ip, #3
 800c036:	1a52      	subs	r2, r2, r1
 800c038:	f022 0203 	bic.w	r2, r2, #3
 800c03c:	3903      	subs	r1, #3
 800c03e:	458c      	cmp	ip, r1
 800c040:	bf38      	it	cc
 800c042:	2200      	movcc	r2, #0
 800c044:	441a      	add	r2, r3
 800c046:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c04a:	b17b      	cbz	r3, 800c06c <__mdiff+0x104>
 800c04c:	6106      	str	r6, [r0, #16]
 800c04e:	e7a5      	b.n	800bf9c <__mdiff+0x34>
 800c050:	f855 8b04 	ldr.w	r8, [r5], #4
 800c054:	fa17 f488 	uxtah	r4, r7, r8
 800c058:	1422      	asrs	r2, r4, #16
 800c05a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c05e:	b2a4      	uxth	r4, r4
 800c060:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c064:	f84e 4b04 	str.w	r4, [lr], #4
 800c068:	1417      	asrs	r7, r2, #16
 800c06a:	e7e0      	b.n	800c02e <__mdiff+0xc6>
 800c06c:	3e01      	subs	r6, #1
 800c06e:	e7ea      	b.n	800c046 <__mdiff+0xde>
 800c070:	08023d54 	.word	0x08023d54
 800c074:	08023e44 	.word	0x08023e44

0800c078 <__ulp>:
 800c078:	b082      	sub	sp, #8
 800c07a:	ed8d 0b00 	vstr	d0, [sp]
 800c07e:	9b01      	ldr	r3, [sp, #4]
 800c080:	4912      	ldr	r1, [pc, #72]	; (800c0cc <__ulp+0x54>)
 800c082:	4019      	ands	r1, r3
 800c084:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c088:	2900      	cmp	r1, #0
 800c08a:	dd05      	ble.n	800c098 <__ulp+0x20>
 800c08c:	2200      	movs	r2, #0
 800c08e:	460b      	mov	r3, r1
 800c090:	ec43 2b10 	vmov	d0, r2, r3
 800c094:	b002      	add	sp, #8
 800c096:	4770      	bx	lr
 800c098:	4249      	negs	r1, r1
 800c09a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c09e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c0a2:	f04f 0200 	mov.w	r2, #0
 800c0a6:	f04f 0300 	mov.w	r3, #0
 800c0aa:	da04      	bge.n	800c0b6 <__ulp+0x3e>
 800c0ac:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c0b0:	fa41 f300 	asr.w	r3, r1, r0
 800c0b4:	e7ec      	b.n	800c090 <__ulp+0x18>
 800c0b6:	f1a0 0114 	sub.w	r1, r0, #20
 800c0ba:	291e      	cmp	r1, #30
 800c0bc:	bfda      	itte	le
 800c0be:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c0c2:	fa20 f101 	lsrle.w	r1, r0, r1
 800c0c6:	2101      	movgt	r1, #1
 800c0c8:	460a      	mov	r2, r1
 800c0ca:	e7e1      	b.n	800c090 <__ulp+0x18>
 800c0cc:	7ff00000 	.word	0x7ff00000

0800c0d0 <__b2d>:
 800c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d2:	6905      	ldr	r5, [r0, #16]
 800c0d4:	f100 0714 	add.w	r7, r0, #20
 800c0d8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c0dc:	1f2e      	subs	r6, r5, #4
 800c0de:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f7ff fd52 	bl	800bb8c <__hi0bits>
 800c0e8:	f1c0 0320 	rsb	r3, r0, #32
 800c0ec:	280a      	cmp	r0, #10
 800c0ee:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c16c <__b2d+0x9c>
 800c0f2:	600b      	str	r3, [r1, #0]
 800c0f4:	dc14      	bgt.n	800c120 <__b2d+0x50>
 800c0f6:	f1c0 0e0b 	rsb	lr, r0, #11
 800c0fa:	fa24 f10e 	lsr.w	r1, r4, lr
 800c0fe:	42b7      	cmp	r7, r6
 800c100:	ea41 030c 	orr.w	r3, r1, ip
 800c104:	bf34      	ite	cc
 800c106:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c10a:	2100      	movcs	r1, #0
 800c10c:	3015      	adds	r0, #21
 800c10e:	fa04 f000 	lsl.w	r0, r4, r0
 800c112:	fa21 f10e 	lsr.w	r1, r1, lr
 800c116:	ea40 0201 	orr.w	r2, r0, r1
 800c11a:	ec43 2b10 	vmov	d0, r2, r3
 800c11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c120:	42b7      	cmp	r7, r6
 800c122:	bf3a      	itte	cc
 800c124:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c128:	f1a5 0608 	subcc.w	r6, r5, #8
 800c12c:	2100      	movcs	r1, #0
 800c12e:	380b      	subs	r0, #11
 800c130:	d017      	beq.n	800c162 <__b2d+0x92>
 800c132:	f1c0 0c20 	rsb	ip, r0, #32
 800c136:	fa04 f500 	lsl.w	r5, r4, r0
 800c13a:	42be      	cmp	r6, r7
 800c13c:	fa21 f40c 	lsr.w	r4, r1, ip
 800c140:	ea45 0504 	orr.w	r5, r5, r4
 800c144:	bf8c      	ite	hi
 800c146:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c14a:	2400      	movls	r4, #0
 800c14c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c150:	fa01 f000 	lsl.w	r0, r1, r0
 800c154:	fa24 f40c 	lsr.w	r4, r4, ip
 800c158:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c15c:	ea40 0204 	orr.w	r2, r0, r4
 800c160:	e7db      	b.n	800c11a <__b2d+0x4a>
 800c162:	ea44 030c 	orr.w	r3, r4, ip
 800c166:	460a      	mov	r2, r1
 800c168:	e7d7      	b.n	800c11a <__b2d+0x4a>
 800c16a:	bf00      	nop
 800c16c:	3ff00000 	.word	0x3ff00000

0800c170 <__d2b>:
 800c170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c174:	4689      	mov	r9, r1
 800c176:	2101      	movs	r1, #1
 800c178:	ec57 6b10 	vmov	r6, r7, d0
 800c17c:	4690      	mov	r8, r2
 800c17e:	f7ff fc0f 	bl	800b9a0 <_Balloc>
 800c182:	4604      	mov	r4, r0
 800c184:	b930      	cbnz	r0, 800c194 <__d2b+0x24>
 800c186:	4602      	mov	r2, r0
 800c188:	4b25      	ldr	r3, [pc, #148]	; (800c220 <__d2b+0xb0>)
 800c18a:	4826      	ldr	r0, [pc, #152]	; (800c224 <__d2b+0xb4>)
 800c18c:	f240 310a 	movw	r1, #778	; 0x30a
 800c190:	f000 fc2a 	bl	800c9e8 <__assert_func>
 800c194:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c19c:	bb35      	cbnz	r5, 800c1ec <__d2b+0x7c>
 800c19e:	2e00      	cmp	r6, #0
 800c1a0:	9301      	str	r3, [sp, #4]
 800c1a2:	d028      	beq.n	800c1f6 <__d2b+0x86>
 800c1a4:	4668      	mov	r0, sp
 800c1a6:	9600      	str	r6, [sp, #0]
 800c1a8:	f7ff fd10 	bl	800bbcc <__lo0bits>
 800c1ac:	9900      	ldr	r1, [sp, #0]
 800c1ae:	b300      	cbz	r0, 800c1f2 <__d2b+0x82>
 800c1b0:	9a01      	ldr	r2, [sp, #4]
 800c1b2:	f1c0 0320 	rsb	r3, r0, #32
 800c1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ba:	430b      	orrs	r3, r1
 800c1bc:	40c2      	lsrs	r2, r0
 800c1be:	6163      	str	r3, [r4, #20]
 800c1c0:	9201      	str	r2, [sp, #4]
 800c1c2:	9b01      	ldr	r3, [sp, #4]
 800c1c4:	61a3      	str	r3, [r4, #24]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	bf14      	ite	ne
 800c1ca:	2202      	movne	r2, #2
 800c1cc:	2201      	moveq	r2, #1
 800c1ce:	6122      	str	r2, [r4, #16]
 800c1d0:	b1d5      	cbz	r5, 800c208 <__d2b+0x98>
 800c1d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1d6:	4405      	add	r5, r0
 800c1d8:	f8c9 5000 	str.w	r5, [r9]
 800c1dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1e0:	f8c8 0000 	str.w	r0, [r8]
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	b003      	add	sp, #12
 800c1e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1f0:	e7d5      	b.n	800c19e <__d2b+0x2e>
 800c1f2:	6161      	str	r1, [r4, #20]
 800c1f4:	e7e5      	b.n	800c1c2 <__d2b+0x52>
 800c1f6:	a801      	add	r0, sp, #4
 800c1f8:	f7ff fce8 	bl	800bbcc <__lo0bits>
 800c1fc:	9b01      	ldr	r3, [sp, #4]
 800c1fe:	6163      	str	r3, [r4, #20]
 800c200:	2201      	movs	r2, #1
 800c202:	6122      	str	r2, [r4, #16]
 800c204:	3020      	adds	r0, #32
 800c206:	e7e3      	b.n	800c1d0 <__d2b+0x60>
 800c208:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c20c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c210:	f8c9 0000 	str.w	r0, [r9]
 800c214:	6918      	ldr	r0, [r3, #16]
 800c216:	f7ff fcb9 	bl	800bb8c <__hi0bits>
 800c21a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c21e:	e7df      	b.n	800c1e0 <__d2b+0x70>
 800c220:	08023d54 	.word	0x08023d54
 800c224:	08023e44 	.word	0x08023e44

0800c228 <__ratio>:
 800c228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22c:	4688      	mov	r8, r1
 800c22e:	4669      	mov	r1, sp
 800c230:	4681      	mov	r9, r0
 800c232:	f7ff ff4d 	bl	800c0d0 <__b2d>
 800c236:	a901      	add	r1, sp, #4
 800c238:	4640      	mov	r0, r8
 800c23a:	ec55 4b10 	vmov	r4, r5, d0
 800c23e:	f7ff ff47 	bl	800c0d0 <__b2d>
 800c242:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c246:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c24a:	eba3 0c02 	sub.w	ip, r3, r2
 800c24e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c252:	1a9b      	subs	r3, r3, r2
 800c254:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c258:	ec51 0b10 	vmov	r0, r1, d0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	bfd6      	itet	le
 800c260:	460a      	movle	r2, r1
 800c262:	462a      	movgt	r2, r5
 800c264:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c268:	468b      	mov	fp, r1
 800c26a:	462f      	mov	r7, r5
 800c26c:	bfd4      	ite	le
 800c26e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c272:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c276:	4620      	mov	r0, r4
 800c278:	ee10 2a10 	vmov	r2, s0
 800c27c:	465b      	mov	r3, fp
 800c27e:	4639      	mov	r1, r7
 800c280:	f7f4 faf4 	bl	800086c <__aeabi_ddiv>
 800c284:	ec41 0b10 	vmov	d0, r0, r1
 800c288:	b003      	add	sp, #12
 800c28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c28e <__copybits>:
 800c28e:	3901      	subs	r1, #1
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	1149      	asrs	r1, r1, #5
 800c294:	6914      	ldr	r4, [r2, #16]
 800c296:	3101      	adds	r1, #1
 800c298:	f102 0314 	add.w	r3, r2, #20
 800c29c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c2a0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2a4:	1f05      	subs	r5, r0, #4
 800c2a6:	42a3      	cmp	r3, r4
 800c2a8:	d30c      	bcc.n	800c2c4 <__copybits+0x36>
 800c2aa:	1aa3      	subs	r3, r4, r2
 800c2ac:	3b11      	subs	r3, #17
 800c2ae:	f023 0303 	bic.w	r3, r3, #3
 800c2b2:	3211      	adds	r2, #17
 800c2b4:	42a2      	cmp	r2, r4
 800c2b6:	bf88      	it	hi
 800c2b8:	2300      	movhi	r3, #0
 800c2ba:	4418      	add	r0, r3
 800c2bc:	2300      	movs	r3, #0
 800c2be:	4288      	cmp	r0, r1
 800c2c0:	d305      	bcc.n	800c2ce <__copybits+0x40>
 800c2c2:	bd70      	pop	{r4, r5, r6, pc}
 800c2c4:	f853 6b04 	ldr.w	r6, [r3], #4
 800c2c8:	f845 6f04 	str.w	r6, [r5, #4]!
 800c2cc:	e7eb      	b.n	800c2a6 <__copybits+0x18>
 800c2ce:	f840 3b04 	str.w	r3, [r0], #4
 800c2d2:	e7f4      	b.n	800c2be <__copybits+0x30>

0800c2d4 <__any_on>:
 800c2d4:	f100 0214 	add.w	r2, r0, #20
 800c2d8:	6900      	ldr	r0, [r0, #16]
 800c2da:	114b      	asrs	r3, r1, #5
 800c2dc:	4298      	cmp	r0, r3
 800c2de:	b510      	push	{r4, lr}
 800c2e0:	db11      	blt.n	800c306 <__any_on+0x32>
 800c2e2:	dd0a      	ble.n	800c2fa <__any_on+0x26>
 800c2e4:	f011 011f 	ands.w	r1, r1, #31
 800c2e8:	d007      	beq.n	800c2fa <__any_on+0x26>
 800c2ea:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c2ee:	fa24 f001 	lsr.w	r0, r4, r1
 800c2f2:	fa00 f101 	lsl.w	r1, r0, r1
 800c2f6:	428c      	cmp	r4, r1
 800c2f8:	d10b      	bne.n	800c312 <__any_on+0x3e>
 800c2fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d803      	bhi.n	800c30a <__any_on+0x36>
 800c302:	2000      	movs	r0, #0
 800c304:	bd10      	pop	{r4, pc}
 800c306:	4603      	mov	r3, r0
 800c308:	e7f7      	b.n	800c2fa <__any_on+0x26>
 800c30a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c30e:	2900      	cmp	r1, #0
 800c310:	d0f5      	beq.n	800c2fe <__any_on+0x2a>
 800c312:	2001      	movs	r0, #1
 800c314:	e7f6      	b.n	800c304 <__any_on+0x30>

0800c316 <_calloc_r>:
 800c316:	b513      	push	{r0, r1, r4, lr}
 800c318:	434a      	muls	r2, r1
 800c31a:	4611      	mov	r1, r2
 800c31c:	9201      	str	r2, [sp, #4]
 800c31e:	f7fb ff4b 	bl	80081b8 <_malloc_r>
 800c322:	4604      	mov	r4, r0
 800c324:	b118      	cbz	r0, 800c32e <_calloc_r+0x18>
 800c326:	9a01      	ldr	r2, [sp, #4]
 800c328:	2100      	movs	r1, #0
 800c32a:	f7fb feed 	bl	8008108 <memset>
 800c32e:	4620      	mov	r0, r4
 800c330:	b002      	add	sp, #8
 800c332:	bd10      	pop	{r4, pc}

0800c334 <_realloc_r>:
 800c334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c336:	4607      	mov	r7, r0
 800c338:	4614      	mov	r4, r2
 800c33a:	460e      	mov	r6, r1
 800c33c:	b921      	cbnz	r1, 800c348 <_realloc_r+0x14>
 800c33e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c342:	4611      	mov	r1, r2
 800c344:	f7fb bf38 	b.w	80081b8 <_malloc_r>
 800c348:	b922      	cbnz	r2, 800c354 <_realloc_r+0x20>
 800c34a:	f7fb fee5 	bl	8008118 <_free_r>
 800c34e:	4625      	mov	r5, r4
 800c350:	4628      	mov	r0, r5
 800c352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c354:	f000 fbd6 	bl	800cb04 <_malloc_usable_size_r>
 800c358:	42a0      	cmp	r0, r4
 800c35a:	d20f      	bcs.n	800c37c <_realloc_r+0x48>
 800c35c:	4621      	mov	r1, r4
 800c35e:	4638      	mov	r0, r7
 800c360:	f7fb ff2a 	bl	80081b8 <_malloc_r>
 800c364:	4605      	mov	r5, r0
 800c366:	2800      	cmp	r0, #0
 800c368:	d0f2      	beq.n	800c350 <_realloc_r+0x1c>
 800c36a:	4631      	mov	r1, r6
 800c36c:	4622      	mov	r2, r4
 800c36e:	f7fb febd 	bl	80080ec <memcpy>
 800c372:	4631      	mov	r1, r6
 800c374:	4638      	mov	r0, r7
 800c376:	f7fb fecf 	bl	8008118 <_free_r>
 800c37a:	e7e9      	b.n	800c350 <_realloc_r+0x1c>
 800c37c:	4635      	mov	r5, r6
 800c37e:	e7e7      	b.n	800c350 <_realloc_r+0x1c>

0800c380 <__ssputs_r>:
 800c380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c384:	688e      	ldr	r6, [r1, #8]
 800c386:	429e      	cmp	r6, r3
 800c388:	4682      	mov	sl, r0
 800c38a:	460c      	mov	r4, r1
 800c38c:	4690      	mov	r8, r2
 800c38e:	461f      	mov	r7, r3
 800c390:	d838      	bhi.n	800c404 <__ssputs_r+0x84>
 800c392:	898a      	ldrh	r2, [r1, #12]
 800c394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c398:	d032      	beq.n	800c400 <__ssputs_r+0x80>
 800c39a:	6825      	ldr	r5, [r4, #0]
 800c39c:	6909      	ldr	r1, [r1, #16]
 800c39e:	eba5 0901 	sub.w	r9, r5, r1
 800c3a2:	6965      	ldr	r5, [r4, #20]
 800c3a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	444b      	add	r3, r9
 800c3b0:	106d      	asrs	r5, r5, #1
 800c3b2:	429d      	cmp	r5, r3
 800c3b4:	bf38      	it	cc
 800c3b6:	461d      	movcc	r5, r3
 800c3b8:	0553      	lsls	r3, r2, #21
 800c3ba:	d531      	bpl.n	800c420 <__ssputs_r+0xa0>
 800c3bc:	4629      	mov	r1, r5
 800c3be:	f7fb fefb 	bl	80081b8 <_malloc_r>
 800c3c2:	4606      	mov	r6, r0
 800c3c4:	b950      	cbnz	r0, 800c3dc <__ssputs_r+0x5c>
 800c3c6:	230c      	movs	r3, #12
 800c3c8:	f8ca 3000 	str.w	r3, [sl]
 800c3cc:	89a3      	ldrh	r3, [r4, #12]
 800c3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3d2:	81a3      	strh	r3, [r4, #12]
 800c3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3dc:	6921      	ldr	r1, [r4, #16]
 800c3de:	464a      	mov	r2, r9
 800c3e0:	f7fb fe84 	bl	80080ec <memcpy>
 800c3e4:	89a3      	ldrh	r3, [r4, #12]
 800c3e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3ee:	81a3      	strh	r3, [r4, #12]
 800c3f0:	6126      	str	r6, [r4, #16]
 800c3f2:	6165      	str	r5, [r4, #20]
 800c3f4:	444e      	add	r6, r9
 800c3f6:	eba5 0509 	sub.w	r5, r5, r9
 800c3fa:	6026      	str	r6, [r4, #0]
 800c3fc:	60a5      	str	r5, [r4, #8]
 800c3fe:	463e      	mov	r6, r7
 800c400:	42be      	cmp	r6, r7
 800c402:	d900      	bls.n	800c406 <__ssputs_r+0x86>
 800c404:	463e      	mov	r6, r7
 800c406:	4632      	mov	r2, r6
 800c408:	6820      	ldr	r0, [r4, #0]
 800c40a:	4641      	mov	r1, r8
 800c40c:	f000 fb60 	bl	800cad0 <memmove>
 800c410:	68a3      	ldr	r3, [r4, #8]
 800c412:	6822      	ldr	r2, [r4, #0]
 800c414:	1b9b      	subs	r3, r3, r6
 800c416:	4432      	add	r2, r6
 800c418:	60a3      	str	r3, [r4, #8]
 800c41a:	6022      	str	r2, [r4, #0]
 800c41c:	2000      	movs	r0, #0
 800c41e:	e7db      	b.n	800c3d8 <__ssputs_r+0x58>
 800c420:	462a      	mov	r2, r5
 800c422:	f7ff ff87 	bl	800c334 <_realloc_r>
 800c426:	4606      	mov	r6, r0
 800c428:	2800      	cmp	r0, #0
 800c42a:	d1e1      	bne.n	800c3f0 <__ssputs_r+0x70>
 800c42c:	6921      	ldr	r1, [r4, #16]
 800c42e:	4650      	mov	r0, sl
 800c430:	f7fb fe72 	bl	8008118 <_free_r>
 800c434:	e7c7      	b.n	800c3c6 <__ssputs_r+0x46>
	...

0800c438 <_svfiprintf_r>:
 800c438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c43c:	4698      	mov	r8, r3
 800c43e:	898b      	ldrh	r3, [r1, #12]
 800c440:	061b      	lsls	r3, r3, #24
 800c442:	b09d      	sub	sp, #116	; 0x74
 800c444:	4607      	mov	r7, r0
 800c446:	460d      	mov	r5, r1
 800c448:	4614      	mov	r4, r2
 800c44a:	d50e      	bpl.n	800c46a <_svfiprintf_r+0x32>
 800c44c:	690b      	ldr	r3, [r1, #16]
 800c44e:	b963      	cbnz	r3, 800c46a <_svfiprintf_r+0x32>
 800c450:	2140      	movs	r1, #64	; 0x40
 800c452:	f7fb feb1 	bl	80081b8 <_malloc_r>
 800c456:	6028      	str	r0, [r5, #0]
 800c458:	6128      	str	r0, [r5, #16]
 800c45a:	b920      	cbnz	r0, 800c466 <_svfiprintf_r+0x2e>
 800c45c:	230c      	movs	r3, #12
 800c45e:	603b      	str	r3, [r7, #0]
 800c460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c464:	e0d1      	b.n	800c60a <_svfiprintf_r+0x1d2>
 800c466:	2340      	movs	r3, #64	; 0x40
 800c468:	616b      	str	r3, [r5, #20]
 800c46a:	2300      	movs	r3, #0
 800c46c:	9309      	str	r3, [sp, #36]	; 0x24
 800c46e:	2320      	movs	r3, #32
 800c470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c474:	f8cd 800c 	str.w	r8, [sp, #12]
 800c478:	2330      	movs	r3, #48	; 0x30
 800c47a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c624 <_svfiprintf_r+0x1ec>
 800c47e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c482:	f04f 0901 	mov.w	r9, #1
 800c486:	4623      	mov	r3, r4
 800c488:	469a      	mov	sl, r3
 800c48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c48e:	b10a      	cbz	r2, 800c494 <_svfiprintf_r+0x5c>
 800c490:	2a25      	cmp	r2, #37	; 0x25
 800c492:	d1f9      	bne.n	800c488 <_svfiprintf_r+0x50>
 800c494:	ebba 0b04 	subs.w	fp, sl, r4
 800c498:	d00b      	beq.n	800c4b2 <_svfiprintf_r+0x7a>
 800c49a:	465b      	mov	r3, fp
 800c49c:	4622      	mov	r2, r4
 800c49e:	4629      	mov	r1, r5
 800c4a0:	4638      	mov	r0, r7
 800c4a2:	f7ff ff6d 	bl	800c380 <__ssputs_r>
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	f000 80aa 	beq.w	800c600 <_svfiprintf_r+0x1c8>
 800c4ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4ae:	445a      	add	r2, fp
 800c4b0:	9209      	str	r2, [sp, #36]	; 0x24
 800c4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f000 80a2 	beq.w	800c600 <_svfiprintf_r+0x1c8>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4c6:	f10a 0a01 	add.w	sl, sl, #1
 800c4ca:	9304      	str	r3, [sp, #16]
 800c4cc:	9307      	str	r3, [sp, #28]
 800c4ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4d2:	931a      	str	r3, [sp, #104]	; 0x68
 800c4d4:	4654      	mov	r4, sl
 800c4d6:	2205      	movs	r2, #5
 800c4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4dc:	4851      	ldr	r0, [pc, #324]	; (800c624 <_svfiprintf_r+0x1ec>)
 800c4de:	f7f3 fe8f 	bl	8000200 <memchr>
 800c4e2:	9a04      	ldr	r2, [sp, #16]
 800c4e4:	b9d8      	cbnz	r0, 800c51e <_svfiprintf_r+0xe6>
 800c4e6:	06d0      	lsls	r0, r2, #27
 800c4e8:	bf44      	itt	mi
 800c4ea:	2320      	movmi	r3, #32
 800c4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4f0:	0711      	lsls	r1, r2, #28
 800c4f2:	bf44      	itt	mi
 800c4f4:	232b      	movmi	r3, #43	; 0x2b
 800c4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800c4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800c500:	d015      	beq.n	800c52e <_svfiprintf_r+0xf6>
 800c502:	9a07      	ldr	r2, [sp, #28]
 800c504:	4654      	mov	r4, sl
 800c506:	2000      	movs	r0, #0
 800c508:	f04f 0c0a 	mov.w	ip, #10
 800c50c:	4621      	mov	r1, r4
 800c50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c512:	3b30      	subs	r3, #48	; 0x30
 800c514:	2b09      	cmp	r3, #9
 800c516:	d94e      	bls.n	800c5b6 <_svfiprintf_r+0x17e>
 800c518:	b1b0      	cbz	r0, 800c548 <_svfiprintf_r+0x110>
 800c51a:	9207      	str	r2, [sp, #28]
 800c51c:	e014      	b.n	800c548 <_svfiprintf_r+0x110>
 800c51e:	eba0 0308 	sub.w	r3, r0, r8
 800c522:	fa09 f303 	lsl.w	r3, r9, r3
 800c526:	4313      	orrs	r3, r2
 800c528:	9304      	str	r3, [sp, #16]
 800c52a:	46a2      	mov	sl, r4
 800c52c:	e7d2      	b.n	800c4d4 <_svfiprintf_r+0x9c>
 800c52e:	9b03      	ldr	r3, [sp, #12]
 800c530:	1d19      	adds	r1, r3, #4
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	9103      	str	r1, [sp, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	bfbb      	ittet	lt
 800c53a:	425b      	neglt	r3, r3
 800c53c:	f042 0202 	orrlt.w	r2, r2, #2
 800c540:	9307      	strge	r3, [sp, #28]
 800c542:	9307      	strlt	r3, [sp, #28]
 800c544:	bfb8      	it	lt
 800c546:	9204      	strlt	r2, [sp, #16]
 800c548:	7823      	ldrb	r3, [r4, #0]
 800c54a:	2b2e      	cmp	r3, #46	; 0x2e
 800c54c:	d10c      	bne.n	800c568 <_svfiprintf_r+0x130>
 800c54e:	7863      	ldrb	r3, [r4, #1]
 800c550:	2b2a      	cmp	r3, #42	; 0x2a
 800c552:	d135      	bne.n	800c5c0 <_svfiprintf_r+0x188>
 800c554:	9b03      	ldr	r3, [sp, #12]
 800c556:	1d1a      	adds	r2, r3, #4
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	9203      	str	r2, [sp, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	bfb8      	it	lt
 800c560:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c564:	3402      	adds	r4, #2
 800c566:	9305      	str	r3, [sp, #20]
 800c568:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c634 <_svfiprintf_r+0x1fc>
 800c56c:	7821      	ldrb	r1, [r4, #0]
 800c56e:	2203      	movs	r2, #3
 800c570:	4650      	mov	r0, sl
 800c572:	f7f3 fe45 	bl	8000200 <memchr>
 800c576:	b140      	cbz	r0, 800c58a <_svfiprintf_r+0x152>
 800c578:	2340      	movs	r3, #64	; 0x40
 800c57a:	eba0 000a 	sub.w	r0, r0, sl
 800c57e:	fa03 f000 	lsl.w	r0, r3, r0
 800c582:	9b04      	ldr	r3, [sp, #16]
 800c584:	4303      	orrs	r3, r0
 800c586:	3401      	adds	r4, #1
 800c588:	9304      	str	r3, [sp, #16]
 800c58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c58e:	4826      	ldr	r0, [pc, #152]	; (800c628 <_svfiprintf_r+0x1f0>)
 800c590:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c594:	2206      	movs	r2, #6
 800c596:	f7f3 fe33 	bl	8000200 <memchr>
 800c59a:	2800      	cmp	r0, #0
 800c59c:	d038      	beq.n	800c610 <_svfiprintf_r+0x1d8>
 800c59e:	4b23      	ldr	r3, [pc, #140]	; (800c62c <_svfiprintf_r+0x1f4>)
 800c5a0:	bb1b      	cbnz	r3, 800c5ea <_svfiprintf_r+0x1b2>
 800c5a2:	9b03      	ldr	r3, [sp, #12]
 800c5a4:	3307      	adds	r3, #7
 800c5a6:	f023 0307 	bic.w	r3, r3, #7
 800c5aa:	3308      	adds	r3, #8
 800c5ac:	9303      	str	r3, [sp, #12]
 800c5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5b0:	4433      	add	r3, r6
 800c5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5b4:	e767      	b.n	800c486 <_svfiprintf_r+0x4e>
 800c5b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	2001      	movs	r0, #1
 800c5be:	e7a5      	b.n	800c50c <_svfiprintf_r+0xd4>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	3401      	adds	r4, #1
 800c5c4:	9305      	str	r3, [sp, #20]
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	f04f 0c0a 	mov.w	ip, #10
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5d2:	3a30      	subs	r2, #48	; 0x30
 800c5d4:	2a09      	cmp	r2, #9
 800c5d6:	d903      	bls.n	800c5e0 <_svfiprintf_r+0x1a8>
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d0c5      	beq.n	800c568 <_svfiprintf_r+0x130>
 800c5dc:	9105      	str	r1, [sp, #20]
 800c5de:	e7c3      	b.n	800c568 <_svfiprintf_r+0x130>
 800c5e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e7f0      	b.n	800c5cc <_svfiprintf_r+0x194>
 800c5ea:	ab03      	add	r3, sp, #12
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	462a      	mov	r2, r5
 800c5f0:	4b0f      	ldr	r3, [pc, #60]	; (800c630 <_svfiprintf_r+0x1f8>)
 800c5f2:	a904      	add	r1, sp, #16
 800c5f4:	4638      	mov	r0, r7
 800c5f6:	f7fb fed9 	bl	80083ac <_printf_float>
 800c5fa:	1c42      	adds	r2, r0, #1
 800c5fc:	4606      	mov	r6, r0
 800c5fe:	d1d6      	bne.n	800c5ae <_svfiprintf_r+0x176>
 800c600:	89ab      	ldrh	r3, [r5, #12]
 800c602:	065b      	lsls	r3, r3, #25
 800c604:	f53f af2c 	bmi.w	800c460 <_svfiprintf_r+0x28>
 800c608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c60a:	b01d      	add	sp, #116	; 0x74
 800c60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c610:	ab03      	add	r3, sp, #12
 800c612:	9300      	str	r3, [sp, #0]
 800c614:	462a      	mov	r2, r5
 800c616:	4b06      	ldr	r3, [pc, #24]	; (800c630 <_svfiprintf_r+0x1f8>)
 800c618:	a904      	add	r1, sp, #16
 800c61a:	4638      	mov	r0, r7
 800c61c:	f7fc f96a 	bl	80088f4 <_printf_i>
 800c620:	e7eb      	b.n	800c5fa <_svfiprintf_r+0x1c2>
 800c622:	bf00      	nop
 800c624:	08023fa4 	.word	0x08023fa4
 800c628:	08023fae 	.word	0x08023fae
 800c62c:	080083ad 	.word	0x080083ad
 800c630:	0800c381 	.word	0x0800c381
 800c634:	08023faa 	.word	0x08023faa

0800c638 <__sfputc_r>:
 800c638:	6893      	ldr	r3, [r2, #8]
 800c63a:	3b01      	subs	r3, #1
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	b410      	push	{r4}
 800c640:	6093      	str	r3, [r2, #8]
 800c642:	da08      	bge.n	800c656 <__sfputc_r+0x1e>
 800c644:	6994      	ldr	r4, [r2, #24]
 800c646:	42a3      	cmp	r3, r4
 800c648:	db01      	blt.n	800c64e <__sfputc_r+0x16>
 800c64a:	290a      	cmp	r1, #10
 800c64c:	d103      	bne.n	800c656 <__sfputc_r+0x1e>
 800c64e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c652:	f7fd bcbb 	b.w	8009fcc <__swbuf_r>
 800c656:	6813      	ldr	r3, [r2, #0]
 800c658:	1c58      	adds	r0, r3, #1
 800c65a:	6010      	str	r0, [r2, #0]
 800c65c:	7019      	strb	r1, [r3, #0]
 800c65e:	4608      	mov	r0, r1
 800c660:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c664:	4770      	bx	lr

0800c666 <__sfputs_r>:
 800c666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c668:	4606      	mov	r6, r0
 800c66a:	460f      	mov	r7, r1
 800c66c:	4614      	mov	r4, r2
 800c66e:	18d5      	adds	r5, r2, r3
 800c670:	42ac      	cmp	r4, r5
 800c672:	d101      	bne.n	800c678 <__sfputs_r+0x12>
 800c674:	2000      	movs	r0, #0
 800c676:	e007      	b.n	800c688 <__sfputs_r+0x22>
 800c678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c67c:	463a      	mov	r2, r7
 800c67e:	4630      	mov	r0, r6
 800c680:	f7ff ffda 	bl	800c638 <__sfputc_r>
 800c684:	1c43      	adds	r3, r0, #1
 800c686:	d1f3      	bne.n	800c670 <__sfputs_r+0xa>
 800c688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c68c <_vfiprintf_r>:
 800c68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c690:	460d      	mov	r5, r1
 800c692:	b09d      	sub	sp, #116	; 0x74
 800c694:	4614      	mov	r4, r2
 800c696:	4698      	mov	r8, r3
 800c698:	4606      	mov	r6, r0
 800c69a:	b118      	cbz	r0, 800c6a4 <_vfiprintf_r+0x18>
 800c69c:	6983      	ldr	r3, [r0, #24]
 800c69e:	b90b      	cbnz	r3, 800c6a4 <_vfiprintf_r+0x18>
 800c6a0:	f7fe fce8 	bl	800b074 <__sinit>
 800c6a4:	4b89      	ldr	r3, [pc, #548]	; (800c8cc <_vfiprintf_r+0x240>)
 800c6a6:	429d      	cmp	r5, r3
 800c6a8:	d11b      	bne.n	800c6e2 <_vfiprintf_r+0x56>
 800c6aa:	6875      	ldr	r5, [r6, #4]
 800c6ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6ae:	07d9      	lsls	r1, r3, #31
 800c6b0:	d405      	bmi.n	800c6be <_vfiprintf_r+0x32>
 800c6b2:	89ab      	ldrh	r3, [r5, #12]
 800c6b4:	059a      	lsls	r2, r3, #22
 800c6b6:	d402      	bmi.n	800c6be <_vfiprintf_r+0x32>
 800c6b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6ba:	f7ff f8ec 	bl	800b896 <__retarget_lock_acquire_recursive>
 800c6be:	89ab      	ldrh	r3, [r5, #12]
 800c6c0:	071b      	lsls	r3, r3, #28
 800c6c2:	d501      	bpl.n	800c6c8 <_vfiprintf_r+0x3c>
 800c6c4:	692b      	ldr	r3, [r5, #16]
 800c6c6:	b9eb      	cbnz	r3, 800c704 <_vfiprintf_r+0x78>
 800c6c8:	4629      	mov	r1, r5
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f7fd fcd0 	bl	800a070 <__swsetup_r>
 800c6d0:	b1c0      	cbz	r0, 800c704 <_vfiprintf_r+0x78>
 800c6d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6d4:	07dc      	lsls	r4, r3, #31
 800c6d6:	d50e      	bpl.n	800c6f6 <_vfiprintf_r+0x6a>
 800c6d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6dc:	b01d      	add	sp, #116	; 0x74
 800c6de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6e2:	4b7b      	ldr	r3, [pc, #492]	; (800c8d0 <_vfiprintf_r+0x244>)
 800c6e4:	429d      	cmp	r5, r3
 800c6e6:	d101      	bne.n	800c6ec <_vfiprintf_r+0x60>
 800c6e8:	68b5      	ldr	r5, [r6, #8]
 800c6ea:	e7df      	b.n	800c6ac <_vfiprintf_r+0x20>
 800c6ec:	4b79      	ldr	r3, [pc, #484]	; (800c8d4 <_vfiprintf_r+0x248>)
 800c6ee:	429d      	cmp	r5, r3
 800c6f0:	bf08      	it	eq
 800c6f2:	68f5      	ldreq	r5, [r6, #12]
 800c6f4:	e7da      	b.n	800c6ac <_vfiprintf_r+0x20>
 800c6f6:	89ab      	ldrh	r3, [r5, #12]
 800c6f8:	0598      	lsls	r0, r3, #22
 800c6fa:	d4ed      	bmi.n	800c6d8 <_vfiprintf_r+0x4c>
 800c6fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6fe:	f7ff f8cb 	bl	800b898 <__retarget_lock_release_recursive>
 800c702:	e7e9      	b.n	800c6d8 <_vfiprintf_r+0x4c>
 800c704:	2300      	movs	r3, #0
 800c706:	9309      	str	r3, [sp, #36]	; 0x24
 800c708:	2320      	movs	r3, #32
 800c70a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c70e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c712:	2330      	movs	r3, #48	; 0x30
 800c714:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c8d8 <_vfiprintf_r+0x24c>
 800c718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c71c:	f04f 0901 	mov.w	r9, #1
 800c720:	4623      	mov	r3, r4
 800c722:	469a      	mov	sl, r3
 800c724:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c728:	b10a      	cbz	r2, 800c72e <_vfiprintf_r+0xa2>
 800c72a:	2a25      	cmp	r2, #37	; 0x25
 800c72c:	d1f9      	bne.n	800c722 <_vfiprintf_r+0x96>
 800c72e:	ebba 0b04 	subs.w	fp, sl, r4
 800c732:	d00b      	beq.n	800c74c <_vfiprintf_r+0xc0>
 800c734:	465b      	mov	r3, fp
 800c736:	4622      	mov	r2, r4
 800c738:	4629      	mov	r1, r5
 800c73a:	4630      	mov	r0, r6
 800c73c:	f7ff ff93 	bl	800c666 <__sfputs_r>
 800c740:	3001      	adds	r0, #1
 800c742:	f000 80aa 	beq.w	800c89a <_vfiprintf_r+0x20e>
 800c746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c748:	445a      	add	r2, fp
 800c74a:	9209      	str	r2, [sp, #36]	; 0x24
 800c74c:	f89a 3000 	ldrb.w	r3, [sl]
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 80a2 	beq.w	800c89a <_vfiprintf_r+0x20e>
 800c756:	2300      	movs	r3, #0
 800c758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c75c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c760:	f10a 0a01 	add.w	sl, sl, #1
 800c764:	9304      	str	r3, [sp, #16]
 800c766:	9307      	str	r3, [sp, #28]
 800c768:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c76c:	931a      	str	r3, [sp, #104]	; 0x68
 800c76e:	4654      	mov	r4, sl
 800c770:	2205      	movs	r2, #5
 800c772:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c776:	4858      	ldr	r0, [pc, #352]	; (800c8d8 <_vfiprintf_r+0x24c>)
 800c778:	f7f3 fd42 	bl	8000200 <memchr>
 800c77c:	9a04      	ldr	r2, [sp, #16]
 800c77e:	b9d8      	cbnz	r0, 800c7b8 <_vfiprintf_r+0x12c>
 800c780:	06d1      	lsls	r1, r2, #27
 800c782:	bf44      	itt	mi
 800c784:	2320      	movmi	r3, #32
 800c786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c78a:	0713      	lsls	r3, r2, #28
 800c78c:	bf44      	itt	mi
 800c78e:	232b      	movmi	r3, #43	; 0x2b
 800c790:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c794:	f89a 3000 	ldrb.w	r3, [sl]
 800c798:	2b2a      	cmp	r3, #42	; 0x2a
 800c79a:	d015      	beq.n	800c7c8 <_vfiprintf_r+0x13c>
 800c79c:	9a07      	ldr	r2, [sp, #28]
 800c79e:	4654      	mov	r4, sl
 800c7a0:	2000      	movs	r0, #0
 800c7a2:	f04f 0c0a 	mov.w	ip, #10
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7ac:	3b30      	subs	r3, #48	; 0x30
 800c7ae:	2b09      	cmp	r3, #9
 800c7b0:	d94e      	bls.n	800c850 <_vfiprintf_r+0x1c4>
 800c7b2:	b1b0      	cbz	r0, 800c7e2 <_vfiprintf_r+0x156>
 800c7b4:	9207      	str	r2, [sp, #28]
 800c7b6:	e014      	b.n	800c7e2 <_vfiprintf_r+0x156>
 800c7b8:	eba0 0308 	sub.w	r3, r0, r8
 800c7bc:	fa09 f303 	lsl.w	r3, r9, r3
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	9304      	str	r3, [sp, #16]
 800c7c4:	46a2      	mov	sl, r4
 800c7c6:	e7d2      	b.n	800c76e <_vfiprintf_r+0xe2>
 800c7c8:	9b03      	ldr	r3, [sp, #12]
 800c7ca:	1d19      	adds	r1, r3, #4
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	9103      	str	r1, [sp, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	bfbb      	ittet	lt
 800c7d4:	425b      	neglt	r3, r3
 800c7d6:	f042 0202 	orrlt.w	r2, r2, #2
 800c7da:	9307      	strge	r3, [sp, #28]
 800c7dc:	9307      	strlt	r3, [sp, #28]
 800c7de:	bfb8      	it	lt
 800c7e0:	9204      	strlt	r2, [sp, #16]
 800c7e2:	7823      	ldrb	r3, [r4, #0]
 800c7e4:	2b2e      	cmp	r3, #46	; 0x2e
 800c7e6:	d10c      	bne.n	800c802 <_vfiprintf_r+0x176>
 800c7e8:	7863      	ldrb	r3, [r4, #1]
 800c7ea:	2b2a      	cmp	r3, #42	; 0x2a
 800c7ec:	d135      	bne.n	800c85a <_vfiprintf_r+0x1ce>
 800c7ee:	9b03      	ldr	r3, [sp, #12]
 800c7f0:	1d1a      	adds	r2, r3, #4
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	9203      	str	r2, [sp, #12]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	bfb8      	it	lt
 800c7fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c7fe:	3402      	adds	r4, #2
 800c800:	9305      	str	r3, [sp, #20]
 800c802:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c8e8 <_vfiprintf_r+0x25c>
 800c806:	7821      	ldrb	r1, [r4, #0]
 800c808:	2203      	movs	r2, #3
 800c80a:	4650      	mov	r0, sl
 800c80c:	f7f3 fcf8 	bl	8000200 <memchr>
 800c810:	b140      	cbz	r0, 800c824 <_vfiprintf_r+0x198>
 800c812:	2340      	movs	r3, #64	; 0x40
 800c814:	eba0 000a 	sub.w	r0, r0, sl
 800c818:	fa03 f000 	lsl.w	r0, r3, r0
 800c81c:	9b04      	ldr	r3, [sp, #16]
 800c81e:	4303      	orrs	r3, r0
 800c820:	3401      	adds	r4, #1
 800c822:	9304      	str	r3, [sp, #16]
 800c824:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c828:	482c      	ldr	r0, [pc, #176]	; (800c8dc <_vfiprintf_r+0x250>)
 800c82a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c82e:	2206      	movs	r2, #6
 800c830:	f7f3 fce6 	bl	8000200 <memchr>
 800c834:	2800      	cmp	r0, #0
 800c836:	d03f      	beq.n	800c8b8 <_vfiprintf_r+0x22c>
 800c838:	4b29      	ldr	r3, [pc, #164]	; (800c8e0 <_vfiprintf_r+0x254>)
 800c83a:	bb1b      	cbnz	r3, 800c884 <_vfiprintf_r+0x1f8>
 800c83c:	9b03      	ldr	r3, [sp, #12]
 800c83e:	3307      	adds	r3, #7
 800c840:	f023 0307 	bic.w	r3, r3, #7
 800c844:	3308      	adds	r3, #8
 800c846:	9303      	str	r3, [sp, #12]
 800c848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c84a:	443b      	add	r3, r7
 800c84c:	9309      	str	r3, [sp, #36]	; 0x24
 800c84e:	e767      	b.n	800c720 <_vfiprintf_r+0x94>
 800c850:	fb0c 3202 	mla	r2, ip, r2, r3
 800c854:	460c      	mov	r4, r1
 800c856:	2001      	movs	r0, #1
 800c858:	e7a5      	b.n	800c7a6 <_vfiprintf_r+0x11a>
 800c85a:	2300      	movs	r3, #0
 800c85c:	3401      	adds	r4, #1
 800c85e:	9305      	str	r3, [sp, #20]
 800c860:	4619      	mov	r1, r3
 800c862:	f04f 0c0a 	mov.w	ip, #10
 800c866:	4620      	mov	r0, r4
 800c868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c86c:	3a30      	subs	r2, #48	; 0x30
 800c86e:	2a09      	cmp	r2, #9
 800c870:	d903      	bls.n	800c87a <_vfiprintf_r+0x1ee>
 800c872:	2b00      	cmp	r3, #0
 800c874:	d0c5      	beq.n	800c802 <_vfiprintf_r+0x176>
 800c876:	9105      	str	r1, [sp, #20]
 800c878:	e7c3      	b.n	800c802 <_vfiprintf_r+0x176>
 800c87a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c87e:	4604      	mov	r4, r0
 800c880:	2301      	movs	r3, #1
 800c882:	e7f0      	b.n	800c866 <_vfiprintf_r+0x1da>
 800c884:	ab03      	add	r3, sp, #12
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	462a      	mov	r2, r5
 800c88a:	4b16      	ldr	r3, [pc, #88]	; (800c8e4 <_vfiprintf_r+0x258>)
 800c88c:	a904      	add	r1, sp, #16
 800c88e:	4630      	mov	r0, r6
 800c890:	f7fb fd8c 	bl	80083ac <_printf_float>
 800c894:	4607      	mov	r7, r0
 800c896:	1c78      	adds	r0, r7, #1
 800c898:	d1d6      	bne.n	800c848 <_vfiprintf_r+0x1bc>
 800c89a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c89c:	07d9      	lsls	r1, r3, #31
 800c89e:	d405      	bmi.n	800c8ac <_vfiprintf_r+0x220>
 800c8a0:	89ab      	ldrh	r3, [r5, #12]
 800c8a2:	059a      	lsls	r2, r3, #22
 800c8a4:	d402      	bmi.n	800c8ac <_vfiprintf_r+0x220>
 800c8a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8a8:	f7fe fff6 	bl	800b898 <__retarget_lock_release_recursive>
 800c8ac:	89ab      	ldrh	r3, [r5, #12]
 800c8ae:	065b      	lsls	r3, r3, #25
 800c8b0:	f53f af12 	bmi.w	800c6d8 <_vfiprintf_r+0x4c>
 800c8b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8b6:	e711      	b.n	800c6dc <_vfiprintf_r+0x50>
 800c8b8:	ab03      	add	r3, sp, #12
 800c8ba:	9300      	str	r3, [sp, #0]
 800c8bc:	462a      	mov	r2, r5
 800c8be:	4b09      	ldr	r3, [pc, #36]	; (800c8e4 <_vfiprintf_r+0x258>)
 800c8c0:	a904      	add	r1, sp, #16
 800c8c2:	4630      	mov	r0, r6
 800c8c4:	f7fc f816 	bl	80088f4 <_printf_i>
 800c8c8:	e7e4      	b.n	800c894 <_vfiprintf_r+0x208>
 800c8ca:	bf00      	nop
 800c8cc:	08023d88 	.word	0x08023d88
 800c8d0:	08023da8 	.word	0x08023da8
 800c8d4:	08023d68 	.word	0x08023d68
 800c8d8:	08023fa4 	.word	0x08023fa4
 800c8dc:	08023fae 	.word	0x08023fae
 800c8e0:	080083ad 	.word	0x080083ad
 800c8e4:	0800c667 	.word	0x0800c667
 800c8e8:	08023faa 	.word	0x08023faa
 800c8ec:	00000000 	.word	0x00000000

0800c8f0 <nan>:
 800c8f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c8f8 <nan+0x8>
 800c8f4:	4770      	bx	lr
 800c8f6:	bf00      	nop
 800c8f8:	00000000 	.word	0x00000000
 800c8fc:	7ff80000 	.word	0x7ff80000

0800c900 <__sread>:
 800c900:	b510      	push	{r4, lr}
 800c902:	460c      	mov	r4, r1
 800c904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c908:	f000 f904 	bl	800cb14 <_read_r>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	bfab      	itete	ge
 800c910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c912:	89a3      	ldrhlt	r3, [r4, #12]
 800c914:	181b      	addge	r3, r3, r0
 800c916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c91a:	bfac      	ite	ge
 800c91c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c91e:	81a3      	strhlt	r3, [r4, #12]
 800c920:	bd10      	pop	{r4, pc}

0800c922 <__swrite>:
 800c922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c926:	461f      	mov	r7, r3
 800c928:	898b      	ldrh	r3, [r1, #12]
 800c92a:	05db      	lsls	r3, r3, #23
 800c92c:	4605      	mov	r5, r0
 800c92e:	460c      	mov	r4, r1
 800c930:	4616      	mov	r6, r2
 800c932:	d505      	bpl.n	800c940 <__swrite+0x1e>
 800c934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c938:	2302      	movs	r3, #2
 800c93a:	2200      	movs	r2, #0
 800c93c:	f000 f8b6 	bl	800caac <_lseek_r>
 800c940:	89a3      	ldrh	r3, [r4, #12]
 800c942:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c946:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c94a:	81a3      	strh	r3, [r4, #12]
 800c94c:	4632      	mov	r2, r6
 800c94e:	463b      	mov	r3, r7
 800c950:	4628      	mov	r0, r5
 800c952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c956:	f000 b835 	b.w	800c9c4 <_write_r>

0800c95a <__sseek>:
 800c95a:	b510      	push	{r4, lr}
 800c95c:	460c      	mov	r4, r1
 800c95e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c962:	f000 f8a3 	bl	800caac <_lseek_r>
 800c966:	1c43      	adds	r3, r0, #1
 800c968:	89a3      	ldrh	r3, [r4, #12]
 800c96a:	bf15      	itete	ne
 800c96c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c96e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c976:	81a3      	strheq	r3, [r4, #12]
 800c978:	bf18      	it	ne
 800c97a:	81a3      	strhne	r3, [r4, #12]
 800c97c:	bd10      	pop	{r4, pc}

0800c97e <__sclose>:
 800c97e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c982:	f000 b84f 	b.w	800ca24 <_close_r>

0800c986 <strncmp>:
 800c986:	b510      	push	{r4, lr}
 800c988:	b16a      	cbz	r2, 800c9a6 <strncmp+0x20>
 800c98a:	3901      	subs	r1, #1
 800c98c:	1884      	adds	r4, r0, r2
 800c98e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c992:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c996:	4293      	cmp	r3, r2
 800c998:	d103      	bne.n	800c9a2 <strncmp+0x1c>
 800c99a:	42a0      	cmp	r0, r4
 800c99c:	d001      	beq.n	800c9a2 <strncmp+0x1c>
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1f5      	bne.n	800c98e <strncmp+0x8>
 800c9a2:	1a98      	subs	r0, r3, r2
 800c9a4:	bd10      	pop	{r4, pc}
 800c9a6:	4610      	mov	r0, r2
 800c9a8:	e7fc      	b.n	800c9a4 <strncmp+0x1e>

0800c9aa <__ascii_wctomb>:
 800c9aa:	b149      	cbz	r1, 800c9c0 <__ascii_wctomb+0x16>
 800c9ac:	2aff      	cmp	r2, #255	; 0xff
 800c9ae:	bf85      	ittet	hi
 800c9b0:	238a      	movhi	r3, #138	; 0x8a
 800c9b2:	6003      	strhi	r3, [r0, #0]
 800c9b4:	700a      	strbls	r2, [r1, #0]
 800c9b6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c9ba:	bf98      	it	ls
 800c9bc:	2001      	movls	r0, #1
 800c9be:	4770      	bx	lr
 800c9c0:	4608      	mov	r0, r1
 800c9c2:	4770      	bx	lr

0800c9c4 <_write_r>:
 800c9c4:	b538      	push	{r3, r4, r5, lr}
 800c9c6:	4d07      	ldr	r5, [pc, #28]	; (800c9e4 <_write_r+0x20>)
 800c9c8:	4604      	mov	r4, r0
 800c9ca:	4608      	mov	r0, r1
 800c9cc:	4611      	mov	r1, r2
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	602a      	str	r2, [r5, #0]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	f000 f942 	bl	800cc5c <_write>
 800c9d8:	1c43      	adds	r3, r0, #1
 800c9da:	d102      	bne.n	800c9e2 <_write_r+0x1e>
 800c9dc:	682b      	ldr	r3, [r5, #0]
 800c9de:	b103      	cbz	r3, 800c9e2 <_write_r+0x1e>
 800c9e0:	6023      	str	r3, [r4, #0]
 800c9e2:	bd38      	pop	{r3, r4, r5, pc}
 800c9e4:	2000b578 	.word	0x2000b578

0800c9e8 <__assert_func>:
 800c9e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c9ea:	4614      	mov	r4, r2
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	4b09      	ldr	r3, [pc, #36]	; (800ca14 <__assert_func+0x2c>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	68d8      	ldr	r0, [r3, #12]
 800c9f6:	b14c      	cbz	r4, 800ca0c <__assert_func+0x24>
 800c9f8:	4b07      	ldr	r3, [pc, #28]	; (800ca18 <__assert_func+0x30>)
 800c9fa:	9100      	str	r1, [sp, #0]
 800c9fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca00:	4906      	ldr	r1, [pc, #24]	; (800ca1c <__assert_func+0x34>)
 800ca02:	462b      	mov	r3, r5
 800ca04:	f000 f81e 	bl	800ca44 <fiprintf>
 800ca08:	f000 f896 	bl	800cb38 <abort>
 800ca0c:	4b04      	ldr	r3, [pc, #16]	; (800ca20 <__assert_func+0x38>)
 800ca0e:	461c      	mov	r4, r3
 800ca10:	e7f3      	b.n	800c9fa <__assert_func+0x12>
 800ca12:	bf00      	nop
 800ca14:	2000077c 	.word	0x2000077c
 800ca18:	08023fb5 	.word	0x08023fb5
 800ca1c:	08023fc2 	.word	0x08023fc2
 800ca20:	08023995 	.word	0x08023995

0800ca24 <_close_r>:
 800ca24:	b538      	push	{r3, r4, r5, lr}
 800ca26:	4d06      	ldr	r5, [pc, #24]	; (800ca40 <_close_r+0x1c>)
 800ca28:	2300      	movs	r3, #0
 800ca2a:	4604      	mov	r4, r0
 800ca2c:	4608      	mov	r0, r1
 800ca2e:	602b      	str	r3, [r5, #0]
 800ca30:	f000 f8ce 	bl	800cbd0 <_close>
 800ca34:	1c43      	adds	r3, r0, #1
 800ca36:	d102      	bne.n	800ca3e <_close_r+0x1a>
 800ca38:	682b      	ldr	r3, [r5, #0]
 800ca3a:	b103      	cbz	r3, 800ca3e <_close_r+0x1a>
 800ca3c:	6023      	str	r3, [r4, #0]
 800ca3e:	bd38      	pop	{r3, r4, r5, pc}
 800ca40:	2000b578 	.word	0x2000b578

0800ca44 <fiprintf>:
 800ca44:	b40e      	push	{r1, r2, r3}
 800ca46:	b503      	push	{r0, r1, lr}
 800ca48:	4601      	mov	r1, r0
 800ca4a:	ab03      	add	r3, sp, #12
 800ca4c:	4805      	ldr	r0, [pc, #20]	; (800ca64 <fiprintf+0x20>)
 800ca4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca52:	6800      	ldr	r0, [r0, #0]
 800ca54:	9301      	str	r3, [sp, #4]
 800ca56:	f7ff fe19 	bl	800c68c <_vfiprintf_r>
 800ca5a:	b002      	add	sp, #8
 800ca5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca60:	b003      	add	sp, #12
 800ca62:	4770      	bx	lr
 800ca64:	2000077c 	.word	0x2000077c

0800ca68 <_fstat_r>:
 800ca68:	b538      	push	{r3, r4, r5, lr}
 800ca6a:	4d07      	ldr	r5, [pc, #28]	; (800ca88 <_fstat_r+0x20>)
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	4604      	mov	r4, r0
 800ca70:	4608      	mov	r0, r1
 800ca72:	4611      	mov	r1, r2
 800ca74:	602b      	str	r3, [r5, #0]
 800ca76:	f000 f8b3 	bl	800cbe0 <_fstat>
 800ca7a:	1c43      	adds	r3, r0, #1
 800ca7c:	d102      	bne.n	800ca84 <_fstat_r+0x1c>
 800ca7e:	682b      	ldr	r3, [r5, #0]
 800ca80:	b103      	cbz	r3, 800ca84 <_fstat_r+0x1c>
 800ca82:	6023      	str	r3, [r4, #0]
 800ca84:	bd38      	pop	{r3, r4, r5, pc}
 800ca86:	bf00      	nop
 800ca88:	2000b578 	.word	0x2000b578

0800ca8c <_isatty_r>:
 800ca8c:	b538      	push	{r3, r4, r5, lr}
 800ca8e:	4d06      	ldr	r5, [pc, #24]	; (800caa8 <_isatty_r+0x1c>)
 800ca90:	2300      	movs	r3, #0
 800ca92:	4604      	mov	r4, r0
 800ca94:	4608      	mov	r0, r1
 800ca96:	602b      	str	r3, [r5, #0]
 800ca98:	f000 f8b2 	bl	800cc00 <_isatty>
 800ca9c:	1c43      	adds	r3, r0, #1
 800ca9e:	d102      	bne.n	800caa6 <_isatty_r+0x1a>
 800caa0:	682b      	ldr	r3, [r5, #0]
 800caa2:	b103      	cbz	r3, 800caa6 <_isatty_r+0x1a>
 800caa4:	6023      	str	r3, [r4, #0]
 800caa6:	bd38      	pop	{r3, r4, r5, pc}
 800caa8:	2000b578 	.word	0x2000b578

0800caac <_lseek_r>:
 800caac:	b538      	push	{r3, r4, r5, lr}
 800caae:	4d07      	ldr	r5, [pc, #28]	; (800cacc <_lseek_r+0x20>)
 800cab0:	4604      	mov	r4, r0
 800cab2:	4608      	mov	r0, r1
 800cab4:	4611      	mov	r1, r2
 800cab6:	2200      	movs	r2, #0
 800cab8:	602a      	str	r2, [r5, #0]
 800caba:	461a      	mov	r2, r3
 800cabc:	f000 f8b0 	bl	800cc20 <_lseek>
 800cac0:	1c43      	adds	r3, r0, #1
 800cac2:	d102      	bne.n	800caca <_lseek_r+0x1e>
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	b103      	cbz	r3, 800caca <_lseek_r+0x1e>
 800cac8:	6023      	str	r3, [r4, #0]
 800caca:	bd38      	pop	{r3, r4, r5, pc}
 800cacc:	2000b578 	.word	0x2000b578

0800cad0 <memmove>:
 800cad0:	4288      	cmp	r0, r1
 800cad2:	b510      	push	{r4, lr}
 800cad4:	eb01 0402 	add.w	r4, r1, r2
 800cad8:	d902      	bls.n	800cae0 <memmove+0x10>
 800cada:	4284      	cmp	r4, r0
 800cadc:	4623      	mov	r3, r4
 800cade:	d807      	bhi.n	800caf0 <memmove+0x20>
 800cae0:	1e43      	subs	r3, r0, #1
 800cae2:	42a1      	cmp	r1, r4
 800cae4:	d008      	beq.n	800caf8 <memmove+0x28>
 800cae6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caee:	e7f8      	b.n	800cae2 <memmove+0x12>
 800caf0:	4402      	add	r2, r0
 800caf2:	4601      	mov	r1, r0
 800caf4:	428a      	cmp	r2, r1
 800caf6:	d100      	bne.n	800cafa <memmove+0x2a>
 800caf8:	bd10      	pop	{r4, pc}
 800cafa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cafe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb02:	e7f7      	b.n	800caf4 <memmove+0x24>

0800cb04 <_malloc_usable_size_r>:
 800cb04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb08:	1f18      	subs	r0, r3, #4
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	bfbc      	itt	lt
 800cb0e:	580b      	ldrlt	r3, [r1, r0]
 800cb10:	18c0      	addlt	r0, r0, r3
 800cb12:	4770      	bx	lr

0800cb14 <_read_r>:
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4d07      	ldr	r5, [pc, #28]	; (800cb34 <_read_r+0x20>)
 800cb18:	4604      	mov	r4, r0
 800cb1a:	4608      	mov	r0, r1
 800cb1c:	4611      	mov	r1, r2
 800cb1e:	2200      	movs	r2, #0
 800cb20:	602a      	str	r2, [r5, #0]
 800cb22:	461a      	mov	r2, r3
 800cb24:	f000 f884 	bl	800cc30 <_read>
 800cb28:	1c43      	adds	r3, r0, #1
 800cb2a:	d102      	bne.n	800cb32 <_read_r+0x1e>
 800cb2c:	682b      	ldr	r3, [r5, #0]
 800cb2e:	b103      	cbz	r3, 800cb32 <_read_r+0x1e>
 800cb30:	6023      	str	r3, [r4, #0]
 800cb32:	bd38      	pop	{r3, r4, r5, pc}
 800cb34:	2000b578 	.word	0x2000b578

0800cb38 <abort>:
 800cb38:	b508      	push	{r3, lr}
 800cb3a:	2006      	movs	r0, #6
 800cb3c:	f000 f82c 	bl	800cb98 <raise>
 800cb40:	2001      	movs	r0, #1
 800cb42:	f000 f893 	bl	800cc6c <_exit>

0800cb46 <_raise_r>:
 800cb46:	291f      	cmp	r1, #31
 800cb48:	b538      	push	{r3, r4, r5, lr}
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	460d      	mov	r5, r1
 800cb4e:	d904      	bls.n	800cb5a <_raise_r+0x14>
 800cb50:	2316      	movs	r3, #22
 800cb52:	6003      	str	r3, [r0, #0]
 800cb54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cb58:	bd38      	pop	{r3, r4, r5, pc}
 800cb5a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb5c:	b112      	cbz	r2, 800cb64 <_raise_r+0x1e>
 800cb5e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb62:	b94b      	cbnz	r3, 800cb78 <_raise_r+0x32>
 800cb64:	4620      	mov	r0, r4
 800cb66:	f000 f831 	bl	800cbcc <_getpid_r>
 800cb6a:	462a      	mov	r2, r5
 800cb6c:	4601      	mov	r1, r0
 800cb6e:	4620      	mov	r0, r4
 800cb70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb74:	f000 b818 	b.w	800cba8 <_kill_r>
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d00a      	beq.n	800cb92 <_raise_r+0x4c>
 800cb7c:	1c59      	adds	r1, r3, #1
 800cb7e:	d103      	bne.n	800cb88 <_raise_r+0x42>
 800cb80:	2316      	movs	r3, #22
 800cb82:	6003      	str	r3, [r0, #0]
 800cb84:	2001      	movs	r0, #1
 800cb86:	e7e7      	b.n	800cb58 <_raise_r+0x12>
 800cb88:	2400      	movs	r4, #0
 800cb8a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb8e:	4628      	mov	r0, r5
 800cb90:	4798      	blx	r3
 800cb92:	2000      	movs	r0, #0
 800cb94:	e7e0      	b.n	800cb58 <_raise_r+0x12>
	...

0800cb98 <raise>:
 800cb98:	4b02      	ldr	r3, [pc, #8]	; (800cba4 <raise+0xc>)
 800cb9a:	4601      	mov	r1, r0
 800cb9c:	6818      	ldr	r0, [r3, #0]
 800cb9e:	f7ff bfd2 	b.w	800cb46 <_raise_r>
 800cba2:	bf00      	nop
 800cba4:	2000077c 	.word	0x2000077c

0800cba8 <_kill_r>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	4d07      	ldr	r5, [pc, #28]	; (800cbc8 <_kill_r+0x20>)
 800cbac:	2300      	movs	r3, #0
 800cbae:	4604      	mov	r4, r0
 800cbb0:	4608      	mov	r0, r1
 800cbb2:	4611      	mov	r1, r2
 800cbb4:	602b      	str	r3, [r5, #0]
 800cbb6:	f000 f82b 	bl	800cc10 <_kill>
 800cbba:	1c43      	adds	r3, r0, #1
 800cbbc:	d102      	bne.n	800cbc4 <_kill_r+0x1c>
 800cbbe:	682b      	ldr	r3, [r5, #0]
 800cbc0:	b103      	cbz	r3, 800cbc4 <_kill_r+0x1c>
 800cbc2:	6023      	str	r3, [r4, #0]
 800cbc4:	bd38      	pop	{r3, r4, r5, pc}
 800cbc6:	bf00      	nop
 800cbc8:	2000b578 	.word	0x2000b578

0800cbcc <_getpid_r>:
 800cbcc:	f000 b810 	b.w	800cbf0 <_getpid>

0800cbd0 <_close>:
 800cbd0:	4b02      	ldr	r3, [pc, #8]	; (800cbdc <_close+0xc>)
 800cbd2:	2258      	movs	r2, #88	; 0x58
 800cbd4:	601a      	str	r2, [r3, #0]
 800cbd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbda:	4770      	bx	lr
 800cbdc:	2000b578 	.word	0x2000b578

0800cbe0 <_fstat>:
 800cbe0:	4b02      	ldr	r3, [pc, #8]	; (800cbec <_fstat+0xc>)
 800cbe2:	2258      	movs	r2, #88	; 0x58
 800cbe4:	601a      	str	r2, [r3, #0]
 800cbe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbea:	4770      	bx	lr
 800cbec:	2000b578 	.word	0x2000b578

0800cbf0 <_getpid>:
 800cbf0:	4b02      	ldr	r3, [pc, #8]	; (800cbfc <_getpid+0xc>)
 800cbf2:	2258      	movs	r2, #88	; 0x58
 800cbf4:	601a      	str	r2, [r3, #0]
 800cbf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbfa:	4770      	bx	lr
 800cbfc:	2000b578 	.word	0x2000b578

0800cc00 <_isatty>:
 800cc00:	4b02      	ldr	r3, [pc, #8]	; (800cc0c <_isatty+0xc>)
 800cc02:	2258      	movs	r2, #88	; 0x58
 800cc04:	601a      	str	r2, [r3, #0]
 800cc06:	2000      	movs	r0, #0
 800cc08:	4770      	bx	lr
 800cc0a:	bf00      	nop
 800cc0c:	2000b578 	.word	0x2000b578

0800cc10 <_kill>:
 800cc10:	4b02      	ldr	r3, [pc, #8]	; (800cc1c <_kill+0xc>)
 800cc12:	2258      	movs	r2, #88	; 0x58
 800cc14:	601a      	str	r2, [r3, #0]
 800cc16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc1a:	4770      	bx	lr
 800cc1c:	2000b578 	.word	0x2000b578

0800cc20 <_lseek>:
 800cc20:	4b02      	ldr	r3, [pc, #8]	; (800cc2c <_lseek+0xc>)
 800cc22:	2258      	movs	r2, #88	; 0x58
 800cc24:	601a      	str	r2, [r3, #0]
 800cc26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc2a:	4770      	bx	lr
 800cc2c:	2000b578 	.word	0x2000b578

0800cc30 <_read>:
 800cc30:	4b02      	ldr	r3, [pc, #8]	; (800cc3c <_read+0xc>)
 800cc32:	2258      	movs	r2, #88	; 0x58
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc3a:	4770      	bx	lr
 800cc3c:	2000b578 	.word	0x2000b578

0800cc40 <_sbrk>:
 800cc40:	4b04      	ldr	r3, [pc, #16]	; (800cc54 <_sbrk+0x14>)
 800cc42:	6819      	ldr	r1, [r3, #0]
 800cc44:	4602      	mov	r2, r0
 800cc46:	b909      	cbnz	r1, 800cc4c <_sbrk+0xc>
 800cc48:	4903      	ldr	r1, [pc, #12]	; (800cc58 <_sbrk+0x18>)
 800cc4a:	6019      	str	r1, [r3, #0]
 800cc4c:	6818      	ldr	r0, [r3, #0]
 800cc4e:	4402      	add	r2, r0
 800cc50:	601a      	str	r2, [r3, #0]
 800cc52:	4770      	bx	lr
 800cc54:	2000b214 	.word	0x2000b214
 800cc58:	2000b580 	.word	0x2000b580

0800cc5c <_write>:
 800cc5c:	4b02      	ldr	r3, [pc, #8]	; (800cc68 <_write+0xc>)
 800cc5e:	2258      	movs	r2, #88	; 0x58
 800cc60:	601a      	str	r2, [r3, #0]
 800cc62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc66:	4770      	bx	lr
 800cc68:	2000b578 	.word	0x2000b578

0800cc6c <_exit>:
 800cc6c:	e7fe      	b.n	800cc6c <_exit>
	...

0800cc70 <_init>:
 800cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc72:	bf00      	nop
 800cc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc76:	bc08      	pop	{r3}
 800cc78:	469e      	mov	lr, r3
 800cc7a:	4770      	bx	lr

0800cc7c <_fini>:
 800cc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc7e:	bf00      	nop
 800cc80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc82:	bc08      	pop	{r3}
 800cc84:	469e      	mov	lr, r3
 800cc86:	4770      	bx	lr
